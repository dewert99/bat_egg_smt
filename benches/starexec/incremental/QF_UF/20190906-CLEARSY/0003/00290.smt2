(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e48 () U)
(declare-fun e221 () U)
(declare-fun e222 () U)
(declare-fun e223 () U)
(declare-fun e224 () U)
(declare-fun e207 () U)
(declare-fun e208 () U)
(declare-fun e209 () U)
(declare-fun e210 () U)
(declare-fun e211 () U)
(declare-fun e240 () U)
(declare-fun e241 () U)
(declare-fun e216 () U)
(declare-fun e217 () U)
(declare-fun e218 () U)
(declare-fun e219 () U)
(declare-fun e220 () U)
(declare-fun e225 () U)
(declare-fun e226 () U)
(declare-fun e227 () U)
(declare-fun e228 () U)
(declare-fun e212 () U)
(declare-fun e213 () U)
(declare-fun e214 () U)
(declare-fun e215 () U)
(declare-fun e229 () U)
(declare-fun e230 () U)
(declare-fun e231 () U)
(declare-fun e232 () U)
(declare-fun e233 () U)
(declare-fun e242 () U)
(declare-fun e234 () U)
(declare-fun e235 () U)
(declare-fun e236 () U)
(declare-fun e237 () U)
(declare-fun e238 () U)
(declare-fun e239 () U)
(declare-fun e243 () U)
(declare-fun e244 () U)
(declare-fun e245 () U)
(declare-fun e246 () U)
(declare-fun e247 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_105 () U)
(declare-fun g_s101_106 () U)
(declare-fun g_s102_107 () U)
(declare-fun g_s103_108 () U)
(declare-fun g_s105_111 () U)
(declare-fun g_s106_112 () U)
(declare-fun g_s107_113 () U)
(declare-fun g_s108_114 () U)
(declare-fun g_s109_115 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_116 () U)
(declare-fun g_s111_117 () U)
(declare-fun g_s112_118 () U)
(declare-fun g_s113_119 () U)
(declare-fun g_s114_120 () U)
(declare-fun g_s115_121 () U)
(declare-fun g_s116_122 () U)
(declare-fun g_s117_125 () U)
(declare-fun g_s118_126 () U)
(declare-fun g_s119_127 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_128 () U)
(declare-fun g_s121_129 () U)
(declare-fun g_s122_130 () U)
(declare-fun g_s123_131 () U)
(declare-fun g_s124_132 () U)
(declare-fun g_s125_133 () U)
(declare-fun g_s126_134 () U)
(declare-fun g_s127_135 () U)
(declare-fun g_s128_136 () U)
(declare-fun g_s129_137 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_138 () U)
(declare-fun g_s131_139 () U)
(declare-fun g_s132_140 () U)
(declare-fun g_s133_141 () U)
(declare-fun g_s134_142 () U)
(declare-fun g_s135_143 () U)
(declare-fun g_s136_144 () U)
(declare-fun g_s137_145 () U)
(declare-fun g_s138_146 () U)
(declare-fun g_s139_147 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_148 () U)
(declare-fun g_s141_149 () U)
(declare-fun g_s142_150 () U)
(declare-fun g_s143_151 () U)
(declare-fun g_s144_152 () U)
(declare-fun g_s145_153 () U)
(declare-fun g_s146_154 () U)
(declare-fun g_s147_155 () U)
(declare-fun g_s148_156 () U)
(declare-fun g_s149_157 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_158 () U)
(declare-fun g_s151_159 () U)
(declare-fun g_s152_160 () U)
(declare-fun g_s153_161 () U)
(declare-fun g_s154_162 () U)
(declare-fun g_s155_163 () U)
(declare-fun g_s156_164 () U)
(declare-fun g_s157_165 () U)
(declare-fun g_s158_166 () U)
(declare-fun g_s159_167 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_168 () U)
(declare-fun g_s161_169 () U)
(declare-fun g_s162_170 () U)
(declare-fun g_s163_171 () U)
(declare-fun g_s164_172 () U)
(declare-fun g_s165_173 () U)
(declare-fun g_s166_174 () U)
(declare-fun g_s167_175 () U)
(declare-fun g_s168_176 () U)
(declare-fun g_s169_177 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_178 () U)
(declare-fun g_s171_179 () U)
(declare-fun g_s172_180 () U)
(declare-fun g_s173_181 () U)
(declare-fun g_s174_182 () U)
(declare-fun g_s175_183 () U)
(declare-fun g_s176_184 () U)
(declare-fun g_s177_185 () U)
(declare-fun g_s178_186 () U)
(declare-fun g_s179_187 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_188 () U)
(declare-fun g_s181_189 () U)
(declare-fun g_s182_190 () U)
(declare-fun g_s183_191 () U)
(declare-fun g_s184_192 () U)
(declare-fun g_s185_193 () U)
(declare-fun g_s186_194 () U)
(declare-fun g_s187_195 () U)
(declare-fun g_s188_196 () U)
(declare-fun g_s189_197 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_198 () U)
(declare-fun g_s191_199 () U)
(declare-fun g_s192_200 () U)
(declare-fun g_s193_201 () U)
(declare-fun g_s194_202 () U)
(declare-fun g_s195_203 () U)
(declare-fun g_s196_204 () U)
(declare-fun g_s197_205 () U)
(declare-fun g_s198_206 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_33 () U)
(declare-fun g_s31_35 () U)
(declare-fun g_s32_36 () U)
(declare-fun g_s33_37 () U)
(declare-fun g_s34_38 () U)
(declare-fun g_s35_39 () U)
(declare-fun g_s36_40 () U)
(declare-fun g_s37_41 () U)
(declare-fun g_s38_42 () U)
(declare-fun g_s39_43 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_44 () U)
(declare-fun g_s41_45 () U)
(declare-fun g_s42_46 () U)
(declare-fun g_s43_47 () U)
(declare-fun g_s44_49 () U)
(declare-fun g_s45_50 () U)
(declare-fun g_s46_51 () U)
(declare-fun g_s47_52 () U)
(declare-fun g_s48_53 () U)
(declare-fun g_s49_54 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_55 () U)
(declare-fun g_s51_56 () U)
(declare-fun g_s52_57 () U)
(declare-fun g_s53_58 () U)
(declare-fun g_s54_59 () U)
(declare-fun g_s55_60 () U)
(declare-fun g_s56_61 () U)
(declare-fun g_s57_62 () U)
(declare-fun g_s58_63 () U)
(declare-fun g_s59_64 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_65 () U)
(declare-fun g_s61_66 () U)
(declare-fun g_s62_67 () U)
(declare-fun g_s63_68 () U)
(declare-fun g_s64_69 () U)
(declare-fun g_s65_70 () U)
(declare-fun g_s66_71 () U)
(declare-fun g_s67_72 () U)
(declare-fun g_s68_73 () U)
(declare-fun g_s69_74 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_75 () U)
(declare-fun g_s71_76 () U)
(declare-fun g_s72_77 () U)
(declare-fun g_s73_78 () U)
(declare-fun g_s74_79 () U)
(declare-fun g_s75_80 () U)
(declare-fun g_s76_81 () U)
(declare-fun g_s77_82 () U)
(declare-fun g_s78_83 () U)
(declare-fun g_s79_84 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_85 () U)
(declare-fun g_s81_86 () U)
(declare-fun g_s82_87 () U)
(declare-fun g_s83_88 () U)
(declare-fun g_s84_89 () U)
(declare-fun g_s85_90 () U)
(declare-fun g_s86_91 () U)
(declare-fun g_s87_92 () U)
(declare-fun g_s88_93 () U)
(declare-fun g_s89_94 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_95 () U)
(declare-fun g_s91_96 () U)
(declare-fun g_s92_97 () U)
(declare-fun g_s93_98 () U)
(declare-fun g_s94_99 () U)
(declare-fun g_s95_100 () U)
(declare-fun g_s96_101 () U)
(declare-fun g_s97_102 () U)
(declare-fun g_s98_103 () U)
(declare-fun g_s99_104 () U)
(declare-fun e124 () U)
(declare-fun e123 () U)
(declare-fun e110 () U)
(declare-fun e109 () U)
(declare-fun e26 () U)
(declare-fun e23 () U)
(declare-fun e21 () U)
(declare-fun e28 () U)
(declare-fun e34 () U)
(declare-fun e32 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (not (= g_s12_13 empty)) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (not (= g_s15_16 empty)) (not (= g_s16_17 empty)) (not (= g_s17_18 empty)) (not (= g_s18_19 empty)) (= g_s19_20 INTEGER) (= g_s20_22 e21) (= g_s23_24 e23) (= g_s24_25 INTEGER) (= g_s25_27 e26) (= g_s27_29 e28) (= g_s28_30 INTEGER) (= g_s29_31 INTEGER) (= g_s30_33 e32) (= g_s31_35 e34) (mem g_s32_36 (|-->| g_s16_17 g_s29_31)) (mem g_s33_37 (|-->| g_s1_2 g_s24_25)) (mem g_s34_38 (|<->| g_s1_2 g_s1_2)) (mem g_s35_39 (|<->| g_s1_2 g_s1_2)) (mem g_s36_40 (|-->| (set_prod g_s1_2 g_s1_2) g_s1_2)) (mem g_s37_41 (|-->| (POW g_s1_2) g_s1_2)) (mem g_s38_42 (|-->| (set_prod g_s1_2 g_s1_2) g_s1_2)) (mem g_s39_43 (|-->| g_s1_2 g_s1_2)) (mem g_s40_44 (|-->| g_s1_2 g_s1_2)) (mem g_s41_45 (|-->| g_s1_2 g_s1_2)) (mem g_s42_46 g_s1_2) (mem g_s43_47 g_s1_2) (|<=i| e48 (apply g_s33_37 g_s43_47)) (mem g_s44_49 g_s1_2) (mem g_s45_50 g_s1_2) (mem g_s46_51 g_s1_2) (mem g_s47_52 (|-->| g_s2_3 g_s19_20)) (mem g_s48_53 (|-->| g_s19_20 g_s2_3)) (mem g_s49_54 (|-->| g_s24_25 g_s1_2)) (mem g_s50_55 (|-->| g_s28_30 g_s10_11)) (mem g_s51_56 g_s15_16) (mem g_s52_57 g_s10_11) (mem g_s53_58 (|<->| g_s10_11 g_s10_11)) (mem g_s54_59 (|<->| g_s10_11 g_s10_11)) (mem g_s55_60 (|-->| (POW g_s10_11) g_s10_11)) (mem g_s56_61 g_s10_11) (mem g_s57_62 g_s10_11) (mem g_s58_63 (|<->| g_s2_3 g_s2_3)) (mem g_s59_64 (|<->| g_s2_3 g_s2_3)) (subset g_s59_64 g_s58_63) (mem g_s60_65 (|-->| (set_prod g_s2_3 g_s2_3) g_s1_2)) (mem g_s61_66 (|-->| g_s2_3 g_s2_3)) (mem g_s62_67 (|-->| (set_prod g_s2_3 g_s2_3) (POW g_s2_3))) (mem g_s63_68 (|-->| (POW g_s2_3) g_s2_3)) (mem g_s64_69 (|-->| (POW g_s2_3) g_s2_3)) (mem g_s65_70 g_s2_3) (mem g_s66_71 g_s2_3) (mem g_s67_72 g_s2_3) (mem g_s68_73 g_s2_3) (mem g_s69_74 g_s2_3) (mem g_s70_75 g_s2_3) (mem g_s71_76 g_s2_3) (mem g_s72_77 g_s2_3) (mem g_s73_78 (|-->| (set_prod g_s2_3 g_s1_2) g_s2_3)) (mem g_s74_79 (|-->| (set_prod g_s2_3 g_s1_2) g_s2_3)) (mem g_s75_80 (|-->| (set_prod g_s1_2 g_s2_3) g_s2_3)) (mem g_s76_81 (|-->| (set_prod g_s1_2 g_s6_7) g_s1_2)) (mem g_s77_82 (|-->| g_s1_2 g_s1_2)) (mem g_s78_83 (|-->| g_s2_3 g_s2_3)) (mem g_s79_84 (|-->| g_s3_4 g_s3_4)) (mem g_s80_85 (|-->| (set_prod INT INT) BOOL)) (mem g_s81_86 (|-->| (set_prod g_s3_4 g_s3_4) g_s3_4)) (mem g_s82_87 (|-->| g_s3_4 g_s4_5)) (mem g_s83_88 g_s3_4) (mem g_s84_89 (|-->| (set_prod g_s3_4 g_s3_4) g_s9_10)) (mem g_s85_90 (|-->| (set_prod g_s1_2 g_s3_4) g_s9_10)) (mem g_s86_91 (|-->| (set_prod g_s3_4 g_s7_8) g_s1_2)) (mem g_s87_92 (|-->| (set_prod g_s5_6 g_s5_6) g_s5_6)) (mem g_s88_93 (|-->| (set_prod g_s5_6 g_s5_6) g_s5_6)) (mem g_s89_94 (|-->| g_s5_6 g_s5_6)) (mem g_s90_95 (|-->| g_s5_6 g_s5_6)) (mem g_s91_96 (|-->| (POW g_s5_6) g_s5_6)) (mem g_s92_97 (|-->| (|+->| NATURAL g_s5_6) g_s5_6)) (mem g_s93_98 (|-->| (|+->| NATURAL g_s5_6) g_s5_6)) (mem g_s94_99 (|-->| (POW g_s5_6) g_s5_6)) (mem g_s95_100 (|-->| g_s5_6 g_s5_6)) (mem g_s96_101 (|<->| g_s5_6 g_s5_6)) (mem g_s97_102 g_s5_6) (mem g_s98_103 g_s5_6) (mem g_s99_104 (|-->| (set_prod g_s5_6 g_s7_8) g_s3_4)) (mem g_s100_105 (|-->| (set_prod g_s5_6 g_s10_11) g_s5_6)) (mem g_s101_106 (|-->| (set_prod g_s5_6 g_s6_7) g_s5_6)) (mem g_s102_107 (|-->| (set_prod g_s5_6 g_s1_2) g_s4_5)) (mem g_s103_108 g_s5_6) (= g_s92_97 (|<+| (set_prod (|+->| NATURAL g_s5_6) (SET g_s97_102)) e109)) (= g_s93_98 (|<+| (set_prod (|+->| NATURAL g_s5_6) (SET g_s97_102)) e110)) (mem g_s105_111 (|-->| (set_prod g_s4_5 g_s4_5) g_s4_5)) (mem g_s106_112 (|-->| g_s4_5 g_s4_5)) (mem g_s107_113 (|-->| (POW g_s4_5) g_s4_5)) (mem g_s108_114 (|-->| (set_prod g_s4_5 g_s4_5) g_s4_5)) (mem g_s109_115 (|<->| g_s4_5 g_s4_5)) (mem g_s110_116 (|<->| g_s4_5 g_s4_5)) (mem g_s111_117 g_s4_5) (mem g_s112_118 g_s4_5) (mem g_s113_119 g_s4_5) (mem g_s114_120 g_s4_5) (mem g_s115_121 (|-->| (|+->| NATURAL g_s4_5) g_s4_5)) (mem g_s116_122 (|-->| (|+->| NATURAL g_s4_5) g_s4_5)) (= g_s115_121 (|<+| (set_prod (|+->| NATURAL g_s4_5) (SET g_s111_117)) e123)) (= g_s116_122 (|<+| (set_prod (|+->| NATURAL g_s4_5) (SET g_s111_117)) e124)) (mem g_s117_125 g_s6_7) (mem g_s118_126 g_s6_7) (mem g_s119_127 g_s6_7) (mem g_s120_128 g_s6_7) (mem g_s121_129 g_s6_7) (mem g_s122_130 g_s6_7) (mem g_s123_131 (|-->| (set_prod g_s7_8 g_s7_8) g_s7_8)) (mem g_s124_132 (|-->| (set_prod g_s8_9 g_s8_9) g_s8_9)) (mem g_s125_133 (|-->| (set_prod g_s7_8 g_s7_8) g_s8_9)) (mem g_s126_134 (|-->| g_s7_8 g_s8_9)) (mem g_s127_135 (|-->| g_s8_9 g_s8_9)) (mem g_s128_136 (|-->| (set_prod g_s5_6 g_s8_9) g_s1_2)) (mem g_s129_137 g_s7_8) (mem g_s130_138 g_s9_10) (subset g_s131_139 (set_prod (set_prod (set_prod g_s2_3 g_s2_3) g_s2_3) g_s2_3)) (mem g_s132_140 g_s12_13) (mem g_s133_141 g_s12_13) (mem g_s134_142 (|-->| INT (seq g_s0_1))) (mem g_s135_143 (|-->| INT (seq g_s0_1))) (mem g_s136_144 (|-->| INT (seq g_s0_1))) (mem g_s137_145 (|-->| g_s13_14 (seq g_s0_1))) (mem g_s138_146 (|-->| g_s1_2 (seq g_s0_1))) (mem g_s139_147 (|-->| g_s2_3 (seq g_s0_1))) (mem g_s140_148 (|-->| g_s7_8 (seq g_s0_1))) (mem g_s141_149 (|-->| g_s7_8 (seq g_s0_1))) (mem g_s142_150 (|-->| g_s7_8 (seq g_s0_1))) (mem g_s143_151 (|-->| g_s12_13 (seq g_s0_1))) (mem g_s144_152 g_s0_1) (mem g_s145_153 NAT) (mem g_s146_154 NAT) (mem g_s147_155 (|-->| g_s12_13 INT)) (mem g_s148_156 g_s13_14) (mem g_s149_157 g_s7_8) (mem g_s150_158 g_s7_8) (mem g_s151_159 g_s28_30) (mem g_s152_160 g_s28_30) (|<=i| g_s151_159 g_s152_160) (mem g_s153_161 g_s29_31) (mem g_s154_162 g_s19_20) (mem g_s155_163 g_s19_20) (mem g_s156_164 g_s28_30) (= g_s153_161 e0) (= g_s154_162 e0) (= g_s155_163 e48) (= g_s156_164 e0) (mem g_s157_165 (|-->| (set_prod NAT g_s7_8) g_s7_8))))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (mem g_s158_166 NAT) (mem g_s159_167 NAT) (mem g_s160_168 NAT) (mem g_s161_169 NAT) (mem g_s162_170 NAT) (mem g_s163_171 NAT) (mem g_s164_172 NAT) (mem g_s165_173 NAT) (mem g_s166_174 NAT) (mem g_s167_175 NAT) (mem g_s168_176 NAT) (mem g_s169_177 NAT) (mem g_s170_178 NAT) (mem g_s171_179 NAT) (mem g_s172_180 NAT) (mem g_s173_181 NAT) (mem g_s174_182 NAT) (mem g_s175_183 NAT) (mem g_s176_184 NAT) (mem g_s177_185 NAT) (mem g_s178_186 NAT) (mem g_s179_187 NAT) (mem g_s180_188 NAT) (mem g_s181_189 NAT) (mem g_s182_190 NAT) (mem g_s183_191 NAT) (mem g_s184_192 NAT) (mem g_s185_193 NAT) (mem g_s186_194 NAT) (mem g_s187_195 NAT) (mem g_s188_196 NAT) (mem g_s189_197 NAT) (mem g_s190_198 NAT) (|>i| g_s158_166 e0) (|>i| g_s159_167 e0) (|>i| g_s160_168 e0) (|>i| g_s161_169 e0) (|>i| g_s162_170 e0) (|>i| g_s163_171 e0) (|>i| g_s164_172 e0) (|>i| g_s165_173 e0) (|>i| g_s166_174 e0) (|>i| g_s167_175 e0) (|>i| g_s168_176 e0) (|>i| g_s169_177 e0) (|>i| g_s170_178 e0) (|>i| g_s171_179 e0) (|>i| g_s172_180 e0) (|>i| g_s173_181 e0) (|>i| g_s174_182 e0) (|>i| g_s175_183 e0) (|>i| g_s176_184 e0) (|>i| g_s177_185 e0) (|>i| g_s178_186 e0) (|>i| g_s179_187 e0) (|>i| g_s180_188 e0) (|>i| g_s181_189 e0) (|>i| g_s182_190 e0) (|>i| g_s183_191 e0) (|>i| g_s184_192 e0) (|>i| g_s185_193 e0) (|>i| g_s186_194 e0) (|>i| g_s187_195 e0) (|>i| g_s188_196 e0) (|>i| g_s189_197 e0) (|>i| g_s190_198 e0) (mem g_s191_199 NAT) (mem g_s192_200 NAT) (mem g_s193_201 NAT) (|>i| g_s191_199 e0) (|>i| g_s192_200 e0) (|>i| g_s193_201 e0) (mem g_s194_202 NAT) (mem g_s195_203 NAT) (mem g_s196_204 NAT) (|>i| g_s194_202 e0) (|>i| g_s195_203 e0) (|>i| g_s196_204 e0) (mem g_s197_205 NAT) (|>i| g_s197_205 e0) (mem g_s198_206 NAT) (|>i| g_s198_206 e0)))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s158_166 e207) (= g_s159_167 e208) (= g_s160_168 e209) (= g_s161_169 e210) (= g_s162_170 e211) (= g_s163_171 e212) (= g_s164_172 e213) (= g_s165_173 e214) (= g_s166_174 e215) (= g_s168_176 e216) (= g_s167_175 e217) (= g_s169_177 e218) (= g_s170_178 e219) (= g_s171_179 e220) (= g_s172_180 e221) (= g_s173_181 e222) (= g_s174_182 e223) (= g_s175_183 e224) (= g_s176_184 e225) (= g_s177_185 e226) (= g_s178_186 e227) (= g_s179_187 e228) (= g_s184_192 e229) (= g_s181_189 e230) (= g_s180_188 e231) (= g_s182_190 e232) (= g_s183_191 e233) (= g_s185_193 e234) (= g_s186_194 e235) (= g_s187_195 e236) (= g_s188_196 e237) (= g_s189_197 e238) (= g_s190_198 e239) (= g_s191_199 e240) (= g_s192_200 e241) (= g_s193_201 e242) (= g_s194_202 e243) (= g_s195_203 e244) (= g_s196_204 e245) (= g_s197_205 e246) (= g_s198_206 e247)))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (mem e221 NAT)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem e222 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem e223 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem e224 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem e207 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (mem e208 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem e209 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (mem e210 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem e211 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (mem e240 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (mem e241 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (mem e216 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (mem e217 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (mem e218 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (mem e219 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (mem e220 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 0
(push 1)
(assert (not (mem e225 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 0
(push 1)
(assert (not (mem e226 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 0
(push 1)
(assert (not (mem e227 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 0
(push 1)
(assert (not (mem e228 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 0
(push 1)
(assert (not (mem e212 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 0
(push 1)
(assert (not (mem e213 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 0
(push 1)
(assert (not (mem e214 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 0
(push 1)
(assert (not (mem e215 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 0
(push 1)
(assert (not (mem e229 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 0
(push 1)
(assert (not (mem e230 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 0
(push 1)
(assert (not (mem e231 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 0
(push 1)
(assert (not (mem e232 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 0
(push 1)
(assert (not (mem e233 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 0
(push 1)
(assert (not (mem e242 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 0
(push 1)
(assert (not (mem e234 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 0
(push 1)
(assert (not (mem e235 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 0
(push 1)
(assert (not (mem e236 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 0
(push 1)
(assert (not (mem e237 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 0
(push 1)
(assert (not (mem e238 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 0
(push 1)
(assert (not (mem e239 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 0
(push 1)
(assert (not (mem e243 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 0
(push 1)
(assert (not (mem e244 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 0
(push 1)
(assert (not (mem e245 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 0
(push 1)
(assert (not (mem e246 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 0
(push 1)
(assert (not (mem e247 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 0
(push 1)
(assert (not (|>i| e221 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 0
(push 1)
(assert (not (|>i| e222 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 0
(push 1)
(assert (not (|>i| e223 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 0
(push 1)
(assert (not (|>i| e224 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 0
(push 1)
(assert (not (|>i| e207 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 47 in group 0
(push 1)
(assert (not (|>i| e208 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 48 in group 0
(push 1)
(assert (not (|>i| e209 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 49 in group 0
(push 1)
(assert (not (|>i| e210 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 50 in group 0
(push 1)
(assert (not (|>i| e211 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 51 in group 0
(push 1)
(assert (not (|>i| e240 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 52 in group 0
(push 1)
(assert (not (|>i| e241 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 53 in group 0
(push 1)
(assert (not (|>i| e216 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 54 in group 0
(push 1)
(assert (not (|>i| e217 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 55 in group 0
(push 1)
(assert (not (|>i| e218 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 56 in group 0
(push 1)
(assert (not (|>i| e219 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 57 in group 0
(push 1)
(assert (not (|>i| e220 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 58 in group 0
(push 1)
(assert (not (|>i| e225 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 59 in group 0
(push 1)
(assert (not (|>i| e226 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 60 in group 0
(push 1)
(assert (not (|>i| e227 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 61 in group 0
(push 1)
(assert (not (|>i| e228 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 62 in group 0
(push 1)
(assert (not (|>i| e212 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 63 in group 0
(push 1)
(assert (not (|>i| e213 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 64 in group 0
(push 1)
(assert (not (|>i| e214 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 65 in group 0
(push 1)
(assert (not (|>i| e215 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 66 in group 0
(push 1)
(assert (not (|>i| e229 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 67 in group 0
(push 1)
(assert (not (|>i| e230 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 68 in group 0
(push 1)
(assert (not (|>i| e231 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 69 in group 0
(push 1)
(assert (not (|>i| e232 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 70 in group 0
(push 1)
(assert (not (|>i| e233 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 71 in group 0
(push 1)
(assert (not (|>i| e242 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 72 in group 0
(push 1)
(assert (not (|>i| e234 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 73 in group 0
(push 1)
(assert (not (|>i| e235 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 74 in group 0
(push 1)
(assert (not (|>i| e236 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 75 in group 0
(push 1)
(assert (not (|>i| e237 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 76 in group 0
(push 1)
(assert (not (|>i| e238 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 77 in group 0
(push 1)
(assert (not (|>i| e239 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 78 in group 0
(push 1)
(assert (not (|>i| e243 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 79 in group 0
(push 1)
(assert (not (|>i| e244 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 80 in group 0
(push 1)
(assert (not (|>i| e245 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 81 in group 0
(push 1)
(assert (not (|>i| e246 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 82 in group 0
(push 1)
(assert (not (|>i| e247 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)