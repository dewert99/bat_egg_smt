(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e12 () U)
(declare-fun e0 () U)
(declare-fun e65 () U)
(declare-fun e29 () U)
(declare-fun e17 () U)
(declare-fun e115 () U)
(declare-fun e22 () U)
(declare-fun e154 () U)
(declare-fun e20 () U)
(declare-fun e149 () U)
(declare-fun e143 () U)
(declare-fun e51 () U)
(declare-fun e146 () U)
(declare-fun e43 () U)
(declare-fun e49 () U)
(declare-fun e136 () U)
(declare-fun e139 () U)
(declare-fun e34 () U)
(declare-fun e37 () U)
(declare-fun e67 () U)
(declare-fun e14 () U)
(declare-fun e33 () U)
(declare-fun e132 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e35 () U)
(declare-fun e123 () U)
(declare-fun e13 () U)
(declare-fun e77 () U)
(declare-fun e79 () U)
(declare-fun e81 () U)
(declare-fun e54 () U)
(declare-fun e56 () U)
(declare-fun e58 () U)
(declare-fun e60 () U)
(declare-fun e62 () U)
(declare-fun e39 () U)
(declare-fun e41 () U)
(declare-fun e156 () U)
(declare-fun e83 () U)
(declare-fun e85 () U)
(declare-fun e91 () U)
(declare-fun e93 () U)
(declare-fun e99 () U)
(declare-fun e101 () U)
(declare-fun e107 () U)
(declare-fun e109 () U)
(declare-fun e87 () U)
(declare-fun e89 () U)
(declare-fun e95 () U)
(declare-fun e97 () U)
(declare-fun e103 () U)
(declare-fun e105 () U)
(declare-fun e111 () U)
(declare-fun e113 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_153 () U)
(declare-fun g_s101_155 () U)
(declare-fun g_s102_157 () U)
(declare-fun g_s103_158 () U)
(declare-fun g_s104_159 () U)
(declare-fun g_s105_160 () U)
(declare-fun g_s106_161 () U)
(declare-fun g_s107_162 () U)
(declare-fun g_s108_163 () U)
(declare-fun g_s109_164 () U)
(declare-fun g_s11_15 () U)
(declare-fun g_s110_165 () U)
(declare-fun g_s111_166 () U)
(declare-fun g_s112_167 () U)
(declare-fun g_s113_168 () U)
(declare-fun g_s114_169 () U)
(declare-fun g_s115_170 () U)
(declare-fun g_s116_171 () U)
(declare-fun g_s117_172 () U)
(declare-fun g_s118_173 () U)
(declare-fun g_s119_174 () U)
(declare-fun g_s12_16 () U)
(declare-fun g_s120_175 () U)
(declare-fun g_s121_176 () U)
(declare-fun g_s13_18 () U)
(declare-fun g_s14_19 () U)
(declare-fun g_s15_21 () U)
(declare-fun g_s16_23 () U)
(declare-fun g_s17_24 () U)
(declare-fun g_s18_25 () U)
(declare-fun g_s19_26 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_27 () U)
(declare-fun g_s21_28 () U)
(declare-fun g_s22_30 () U)
(declare-fun g_s23_31 () U)
(declare-fun g_s24_32 () U)
(declare-fun g_s25_36 () U)
(declare-fun g_s26_38 () U)
(declare-fun g_s27_40 () U)
(declare-fun g_s28_42 () U)
(declare-fun g_s29_44 () U)
(declare-fun g_s3_5 () U)
(declare-fun g_s30_45 () U)
(declare-fun g_s31_47 () U)
(declare-fun g_s32_46 () U)
(declare-fun g_s33_48 () U)
(declare-fun g_s34_50 () U)
(declare-fun g_s35_52 () U)
(declare-fun g_s36_53 () U)
(declare-fun g_s37_55 () U)
(declare-fun g_s38_57 () U)
(declare-fun g_s39_59 () U)
(declare-fun g_s4_4 () U)
(declare-fun g_s40_61 () U)
(declare-fun g_s41_63 () U)
(declare-fun g_s42_64 () U)
(declare-fun g_s43_66 () U)
(declare-fun g_s44_68 () U)
(declare-fun g_s45_69 () U)
(declare-fun g_s46_70 () U)
(declare-fun g_s47_71 () U)
(declare-fun g_s48_72 () U)
(declare-fun g_s49_73 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s50_74 () U)
(declare-fun g_s51_75 () U)
(declare-fun g_s52_76 () U)
(declare-fun g_s53_78 () U)
(declare-fun g_s54_80 () U)
(declare-fun g_s55_82 () U)
(declare-fun g_s56_84 () U)
(declare-fun g_s57_86 () U)
(declare-fun g_s58_88 () U)
(declare-fun g_s59_90 () U)
(declare-fun g_s6_6 () U)
(declare-fun g_s60_92 () U)
(declare-fun g_s61_94 () U)
(declare-fun g_s62_96 () U)
(declare-fun g_s63_98 () U)
(declare-fun g_s64_100 () U)
(declare-fun g_s65_102 () U)
(declare-fun g_s66_104 () U)
(declare-fun g_s67_106 () U)
(declare-fun g_s68_108 () U)
(declare-fun g_s69_110 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s70_112 () U)
(declare-fun g_s71_114 () U)
(declare-fun g_s72_116 () U)
(declare-fun g_s73_117 () U)
(declare-fun g_s74_118 () U)
(declare-fun g_s75_119 () U)
(declare-fun g_s76_120 () U)
(declare-fun g_s77_121 () U)
(declare-fun g_s78_122 () U)
(declare-fun g_s79_124 () U)
(declare-fun g_s8_8 () U)
(declare-fun g_s80_126 () U)
(declare-fun g_s81_128 () U)
(declare-fun g_s82_129 () U)
(declare-fun g_s83_130 () U)
(declare-fun g_s84_131 () U)
(declare-fun g_s85_133 () U)
(declare-fun g_s86_134 () U)
(declare-fun g_s87_135 () U)
(declare-fun g_s88_137 () U)
(declare-fun g_s89_138 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_140 () U)
(declare-fun g_s91_141 () U)
(declare-fun g_s92_142 () U)
(declare-fun g_s93_144 () U)
(declare-fun g_s94_145 () U)
(declare-fun g_s95_147 () U)
(declare-fun g_s96_148 () U)
(declare-fun g_s97_150 () U)
(declare-fun g_s98_151 () U)
(declare-fun g_s99_152 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (mem g_s3_5 g_s4_4) (mem g_s5_7 g_s6_6) (mem g_s7_9 g_s8_8) (mem g_s9_10 g_s8_8) (mem g_s10_11 g_s8_8) (= g_s3_5 e12) (= g_s5_7 e13) (= g_s7_9 e14) (and (|>=i| g_s9_10 e0) (|<=i| g_s9_10 g_s7_9)) (and (|>=i| g_s10_11 e0) (|<=i| g_s10_11 g_s7_9)) (not (= g_s9_10 g_s10_11)) (= g_s11_15 (SET (mapplet g_s10_11 g_s9_10))) (= g_s12_16 (SET (mapplet (mapplet FALSE g_s10_11) (mapplet TRUE g_s9_10)))) (= g_s4_4 (interval e0 e12)) (= g_s6_6 (interval e0 e13)) (= g_s8_8 (interval e0 e14))))
(define-fun |def_seext| () Bool (and (mem g_s12_16 (|+->| BOOL g_s8_8)) (mem g_s12_16 (|+->| BOOL g_s6_6)) (mem g_s12_16 (|+->| BOOL g_s4_4))))
(define-fun |def_lprp| () Bool (and (= g_s13_18 e17) (= g_s14_19 e17) (= g_s15_21 e20) (= g_s16_23 e22) (= g_s17_24 e22) (= g_s18_25 e22) (= g_s19_26 e22) (= g_s20_27 e22) (= g_s21_28 e20) (= g_s22_30 e29) (= g_s23_31 e0) (= g_s24_32 e17) (= g_s25_36 (idiv (|*i| (|*i| e29 e35) e34) e33)) (= g_s26_38 (idiv (|*i| (|*i| e29 e35) e37) e33)) (= g_s27_40 e39) (= g_s28_42 e41) (= g_s29_44 e43) (= g_s30_45 (|+i| e43 g_s13_18)) (= g_s31_47 (|+i| e43 g_s32_46)) (= g_s33_48 (|+i| e43 g_s14_19)) (= g_s34_50 (idiv (idiv (|*i| e35 e49) e33) e20)) (= g_s35_52 (idiv (|*i| (idiv (|*i| e35 e49) e33) e51) e20)) (= g_s36_53 e29) (= g_s37_55 e54) (= g_s38_57 e56) (= g_s39_59 e58) (= g_s40_61 e60) (= g_s41_63 e62) (= g_s42_64 e29) (= g_s43_66 e65) (= g_s44_68 e67) (= g_s45_69 (|+i| e67 g_s15_21)) (= g_s46_70 e67) (= g_s47_71 (|+i| e67 g_s16_23)) (= g_s48_72 (|+i| e67 g_s17_24)) (= g_s49_73 (|+i| e67 g_s18_25)) (= g_s50_74 (|+i| e67 g_s19_26)) (= g_s51_75 (|+i| e67 g_s20_27)) (= g_s52_76 (|+i| e67 g_s21_28)) (= g_s53_78 e77) (= g_s54_80 e79) (= g_s55_82 e81) (= g_s56_84 e83) (= g_s57_86 e85) (= g_s58_88 e87) (= g_s59_90 e89) (= g_s60_92 e91) (= g_s61_94 e93) (= g_s62_96 e95) (= g_s63_98 e97) (= g_s64_100 e99) (= g_s65_102 e101) (= g_s66_104 e103) (= g_s67_106 e105) (= g_s68_108 e107) (= g_s69_110 e109) (= g_s70_112 e111) (= g_s71_114 e113) (= g_s72_116 e115) (= g_s73_117 (|-i| e115 e65)) (= g_s74_118 e29) (= g_s75_119 (|-i| e29 e65)) (= g_s76_120 (|*i| e115 e29)) (= g_s77_121 (|-i| (|*i| e115 e29) e65)) (= g_s78_122 e0) (= g_s79_124 e123) (= g_s80_126 e125) (= g_s81_128 e127) (= g_s82_129 e29) (= g_s83_130 (|-i| e29 e65)) (= g_s84_131 e13) (= g_s85_133 (|+i| e132 g_s22_30)) (= g_s86_134 e132) (= g_s87_135 e20) (= g_s88_137 e136) (= g_s89_138 e20) (= g_s90_140 e139) (= g_s91_141 e14) (= g_s92_142 e115) (= g_s93_144 e143) (= g_s94_145 (|-i| e143 e65)) (= g_s95_147 e146) (= g_s96_148 (|-i| e146 e65)) (= g_s97_150 e149) (= g_s98_151 (|-i| e149 e65)) (= g_s99_152 e115) (= g_s100_153 (|-i| e115 e65)) (= g_s101_155 (|-i| e154 e65)) (= g_s102_157 e156)))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s103_158 (SET (mapplet g_s105_160 g_s104_159))) (= g_s106_161 (SET (mapplet g_s108_163 g_s107_162))) (= g_s109_164 (SET (mapplet g_s118_173 (mapplet g_s117_172 (mapplet g_s116_171 (mapplet g_s115_170 (mapplet g_s114_169 (mapplet g_s113_168 (mapplet g_s112_167 (mapplet g_s111_166 g_s110_165)))))))))) (mem g_s23_31 g_s8_8) (mem g_s24_32 g_s8_8) (mem g_s25_36 g_s6_6) (mem g_s26_38 g_s6_6) (mem g_s27_40 g_s4_4) (mem g_s28_42 g_s4_4) (mem g_s13_18 NATURAL) (|<=i| e29 g_s13_18) (mem g_s32_46 NATURAL) (|<=i| e29 g_s32_46) (mem g_s14_19 NATURAL) (|<=i| e29 g_s14_19) (|<=i| g_s13_18 g_s14_19) (mem g_s29_44 g_s8_8) (mem g_s30_45 g_s8_8) (= g_s30_45 (|+i| g_s29_44 g_s13_18)) (mem g_s31_47 g_s8_8) (= g_s31_47 (|+i| g_s29_44 g_s32_46)) (mem g_s33_48 g_s8_8) (= g_s33_48 (|+i| g_s29_44 g_s14_19)) (mem g_s34_50 g_s6_6) (mem g_s35_52 g_s6_6) (mem g_s36_53 g_s8_8) (|<=i| g_s34_50 g_s35_52) (mem g_s37_55 g_s4_4) (mem g_s38_57 g_s4_4) (mem g_s39_59 g_s4_4) (mem g_s40_61 g_s4_4) (mem g_s41_63 g_s4_4) (mem g_s42_64 g_s8_8) (|<=i| e29 g_s42_64) (mem g_s43_66 g_s8_8) (= g_s43_66 (|-i| g_s42_64 e65)) (mem g_s15_21 NATURAL1) (mem g_s16_23 NATURAL1) (mem g_s17_24 NATURAL1) (mem g_s119_174 NATURAL1) (mem g_s18_25 NATURAL1) (mem g_s19_26 NATURAL1) (mem g_s20_27 NATURAL1) (mem g_s21_28 NATURAL1) (mem g_s44_68 g_s8_8) (mem g_s45_69 g_s8_8) (= g_s45_69 (|+i| g_s44_68 g_s15_21)) (mem g_s46_70 g_s8_8) (mem g_s47_71 g_s8_8) (= g_s47_71 (|+i| g_s46_70 g_s16_23)) (mem g_s48_72 g_s8_8) (= g_s48_72 (|+i| g_s46_70 g_s17_24)) (mem g_s120_175 g_s8_8) (= g_s120_175 (|+i| g_s46_70 g_s119_174)) (mem g_s49_73 g_s8_8) (= g_s49_73 (|+i| g_s46_70 g_s18_25)) (mem g_s50_74 g_s8_8) (= g_s50_74 (|+i| g_s46_70 g_s19_26)) (mem g_s51_75 g_s8_8) (= g_s51_75 (|+i| g_s46_70 g_s20_27)) (mem g_s52_76 g_s8_8) (= g_s52_76 (|+i| g_s46_70 g_s21_28)) (mem g_s53_78 g_s4_4) (mem g_s54_80 g_s4_4) (mem g_s55_82 g_s4_4) (mem g_s56_84 g_s4_4) (mem g_s57_86 g_s4_4) (mem g_s58_88 g_s4_4) (mem g_s59_90 g_s4_4) (mem g_s60_92 g_s4_4) (mem g_s61_94 g_s4_4) (mem g_s62_96 g_s4_4) (mem g_s63_98 g_s4_4) (mem g_s64_100 g_s4_4) (mem g_s65_102 g_s4_4) (mem g_s66_104 g_s4_4) (mem g_s67_106 g_s4_4) (mem g_s68_108 g_s4_4) (mem g_s69_110 g_s4_4) (mem g_s70_112 g_s4_4) (mem g_s71_114 g_s4_4) (mem g_s72_116 g_s8_8) (|<=i| e0 g_s72_116) (|<=i| e29 g_s72_116) (mem g_s73_117 g_s8_8) (= g_s73_117 (|-i| g_s72_116 e65)) (mem g_s74_118 g_s8_8) (mem g_s75_119 g_s8_8) (= g_s75_119 (|-i| g_s74_118 e65)) (mem g_s76_120 g_s8_8) (mem g_s77_121 g_s8_8) (= g_s77_121 (|-i| g_s76_120 e65)) (mem g_s78_122 g_s6_6) (mem g_s79_124 g_s6_6) (mem g_s80_126 g_s6_6) (mem g_s81_128 g_s6_6) (not (= g_s80_126 g_s81_128)) (mem g_s84_131 g_s6_6) (mem g_s85_133 g_s6_6) (mem g_s86_134 g_s6_6) (mem g_s22_30 NATURAL) (= g_s22_30 (|-i| g_s85_133 g_s86_134)) (mem g_s87_135 g_s6_6) (mem g_s88_137 g_s6_6) (mem g_s89_138 g_s6_6) (mem g_s90_140 g_s6_6) (mem g_s82_129 g_s8_8) (mem g_s83_130 g_s8_8) (= g_s83_130 (|-i| g_s82_129 e65)) (= g_s76_120 (|*i| g_s72_116 g_s82_129)) (|<=i| e65 g_s82_129) (|<i| g_s82_129 g_s7_9) (mem g_s91_141 g_s8_8) (mem g_s92_142 g_s8_8) (mem g_s93_144 g_s4_4) (mem g_s94_145 g_s4_4) (mem g_s95_147 g_s4_4) (mem g_s96_148 g_s4_4) (mem g_s97_150 g_s4_4) (mem g_s98_151 g_s4_4) (= g_s98_151 (|-i| g_s97_150 e65)) (mem g_s99_152 g_s4_4) (mem g_s100_153 g_s4_4) (= g_s100_153 (|-i| g_s99_152 e65)) (mem g_s121_176 g_s8_8) (mem g_s101_155 g_s8_8) (mem g_s102_157 g_s4_4)))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_sets|)
(define-fun lh_1 () Bool (= g_s13_18 e17))
(define-fun lh_2 () Bool (= g_s14_19 e17))
(define-fun lh_3 () Bool (= g_s15_21 e20))
(define-fun lh_4 () Bool (= g_s16_23 e22))
(define-fun lh_5 () Bool (= g_s17_24 e22))
(define-fun lh_6 () Bool (= g_s18_25 e22))
(define-fun lh_7 () Bool (= g_s19_26 e22))
(define-fun lh_8 () Bool (= g_s20_27 e22))
(define-fun lh_9 () Bool (= g_s21_28 e20))
(define-fun lh_10 () Bool (= g_s22_30 e29))
(define-fun lh_11 () Bool (= g_s23_31 e0))
(define-fun lh_12 () Bool (= g_s24_32 e17))
(define-fun lh_13 () Bool (= g_s25_36 (idiv (|*i| (|*i| e29 e35) e34) e33)))
(define-fun lh_14 () Bool (= g_s26_38 (idiv (|*i| (|*i| e29 e35) e37) e33)))
(define-fun lh_15 () Bool (= g_s27_40 e39))
(define-fun lh_16 () Bool (= g_s28_42 e41))
(define-fun lh_17 () Bool (= g_s29_44 e43))
(define-fun lh_18 () Bool (= g_s30_45 (|+i| e43 g_s13_18)))
(define-fun lh_19 () Bool (= g_s31_47 (|+i| e43 g_s32_46)))
(define-fun lh_20 () Bool (= g_s33_48 (|+i| e43 g_s14_19)))
(define-fun lh_21 () Bool (= g_s34_50 (idiv (idiv (|*i| e35 e49) e33) e20)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (not (= e33 e0)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13) (not (= e33 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20) (not (= e20 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20) (not (= e33 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21) (not (= e20 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21) (not (= e33 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)