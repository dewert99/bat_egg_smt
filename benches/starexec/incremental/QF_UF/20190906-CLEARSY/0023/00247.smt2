(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e52 () U)
(declare-fun e0 () U)
(declare-fun e47 () U)
(declare-fun e38 () U)
(declare-fun e172 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_104 () U)
(declare-fun g_s101_105 () U)
(declare-fun g_s102_106 () U)
(declare-fun g_s103_107 () U)
(declare-fun g_s104_108 () U)
(declare-fun g_s105_109 () U)
(declare-fun g_s106_110 () U)
(declare-fun g_s107_111 () U)
(declare-fun g_s108_112 () U)
(declare-fun g_s109_113 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_114 () U)
(declare-fun g_s111_115 () U)
(declare-fun g_s112_116 () U)
(declare-fun g_s113_117 () U)
(declare-fun g_s114_118 () U)
(declare-fun g_s115_119 () U)
(declare-fun g_s116_120 () U)
(declare-fun g_s117_121 () U)
(declare-fun g_s118_122 () U)
(declare-fun g_s119_123 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_124 () U)
(declare-fun g_s121_125 () U)
(declare-fun g_s122_126 () U)
(declare-fun g_s123_127 () U)
(declare-fun g_s124_128 () U)
(declare-fun g_s125_129 () U)
(declare-fun g_s126_130 () U)
(declare-fun g_s127_131 () U)
(declare-fun g_s128_132 () U)
(declare-fun g_s129_133 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_134 () U)
(declare-fun g_s131_135 () U)
(declare-fun g_s132_136 () U)
(declare-fun g_s133_137 () U)
(declare-fun g_s134_138 () U)
(declare-fun g_s135_139 () U)
(declare-fun g_s136_140 () U)
(declare-fun g_s137_141 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_144 () U)
(declare-fun g_s141_145 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_147 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_149 () U)
(declare-fun g_s146_150 () U)
(declare-fun g_s147_151 () U)
(declare-fun g_s148_152 () U)
(declare-fun g_s149_153 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_154 () U)
(declare-fun g_s150$1_160 () U)
(declare-fun g_s151_155 () U)
(declare-fun g_s151$1_158 () U)
(declare-fun g_s152_156 () U)
(declare-fun g_s152$1_159 () U)
(declare-fun g_s153_157 () U)
(declare-fun g_s153$1_161 () U)
(declare-fun g_s154$1_162 () U)
(declare-fun g_s155$1_163 () U)
(declare-fun g_s156$1_164 () U)
(declare-fun g_s157$1_165 () U)
(declare-fun g_s158$1_166 () U)
(declare-fun g_s159$1_167 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160$1_168 () U)
(declare-fun g_s161$1_169 () U)
(declare-fun g_s165_170 () U)
(declare-fun g_s167_171 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s179_174 () U)
(declare-fun g_s179_176 () U)
(declare-fun g_s179$1_173 () U)
(declare-fun g_s179$1_175 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_48 () U)
(declare-fun g_s46_49 () U)
(declare-fun g_s47_50 () U)
(declare-fun g_s48_51 () U)
(declare-fun g_s49_53 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_55 () U)
(declare-fun g_s51_54 () U)
(declare-fun g_s52_56 () U)
(declare-fun g_s53_57 () U)
(declare-fun g_s54_58 () U)
(declare-fun g_s55_59 () U)
(declare-fun g_s56_60 () U)
(declare-fun g_s57_61 () U)
(declare-fun g_s58_62 () U)
(declare-fun g_s59_63 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_64 () U)
(declare-fun g_s61_65 () U)
(declare-fun g_s62_66 () U)
(declare-fun g_s63_67 () U)
(declare-fun g_s64_68 () U)
(declare-fun g_s65_69 () U)
(declare-fun g_s66_70 () U)
(declare-fun g_s67_71 () U)
(declare-fun g_s68_72 () U)
(declare-fun g_s69_73 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_74 () U)
(declare-fun g_s71_75 () U)
(declare-fun g_s72_76 () U)
(declare-fun g_s73_77 () U)
(declare-fun g_s74_78 () U)
(declare-fun g_s75_79 () U)
(declare-fun g_s76_80 () U)
(declare-fun g_s77_81 () U)
(declare-fun g_s78_82 () U)
(declare-fun g_s79_83 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_84 () U)
(declare-fun g_s81_85 () U)
(declare-fun g_s82_86 () U)
(declare-fun g_s83_87 () U)
(declare-fun g_s84_88 () U)
(declare-fun g_s85_89 () U)
(declare-fun g_s86_90 () U)
(declare-fun g_s87_91 () U)
(declare-fun g_s88_92 () U)
(declare-fun g_s89_93 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_94 () U)
(declare-fun g_s91_95 () U)
(declare-fun g_s92_96 () U)
(declare-fun g_s93_97 () U)
(declare-fun g_s94_98 () U)
(declare-fun g_s95_99 () U)
(declare-fun g_s96_100 () U)
(declare-fun g_s97_101 () U)
(declare-fun g_s98_102 () U)
(declare-fun g_s99_103 () U)
(declare-fun e33 () U)
(declare-fun e35 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))))))))))))))))))) (= g_s24_25 (SET (mapplet g_s26_27 g_s25_26))) (= g_s27_28 (SET (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 g_s28_29))))) (= g_s32_34 e33) (= g_s34_36 e35) (mem g_s36_37 NATURAL1) (= g_s36_37 e38) (= g_s37_39 (interval e0 g_s36_37)) (= g_s38_40 NATURAL) (mem g_s39_41 g_s38_40) (= g_s40_42 NATURAL) (= g_s41_43 INTEGER) (= g_s42_44 INTEGER) (= g_s43_45 NATURAL) (mem g_s44_46 NATURAL1) (= g_s44_46 e47) (subset g_s45_48 g_s4_5) (subset g_s46_49 g_s4_5) (subset g_s47_50 g_s4_5) (subset g_s48_51 g_s4_5) (= g_s49_53 (interval e52 e47)) (= g_s45_48 (SET (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))) (= g_s46_49 (SET (mapplet g_s10_11 (mapplet g_s9_10 g_s8_9)))) (= g_s47_50 (SET (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12)))))))) (= g_s48_51 (SET (mapplet g_s20_21 (mapplet g_s19_20 g_s18_19)))) (mem g_s50_55 g_s51_54) (= g_s52_56 INTEGER) (= g_s53_57 NATURAL) (= g_s54_58 INTEGER) (= g_s55_59 NATURAL) (= g_s56_60 INTEGER) (= g_s57_61 NATURAL) (= g_s58_62 NATURAL) (= g_s59_63 NATURAL) (= g_s60_64 NATURAL) (= g_s61_65 INTEGER) (= g_s62_66 INTEGER) (mem g_s63_67 g_s60_64) (mem g_s64_68 NATURAL) (= g_s65_69 (interval e0 g_s44_46)) (mem g_s66_70 g_s65_69) (mem g_s67_71 g_s65_69) (= g_s66_70 e0) (= g_s67_71 e47)))
(define-fun |def_seext| () Bool (and (mem g_s68_72 g_s0_1) (mem g_s69_73 g_s0_1) (mem g_s70_74 g_s0_1) (= g_s68_72 g_s1_2) (= g_s69_73 g_s2_3) (= g_s70_74 g_s3_4) (mem g_s71_75 g_s65_69) (mem g_s72_76 g_s65_69) (= g_s71_75 g_s66_70) (= g_s72_76 g_s67_71) (mem g_s73_77 INTEGER) (mem g_s74_78 g_s65_69) (mem g_s75_79 g_s49_53) (mem g_s76_80 g_s49_53) (mem g_s77_81 g_s52_56) (mem g_s78_82 g_s52_56) (mem g_s79_83 g_s61_65) (mem g_s80_84 NATURAL) (mem g_s81_85 NATURAL) (mem g_s82_86 NATURAL) (mem g_s83_87 NATURAL) (mem g_s84_88 NATURAL) (mem g_s85_89 g_s40_42) (mem g_s86_90 NATURAL) (mem g_s87_91 NATURAL) (mem g_s88_92 g_s60_64) (mem g_s89_93 g_s60_64) (mem g_s90_94 g_s55_59) (mem g_s91_95 g_s61_65) (mem g_s92_96 g_s60_64) (mem g_s93_97 g_s60_64) (mem g_s94_98 NATURAL) (mem g_s95_99 NATURAL) (mem g_s96_100 NATURAL) (mem g_s97_101 NATURAL) (mem g_s98_102 g_s61_65) (mem g_s99_103 BOOL) (mem g_s100_104 NATURAL) (mem g_s101_105 NATURAL) (mem g_s102_106 g_s61_65) (mem g_s103_107 NATURAL1) (mem g_s104_108 g_s61_65) (mem g_s105_109 g_s61_65) (mem g_s106_110 g_s60_64) (mem g_s107_111 g_s60_64) (mem g_s108_112 g_s61_65) (mem g_s109_113 g_s61_65) (mem g_s110_114 g_s40_42) (mem g_s111_115 g_s60_64) (mem g_s112_116 g_s60_64) (mem g_s113_117 g_s40_42) (mem g_s114_118 g_s61_65) (mem g_s115_119 g_s61_65) (mem g_s116_120 NATURAL) (mem g_s117_121 NATURAL) (mem g_s118_122 g_s40_42) (mem g_s119_123 NATURAL) (mem g_s120_124 (|-->| g_s40_42 INTEGER)) (mem g_s121_125 BOOL) (|>i| g_s79_83 e0) (|>i| g_s109_113 e0) (|>i| g_s79_83 g_s109_113) (|>i| g_s108_112 e0) (|>i| g_s111_115 e0) (|>i| g_s112_116 e0) (|>i| g_s85_89 e0) (|<=i| g_s111_115 g_s112_116) (|<=i| g_s73_77 e0) (mem g_s122_126 BOOL) (mem g_s123_127 BOOL) (mem g_s124_128 BOOL) (mem g_s125_129 BOOL) (mem g_s126_130 (|-->| g_s65_69 g_s52_56)) (subset g_s127_131 g_s65_69) (subset g_s128_132 g_s65_69) (mem g_s129_133 (|-->| g_s65_69 g_s0_1)) (mem g_s130_134 (|-->| g_s65_69 g_s40_42)) (subset g_s131_135 g_s65_69) (mem g_s132_136 (|-->| g_s65_69 (interval e52 e47))) (mem g_s133_137 BOOL) (mem g_s134_138 (|-->| g_s65_69 g_s4_5)) (mem g_s135_139 (|-->| g_s65_69 g_s0_1)) (mem g_s136_140 (|-->| g_s65_69 g_s52_56)) (mem g_s137_141 (|-->| g_s65_69 g_s52_56)) (subset g_s138_142 g_s65_69) (subset g_s139_143 g_s65_69) (subset g_s140_144 g_s65_69) (subset g_s141_145 g_s65_69) (mem g_s142_146 (|-->| g_s65_69 g_s4_5)) (subset g_s140_144 g_s139_143) (subset (ran g_s134_138) g_s47_50) (subset (ran g_s142_146) g_s46_49) (mem g_s143_147 g_s41_43) (mem g_s144_148 BOOL) (mem g_s145_149 BOOL) (mem g_s146_150 BOOL) (mem g_s147_151 BOOL) (mem g_s148_152 g_s55_59) (mem g_s149_153 g_s55_59)))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset (ran g_s150_154) g_s45_48) (mem g_s151_155 BOOL) (subset g_s152_156 g_s65_69) (mem g_s150_154 (|-->| g_s65_69 g_s4_5)) (subset g_s153_157 g_s65_69)))
(define-fun |def_inv| () Bool (and (= g_s151_155 g_s151$1_158) (= g_s152_156 g_s152$1_159) (= g_s150_154 g_s150$1_160) (= g_s153_157 g_s153$1_161) (mem g_s151$1_158 BOOL) (subset g_s152$1_159 g_s65_69) (mem g_s150$1_160 (|-->| g_s65_69 g_s4_5)) (subset g_s153$1_161 g_s65_69) (subset g_s154$1_162 g_s65_69) (mem g_s155$1_163 BOOL) (mem g_s156$1_164 BOOL) (mem g_s157$1_165 BOOL) (subset g_s158$1_166 g_s65_69) (subset g_s159$1_167 g_s65_69) (mem g_s160$1_168 (|-->| g_s65_69 g_s61_65)) (mem g_s161$1_169 g_s61_65)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 g_s61_65)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (set_prod g_s65_69 (SET e0)) (|-->| g_s65_69 g_s61_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem (set_prod g_s65_69 (SET g_s7_8)) (|-->| g_s65_69 g_s4_5))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (subset empty g_s65_69)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (subset (ran (set_prod g_s65_69 (SET g_s7_8))) g_s45_48)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s165_170 BOOL))
(assert (= g_s165_170 g_s145_149))
(assert (mem g_s165_170 BOOL))
(assert (= g_s165_170 g_s145_149))
(define-fun lh_1 () Bool (= g_s155$1_163 FALSE))
(define-fun lh_2 () Bool (= g_s165_170 TRUE))
(define-fun lh_3 () Bool (= g_s165_170 FALSE))
(define-fun lh_4 () Bool (= g_s155$1_163 TRUE))
(define-fun lh_5 () Bool (or (and (not (mem g_s66_70 g_s140_144)) (not (mem g_s67_71 g_s140_144))) (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121)) (and (mem g_s67_71 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s67_71)) g_s117_121))))
(define-fun lh_6 () Bool (not (and (= g_s155$1_163 FALSE) (= g_s165_170 TRUE))))
(define-fun lh_7 () Bool (not (and (= g_s155$1_163 TRUE) (= g_s165_170 FALSE) (or (and (not (mem g_s66_70 g_s140_144)) (not (mem g_s67_71 g_s140_144))) (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121)) (and (mem g_s67_71 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s67_71)) g_s117_121))))))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (imax (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0))) g_s61_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5) (mem (imax (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0))) g_s61_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_6 lh_7) (mem (imax (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0))) g_s61_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s145_149 TRUE))
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s145_149 TRUE))
; PO 1 in group 2
(assert (not (subset (set_diff g_s159$1_167 (SET g_s167_171)) g_s65_69)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s145_149 FALSE))
(assert (= g_s151_155 TRUE))
; PO 1 in group 3
(assert (not (= g_s151$1_158 TRUE)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s145_149 FALSE))
(assert (= g_s151_155 TRUE))
(assert (= g_s145_149 FALSE))
(assert (= g_s151$1_158 TRUE))
(define-fun lh_1 () Bool (mem g_s66_70 g_s140_144))
(define-fun lh_2 () Bool (mem g_s67_71 g_s140_144))
(define-fun lh_3 () Bool (|>i| (apply g_s32_34 (|-i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71))) (|+i| (idiv (|*i| (apply g_s32_34 (|+i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71))) g_s116_120) e172) g_s117_121)))
(define-fun lh_4 () Bool (|<i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) (apply g_s32_34 (apply g_s136_140 g_s67_71))))
(define-fun lh_5 () Bool (not (and (mem g_s66_70 g_s140_144) (mem g_s67_71 g_s140_144))))
(define-fun lh_6 () Bool (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121))
(define-fun lh_7 () Bool (not (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121))))
(define-fun lh_8 () Bool (|>i| (apply g_s32_34 (apply g_s136_140 g_s67_71)) g_s117_121))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_5 lh_6) (subset (binary_union g_s154$1_162 (SET g_s67_71)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset (binary_union g_s154$1_162 (SET g_s66_70)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_2 lh_5 lh_7 lh_8) (subset (binary_union g_s154$1_162 (SET g_s66_70)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152_156)))
(assert (= g_s145_149 FALSE))
; PO 1 in group 5
(assert (not (not (mem g_s167_171 g_s152$1_159))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152_156)))
(assert (= g_s145_149 FALSE))
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152$1_159)))
(assert (= g_s145_149 FALSE))
(define-fun lh_1 () Bool (or (and (mem g_s167_171 g_s140_144) (|<=i| (apply g_s32_34 (apply g_s136_140 g_s167_171)) g_s117_121)) (and (not (mem g_s167_171 g_s140_144)) (mem g_s167_171 g_s141_145))))
(define-fun lh_2 () Bool (or (not (mem g_s167_171 (binary_union g_s158$1_166 (SET g_s167_171)))) (= g_s157$1_165 FALSE) (and (= g_s122_126 TRUE) (= g_s124_128 TRUE))))
(define-fun lh_3 () Bool (not (mem g_s167_171 g_s159$1_167)))
(define-fun lh_4 () Bool (mem g_s167_171 (binary_union g_s158$1_166 (SET g_s167_171))))
(define-fun lh_5 () Bool (= g_s157$1_165 TRUE))
(define-fun lh_6 () Bool (or (= g_s122_126 FALSE) (= g_s124_128 FALSE)))
(define-fun lh_7 () Bool (mem g_s167_171 g_s159$1_167))
(define-fun lh_8 () Bool (|>i| (apply g_s160$1_168 g_s167_171) e0))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (subset (set_diff g_s159$1_167 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (subset (binary_union g_s158$1_166 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s160$1_168 (SET (mapplet g_s167_171 g_s115_119))) (|-->| g_s65_69 g_s61_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_3 lh_4 lh_5 lh_6) (subset (binary_union g_s158$1_166 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_3 lh_4 lh_5 lh_6) (subset (binary_union g_s159$1_167 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (|<+| g_s160$1_168 (SET (mapplet g_s167_171 (|-i| (apply g_s160$1_168 g_s167_171) g_s79_83)))) (|-->| g_s65_69 g_s61_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_4 lh_5 lh_6 lh_7 lh_8) (subset (binary_union g_s158$1_166 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s151_155 TRUE))
(assert (= g_s145_149 FALSE))
; PO 1 in group 7
(assert (not (= g_s151$1_158 TRUE)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s151_155 TRUE))
(assert (= g_s145_149 FALSE))
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s151$1_158 TRUE))
(assert (= g_s145_149 FALSE))
(define-fun lh_1 () Bool (mem g_s167_171 g_s154$1_162))
; PO 1 in group 8
(push 1)
(assert (not (=> lh_1 (mem (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s5_6))) (|-->| g_s65_69 g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> lh_1 (subset (ran (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s5_6)))) g_s45_48))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> lh_1 (subset (binary_union g_s152$1_159 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152_156)))
(assert (= g_s145_149 FALSE))
; PO 1 in group 9
(assert (not (not (mem g_s167_171 g_s152$1_159))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152_156)))
(assert (= g_s145_149 FALSE))
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152$1_159)))
(assert (= g_s145_149 FALSE))
(define-fun lh_1 () Bool (mem g_s167_171 g_s154$1_162))
(define-fun lh_2 () Bool (= g_s122_126 FALSE))
(define-fun lh_3 () Bool (= g_s122_126 TRUE))
(define-fun lh_4 () Bool (not (and (mem g_s167_171 g_s154$1_162) (= g_s122_126 FALSE))))
(define-fun lh_5 () Bool (not (and (mem g_s167_171 g_s154$1_162) (= g_s122_126 TRUE))))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_3) (mem (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s5_6))) (|-->| g_s65_69 g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s6_7))) (|-->| g_s65_69 g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 10
(push 1)
(assert (not (=> (and lh_4 lh_5) (subset (ran g_s150$1_160) g_s45_48))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_3) (subset (ran (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s5_6)))) g_s45_48))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (subset (ran (|<+| g_s150$1_160 (SET (mapplet g_s167_171 g_s6_7)))) g_s45_48))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (subset (binary_union g_s152$1_159 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_3) (subset (binary_union g_s152$1_159 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (mem g_s167_171 g_s65_69))
(define-fun lh_1 () Bool (not (mem g_s167_171 g_s152$1_159)))
(define-fun lh_2 () Bool (mem g_s167_171 g_s139_143))
(define-fun lh_3 () Bool (not (and (not (mem g_s167_171 g_s152$1_159)) (mem g_s167_171 g_s139_143))))
; PO 1 in group 11
(push 1)
(assert (not (=> lh_3 (subset (set_diff g_s153$1_161 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> lh_3 (= (set_diff (set_diff g_s153$1_161 (SET g_s167_171)) (SET g_s167_171)) (set_diff g_s153_157 (SET g_s167_171))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (subset (binary_union g_s153$1_161 (SET g_s167_171)) g_s65_69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (set_diff (binary_union g_s153$1_161 (SET g_s167_171)) (SET g_s167_171)) (set_diff g_s153_157 (SET g_s167_171))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s179_174 g_s179$1_173))
(assert (mem g_s167_171 g_s65_69))
; PO 1 in group 12
(assert (not (= (bool (mem g_s167_171 g_s153_157)) (bool (mem g_s167_171 g_s153$1_161)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s179_176 g_s179$1_175))
(assert (mem g_s167_171 g_s65_69))
; PO 1 in group 13
(assert (not (= (apply g_s150_154 g_s167_171) (apply g_s150$1_160 g_s167_171))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (= g_s179_174 g_s179$1_173))
(assert (mem g_s167_171 g_s65_69))
; PO 1 in group 14
(assert (not (= (bool (mem g_s167_171 g_s152_156)) (bool (mem g_s167_171 g_s152$1_159)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s165_170 BOOL))
(assert (= g_s165_170 g_s145_149))
(assert (mem g_s165_170 BOOL))
(assert (= g_s165_170 g_s145_149))
(define-fun lh_1 () Bool (= g_s155$1_163 TRUE))
(define-fun lh_2 () Bool (= g_s165_170 FALSE))
(define-fun lh_3 () Bool (not (and (not (mem g_s66_70 g_s140_144)) (not (mem g_s67_71 g_s140_144)))))
(define-fun lh_4 () Bool (mem g_s66_70 g_s140_144))
(define-fun lh_5 () Bool (not (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121))))
(define-fun lh_6 () Bool (mem g_s67_71 g_s140_144))
(define-fun lh_7 () Bool (= g_s155$1_163 FALSE))
(define-fun lh_8 () Bool (= g_s165_170 TRUE))
(define-fun lh_9 () Bool (or (and (not (mem g_s66_70 g_s140_144)) (not (mem g_s67_71 g_s140_144))) (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121)) (and (mem g_s67_71 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s67_71)) g_s117_121))))
(define-fun lh_10 () Bool (not (and (= g_s155$1_163 FALSE) (= g_s165_170 TRUE))))
(define-fun lh_11 () Bool (not (and (= g_s155$1_163 TRUE) (= g_s165_170 FALSE) (or (and (not (mem g_s66_70 g_s140_144)) (not (mem g_s67_71 g_s140_144))) (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121)) (and (mem g_s67_71 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s67_71)) g_s117_121))))))
; PO 1 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (not (= (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (=> (and lh_2 lh_7 lh_8) (not (= (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 15
(push 1)
(assert (not (=> (and lh_2 lh_10 lh_11) (not (= (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (mem (binary_inter (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) NATURAL) (FIN NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 15
(push 1)
(assert (not (=> (and lh_2 lh_7 lh_8) (mem (binary_inter (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) NATURAL) (FIN NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 15
(push 1)
(assert (not (=> (and lh_2 lh_10 lh_11) (mem (binary_inter (SET (mapplet (|-i| g_s161$1_169 g_s79_83) e0)) NATURAL) (FIN NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s66_70 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s136_140 g_s66_70) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_6) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_6) (mem g_s67_71 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_6) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_6) (mem (apply g_s136_140 g_s67_71) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s145_149 FALSE))
(assert (= g_s151_155 TRUE))
(assert (= g_s145_149 FALSE))
(assert (= g_s151$1_158 TRUE))
(define-fun lh_1 () Bool (mem g_s66_70 g_s140_144))
(define-fun lh_2 () Bool (mem g_s67_71 g_s140_144))
(define-fun lh_3 () Bool (|>i| (apply g_s32_34 (|-i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71))) (|+i| (idiv (|*i| (apply g_s32_34 (|+i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71))) g_s116_120) e172) g_s117_121)))
(define-fun lh_4 () Bool (not (and (mem g_s66_70 g_s140_144) (mem g_s67_71 g_s140_144))))
(define-fun lh_5 () Bool (not (and (mem g_s66_70 g_s140_144) (|>i| (apply g_s32_34 (apply g_s136_140 g_s66_70)) g_s117_121))))
; PO 1 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (= e172 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_4) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s66_70 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_4) (mem g_s66_70 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s67_71 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_4) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_4) (mem (apply g_s136_140 g_s66_70) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|+i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71)) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|-i| (apply g_s136_140 g_s66_70) (apply g_s136_140 g_s67_71)) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 16
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5) (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s66_70 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s67_71 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 16
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5) (mem g_s67_71 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 16
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5) (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s136_140 g_s66_70) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s136_140 g_s67_71) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 16
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5) (mem (apply g_s136_140 g_s67_71) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152_156)))
(assert (= g_s145_149 FALSE))
(assert (mem g_s167_171 g_s65_69))
(assert (not (mem g_s167_171 g_s152$1_159)))
(assert (= g_s145_149 FALSE))
(define-fun lh_1 () Bool (mem g_s167_171 g_s140_144))
(define-fun lh_2 () Bool (or (and (mem g_s167_171 g_s140_144) (|<=i| (apply g_s32_34 (apply g_s136_140 g_s167_171)) g_s117_121)) (and (not (mem g_s167_171 g_s140_144)) (mem g_s167_171 g_s141_145))))
(define-fun lh_3 () Bool (mem g_s167_171 g_s159$1_167))
(define-fun lh_4 () Bool (|>i| (apply g_s160$1_168 g_s167_171) e0))
(define-fun lh_5 () Bool (mem g_s167_171 (binary_union g_s158$1_166 (SET g_s167_171))))
(define-fun lh_6 () Bool (= g_s157$1_165 TRUE))
(define-fun lh_7 () Bool (or (= g_s122_126 FALSE) (= g_s124_128 FALSE)))
; PO 1 in group 17
(push 1)
(assert (not (=> lh_1 (mem g_s32_34 (|+->| (dom g_s32_34) (ran g_s32_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (=> lh_1 (mem g_s136_140 (|+->| (dom g_s136_140) (ran g_s136_140))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 17
(push 1)
(assert (not (=> lh_1 (mem g_s167_171 (dom g_s136_140)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 17
(push 1)
(assert (not (=> lh_1 (mem (apply g_s136_140 g_s167_171) (dom g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 17
(push 1)
(assert (not (=> (and lh_2 lh_3) (mem g_s167_171 (dom g_s160$1_168)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 17
(push 1)
(assert (not (=> (and lh_2 lh_3) (mem g_s160$1_168 (|+->| (dom g_s160$1_168) (ran g_s160$1_168))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 17
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s167_171 (dom g_s160$1_168)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 17
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s160$1_168 (|+->| (dom g_s160$1_168) (ran g_s160$1_168))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s167_171 g_s65_69))
(assert (mem g_s167_171 g_s65_69))
; PO 1 in group 18
(push 1)
(assert (not (mem g_s150$1_160 (|+->| (dom g_s150$1_160) (ran g_s150$1_160)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (mem g_s167_171 (dom g_s150$1_160))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)