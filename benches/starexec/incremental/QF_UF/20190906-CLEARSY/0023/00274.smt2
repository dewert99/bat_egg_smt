(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e25 () U)
(declare-fun e31 () U)
(declare-fun e56 () U)
(declare-fun e58 () U)
(declare-fun e47 () U)
(declare-fun e61 () U)
(declare-fun e63 () U)
(declare-fun e65 () U)
(declare-fun e67 () U)
(declare-fun e69 () U)
(declare-fun e71 () U)
(declare-fun e73 () U)
(declare-fun e75 () U)
(declare-fun e77 () U)
(declare-fun e79 () U)
(declare-fun e81 () U)
(declare-fun e83 () U)
(declare-fun e85 () U)
(declare-fun e87 () U)
(declare-fun e89 () U)
(declare-fun e91 () U)
(declare-fun e93 () U)
(declare-fun e95 () U)
(declare-fun e97 () U)
(declare-fun e99 () U)
(declare-fun e101 () U)
(declare-fun e103 () U)
(declare-fun e105 () U)
(declare-fun e107 () U)
(declare-fun e109 () U)
(declare-fun e111 () U)
(declare-fun e113 () U)
(declare-fun e115 () U)
(declare-fun e117 () U)
(declare-fun e119 () U)
(declare-fun e121 () U)
(declare-fun e123 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e129 () U)
(declare-fun e131 () U)
(declare-fun e133 () U)
(declare-fun e135 () U)
(declare-fun e137 () U)
(declare-fun e139 () U)
(declare-fun e141 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_152 () U)
(declare-fun g_s101_154 () U)
(declare-fun g_s102_156 () U)
(declare-fun g_s103_158 () U)
(declare-fun g_s104_160 () U)
(declare-fun g_s105_162 () U)
(declare-fun g_s106_164 () U)
(declare-fun g_s107_166 () U)
(declare-fun g_s108_168 () U)
(declare-fun g_s109_169 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_170 () U)
(declare-fun g_s111_171 () U)
(declare-fun g_s112_172 () U)
(declare-fun g_s113_173 () U)
(declare-fun g_s114_174 () U)
(declare-fun g_s115_175 () U)
(declare-fun g_s116_176 () U)
(declare-fun g_s117_177 () U)
(declare-fun g_s118_178 () U)
(declare-fun g_s119_179 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_180 () U)
(declare-fun g_s121_181 () U)
(declare-fun g_s122_182 () U)
(declare-fun g_s123_183 () U)
(declare-fun g_s124_184 () U)
(declare-fun g_s125_185 () U)
(declare-fun g_s126_186 () U)
(declare-fun g_s127_187 () U)
(declare-fun g_s128_188 () U)
(declare-fun g_s129_189 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_190 () U)
(declare-fun g_s131_191 () U)
(declare-fun g_s132_192 () U)
(declare-fun g_s132$1_197 () U)
(declare-fun g_s133_193 () U)
(declare-fun g_s133$1_198 () U)
(declare-fun g_s134_194 () U)
(declare-fun g_s134$1_199 () U)
(declare-fun g_s135_195 () U)
(declare-fun g_s135$1_200 () U)
(declare-fun g_s136_196 () U)
(declare-fun g_s136$1_201 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_27 () U)
(declare-fun g_s26_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_32 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_33 () U)
(declare-fun g_s31_34 () U)
(declare-fun g_s32_35 () U)
(declare-fun g_s33_36 () U)
(declare-fun g_s34_37 () U)
(declare-fun g_s35_38 () U)
(declare-fun g_s36_39 () U)
(declare-fun g_s37_40 () U)
(declare-fun g_s38_41 () U)
(declare-fun g_s39_42 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_43 () U)
(declare-fun g_s41_44 () U)
(declare-fun g_s42_45 () U)
(declare-fun g_s43_46 () U)
(declare-fun g_s44_48 () U)
(declare-fun g_s46_50 () U)
(declare-fun g_s47_51 () U)
(declare-fun g_s48_52 () U)
(declare-fun g_s49_53 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_54 () U)
(declare-fun g_s51_55 () U)
(declare-fun g_s52_57 () U)
(declare-fun g_s53_59 () U)
(declare-fun g_s54_60 () U)
(declare-fun g_s55_62 () U)
(declare-fun g_s56_64 () U)
(declare-fun g_s57_66 () U)
(declare-fun g_s58_68 () U)
(declare-fun g_s59_70 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_72 () U)
(declare-fun g_s61_74 () U)
(declare-fun g_s62_76 () U)
(declare-fun g_s63_78 () U)
(declare-fun g_s64_80 () U)
(declare-fun g_s65_82 () U)
(declare-fun g_s66_84 () U)
(declare-fun g_s67_86 () U)
(declare-fun g_s68_88 () U)
(declare-fun g_s69_90 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_92 () U)
(declare-fun g_s71_94 () U)
(declare-fun g_s72_96 () U)
(declare-fun g_s73_98 () U)
(declare-fun g_s74_100 () U)
(declare-fun g_s75_102 () U)
(declare-fun g_s76_104 () U)
(declare-fun g_s77_106 () U)
(declare-fun g_s78_108 () U)
(declare-fun g_s79_110 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_112 () U)
(declare-fun g_s81_114 () U)
(declare-fun g_s82_116 () U)
(declare-fun g_s83_118 () U)
(declare-fun g_s84_120 () U)
(declare-fun g_s85_122 () U)
(declare-fun g_s86_124 () U)
(declare-fun g_s87_126 () U)
(declare-fun g_s88_128 () U)
(declare-fun g_s89_130 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_132 () U)
(declare-fun g_s91_134 () U)
(declare-fun g_s92_136 () U)
(declare-fun g_s93_138 () U)
(declare-fun g_s94_140 () U)
(declare-fun g_s95_142 () U)
(declare-fun g_s96_144 () U)
(declare-fun g_s97_146 () U)
(declare-fun g_s98_148 () U)
(declare-fun g_s99_150 () U)
(declare-fun e26 () U)
(declare-fun e28 () U)
(declare-fun e49 () U)
(declare-fun e23 () U)
(declare-fun e22 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (= g_s10_11 (SET (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12)))) (= g_s14_15 (SET (mapplet g_s16_17 g_s15_16))) (= g_s17_18 (SET (mapplet g_s19_20 g_s18_19))) (mem g_s20_21 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s20_21 (binary_union e23 e22)) (mem g_s23_24 (|-->| BOOL NAT)) (= g_s23_24 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e25)))) (= g_s24_27 e26) (= g_s26_29 e28) (mem g_s28_30 NATURAL1) (= g_s28_30 e31) (= g_s29_32 (interval e0 g_s28_30)) (= g_s30_33 NATURAL) (mem g_s31_34 g_s30_33) (= g_s32_35 NATURAL) (= g_s33_36 INTEGER) (= g_s34_37 INTEGER) (= g_s35_38 NATURAL) (mem g_s36_39 NATURAL1) (mem g_s37_40 NAT1) (= g_s38_41 (interval e25 g_s28_30)) (subset g_s38_41 g_s29_32) (= g_s39_42 (interval e25 g_s37_40)) (= g_s40_43 INTEGER) (= g_s41_44 (interval e0 (|-i| (|**i| e31 g_s36_39) e25))) (mem g_s42_45 g_s40_43) (mem g_s43_46 g_s41_44) (= g_s36_39 e47) (mem g_s44_48 (|-->| g_s30_33 g_s40_43)) (= g_s44_48 e49) (mem g_s46_50 NATURAL1) (= g_s46_50 e25)))
(define-fun |def_seext| () Bool (and (= g_s47_51 TRUE) (= g_s48_52 FALSE) (= g_s49_53 e0) (= g_s50_54 e25) (= g_s51_55 e31) (= g_s52_57 e56) (= g_s53_59 e58) (= g_s54_60 e47) (= g_s55_62 e61) (= g_s56_64 e63) (= g_s57_66 e65) (= g_s58_68 e67) (= g_s59_70 e69) (= g_s60_72 e71) (= g_s61_74 e73) (= g_s62_76 e75) (= g_s63_78 e77) (= g_s64_80 e79) (= g_s65_82 e81) (= g_s66_84 e83) (= g_s67_86 e85) (= g_s68_88 e87) (= g_s69_90 e89) (= g_s70_92 e91) (= g_s71_94 e93) (= g_s72_96 e95) (= g_s73_98 e97) (= g_s74_100 e99) (= g_s75_102 e101) (= g_s76_104 e103) (= g_s77_106 e105) (= g_s78_108 e107) (= g_s79_110 e109) (= g_s80_112 e111) (= g_s81_114 e113) (= g_s82_116 e115) (= g_s83_118 e117) (= g_s84_120 e119) (= g_s85_122 e121) (= g_s86_124 e123) (= g_s87_126 e125) (= g_s88_128 e127) (= g_s89_130 e129) (= g_s90_132 e131) (= g_s91_134 e133) (= g_s92_136 e135) (= g_s93_138 e137) (= g_s94_140 e139) (= g_s95_142 e141) (= g_s96_144 e143) (= g_s97_146 e145) (= g_s98_148 e147) (= g_s99_150 e149) (= g_s100_152 e151) (= g_s101_154 e153) (= g_s102_156 e155) (= g_s103_158 e157) (= g_s104_160 e159) (= g_s105_162 e161) (= g_s106_164 e163) (= g_s107_166 e165) (= g_s108_168 e167) (mem g_s109_169 g_s8_9) (mem g_s110_170 g_s14_15) (mem g_s111_171 g_s14_15) (= g_s110_170 g_s15_16) (= g_s111_171 g_s16_17) (mem g_s112_172 g_s17_18) (mem g_s113_173 g_s17_18) (= g_s112_172 g_s18_19) (= g_s113_173 g_s19_20) (mem g_s114_174 g_s30_33) (= g_s114_174 g_s31_34)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (mem g_s115_175 g_s38_41) (= g_s116_176 INTEGER) (= g_s117_177 NATURAL) (= g_s118_178 INTEGER) (= g_s119_179 NATURAL) (= g_s120_180 INTEGER) (= g_s121_181 NATURAL) (= g_s122_182 NATURAL) (= g_s123_183 NATURAL) (= g_s124_184 NATURAL) (= g_s125_185 INTEGER) (= g_s126_186 INTEGER) (mem g_s127_187 g_s124_184) (mem g_s128_188 NATURAL) (= g_s129_189 (interval e0 g_s46_50)) (mem g_s130_190 g_s129_189) (mem g_s131_191 g_s129_189) (= g_s130_190 e0) (= g_s131_191 e25)))
(define-fun |def_abs| () Bool (and (mem g_s132_192 g_s10_11) (mem g_s133_193 g_s10_11) (mem g_s134_194 g_s10_11) (= g_s132_192 g_s11_12) (= g_s133_193 g_s12_13) (= g_s134_194 g_s13_14) (mem g_s135_195 g_s129_189) (mem g_s136_196 g_s129_189) (= g_s135_195 g_s130_190) (= g_s136_196 g_s131_191)))
(define-fun |def_inv| () Bool (and (= g_s132_192 g_s132$1_197) (= g_s133_193 g_s133$1_198) (= g_s134_194 g_s134$1_199) (= g_s135_195 g_s135$1_200) (= g_s136_196 g_s136$1_201)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s128_188 e31) (= g_s116_176 INTEGER) (= g_s117_177 NATURAL) (= g_s118_178 INTEGER) (= g_s119_179 NATURAL) (= g_s120_180 INTEGER) (= g_s121_181 NATURAL) (= g_s122_182 NATURAL) (= g_s123_183 NATURAL) (= g_s124_184 NATURAL) (= g_s125_185 INTEGER) (= g_s127_187 e0) (= g_s115_175 e25) (= g_s126_186 INTEGER) (= g_s130_190 e0) (= g_s131_191 e25) (= g_s129_189 (interval e0 g_s46_50))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 NATURAL)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 g_s46_50))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem e25 g_s38_41)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (and (|>=i| e25 e0) (|<=i| e25 g_s46_50))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem e31 NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)