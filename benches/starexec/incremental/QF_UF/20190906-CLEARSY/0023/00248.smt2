(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e55 () U)
(declare-fun e0 () U)
(declare-fun e54 () U)
(declare-fun e42 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun e169 () U)
(declare-fun e171 () U)
(declare-fun e173 () U)
(declare-fun e175 () U)
(declare-fun e177 () U)
(declare-fun e179 () U)
(declare-fun e181 () U)
(declare-fun e183 () U)
(declare-fun e185 () U)
(declare-fun e187 () U)
(declare-fun e189 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e213 () U)
(declare-fun e215 () U)
(declare-fun e217 () U)
(declare-fun e219 () U)
(declare-fun e221 () U)
(declare-fun e223 () U)
(declare-fun e225 () U)
(declare-fun e227 () U)
(declare-fun e229 () U)
(declare-fun e231 () U)
(declare-fun e233 () U)
(declare-fun e235 () U)
(declare-fun e237 () U)
(declare-fun e239 () U)
(declare-fun e241 () U)
(declare-fun e243 () U)
(declare-fun e245 () U)
(declare-fun e247 () U)
(declare-fun e249 () U)
(declare-fun e251 () U)
(declare-fun e253 () U)
(declare-fun e255 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_104 () U)
(declare-fun g_s101_105 () U)
(declare-fun g_s102_106 () U)
(declare-fun g_s103_107 () U)
(declare-fun g_s104_108 () U)
(declare-fun g_s105_109 () U)
(declare-fun g_s106_110 () U)
(declare-fun g_s107_111 () U)
(declare-fun g_s108_112 () U)
(declare-fun g_s109_113 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_114 () U)
(declare-fun g_s111_115 () U)
(declare-fun g_s112_116 () U)
(declare-fun g_s113_117 () U)
(declare-fun g_s114_118 () U)
(declare-fun g_s115_119 () U)
(declare-fun g_s116_120 () U)
(declare-fun g_s117_121 () U)
(declare-fun g_s118_122 () U)
(declare-fun g_s119_123 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_124 () U)
(declare-fun g_s121_125 () U)
(declare-fun g_s122_126 () U)
(declare-fun g_s123_127 () U)
(declare-fun g_s124_128 () U)
(declare-fun g_s125_129 () U)
(declare-fun g_s126_130 () U)
(declare-fun g_s127_131 () U)
(declare-fun g_s128_132 () U)
(declare-fun g_s129_133 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_134 () U)
(declare-fun g_s131_135 () U)
(declare-fun g_s132_136 () U)
(declare-fun g_s133_137 () U)
(declare-fun g_s134_138 () U)
(declare-fun g_s135_139 () U)
(declare-fun g_s136_140 () U)
(declare-fun g_s137_141 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_144 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_146 () U)
(declare-fun g_s141_148 () U)
(declare-fun g_s142_150 () U)
(declare-fun g_s143_152 () U)
(declare-fun g_s144_154 () U)
(declare-fun g_s145_156 () U)
(declare-fun g_s146_158 () U)
(declare-fun g_s147_160 () U)
(declare-fun g_s148_162 () U)
(declare-fun g_s149_164 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_166 () U)
(declare-fun g_s151_168 () U)
(declare-fun g_s152_170 () U)
(declare-fun g_s153_172 () U)
(declare-fun g_s154_174 () U)
(declare-fun g_s155_176 () U)
(declare-fun g_s156_178 () U)
(declare-fun g_s157_180 () U)
(declare-fun g_s158_182 () U)
(declare-fun g_s159_184 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_186 () U)
(declare-fun g_s161_188 () U)
(declare-fun g_s162_190 () U)
(declare-fun g_s163_192 () U)
(declare-fun g_s164_194 () U)
(declare-fun g_s165_196 () U)
(declare-fun g_s166_198 () U)
(declare-fun g_s167_200 () U)
(declare-fun g_s168_202 () U)
(declare-fun g_s169_204 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_206 () U)
(declare-fun g_s171_208 () U)
(declare-fun g_s172_210 () U)
(declare-fun g_s173_212 () U)
(declare-fun g_s174_214 () U)
(declare-fun g_s175_216 () U)
(declare-fun g_s176_218 () U)
(declare-fun g_s177_220 () U)
(declare-fun g_s178_222 () U)
(declare-fun g_s179_224 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_226 () U)
(declare-fun g_s181_228 () U)
(declare-fun g_s182_230 () U)
(declare-fun g_s183_232 () U)
(declare-fun g_s184_234 () U)
(declare-fun g_s185_236 () U)
(declare-fun g_s186_238 () U)
(declare-fun g_s187_240 () U)
(declare-fun g_s188_242 () U)
(declare-fun g_s189_244 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_246 () U)
(declare-fun g_s191_248 () U)
(declare-fun g_s192_250 () U)
(declare-fun g_s193_252 () U)
(declare-fun g_s194_254 () U)
(declare-fun g_s195_256 () U)
(declare-fun g_s196_257 () U)
(declare-fun g_s197_258 () U)
(declare-fun g_s198_259 () U)
(declare-fun g_s199_260 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_261 () U)
(declare-fun g_s201_262 () U)
(declare-fun g_s202_263 () U)
(declare-fun g_s203_264 () U)
(declare-fun g_s204_265 () U)
(declare-fun g_s205_266 () U)
(declare-fun g_s206_267 () U)
(declare-fun g_s207_268 () U)
(declare-fun g_s208_269 () U)
(declare-fun g_s209_270 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_271 () U)
(declare-fun g_s211_272 () U)
(declare-fun g_s212_273 () U)
(declare-fun g_s213_274 () U)
(declare-fun g_s214_275 () U)
(declare-fun g_s214$1_279 () U)
(declare-fun g_s214$2_282 () U)
(declare-fun g_s214$3_286 () U)
(declare-fun g_s214$4_288 () U)
(declare-fun g_s214$5_290 () U)
(declare-fun g_s215_276 () U)
(declare-fun g_s215$1_278 () U)
(declare-fun g_s215$2_284 () U)
(declare-fun g_s215$3_287 () U)
(declare-fun g_s215$4_289 () U)
(declare-fun g_s215$5_291 () U)
(declare-fun g_s216_277 () U)
(declare-fun g_s216$1_280 () U)
(declare-fun g_s216$2_285 () U)
(declare-fun g_s216$3_292 () U)
(declare-fun g_s217$1_281 () U)
(declare-fun g_s217$2_283 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s223_293 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_56 () U)
(declare-fun g_s53_58 () U)
(declare-fun g_s54_57 () U)
(declare-fun g_s55_59 () U)
(declare-fun g_s56_60 () U)
(declare-fun g_s57_61 () U)
(declare-fun g_s58_62 () U)
(declare-fun g_s59_63 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_64 () U)
(declare-fun g_s61_65 () U)
(declare-fun g_s62_66 () U)
(declare-fun g_s63_67 () U)
(declare-fun g_s64_68 () U)
(declare-fun g_s65_69 () U)
(declare-fun g_s66_70 () U)
(declare-fun g_s67_71 () U)
(declare-fun g_s68_73 () U)
(declare-fun g_s69_72 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_74 () U)
(declare-fun g_s71_75 () U)
(declare-fun g_s72_76 () U)
(declare-fun g_s75_79 () U)
(declare-fun g_s76_81 () U)
(declare-fun g_s78_83 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_84 () U)
(declare-fun g_s81_85 () U)
(declare-fun g_s82_86 () U)
(declare-fun g_s83_87 () U)
(declare-fun g_s84_88 () U)
(declare-fun g_s85_89 () U)
(declare-fun g_s86_90 () U)
(declare-fun g_s87_91 () U)
(declare-fun g_s88_92 () U)
(declare-fun g_s89_93 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_94 () U)
(declare-fun g_s91_95 () U)
(declare-fun g_s92_96 () U)
(declare-fun g_s93_97 () U)
(declare-fun g_s94_98 () U)
(declare-fun g_s95_99 () U)
(declare-fun g_s96_100 () U)
(declare-fun g_s97_101 () U)
(declare-fun g_s98_102 () U)
(declare-fun g_s99_103 () U)
(declare-fun e80 () U)
(declare-fun e82 () U)
(declare-fun e78 () U)
(declare-fun e77 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))))))))))))))))))) (= g_s24_25 (SET (mapplet g_s26_27 g_s25_26))) (= g_s27_28 (SET (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 g_s28_29))))) (not (= g_s32_33 empty)) (not (= g_s33_34 empty)) (not (= g_s34_35 empty)) (not (= g_s35_36 empty)) (not (= g_s36_37 empty)) (not (= g_s37_38 empty)) (not (= g_s38_39 empty)) (not (= g_s39_40 empty)) (mem g_s40_41 NATURAL1) (= g_s40_41 e42) (= g_s41_43 (interval e0 g_s40_41)) (= g_s42_44 NATURAL) (mem g_s43_45 g_s42_44) (= g_s44_46 NATURAL) (= g_s45_47 INTEGER) (= g_s46_48 INTEGER) (= g_s47_49 NATURAL) (subset g_s48_50 g_s4_5) (subset g_s49_51 g_s4_5) (subset g_s50_52 g_s4_5) (subset g_s51_53 g_s4_5) (= g_s52_56 (interval e55 e54)) (= g_s48_50 (SET (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))) (= g_s49_51 (SET (mapplet g_s10_11 (mapplet g_s9_10 g_s8_9)))) (= g_s50_52 (SET (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12)))))))) (= g_s51_53 (SET (mapplet g_s20_21 (mapplet g_s19_20 g_s18_19)))) (mem g_s53_58 g_s54_57) (= g_s55_59 INTEGER) (= g_s56_60 NATURAL) (= g_s57_61 INTEGER) (= g_s58_62 NATURAL) (= g_s59_63 INTEGER) (= g_s60_64 NATURAL) (= g_s61_65 NATURAL) (= g_s62_66 NATURAL) (= g_s63_67 NATURAL) (= g_s64_68 INTEGER) (= g_s65_69 INTEGER) (mem g_s66_70 g_s63_67) (mem g_s67_71 NATURAL) (= g_s68_73 (interval e0 g_s69_72)) (mem g_s70_74 g_s68_73) (mem g_s71_75 g_s68_73) (= g_s70_74 e0) (= g_s71_75 e54) (mem g_s72_76 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s72_76 (binary_union e78 e77)) (mem g_s75_79 (|-->| BOOL NAT)) (= g_s75_79 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e54)))) (= g_s76_81 e80) (= g_s78_83 e82)))
(define-fun |def_seext| () Bool (and (mem g_s80_84 g_s0_1) (mem g_s81_85 g_s0_1) (mem g_s82_86 g_s0_1) (= g_s80_84 g_s1_2) (= g_s81_85 g_s2_3) (= g_s82_86 g_s3_4) (mem g_s83_87 g_s68_73) (mem g_s84_88 g_s68_73) (= g_s83_87 g_s70_74) (= g_s84_88 g_s71_75) (mem g_s85_89 INTEGER) (mem g_s86_90 g_s68_73) (mem g_s87_91 g_s52_56) (mem g_s88_92 g_s52_56) (mem g_s89_93 g_s55_59) (mem g_s90_94 g_s55_59) (mem g_s91_95 g_s64_68) (mem g_s92_96 NATURAL) (mem g_s93_97 NATURAL) (mem g_s94_98 NATURAL) (mem g_s95_99 NATURAL) (mem g_s96_100 NATURAL) (mem g_s97_101 g_s44_46) (mem g_s98_102 NATURAL) (mem g_s99_103 NATURAL) (mem g_s100_104 g_s63_67) (mem g_s101_105 g_s63_67) (mem g_s102_106 g_s58_62) (mem g_s103_107 g_s64_68) (mem g_s104_108 g_s63_67) (mem g_s105_109 g_s63_67) (mem g_s106_110 NATURAL) (mem g_s107_111 NATURAL) (mem g_s108_112 NATURAL) (mem g_s109_113 NATURAL) (mem g_s110_114 g_s64_68) (mem g_s111_115 BOOL) (mem g_s112_116 NATURAL) (mem g_s113_117 NATURAL) (mem g_s114_118 g_s64_68) (mem g_s115_119 NATURAL1) (mem g_s116_120 g_s64_68) (mem g_s117_121 g_s64_68) (mem g_s118_122 g_s63_67) (mem g_s119_123 g_s63_67) (mem g_s120_124 g_s64_68) (mem g_s121_125 g_s64_68) (mem g_s122_126 g_s44_46) (mem g_s123_127 g_s63_67) (mem g_s124_128 g_s63_67) (mem g_s125_129 g_s44_46) (mem g_s126_130 g_s64_68) (mem g_s127_131 g_s64_68) (mem g_s128_132 NATURAL) (mem g_s129_133 NATURAL) (mem g_s130_134 g_s44_46) (mem g_s131_135 NATURAL) (mem g_s132_136 (|-->| g_s44_46 INTEGER)) (mem g_s133_137 BOOL) (|>i| g_s91_95 e0) (|>i| g_s121_125 e0) (|>i| g_s91_95 g_s121_125) (|>i| g_s120_124 e0) (|>i| g_s123_127 e0) (|>i| g_s124_128 e0) (|>i| g_s97_101 e0) (|<=i| g_s123_127 g_s124_128) (|<=i| g_s85_89 e0) (= g_s134_138 TRUE) (= g_s135_139 FALSE) (= g_s136_140 e0) (= g_s137_141 e54) (= g_s138_142 e42) (= g_s139_144 e143) (= g_s140_146 e145) (= g_s141_148 e147) (= g_s142_150 e149) (= g_s143_152 e151) (= g_s144_154 e153) (= g_s145_156 e155) (= g_s146_158 e157) (= g_s147_160 e159) (= g_s148_162 e161) (= g_s149_164 e163) (= g_s150_166 e165) (= g_s151_168 e167) (= g_s152_170 e169) (= g_s153_172 e171) (= g_s154_174 e173) (= g_s155_176 e175) (= g_s156_178 e177) (= g_s157_180 e179) (= g_s158_182 e181) (= g_s159_184 e183) (= g_s160_186 e185) (= g_s161_188 e187) (= g_s162_190 e189) (= g_s163_192 e191) (= g_s164_194 e193) (= g_s165_196 e195) (= g_s166_198 e197) (= g_s167_200 e199) (= g_s168_202 e201) (= g_s169_204 e203) (= g_s170_206 e205) (= g_s171_208 e207) (= g_s172_210 e209) (= g_s173_212 e211) (= g_s174_214 e213) (= g_s175_216 e215) (= g_s176_218 e217) (= g_s177_220 e219) (= g_s178_222 e221) (= g_s179_224 e223) (= g_s180_226 e225) (= g_s181_228 e227) (= g_s182_230 e229) (= g_s183_232 e231) (= g_s184_234 e233) (= g_s185_236 e235) (= g_s186_238 e237) (= g_s187_240 e239) (= g_s188_242 e241) (= g_s189_244 e243) (= g_s190_246 e245) (= g_s191_248 e247) (= g_s192_250 e249) (= g_s193_252 e251) (= g_s194_254 e253) (= g_s195_256 e255) (mem g_s196_257 (|-->| g_s68_73 (interval e55 e54))) (mem g_s197_258 BOOL) (mem g_s198_259 (|-->| g_s68_73 g_s4_5)) (mem g_s199_260 (|-->| g_s68_73 g_s0_1)) (mem g_s200_261 (|-->| g_s68_73 g_s55_59)) (mem g_s201_262 (|-->| g_s68_73 g_s55_59)) (subset g_s202_263 g_s68_73) (subset g_s203_264 g_s68_73) (subset g_s204_265 g_s68_73) (subset g_s205_266 g_s68_73) (mem g_s206_267 (|-->| g_s68_73 g_s4_5)) (subset g_s204_265 g_s203_264) (subset (ran g_s198_259) g_s50_52) (subset (ran g_s206_267) g_s49_51) (mem g_s207_268 g_s45_47) (mem g_s208_269 BOOL) (mem g_s209_270 BOOL) (mem g_s210_271 BOOL) (mem g_s211_272 BOOL) (mem g_s212_273 g_s58_62) (mem g_s213_274 g_s58_62)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset (ran g_s214_275) g_s48_50) (subset g_s215_276 g_s68_73) (mem g_s214_275 (|-->| g_s68_73 g_s4_5)) (subset g_s216_277 g_s68_73)))
(define-fun |def_inv| () Bool (and (= g_s215_276 g_s215$1_278) (= g_s214_275 g_s214$1_279) (= g_s216_277 g_s216$1_280)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (subset (ran g_s214$1_279) g_s48_50) (mem g_s217$1_281 BOOL) (subset g_s215$1_278 g_s68_73) (mem g_s214$1_279 (|-->| g_s68_73 g_s4_5)) (subset g_s216$1_280 g_s68_73)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (subset (ran g_s214$2_282) g_s48_50))
(define-fun lh_2 () Bool (mem g_s217$2_283 BOOL))
(define-fun lh_3 () Bool (subset g_s215$2_284 g_s68_73))
(define-fun lh_4 () Bool (mem g_s214$2_282 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_5 () Bool (subset g_s216$2_285 g_s68_73))
(define-fun lh_6 () Bool (= g_s215$2_284 empty))
(define-fun lh_7 () Bool (= g_s214$2_282 (set_prod g_s68_73 (SET g_s7_8))))
(define-fun lh_8 () Bool (= g_s216$2_285 empty))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (set_prod g_s68_73 (SET g_s7_8)) (|-->| g_s68_73 g_s4_5)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (subset empty g_s68_73))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (subset (ran (set_prod g_s68_73 (SET g_s7_8))) g_s48_50))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= empty g_s216$2_285))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= empty g_s215$2_284))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (set_prod g_s68_73 (SET g_s7_8)) g_s214$2_282))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s209_270 BOOL))
(define-fun lh_2 () Bool (= g_s209_270 FALSE))
(define-fun lh_3 () Bool (subset (ran g_s214$1_279) g_s48_50))
(define-fun lh_4 () Bool (mem g_s217$2_283 BOOL))
(define-fun lh_5 () Bool (subset g_s215$1_278 g_s68_73))
(define-fun lh_6 () Bool (mem g_s214$1_279 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_7 () Bool (subset g_s216$1_280 g_s68_73))
(define-fun lh_8 () Bool (= g_s217$2_283 TRUE))
(define-fun lh_9 () Bool (mem g_s83_87 g_s68_73))
(define-fun lh_10 () Bool (subset (ran g_s214$2_282) g_s48_50))
(define-fun lh_11 () Bool (subset g_s215$2_284 g_s68_73))
(define-fun lh_12 () Bool (mem g_s214$2_282 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_13 () Bool (mem g_s84_88 g_s68_73))
(define-fun lh_14 () Bool (subset (ran g_s214$3_286) g_s48_50))
(define-fun lh_15 () Bool (subset g_s215$3_287 g_s68_73))
(define-fun lh_16 () Bool (mem g_s214$3_286 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_17 () Bool (= (bool (mem g_s83_87 g_s215$3_287)) FALSE))
(define-fun lh_18 () Bool (not (mem g_s83_87 g_s215$3_287)))
(define-fun lh_19 () Bool (subset (ran g_s214$4_288) g_s48_50))
(define-fun lh_20 () Bool (subset g_s215$4_289 g_s68_73))
(define-fun lh_21 () Bool (mem g_s214$4_288 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_22 () Bool (= (bool (mem g_s84_88 g_s215$4_289)) FALSE))
(define-fun lh_23 () Bool (not (mem g_s84_88 g_s215$4_289)))
(define-fun lh_24 () Bool (subset (ran g_s214$5_290) g_s48_50))
(define-fun lh_25 () Bool (subset g_s215$5_291 g_s68_73))
(define-fun lh_26 () Bool (mem g_s214$5_290 (|-->| g_s68_73 g_s4_5)))
(define-fun lh_27 () Bool (=> (mem g_s83_87 g_s216$2_285) (mem g_s83_87 g_s203_264)))
(define-fun lh_28 () Bool (= (set_diff g_s216$2_285 (SET g_s83_87)) (set_diff g_s216$1_280 (SET g_s83_87))))
(define-fun lh_29 () Bool (subset g_s216$2_285 g_s68_73))
(define-fun lh_30 () Bool (=> (mem g_s84_88 g_s216$3_292) (mem g_s84_88 g_s203_264)))
(define-fun lh_31 () Bool (= (set_diff g_s216$3_292 (SET g_s84_88)) (set_diff g_s216$2_285 (SET g_s84_88))))
(define-fun lh_32 () Bool (subset g_s216$3_292 g_s68_73))
(define-fun lh_33 () Bool (mem g_s70_74 g_s216$3_292))
(define-fun lh_34 () Bool (mem g_s71_75 g_s216$3_292))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17) (not (mem g_s83_87 g_s215$3_287)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (not (mem g_s84_88 g_s215$4_289)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33) (mem g_s70_74 g_s203_264))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_34) (mem g_s71_75 g_s203_264))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s223_293 g_s68_73))
(assert (mem g_s223_293 g_s68_73))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s214$1_279 (|+->| (dom g_s214$1_279) (ran g_s214$1_279)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem g_s223_293 (dom g_s214$1_279))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)