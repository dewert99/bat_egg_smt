(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e93 () U)
(declare-fun e0 () U)
(declare-fun e33 () U)
(declare-fun e6 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s100_104 () U)
(declare-fun g_s101_105 () U)
(declare-fun g_s102_106 () U)
(declare-fun g_s103_107 () U)
(declare-fun g_s104_109 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_110 () U)
(declare-fun g_s107_111 () U)
(declare-fun g_s108_112 () U)
(declare-fun g_s109_113 () U)
(declare-fun g_s11_13 () U)
(declare-fun g_s110_114 () U)
(declare-fun g_s111_115 () U)
(declare-fun g_s112_116 () U)
(declare-fun g_s113_117 () U)
(declare-fun g_s114_118 () U)
(declare-fun g_s115_119 () U)
(declare-fun g_s115$1_126 () U)
(declare-fun g_s116_120 () U)
(declare-fun g_s116$1_127 () U)
(declare-fun g_s117_121 () U)
(declare-fun g_s117$1_128 () U)
(declare-fun g_s118_122 () U)
(declare-fun g_s118$1_129 () U)
(declare-fun g_s119_123 () U)
(declare-fun g_s119$1_125 () U)
(declare-fun g_s12_15 () U)
(declare-fun g_s121_124 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_30 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_35 () U)
(declare-fun g_s33_37 () U)
(declare-fun g_s35_38 () U)
(declare-fun g_s36_39 () U)
(declare-fun g_s37_40 () U)
(declare-fun g_s38_41 () U)
(declare-fun g_s39_42 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_43 () U)
(declare-fun g_s41_44 () U)
(declare-fun g_s42_46 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_47 () U)
(declare-fun g_s45_48 () U)
(declare-fun g_s46_49 () U)
(declare-fun g_s47_50 () U)
(declare-fun g_s48_51 () U)
(declare-fun g_s49_52 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s50_53 () U)
(declare-fun g_s51_54 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s53_56 () U)
(declare-fun g_s54_57 () U)
(declare-fun g_s55_58 () U)
(declare-fun g_s56_59 () U)
(declare-fun g_s57_60 () U)
(declare-fun g_s58_61 () U)
(declare-fun g_s59_62 () U)
(declare-fun g_s6_8 () U)
(declare-fun g_s60_63 () U)
(declare-fun g_s61_64 () U)
(declare-fun g_s62_65 () U)
(declare-fun g_s63_66 () U)
(declare-fun g_s64_67 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_69 () U)
(declare-fun g_s67_70 () U)
(declare-fun g_s68_71 () U)
(declare-fun g_s69_72 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s70_73 () U)
(declare-fun g_s71_74 () U)
(declare-fun g_s72_75 () U)
(declare-fun g_s73_76 () U)
(declare-fun g_s74_77 () U)
(declare-fun g_s75_78 () U)
(declare-fun g_s76_79 () U)
(declare-fun g_s77_80 () U)
(declare-fun g_s78_81 () U)
(declare-fun g_s79_82 () U)
(declare-fun g_s8_10 () U)
(declare-fun g_s80_83 () U)
(declare-fun g_s81_84 () U)
(declare-fun g_s82_85 () U)
(declare-fun g_s83_86 () U)
(declare-fun g_s84_87 () U)
(declare-fun g_s85_88 () U)
(declare-fun g_s86_89 () U)
(declare-fun g_s87_90 () U)
(declare-fun g_s88_91 () U)
(declare-fun g_s89_92 () U)
(declare-fun g_s9_11 () U)
(declare-fun g_s90_94 () U)
(declare-fun g_s91_95 () U)
(declare-fun g_s92_97 () U)
(declare-fun g_s93_96 () U)
(declare-fun g_s94_98 () U)
(declare-fun g_s95_99 () U)
(declare-fun g_s96_100 () U)
(declare-fun g_s97_101 () U)
(declare-fun g_s98_102 () U)
(declare-fun g_s99_103 () U)
(declare-fun e34 () U)
(declare-fun e36 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (mem g_s4_5 NATURAL1) (= g_s4_5 e6) (= g_s5_7 (interval e0 g_s4_5)) (= g_s6_8 NATURAL) (mem g_s7_9 g_s6_8) (= g_s8_10 NATURAL) (= g_s9_11 INTEGER) (= g_s10_12 INTEGER) (= g_s11_13 NATURAL) (mem g_s12_15 g_s13_14) (= g_s14_16 INTEGER) (= g_s15_17 NATURAL) (= g_s16_18 INTEGER) (= g_s17_19 NATURAL) (= g_s18_20 INTEGER) (= g_s19_21 NATURAL) (= g_s20_22 NATURAL) (= g_s21_23 NATURAL) (= g_s22_24 NATURAL) (= g_s23_25 INTEGER) (= g_s24_26 INTEGER) (mem g_s25_27 g_s22_24) (mem g_s26_28 NATURAL) (= g_s27_30 (interval e0 g_s28_29)) (mem g_s29_31 g_s27_30) (mem g_s30_32 g_s27_30) (= g_s29_31 e0) (= g_s30_32 e33) (= g_s31_35 e34) (= g_s33_37 e36)))
(define-fun |def_seext| () Bool (and (mem g_s35_38 g_s0_1) (mem g_s36_39 g_s0_1) (mem g_s37_40 g_s0_1) (= g_s35_38 g_s1_2) (= g_s36_39 g_s2_3) (= g_s37_40 g_s3_4) (mem g_s38_41 g_s27_30) (mem g_s39_42 g_s27_30) (= g_s38_41 g_s29_31) (= g_s39_42 g_s30_32) (mem g_s40_43 INTEGER) (mem g_s41_44 g_s27_30) (mem g_s42_46 g_s43_45) (mem g_s44_47 g_s43_45) (mem g_s45_48 g_s14_16) (mem g_s46_49 g_s14_16) (mem g_s47_50 g_s23_25) (mem g_s48_51 NATURAL) (mem g_s49_52 NATURAL) (mem g_s50_53 NATURAL) (mem g_s51_54 NATURAL) (mem g_s52_55 NATURAL) (mem g_s53_56 g_s8_10) (mem g_s54_57 NATURAL) (mem g_s55_58 NATURAL) (mem g_s56_59 g_s22_24) (mem g_s57_60 g_s22_24) (mem g_s58_61 g_s17_19) (mem g_s59_62 g_s23_25) (mem g_s60_63 g_s22_24) (mem g_s61_64 g_s22_24) (mem g_s62_65 NATURAL) (mem g_s63_66 NATURAL) (mem g_s64_67 NATURAL) (mem g_s65_68 NATURAL) (mem g_s66_69 g_s23_25) (mem g_s67_70 BOOL) (mem g_s68_71 NATURAL) (mem g_s69_72 NATURAL) (mem g_s70_73 g_s23_25) (mem g_s71_74 NATURAL1) (mem g_s72_75 g_s23_25) (mem g_s73_76 g_s23_25) (mem g_s74_77 g_s22_24) (mem g_s75_78 g_s22_24) (mem g_s76_79 g_s23_25) (mem g_s77_80 g_s23_25) (mem g_s78_81 g_s8_10) (mem g_s79_82 g_s22_24) (mem g_s80_83 g_s22_24) (mem g_s81_84 g_s8_10) (mem g_s82_85 g_s23_25) (mem g_s83_86 g_s23_25) (mem g_s84_87 NATURAL) (mem g_s85_88 NATURAL) (mem g_s86_89 g_s8_10) (mem g_s87_90 NATURAL) (mem g_s88_91 (|-->| g_s8_10 INTEGER)) (mem g_s89_92 BOOL) (|>i| g_s47_50 e0) (|>i| g_s77_80 e0) (|>i| g_s47_50 g_s77_80) (|>i| g_s76_79 e0) (|>i| g_s79_82 e0) (|>i| g_s80_83 e0) (|>i| g_s53_56 e0) (|<=i| g_s79_82 g_s80_83) (|<=i| g_s40_43 e0) (mem g_s90_94 (|-->| g_s27_30 (interval e93 e33))) (mem g_s91_95 BOOL) (mem g_s92_97 (|-->| g_s27_30 g_s93_96)) (mem g_s94_98 (|-->| g_s27_30 g_s0_1)) (mem g_s95_99 (|-->| g_s27_30 g_s14_16)) (mem g_s96_100 (|-->| g_s27_30 g_s14_16)) (subset g_s97_101 g_s27_30) (subset g_s98_102 g_s27_30) (subset g_s99_103 g_s27_30) (subset g_s100_104 g_s27_30) (mem g_s101_105 (|-->| g_s27_30 g_s93_96)) (subset g_s99_103 g_s98_102) (subset (ran g_s92_97) g_s102_106) (subset (ran g_s101_105) g_s103_107) (subset (ran g_s104_109) g_s105_108) (subset g_s106_110 g_s27_30) (mem g_s104_109 (|-->| g_s27_30 g_s93_96)) (subset g_s107_111 g_s27_30) (mem g_s108_112 g_s9_11) (mem g_s109_113 BOOL) (mem g_s110_114 BOOL) (mem g_s111_115 BOOL) (mem g_s112_116 BOOL) (mem g_s113_117 g_s17_19) (mem g_s114_118 g_s17_19)))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s115_119 (|-->| g_s27_30 NATURAL)) (mem g_s116_120 (|-->| g_s27_30 NATURAL)) (mem g_s117_121 (|-->| g_s27_30 NATURAL)) (mem g_s118_122 (|-->| g_s27_30 NATURAL)) (mem g_s119_123 (|-->| g_s27_30 g_s18_20)) (mem g_s115_119 (|-->| g_s27_30 g_s17_19)) (mem g_s116_120 (|-->| g_s27_30 g_s17_19)) (mem g_s117_121 (|-->| g_s27_30 g_s17_19)) (mem g_s118_122 (|-->| g_s27_30 g_s17_19))))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
(assert (not (mem g_s121_124 g_s107_111)))
(define-fun lh_1 () Bool (= (apply g_s119$1_125 g_s121_124) e0))
(define-fun lh_2 () Bool (= (apply g_s115$1_126 g_s121_124) e0))
(define-fun lh_3 () Bool (= (apply g_s116$1_127 g_s121_124) e0))
(define-fun lh_4 () Bool (= (apply g_s117$1_128 g_s121_124) e0))
; PO 1 in group 0
(push 1)
(assert (not (mem g_s119$1_125 (|+->| (dom g_s119$1_125) (ran g_s119$1_125)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem g_s121_124 (dom g_s119$1_125))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> lh_1 (mem g_s115$1_126 (|+->| (dom g_s115$1_126) (ran g_s115$1_126))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> lh_1 (mem g_s121_124 (dom g_s115$1_126)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s116$1_127 (|+->| (dom g_s116$1_127) (ran g_s116$1_127))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s121_124 (dom g_s116$1_127)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s117$1_128 (|+->| (dom g_s117$1_128) (ran g_s117$1_128))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s121_124 (dom g_s117$1_128)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s118$1_129 (|+->| (dom g_s118$1_129) (ran g_s118$1_129))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s121_124 (dom g_s118$1_129)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s119_123 (|+->| (dom g_s119_123) (ran g_s119_123)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem g_s121_124 (dom g_s119_123))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s115_119 (|+->| (dom g_s115_119) (ran g_s115_119)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem g_s121_124 (dom g_s115_119))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s116_120 (|+->| (dom g_s116_120) (ran g_s116_120)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem g_s121_124 (dom g_s116_120))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s117_121 (|+->| (dom g_s117_121) (ran g_s117_121)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s121_124 (dom g_s117_121))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s121_124 g_s27_30))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s118_122 (|+->| (dom g_s118_122) (ran g_s118_122)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (mem g_s121_124 (dom g_s118_122))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)