(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e23 () U)
(declare-fun e10 () U)
(declare-fun e64 () U)
(declare-fun e62 () U)
(declare-fun e65 () U)
(declare-fun e63 () U)
(declare-fun e66 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s11_13 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s13_15 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_24 () U)
(declare-fun g_s22_25 () U)
(declare-fun g_s23_26 () U)
(declare-fun g_s24_27 () U)
(declare-fun g_s25_28 () U)
(declare-fun g_s26_29 () U)
(declare-fun g_s27_30 () U)
(declare-fun g_s28_32 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_36 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_39 () U)
(declare-fun g_s37_57 () U)
(declare-fun g_s38_41 () U)
(declare-fun g_s39_58 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_51 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_59 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_60 () U)
(declare-fun g_s45_50 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_61 () U)
(declare-fun g_s48_48 () U)
(declare-fun g_s49_49 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s63_67 () U)
(declare-fun g_s64_68 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s71_70 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_11 () U)
(declare-fun e38 () U)
(declare-fun e40 () U)
(declare-fun e42 () U)
(declare-fun e44 () U)
(declare-fun e46 () U)
(declare-fun e56 () U)
(declare-fun e54 () U)
(declare-fun e31 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))) (mem g_s8_9 NATURAL1) (= g_s8_9 e10) (= g_s9_11 (interval e0 g_s8_9)) (= g_s10_12 NATURAL) (mem g_s11_13 g_s10_12) (= g_s12_14 NATURAL) (= g_s13_15 INTEGER) (= g_s14_16 INTEGER) (= g_s15_17 NATURAL) (= g_s16_18 INTEGER) (= g_s17_19 INTEGER) (= g_s18_20 NATURAL) (= g_s19_21 NATURAL) (mem g_s20_22 NAT1) (= g_s21_24 (interval e23 g_s20_22)) (= g_s22_25 NATURAL) (= g_s23_26 INTEGER) (= g_s24_27 NATURAL) (= g_s25_28 NATURAL) (mem g_s26_29 g_s25_28) (= g_s27_30 INTEGER) (= g_s28_32 e31) (mem g_s31_33 (|-->| g_s12_14 g_s24_27)) (mem g_s32_34 (|-->| g_s24_27 g_s12_14)) (mem g_s33_36 (|-->| g_s34_35 g_s24_27)) (mem g_s35_37 (|-->| g_s34_35 g_s12_14))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (= g_s36_39 e38) (= g_s38_41 e40) (= g_s41_43 e42) (= g_s43_45 e44) (= g_s46_47 e46)))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (mem g_s48_48 NAT1) (= g_s49_49 (interval e23 g_s48_48)) (= g_s45_50 INTEGER) (= g_s40_51 INTEGER) (= g_s50_52 INTEGER) (subset g_s51_53 (seq INTEGER)) (= g_s51_53 e54) (mem g_s36_39 (|-->| g_s13_15 g_s23_26)) (mem g_s38_41 (|-->| g_s40_51 INTEGER)) (= (apply g_s38_41 e0) e0) (mem g_s41_43 (|-->| (set_prod g_s23_26 g_s18_20) g_s45_50)) (= (image g_s41_43 (set_prod (SET e0) g_s18_20)) (SET e0)) (mem g_s43_45 (|-->| (set_prod g_s45_50 (set_diff g_s23_26 (SET e0))) g_s50_52)) (mem g_s46_47 (|-->| (set_prod (set_prod g_s23_26 g_s45_50) g_s18_20) g_s40_51)) (mem g_s52_55 (|+->| (set_prod (set_prod (set_prod (set_prod (set_prod (seq g_s25_28) (seq INTEGER)) NATURAL1) g_s25_28) NATURAL1) g_s25_28) INTEGER)) (= g_s52_55 e56)))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_sets|)
(define-fun lh_1 () Bool (mem g_s37_57 g_s13_15))
(define-fun lh_2 () Bool (= g_s36_39 e38))
(define-fun lh_3 () Bool (mem g_s39_58 g_s40_51))
(define-fun lh_4 () Bool (= g_s38_41 e40))
(define-fun lh_5 () Bool (mem g_s37_57 g_s23_26))
(define-fun lh_6 () Bool (mem g_s42_59 g_s18_20))
(define-fun lh_7 () Bool (= g_s41_43 e42))
(define-fun lh_8 () Bool (mem g_s44_60 g_s45_50))
(define-fun lh_9 () Bool (not (= g_s37_57 e0)))
(define-fun lh_10 () Bool (= g_s43_45 e44))
(define-fun lh_11 () Bool (mem g_s47_61 g_s18_20))
; PO 1 in group 0
(push 1)
(assert (not (=> lh_1 (|<=i| e0 e62))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_3) (not (= (|**i| e10 e62) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_3) (|<=i| e0 e62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_6) (not (= (|**i| e10 e63) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_6) (|<=i| e0 e63))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_7 lh_8 lh_9) (not (= (|**i| e10 e64) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_7 lh_8 lh_9) (|<=i| e0 e64))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_7 lh_8 lh_9) (|<=i| e0 e65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_7 lh_8 lh_10 lh_11) (not (= (|**i| e10 e66) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_2 lh_4 lh_5 lh_7 lh_8 lh_10 lh_11) (|<=i| e0 e66))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s63_67 g_s45_50))
(assert (mem g_s64_68 g_s23_26))
(assert (not (= g_s64_68 e0)))
(assert (mem g_s63_67 g_s45_50))
(assert (mem g_s64_68 g_s23_26))
(assert (not (= g_s64_68 e0)))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s43_45 (|+->| (dom g_s43_45) (ran g_s43_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem (mapplet g_s63_67 g_s64_68) (dom g_s43_45))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s64_68 g_s23_26))
(assert (mem g_s63_67 g_s45_50))
(assert (mem g_s67_69 g_s18_20))
(assert (mem g_s64_68 g_s23_26))
(assert (mem g_s63_67 g_s45_50))
(assert (mem g_s67_69 g_s18_20))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s46_47 (|+->| (dom g_s46_47) (ran g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem (mapplet (mapplet g_s64_68 g_s63_67) g_s67_69) (dom g_s46_47))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s64_68 g_s23_26))
(assert (mem g_s67_69 g_s18_20))
(assert (mem g_s64_68 g_s23_26))
(assert (mem g_s67_69 g_s18_20))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s41_43 (|+->| (dom g_s41_43) (ran g_s41_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem (mapplet g_s64_68 g_s67_69) (dom g_s41_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s64_68 g_s13_15))
(assert (mem g_s64_68 g_s13_15))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s36_39 (|+->| (dom g_s36_39) (ran g_s36_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s64_68 (dom g_s36_39))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s71_70 g_s40_51))
(assert (mem g_s71_70 g_s40_51))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s38_41 (|+->| (dom g_s38_41) (ran g_s38_41)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (mem g_s71_70 (dom g_s38_41))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)