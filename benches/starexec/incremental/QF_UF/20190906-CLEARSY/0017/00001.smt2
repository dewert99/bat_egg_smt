(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e23 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s22$1_34 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s23$1_36 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s24$1_37 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s25$1_44 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s26$1_38 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s27$1_39 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s28$1_40 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s29$1_41 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s30$1_42 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s31$1_43 () U)
(declare-fun g_s37_35 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (not (= g_s0_1 empty)) (= g_s1_2 (SET (mapplet g_s4_5 (mapplet g_s3_4 g_s2_3)))) (= g_s5_6 (SET (mapplet g_s8_9 (mapplet g_s7_8 g_s6_7)))) (= g_s9_10 (SET (mapplet g_s11_12 g_s10_11))) (= g_s12_13 (SET (mapplet g_s15_16 (mapplet g_s14_15 g_s13_14)))) (= g_s16_17 (SET (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 g_s17_18)))))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s21_22 INTEGER) (and (|>=i| g_s21_22 e0) (|<=i| g_s21_22 e23)) (mem g_s22_24 g_s0_1) (mem g_s23_25 g_s9_10) (mem g_s24_26 g_s9_10) (mem g_s25_27 BOOL) (mem g_s26_28 g_s5_6) (mem g_s27_29 g_s12_13) (mem g_s28_30 g_s12_13) (mem g_s29_31 g_s12_13) (mem g_s30_32 g_s16_17) (mem g_s31_33 BOOL) (=> (= g_s25_27 TRUE) (= g_s28_30 g_s14_15)) (=> (= g_s25_27 TRUE) (= g_s27_29 g_s14_15)) (=> (= g_s25_27 TRUE) (= g_s29_31 g_s14_15)) (not (or (= g_s27_29 g_s15_16) (= g_s28_30 g_s15_16) (= g_s29_31 g_s15_16))) (=> (not (= g_s26_28 g_s6_7)) (not (= g_s30_32 g_s17_18))) (=> (not (= g_s26_28 g_s6_7)) (not (= g_s30_32 g_s18_19))) (=> (not (= g_s26_28 g_s7_8)) (not (= g_s30_32 g_s19_20))) (=> (= g_s23_25 g_s11_12) (not (= g_s30_32 g_s17_18))) (=> (= g_s23_25 g_s11_12) (not (= g_s30_32 g_s18_19))) (=> (= g_s24_26 g_s11_12) (not (= g_s30_32 g_s19_20))) (=> (and (= g_s25_27 TRUE) (not (= g_s26_28 g_s7_8))) (not (= g_s30_32 g_s19_20)))))
(define-fun |def_ass| () Bool  (=> (= g_s25_27 TRUE) (and (= g_s28_30 g_s14_15) (= g_s27_29 g_s14_15) (= g_s29_31 g_s14_15))))
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool (and (not (= g_s0_1 empty)) (= g_s1_2 (SET (mapplet g_s4_5 (mapplet g_s3_4 g_s2_3)))) (= g_s5_6 (SET (mapplet g_s8_9 (mapplet g_s7_8 g_s6_7)))) (= g_s9_10 (SET (mapplet g_s11_12 g_s10_11))) (= g_s12_13 (SET (mapplet g_s15_16 (mapplet g_s14_15 g_s13_14)))) (= g_s16_17 (SET (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 g_s17_18)))))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(define-fun lh_1 () Bool (= g_s25_27 TRUE))
; PO 1 in group 0
(push 1)
(assert (not (=> lh_1 (= g_s28_30 g_s14_15))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> lh_1 (= g_s29_31 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> lh_1 (= g_s27_29 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s22$1_34 g_s0_1))
(define-fun lh_2 () Bool (= FALSE TRUE))
(define-fun lh_3 () Bool (not (= g_s8_9 g_s6_7)))
(define-fun lh_4 () Bool (not (= g_s8_9 g_s7_8)))
(define-fun lh_5 () Bool (= g_s10_11 g_s11_12))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_1 (and (|>=i| e0 e0) (|<=i| e0 e23)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (not (= g_s13_14 g_s15_16)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_3) (not (= g_s20_21 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_5) (not (= g_s20_21 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_3) (not (= g_s20_21 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_5) (not (= g_s20_21 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_4) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_5) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s13_14 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s37_35 g_s0_1))
(define-fun lh_2 () Bool (= g_s21_22 e0))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2) (and (|>=i| e23 e0) (|<=i| e23 e23)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s21_22 e23))
(define-fun lh_2 () Bool (mem g_s23$1_36 g_s9_10))
(define-fun lh_3 () Bool (mem g_s24$1_37 g_s9_10))
(define-fun lh_4 () Bool (mem g_s26$1_38 g_s5_6))
(define-fun lh_5 () Bool (mem g_s27$1_39 g_s12_13))
(define-fun lh_6 () Bool (mem g_s28$1_40 g_s12_13))
(define-fun lh_7 () Bool (mem g_s29$1_41 g_s12_13))
(define-fun lh_8 () Bool (mem g_s30$1_42 g_s16_17))
(define-fun lh_9 () Bool (=> (not (= g_s26$1_38 g_s6_7)) (not (= g_s30$1_42 g_s17_18))))
(define-fun lh_10 () Bool (=> (not (= g_s26$1_38 g_s6_7)) (not (= g_s30$1_42 g_s18_19))))
(define-fun lh_11 () Bool (=> (not (= g_s26$1_38 g_s7_8)) (not (= g_s30$1_42 g_s19_20))))
(define-fun lh_12 () Bool (=> (= g_s23$1_36 g_s11_12) (not (= g_s30$1_42 g_s17_18))))
(define-fun lh_13 () Bool (=> (= g_s23$1_36 g_s11_12) (not (= g_s30$1_42 g_s18_19))))
(define-fun lh_14 () Bool (=> (= g_s24$1_37 g_s11_12) (not (= g_s30$1_42 g_s19_20))))
(define-fun lh_15 () Bool (=> (= g_s25_27 TRUE) (and (= g_s28$1_40 g_s14_15) (= g_s27$1_39 g_s14_15) (= g_s29$1_41 g_s14_15))))
(define-fun lh_16 () Bool (not (or (= g_s27$1_39 g_s15_16) (= g_s28$1_40 g_s15_16) (= g_s29$1_41 g_s15_16))))
(define-fun lh_17 () Bool (=> (not (= g_s27_29 g_s13_14)) (= g_s27$1_39 g_s27_29)))
(define-fun lh_18 () Bool (=> (not (= g_s28_30 g_s13_14)) (= g_s28$1_40 g_s28_30)))
(define-fun lh_19 () Bool (=> (not (= g_s29_31 g_s13_14)) (= g_s29$1_41 g_s29_31)))
(define-fun lh_20 () Bool (=> (= g_s23_25 g_s11_12) (= g_s23$1_36 g_s11_12)))
(define-fun lh_21 () Bool (=> (= g_s24_26 g_s11_12) (= g_s24$1_37 g_s11_12)))
(define-fun lh_22 () Bool (mem g_s31$1_43 BOOL))
(define-fun lh_23 () Bool (= g_s25_27 TRUE))
(define-fun lh_24 () Bool (not (= g_s26$1_38 g_s6_7)))
(define-fun lh_25 () Bool (not (= g_s26$1_38 g_s7_8)))
(define-fun lh_26 () Bool (= g_s23$1_36 g_s11_12))
(define-fun lh_27 () Bool (= g_s24$1_37 g_s11_12))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (and (|>=i| e0 e0) (|<=i| e0 e23)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_24) (not (= g_s30$1_42 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_26) (not (= g_s30$1_42 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_24) (not (= g_s30$1_42 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_26) (not (= g_s30$1_42 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_25) (not (= g_s30$1_42 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_27) (not (= g_s30$1_42 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s28$1_40 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s29$1_41 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s27$1_39 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_25) (not (= g_s30$1_42 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s23$1_36 g_s9_10))
(define-fun lh_2 () Bool (mem g_s24$1_37 g_s9_10))
(define-fun lh_3 () Bool (mem g_s25$1_44 BOOL))
(define-fun lh_4 () Bool (=> (= g_s23_25 g_s11_12) (= g_s23$1_36 g_s11_12)))
(define-fun lh_5 () Bool (=> (= g_s24_26 g_s11_12) (= g_s24$1_37 g_s11_12)))
(define-fun lh_6 () Bool (=> (= g_s25_27 TRUE) (= g_s25$1_44 TRUE)))
(define-fun lh_7 () Bool (=> (= g_s25$1_44 TRUE) (and (= g_s28_30 g_s14_15) (= g_s27_29 g_s14_15) (= g_s29_31 g_s14_15))))
(define-fun lh_8 () Bool (= g_s25$1_44 TRUE))
(define-fun lh_9 () Bool (not (= g_s8_9 g_s6_7)))
(define-fun lh_10 () Bool (not (= g_s8_9 g_s7_8)))
(define-fun lh_11 () Bool (= g_s23$1_36 g_s11_12))
(define-fun lh_12 () Bool (= g_s24$1_37 g_s11_12))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (and (|>=i| e0 e0) (|<=i| e0 e23)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_9) (not (= g_s20_21 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_11) (not (= g_s20_21 g_s17_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_9) (not (= g_s20_21 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_11) (not (= g_s20_21 g_s18_19)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_10) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_12) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s28_30 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s29_31 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s27_29 g_s14_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_10) (not (= g_s20_21 g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)