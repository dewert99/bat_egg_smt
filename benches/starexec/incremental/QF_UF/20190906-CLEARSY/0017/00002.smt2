(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e70 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_44 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_46 () U)
(declare-fun g_s47_109 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s68$1_81 () U)
(declare-fun g_s69_71 () U)
(declare-fun g_s69$1_82 () U)
(declare-fun g_s69$2_95 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s70$1_83 () U)
(declare-fun g_s70$2_98 () U)
(declare-fun g_s71_73 () U)
(declare-fun g_s71$1_84 () U)
(declare-fun g_s71$2_99 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s72$1_85 () U)
(declare-fun g_s72$2_108 () U)
(declare-fun g_s73_75 () U)
(declare-fun g_s73$1_86 () U)
(declare-fun g_s73$2_100 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s74$1_87 () U)
(declare-fun g_s74$2_101 () U)
(declare-fun g_s75_77 () U)
(declare-fun g_s75$1_88 () U)
(declare-fun g_s75$2_102 () U)
(declare-fun g_s76_78 () U)
(declare-fun g_s76$1_89 () U)
(declare-fun g_s76$2_103 () U)
(declare-fun g_s77_79 () U)
(declare-fun g_s77$1_90 () U)
(declare-fun g_s77$2_104 () U)
(declare-fun g_s78_80 () U)
(declare-fun g_s78$1_91 () U)
(declare-fun g_s78$2_106 () U)
(declare-fun g_s79$1_92 () U)
(declare-fun g_s79$2_105 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80$1_93 () U)
(declare-fun g_s80$2_96 () U)
(declare-fun g_s81$1_94 () U)
(declare-fun g_s81$2_107 () U)
(declare-fun g_s87_97 () U)
(declare-fun g_s9_10 () U)
(declare-fun e48 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (= g_s0_1 (SET (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))))))))))))))))))))))))))))))) (= g_s37_38 (SET (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39)))))) (mem g_s43_45 (|-->>| g_s44_44 g_s0_1)) (mem g_s45_47 (|+->| g_s44_44 g_s46_46)) (= (dom g_s45_47) e48) (= (ran g_s45_47) g_s46_46) (mem g_s48_49 (|-->| g_s37_38 (POW g_s0_1))) (= g_s48_49 (SET (mapplet (mapplet g_s42_43 empty) (mapplet (mapplet g_s41_42 (SET (mapplet g_s17_18 g_s16_17))) (mapplet (mapplet g_s40_41 (SET (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 g_s1_2)))))))) (mapplet (mapplet g_s39_40 empty) (mapplet g_s38_39 (SET (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))))))))))))))))))))))))))))))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (not (= g_s44_44 empty)) (= g_s46_46 (SET (mapplet g_s51_52 (mapplet g_s50_51 g_s49_50)))) (= g_s52_53 (SET (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54)))) (= g_s56_57 (SET (mapplet g_s58_59 g_s57_58))) (= g_s59_60 (SET (mapplet g_s62_63 (mapplet g_s61_62 g_s60_61)))) (= g_s63_64 (SET (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 g_s64_65)))))))
(define-fun |def_abs| () Bool (and (mem g_s68_69 INTEGER) (and (|>=i| g_s68_69 e0) (|<=i| g_s68_69 e70)) (mem g_s69_71 g_s44_44) (mem g_s70_72 g_s56_57) (mem g_s71_73 g_s56_57) (mem g_s72_74 BOOL) (mem g_s73_75 g_s52_53) (mem g_s74_76 g_s59_60) (mem g_s75_77 g_s59_60) (mem g_s76_78 g_s59_60) (mem g_s77_79 g_s63_64) (mem g_s78_80 BOOL) (=> (= g_s72_74 TRUE) (= g_s75_77 g_s61_62)) (=> (= g_s72_74 TRUE) (= g_s74_76 g_s61_62)) (=> (= g_s72_74 TRUE) (= g_s76_78 g_s61_62)) (not (or (= g_s74_76 g_s62_63) (= g_s75_77 g_s62_63) (= g_s76_78 g_s62_63))) (=> (not (= g_s73_75 g_s53_54)) (not (= g_s77_79 g_s64_65))) (=> (not (= g_s73_75 g_s53_54)) (not (= g_s77_79 g_s65_66))) (=> (not (= g_s73_75 g_s54_55)) (not (= g_s77_79 g_s66_67))) (=> (= g_s70_72 g_s58_59) (not (= g_s77_79 g_s64_65))) (=> (= g_s70_72 g_s58_59) (not (= g_s77_79 g_s65_66))) (=> (= g_s71_73 g_s58_59) (not (= g_s77_79 g_s66_67))) (=> (and (= g_s72_74 TRUE) (not (= g_s73_75 g_s54_55))) (not (= g_s77_79 g_s66_67))) (=> (= g_s72_74 TRUE) (and (= g_s75_77 g_s61_62) (= g_s74_76 g_s61_62) (= g_s76_78 g_s61_62)))))
(define-fun |def_inv| () Bool (and (= g_s68_69 g_s68$1_81) (= g_s69_71 g_s69$1_82) (= g_s70_72 g_s70$1_83) (= g_s71_73 g_s71$1_84) (= g_s72_74 g_s72$1_85) (= g_s73_75 g_s73$1_86) (= g_s74_76 g_s74$1_87) (= g_s75_77 g_s75$1_88) (= g_s76_78 g_s76$1_89) (= g_s77_79 g_s77$1_90) (= g_s78_80 g_s78$1_91) (mem g_s79$1_92 g_s37_38) (mem g_s80$1_93 g_s0_1) (mem g_s81$1_94 g_s0_1) (=> (and (= g_s68$1_81 e70) (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42))) (= (apply g_s43_45 g_s69$1_82) g_s80$1_93)) (=> (= g_s74$1_87 g_s61_62) (not (= g_s79$1_92 g_s42_43)))))
(define-fun |def_ass| () Bool (and (= (apply g_s48_49 g_s38_39) (SET (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))))))))))))))))))))))))))))) (= (apply g_s48_49 g_s39_40) empty) (= (apply g_s48_49 g_s40_41) (SET (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 g_s1_2)))))))) (= (apply g_s48_49 g_s41_42) (SET (mapplet g_s17_18 g_s16_17))) (= (apply g_s48_49 g_s42_43) empty)))
(define-fun |def_sets| () Bool (and (= g_s0_1 (SET (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))))))))))))))))))))))))))))))) (= g_s37_38 (SET (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39))))))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
; PO 1 in group 0
(push 1)
(assert (not (= (apply g_s48_49 g_s38_39) (SET (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))))))))))))))))))))))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (= (apply g_s48_49 g_s40_41) (SET (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 g_s1_2))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (= (apply g_s48_49 g_s41_42) (SET (mapplet g_s17_18 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (= (apply g_s48_49 g_s42_43) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (= (apply g_s48_49 g_s39_40) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s69$2_95 g_s44_44))
(define-fun lh_2 () Bool (mem g_s80$2_96 g_s0_1))
(define-fun lh_3 () Bool (= e0 e70))
(define-fun lh_4 () Bool (or (= g_s38_39 g_s38_39) (= g_s38_39 g_s40_41) (= g_s38_39 g_s41_42)))
(define-fun lh_5 () Bool (= g_s60_61 g_s61_62))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (not (= g_s38_39 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s43_45 g_s69$2_95) g_s80$2_96))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s87_97 g_s44_44))
(define-fun lh_2 () Bool (= g_s68$1_81 e0))
(define-fun lh_3 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s68_69 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s68$1_81 e70))
(define-fun lh_2 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
(define-fun lh_3 () Bool (not (mem g_s80$1_93 (apply g_s48_49 g_s79$1_92))))
(define-fun lh_4 () Bool (not (= g_s73$1_86 g_s53_54)))
(define-fun lh_5 () Bool (not (= g_s73$1_86 g_s54_55)))
(define-fun lh_6 () Bool (= g_s70$1_83 g_s58_59))
(define-fun lh_7 () Bool (= g_s71$1_84 g_s58_59))
(define-fun lh_8 () Bool (= g_s72_74 TRUE))
(define-fun lh_9 () Bool (not (= g_s74_76 g_s60_61)))
(define-fun lh_10 () Bool (not (= g_s75_77 g_s60_61)))
(define-fun lh_11 () Bool (not (= g_s76_78 g_s60_61)))
(define-fun lh_12 () Bool (= e0 e70))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s68_69 e70))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (or (= g_s74$1_87 g_s62_63) (= g_s75$1_88 g_s62_63) (= g_s76$1_89 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (= g_s67_68 g_s64_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (not (= g_s67_68 g_s64_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (= g_s67_68 g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (not (= g_s67_68 g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (not (= g_s67_68 g_s66_67)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (not (= g_s67_68 g_s66_67)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (= g_s75$1_88 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_10) (= g_s75$1_88 g_s75_77))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (= g_s76$1_89 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11) (= g_s76$1_89 g_s76_78))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (= g_s74$1_87 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s74$1_87 g_s74_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12) (= (apply g_s43_45 g_s69$1_82) g_s80$1_93))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s68$1_81 e70))
(define-fun lh_2 () Bool (or (and (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)) (mem g_s80$1_93 (apply g_s48_49 g_s79$1_92))) (or (= g_s79$1_92 g_s42_43) (= g_s79$1_92 g_s39_40))))
(define-fun lh_3 () Bool (mem g_s70$2_98 g_s56_57))
(define-fun lh_4 () Bool (mem g_s71$2_99 g_s56_57))
(define-fun lh_5 () Bool (mem g_s73$2_100 g_s52_53))
(define-fun lh_6 () Bool (mem g_s74$2_101 g_s59_60))
(define-fun lh_7 () Bool (mem g_s75$2_102 g_s59_60))
(define-fun lh_8 () Bool (mem g_s76$2_103 g_s59_60))
(define-fun lh_9 () Bool (mem g_s77$2_104 g_s63_64))
(define-fun lh_10 () Bool (mem g_s79$2_105 g_s37_38))
(define-fun lh_11 () Bool (=> (not (= g_s73$2_100 g_s53_54)) (not (= g_s77$2_104 g_s64_65))))
(define-fun lh_12 () Bool (=> (not (= g_s73$2_100 g_s53_54)) (not (= g_s77$2_104 g_s65_66))))
(define-fun lh_13 () Bool (=> (not (= g_s73$2_100 g_s54_55)) (not (= g_s77$2_104 g_s66_67))))
(define-fun lh_14 () Bool (=> (= g_s70$2_98 g_s58_59) (not (= g_s77$2_104 g_s64_65))))
(define-fun lh_15 () Bool (=> (= g_s70$2_98 g_s58_59) (not (= g_s77$2_104 g_s65_66))))
(define-fun lh_16 () Bool (=> (= g_s71$2_99 g_s58_59) (not (= g_s77$2_104 g_s66_67))))
(define-fun lh_17 () Bool (=> (= g_s72$1_85 TRUE) (and (= g_s75$2_102 g_s61_62) (= g_s74$2_101 g_s61_62) (= g_s76$2_103 g_s61_62))))
(define-fun lh_18 () Bool (not (or (= g_s74$2_101 g_s62_63) (= g_s75$2_102 g_s62_63) (= g_s76$2_103 g_s62_63))))
(define-fun lh_19 () Bool (=> (not (= g_s74$1_87 g_s60_61)) (= g_s74$2_101 g_s74$1_87)))
(define-fun lh_20 () Bool (=> (not (= g_s75$1_88 g_s60_61)) (= g_s75$2_102 g_s75$1_88)))
(define-fun lh_21 () Bool (=> (not (= g_s76$1_89 g_s60_61)) (= g_s76$2_103 g_s76$1_89)))
(define-fun lh_22 () Bool (=> (= g_s70$1_83 g_s58_59) (= g_s70$2_98 g_s58_59)))
(define-fun lh_23 () Bool (=> (= g_s71$1_84 g_s58_59) (= g_s71$2_99 g_s58_59)))
(define-fun lh_24 () Bool (=> (= g_s74$2_101 g_s61_62) (not (= g_s79$2_105 g_s42_43))))
(define-fun lh_25 () Bool (=> (= g_s79$1_92 g_s40_41) (or (= g_s79$2_105 g_s40_41) (= g_s79$2_105 g_s42_43))))
(define-fun lh_26 () Bool (=> (= g_s79$1_92 g_s41_42) (= g_s79$2_105 g_s41_42)))
(define-fun lh_27 () Bool (=> (= g_s79$1_92 g_s42_43) (or (= g_s79$2_105 g_s42_43) (= g_s79$2_105 g_s38_39))))
(define-fun lh_28 () Bool (=> (= g_s79$1_92 g_s39_40) (or (= g_s79$2_105 g_s39_40) (= g_s79$2_105 g_s41_42) (= g_s79$2_105 g_s40_41))))
(define-fun lh_29 () Bool (=> (and (= g_s74$2_101 g_s60_61) (not (= g_s74$2_101 g_s74$1_87))) (and (= g_s79$1_92 g_s38_39) (= g_s79$2_105 g_s38_39))))
(define-fun lh_30 () Bool (=> (and (= g_s75$2_102 g_s60_61) (not (= g_s75$2_102 g_s75$1_88))) (and (= g_s79$1_92 g_s38_39) (= g_s79$2_105 g_s38_39))))
(define-fun lh_31 () Bool (=> (and (= g_s76$2_103 g_s60_61) (not (= g_s76$2_103 g_s76$1_89))) (and (= g_s79$1_92 g_s38_39) (= g_s79$2_105 g_s38_39))))
(define-fun lh_32 () Bool (mem g_s78$2_106 BOOL))
(define-fun lh_33 () Bool (or (= g_s81$2_107 g_s36_37) (= g_s81$2_107 g_s80$1_93)))
(define-fun lh_34 () Bool (not (= g_s73$2_100 g_s53_54)))
(define-fun lh_35 () Bool (not (= g_s73$2_100 g_s54_55)))
(define-fun lh_36 () Bool (= g_s70$2_98 g_s58_59))
(define-fun lh_37 () Bool (= g_s71$2_99 g_s58_59))
(define-fun lh_38 () Bool (= g_s72_74 TRUE))
(define-fun lh_39 () Bool (not (= g_s74_76 g_s60_61)))
(define-fun lh_40 () Bool (not (= g_s75_77 g_s60_61)))
(define-fun lh_41 () Bool (not (= g_s76_78 g_s60_61)))
(define-fun lh_42 () Bool (= e0 e70))
(define-fun lh_43 () Bool (or (= g_s79$2_105 g_s38_39) (= g_s79$2_105 g_s40_41) (= g_s79$2_105 g_s41_42)))
(define-fun lh_44 () Bool (= g_s74$2_101 g_s61_62))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33) (= g_s68_69 e70))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_44) (not (= g_s79$2_105 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34) (not (= g_s77$2_104 g_s64_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_36) (not (= g_s77$2_104 g_s64_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34) (not (= g_s77$2_104 g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_36) (not (= g_s77$2_104 g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_35) (not (= g_s77$2_104 g_s66_67)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_37) (not (= g_s77$2_104 g_s66_67)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_38) (= g_s75$2_102 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_40) (= g_s75$2_102 g_s75_77))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_38) (= g_s76$2_103 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_41) (= g_s76$2_103 g_s76_78))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_38) (= g_s74$2_101 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_39) (= g_s74$2_101 g_s74_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_42 lh_43) (= (apply g_s43_45 g_s69$1_82) g_s80$1_93))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s70$2_98 g_s56_57))
(define-fun lh_2 () Bool (mem g_s71$2_99 g_s56_57))
(define-fun lh_3 () Bool (mem g_s72$2_108 BOOL))
(define-fun lh_4 () Bool (mem g_s79$2_105 g_s37_38))
(define-fun lh_5 () Bool (=> (= g_s70$1_83 g_s58_59) (= g_s70$2_98 g_s58_59)))
(define-fun lh_6 () Bool (=> (= g_s71$1_84 g_s58_59) (= g_s71$2_99 g_s58_59)))
(define-fun lh_7 () Bool (=> (= g_s72$1_85 TRUE) (= g_s72$2_108 TRUE)))
(define-fun lh_8 () Bool (=> (= g_s72$2_108 TRUE) (and (= g_s75$1_88 g_s61_62) (= g_s74$1_87 g_s61_62) (= g_s76$1_89 g_s61_62))))
(define-fun lh_9 () Bool (=> (= g_s74$1_87 g_s61_62) (not (= g_s79$2_105 g_s42_43))))
(define-fun lh_10 () Bool (= g_s70_72 g_s58_59))
(define-fun lh_11 () Bool (= g_s71_73 g_s58_59))
(define-fun lh_12 () Bool (= g_s72_74 TRUE))
(define-fun lh_13 () Bool (= g_s72$2_108 TRUE))
(define-fun lh_14 () Bool (= e0 e70))
(define-fun lh_15 () Bool (or (= g_s79$2_105 g_s38_39) (= g_s79$2_105 g_s40_41) (= g_s79$2_105 g_s41_42)))
(define-fun lh_16 () Bool (= g_s74$1_87 g_s61_62))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_16) (not (= g_s79$2_105 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_12) (= g_s72$2_108 TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_13) (= g_s75_77 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (= g_s70$2_98 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_11) (= g_s71$2_99 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_13) (= g_s76_78 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_13) (= g_s74_76 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_14 lh_15) (= (apply g_s43_45 g_s69$1_82) g_s80$1_93))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_sets|)
(define-fun lh_1 () Bool (mem g_s43_45 (|-->>| g_s44_44 g_s0_1)))
(define-fun lh_2 () Bool (mem g_s45_47 (|+->| g_s44_44 g_s46_46)))
(define-fun lh_3 () Bool (mem g_s47_109 g_s44_44))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s43_45 (|+->| (dom g_s43_45) (ran g_s43_45))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s47_109 (dom g_s43_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (= g_s68_69 g_s68$1_81))
(define-fun lh_2 () Bool (= g_s69_71 g_s69$1_82))
(define-fun lh_3 () Bool (= g_s70_72 g_s70$1_83))
(define-fun lh_4 () Bool (= g_s71_73 g_s71$1_84))
(define-fun lh_5 () Bool (= g_s72_74 g_s72$1_85))
(define-fun lh_6 () Bool (= g_s73_75 g_s73$1_86))
(define-fun lh_7 () Bool (= g_s74_76 g_s74$1_87))
(define-fun lh_8 () Bool (= g_s75_77 g_s75$1_88))
(define-fun lh_9 () Bool (= g_s76_78 g_s76$1_89))
(define-fun lh_10 () Bool (= g_s77_79 g_s77$1_90))
(define-fun lh_11 () Bool (= g_s78_80 g_s78$1_91))
(define-fun lh_12 () Bool (mem g_s79$1_92 g_s37_38))
(define-fun lh_13 () Bool (mem g_s80$1_93 g_s0_1))
(define-fun lh_14 () Bool (mem g_s81$1_94 g_s0_1))
(define-fun lh_15 () Bool (= g_s68$1_81 e70))
(define-fun lh_16 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16) (mem g_s43_45 (|+->| (dom g_s43_45) (ran g_s43_45))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16) (mem g_s69$1_82 (dom g_s43_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(define-fun lh_1 () Bool (= (apply g_s48_49 g_s38_39) (SET (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))))))))))))))))))))))))))))))
(define-fun lh_2 () Bool (= (apply g_s48_49 g_s39_40) empty))
(define-fun lh_3 () Bool (= (apply g_s48_49 g_s40_41) (SET (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 g_s1_2)))))))))
(define-fun lh_4 () Bool (= (apply g_s48_49 g_s41_42) (SET (mapplet g_s17_18 g_s16_17))))
; PO 1 in group 8
(push 1)
(assert (not (mem g_s38_39 (dom g_s48_49))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> lh_1 (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> lh_1 (mem g_s39_40 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s40_41 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s41_42 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s42_43 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s87_97 g_s44_44))
(define-fun lh_2 () Bool (= g_s68$1_81 e0))
(define-fun lh_3 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s43_45 (|+->| (dom g_s43_45) (ran g_s43_45))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s87_97 (dom g_s43_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s68$1_81 e70))
(define-fun lh_2 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s79$1_92 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s68$1_81 e70))
(define-fun lh_2 () Bool (or (= g_s79$1_92 g_s38_39) (= g_s79$1_92 g_s40_41) (= g_s79$1_92 g_s41_42)))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s48_49 (|+->| (dom g_s48_49) (ran g_s48_49))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s79$1_92 (dom g_s48_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)