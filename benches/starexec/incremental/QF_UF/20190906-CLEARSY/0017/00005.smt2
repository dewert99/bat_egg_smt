(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e102 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_104 () U)
(declare-fun g_s100$1_125 () U)
(declare-fun g_s101_101 () U)
(declare-fun g_s101$1_116 () U)
(declare-fun g_s102_100 () U)
(declare-fun g_s102$1_126 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_109 () U)
(declare-fun g_s104$1_119 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s105$1_120 () U)
(declare-fun g_s105$2_139 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s106$1_121 () U)
(declare-fun g_s106$2_140 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s107$1_122 () U)
(declare-fun g_s107$2_141 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s108$1_127 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s109$1_117 () U)
(declare-fun g_s109$2_135 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_112 () U)
(declare-fun g_s110$1_118 () U)
(declare-fun g_s110$2_136 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s111$1_123 () U)
(declare-fun g_s112_114 () U)
(declare-fun g_s112$1_124 () U)
(declare-fun g_s113$1_133 () U)
(declare-fun g_s113$2_144 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s124_145 () U)
(declare-fun g_s13_13 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_15 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_17 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s94$1_128 () U)
(declare-fun g_s94$2_137 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s95$1_129 () U)
(declare-fun g_s95$2_138 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s96$1_130 () U)
(declare-fun g_s96$2_134 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s97$1_131 () U)
(declare-fun g_s97$2_142 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s98$1_132 () U)
(declare-fun g_s98$2_143 () U)
(declare-fun g_s99_103 () U)
(declare-fun g_s99$1_115 () U)
(declare-fun e94 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))))))) (subset g_s12_14 g_s13_13) (= g_s12_14 (set_diff g_s14_16 (SET g_s15_15))) (mem g_s16_18 (|-->| g_s17_17 BOOL)) (mem g_s18_19 (|+->| g_s17_17 g_s4_5)) (mem g_s19_20 (|-->| (set_prod g_s17_17 g_s4_5) BOOL))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s20_21 (SET (mapplet g_s23_24 (mapplet g_s22_23 g_s21_22)))) (= g_s13_13 (SET (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s15_15 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25))))))))))))))))))))))))))))))))))))) (= g_s59_60 (SET (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 (mapplet g_s61_62 g_s60_61)))))) (not (= g_s17_17 empty)) (= g_s65_66 (SET (mapplet g_s68_69 (mapplet g_s67_68 g_s66_67)))) (= g_s69_70 (SET (mapplet g_s72_73 (mapplet g_s71_72 g_s70_71)))) (= g_s73_74 (SET (mapplet g_s75_76 g_s74_75))) (= g_s76_77 (SET (mapplet g_s79_80 (mapplet g_s78_79 g_s77_78)))) (= g_s80_81 (SET (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 g_s81_82))))) (subset g_s85_86 g_s13_13) (subset g_s86_87 g_s13_13) (subset g_s14_16 g_s13_13) (subset g_s87_88 g_s13_13) (subset g_s88_89 g_s13_13) (subset g_s89_90 g_s13_13) (= g_s85_86 (SET (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 g_s33_34)))))) (= g_s86_87 (SET (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 g_s41_42)))))) (= g_s14_16 (set_diff (apply g_s90_91 g_s60_61) (binary_union g_s85_86 g_s86_87))) (= g_s87_88 (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 g_s54_55))))) (= g_s88_89 (set_diff (apply g_s90_91 g_s62_63) g_s87_88)) (= g_s89_90 (apply g_s90_91 g_s63_64)) (mem g_s91_92 (|-->>| g_s17_17 g_s13_13)) (mem g_s92_93 (|+->| g_s17_17 g_s65_66)) (= (dom g_s92_93) e94) (= (ran g_s92_93) g_s65_66) (mem g_s90_91 (|-->| g_s59_60 (POW g_s13_13))) (= g_s90_91 (SET (mapplet (mapplet g_s64_65 empty) (mapplet (mapplet g_s63_64 (SET (mapplet g_s40_41 g_s39_40))) (mapplet (mapplet g_s62_63 (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 g_s24_25)))))))) (mapplet (mapplet g_s61_62 empty) (mapplet g_s60_61 (SET (mapplet g_s15_15 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25))))))))))))))))))))))))))))))))))))))
(define-fun |def_abs| () Bool (and (mem g_s94_95 g_s20_21) (or (= g_s95_96 g_s70_71) (= g_s95_96 g_s71_72)) (mem g_s96_97 BOOL) (mem g_s97_98 BOOL) (mem g_s98_99 BOOL) (=> (and (= g_s99_103 e102) (or (= g_s100_104 g_s60_61) (= g_s100_104 g_s62_63) (= g_s100_104 g_s63_64))) (= (apply g_s91_92 g_s101_101) g_s102_100)) (= g_s103_105 (apply (SET (mapplet (mapplet TRUE g_s95_96) (mapplet FALSE g_s72_73))) (bool (and (= g_s94_95 g_s22_23) (= g_s96_97 TRUE))))) (=> (= g_s104_109 TRUE) (and (= g_s105_106 g_s78_79) (= g_s106_107 g_s78_79) (= g_s107_108 g_s78_79))) (mem g_s100_104 g_s59_60) (mem g_s102_100 g_s13_13) (mem g_s108_110 g_s13_13) (=> (and (= g_s99_103 e102) (or (= g_s100_104 g_s60_61) (= g_s100_104 g_s62_63) (= g_s100_104 g_s63_64))) (= (apply g_s91_92 g_s101_101) g_s102_100)) (=> (= g_s105_106 g_s78_79) (not (= g_s100_104 g_s64_65))) (mem g_s99_103 INTEGER) (and (|>=i| g_s99_103 e0) (|<=i| g_s99_103 e102)) (mem g_s101_101 g_s17_17) (mem g_s109_111 g_s73_74) (mem g_s110_112 g_s73_74) (mem g_s104_109 BOOL) (mem g_s103_105 g_s69_70) (mem g_s105_106 g_s76_77) (mem g_s106_107 g_s76_77) (mem g_s107_108 g_s76_77) (mem g_s111_113 g_s80_81) (mem g_s112_114 BOOL) (=> (= g_s104_109 TRUE) (= g_s106_107 g_s78_79)) (=> (= g_s104_109 TRUE) (= g_s105_106 g_s78_79)) (=> (= g_s104_109 TRUE) (= g_s107_108 g_s78_79)) (not (or (= g_s105_106 g_s79_80) (= g_s106_107 g_s79_80) (= g_s107_108 g_s79_80))) (=> (not (= g_s103_105 g_s70_71)) (not (= g_s111_113 g_s81_82))) (=> (not (= g_s103_105 g_s70_71)) (not (= g_s111_113 g_s82_83))) (=> (not (= g_s103_105 g_s71_72)) (not (= g_s111_113 g_s83_84))) (=> (= g_s109_111 g_s75_76) (not (= g_s111_113 g_s81_82))) (=> (= g_s109_111 g_s75_76) (not (= g_s111_113 g_s82_83))) (=> (= g_s110_112 g_s75_76) (not (= g_s111_113 g_s83_84))) (=> (and (= g_s104_109 TRUE) (not (= g_s103_105 g_s71_72))) (not (= g_s111_113 g_s83_84))) (= g_s14_16 (SET (mapplet g_s15_15 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))))))))))))))))))) (= g_s88_89 (SET (mapplet g_s53_54 (mapplet g_s52_53 g_s24_25)))) (= g_s89_90 (SET (mapplet g_s40_41 g_s39_40))) (= (bool (= g_s103_105 g_s70_71)) (bool (and (= g_s94_95 g_s22_23) (= g_s95_96 g_s70_71) (= g_s96_97 TRUE)))) (= (bool (= g_s103_105 g_s71_72)) (bool (and (= g_s94_95 g_s22_23) (= g_s95_96 g_s71_72) (= g_s96_97 TRUE)))) (= (bool (= g_s103_105 g_s72_73)) (bool (not (and (= g_s94_95 g_s22_23) (= g_s96_97 TRUE))))) (= (apply g_s90_91 g_s60_61) (SET (mapplet g_s15_15 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))))))))))))))))))))))))))))) (= (apply g_s90_91 g_s61_62) empty) (= (apply g_s90_91 g_s62_63) (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 g_s24_25)))))))) (= (apply g_s90_91 g_s63_64) (SET (mapplet g_s40_41 g_s39_40))) (= (apply g_s90_91 g_s64_65) empty) (=> (= g_s104_109 TRUE) (and (= g_s106_107 g_s78_79) (= g_s105_106 g_s78_79) (= g_s107_108 g_s78_79)))))
(define-fun |def_inv| () Bool (and (= g_s99_103 g_s99$1_115) (= g_s101_101 g_s101$1_116) (= g_s109_111 g_s109$1_117) (= g_s110_112 g_s110$1_118) (= g_s104_109 g_s104$1_119) (= g_s105_106 g_s105$1_120) (= g_s106_107 g_s106$1_121) (= g_s107_108 g_s107$1_122) (= g_s111_113 g_s111$1_123) (= g_s112_114 g_s112$1_124) (= g_s100_104 g_s100$1_125) (= g_s102_100 g_s102$1_126) (= g_s108_110 g_s108$1_127) (= g_s94_95 g_s94$1_128) (= g_s95_96 g_s95$1_129) (= g_s96_97 g_s96$1_130) (= g_s97_98 g_s97$1_131) (= g_s98_99 g_s98$1_132) (mem g_s113$1_133 g_s0_1) (=> (not (= g_s113$1_133 g_s3_4)) (and (= g_s106$1_121 g_s78_79) (= g_s105$1_120 g_s78_79) (= g_s107$1_122 g_s78_79)))))
(define-fun |def_ass| () Bool  (= g_s12_14 (SET (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25))))))))))))))))))))
(define-fun |def_sets| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6))))))))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
; PO 1 in group 0
(assert (not (= g_s12_14 (SET (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))))))))))))))))))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s60_61))
(define-fun lh_3 () Bool (mem g_s102$1_126 g_s12_14))
(define-fun lh_4 () Bool (= g_s109_111 g_s75_76))
(define-fun lh_5 () Bool (= g_s110_112 g_s75_76))
(define-fun lh_6 () Bool (not (= g_s105_106 g_s77_78)))
(define-fun lh_7 () Bool (not (= g_s106_107 g_s77_78)))
(define-fun lh_8 () Bool (not (= g_s107_108 g_s77_78)))
(define-fun lh_9 () Bool (= g_s104_109 TRUE))
(define-fun lh_10 () Bool (= g_s97_98 FALSE))
(define-fun lh_11 () Bool (= g_s98_99 FALSE))
(define-fun lh_12 () Bool (mem g_s96$2_134 BOOL))
(define-fun lh_13 () Bool (mem g_s109$2_135 g_s73_74))
(define-fun lh_14 () Bool (=> (= g_s109$1_117 g_s75_76) (= g_s109$2_135 g_s75_76)))
(define-fun lh_15 () Bool (mem g_s110$2_136 g_s73_74))
(define-fun lh_16 () Bool (=> (= g_s110$1_118 g_s75_76) (= g_s110$2_136 g_s75_76)))
(define-fun lh_17 () Bool (mem g_s94$2_137 g_s20_21))
(define-fun lh_18 () Bool (or (= g_s95$2_138 g_s70_71) (= g_s95$2_138 g_s71_72)))
(define-fun lh_19 () Bool (mem g_s105$2_139 g_s76_77))
(define-fun lh_20 () Bool (mem g_s106$2_140 g_s76_77))
(define-fun lh_21 () Bool (mem g_s107$2_141 g_s76_77))
(define-fun lh_22 () Bool (=> (not (= g_s105$1_120 g_s77_78)) (= g_s105$2_139 g_s105$1_120)))
(define-fun lh_23 () Bool (=> (not (= g_s106$1_121 g_s77_78)) (= g_s106$2_140 g_s106$1_121)))
(define-fun lh_24 () Bool (=> (not (= g_s107$1_122 g_s77_78)) (= g_s107$2_141 g_s107$1_122)))
(define-fun lh_25 () Bool (=> (= g_s104$1_119 TRUE) (and (= g_s106$2_140 g_s78_79) (= g_s105$2_139 g_s78_79) (= g_s107$2_141 g_s78_79))))
(define-fun lh_26 () Bool (not (or (= g_s105$2_139 g_s79_80) (= g_s106$2_140 g_s79_80) (= g_s107$2_141 g_s79_80))))
(define-fun lh_27 () Bool (mem g_s97$2_142 BOOL))
(define-fun lh_28 () Bool (=> (= g_s97$1_131 FALSE) (= g_s97$2_142 FALSE)))
(define-fun lh_29 () Bool (mem g_s98$2_143 BOOL))
(define-fun lh_30 () Bool (=> (= g_s98$1_132 FALSE) (= g_s98$2_143 FALSE)))
(define-fun lh_31 () Bool (not (= g_s113$1_133 g_s3_4)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (or (= g_s95$1_129 g_s70_71) (= g_s95$1_129 g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= FALSE g_s97$1_131))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= FALSE g_s98$1_132))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s21_22 g_s94$1_128))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s102_100 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (or (= g_s105$1_120 g_s79_80) (= g_s106$1_121 g_s79_80) (= g_s107$1_122 g_s79_80))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s106$1_121 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (= g_s106$1_121 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s109$1_117 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (= g_s110$1_118 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_10) (= g_s97$1_131 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11) (= g_s98$1_132 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s107$1_122 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (= g_s107$1_122 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s105$1_120 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (= g_s105$1_120 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (or (= g_s95$1_129 g_s70_71) (= g_s95$1_129 g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s96_97 g_s96$2_134))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s109_111 g_s109$2_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s110_112 g_s110$2_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s102_100 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s94_95 g_s21_22))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16) (not (or (= g_s105$1_120 g_s79_80) (= g_s106$1_121 g_s79_80) (= g_s107$1_122 g_s79_80))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s106$1_121 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s106$1_121 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s109$2_135 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s110$2_136 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s107$1_122 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s107$1_122 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s105$1_120 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6 lh_12 lh_13 lh_14 lh_15 lh_16) (= g_s105$1_120 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= FALSE g_s97$2_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= FALSE g_s98$2_143))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s21_22 g_s94$2_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s58_59 g_s102$1_126))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s96_97 g_s96$2_134))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s106_107 g_s106$2_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s95_96 g_s95$2_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 47 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s109_111 g_s109$2_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 48 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s110_112 g_s110$2_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 49 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s97_98 g_s97$2_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 50 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s98_99 g_s98$2_143))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 51 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s107_108 g_s107$2_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 52 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s94_95 g_s94$2_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 53 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 54 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s105_106 g_s105$2_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 55 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s106$2_140 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 56 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31) (= g_s106$2_140 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 57 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s106$2_140 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 58 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s109$2_135 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 59 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s110$2_136 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 60 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_10 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s97$2_142 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 61 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s98$2_143 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 62 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s107$2_141 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 63 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31) (= g_s107$2_141 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 64 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s107$2_141 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 65 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s105$2_139 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 66 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31) (= g_s105$2_139 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 67 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30) (= g_s105$2_139 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s60_61))
(define-fun lh_3 () Bool (= g_s102$1_126 g_s15_15))
(define-fun lh_4 () Bool (= (apply g_s16_18 g_s101$1_116) TRUE))
(define-fun lh_5 () Bool (= g_s94$1_128 g_s22_23))
(define-fun lh_6 () Bool (= g_s95$1_129 g_s70_71))
(define-fun lh_7 () Bool (= g_s113$1_133 g_s3_4))
(define-fun lh_8 () Bool (= (apply g_s19_20 (mapplet g_s101$1_116 g_s10_11)) TRUE))
(define-fun lh_9 () Bool (= g_s106$1_121 g_s78_79))
(define-fun lh_10 () Bool (= g_s105$1_120 g_s78_79))
(define-fun lh_11 () Bool (= g_s107$1_122 g_s78_79))
(define-fun lh_12 () Bool (or (= g_s113$2_144 g_s1_2) (= g_s113$2_144 g_s2_3)))
(define-fun lh_13 () Bool (= g_s109_111 g_s75_76))
(define-fun lh_14 () Bool (= g_s110_112 g_s75_76))
(define-fun lh_15 () Bool (not (= g_s105_106 g_s77_78)))
(define-fun lh_16 () Bool (not (= g_s106_107 g_s77_78)))
(define-fun lh_17 () Bool (not (= g_s107_108 g_s77_78)))
(define-fun lh_18 () Bool (= g_s97_98 FALSE))
(define-fun lh_19 () Bool (= g_s98_99 FALSE))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (or (= g_s95$1_129 g_s70_71) (= g_s95$1_129 g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= FALSE g_s97$1_131))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= FALSE g_s98$1_132))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s21_22 g_s94$1_128))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s58_59 g_s15_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s102_100 g_s15_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (not (or (= g_s105$1_120 g_s79_80) (= g_s106$1_121 g_s79_80) (= g_s107$1_122 g_s79_80))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_16) (= g_s106$1_121 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13) (= g_s109$1_117 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_14) (= g_s110$1_118 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_18) (= g_s97$1_131 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_19) (= g_s98$1_132 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_17) (= g_s107$1_122 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_15) (= g_s105$1_120 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s60_61))
(define-fun lh_3 () Bool (= g_s102$1_126 g_s15_15))
(define-fun lh_4 () Bool (not (and (= (apply g_s16_18 g_s101$1_116) TRUE) (= g_s94$1_128 g_s22_23) (= g_s95$1_129 g_s70_71) (= g_s113$1_133 g_s3_4) (= (apply g_s19_20 (mapplet g_s101$1_116 g_s10_11)) TRUE))))
(define-fun lh_5 () Bool (= g_s109_111 g_s75_76))
(define-fun lh_6 () Bool (= g_s110_112 g_s75_76))
(define-fun lh_7 () Bool (not (= g_s105_106 g_s77_78)))
(define-fun lh_8 () Bool (not (= g_s106_107 g_s77_78)))
(define-fun lh_9 () Bool (not (= g_s107_108 g_s77_78)))
(define-fun lh_10 () Bool (= g_s104_109 TRUE))
(define-fun lh_11 () Bool (= g_s97_98 FALSE))
(define-fun lh_12 () Bool (= g_s98_99 FALSE))
(define-fun lh_13 () Bool (mem g_s96$2_134 BOOL))
(define-fun lh_14 () Bool (mem g_s109$2_135 g_s73_74))
(define-fun lh_15 () Bool (=> (= g_s109$1_117 g_s75_76) (= g_s109$2_135 g_s75_76)))
(define-fun lh_16 () Bool (mem g_s110$2_136 g_s73_74))
(define-fun lh_17 () Bool (=> (= g_s110$1_118 g_s75_76) (= g_s110$2_136 g_s75_76)))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (or (= g_s95$1_129 g_s70_71) (= g_s95$1_129 g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= FALSE g_s97$1_131))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= FALSE g_s98$1_132))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s21_22 g_s94$1_128))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s102_100 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (or (= g_s105$1_120 g_s79_80) (= g_s106$1_121 g_s79_80) (= g_s107$1_122 g_s79_80))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10) (= g_s106$1_121 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_8) (= g_s106$1_121 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s109$1_117 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_6) (= g_s110$1_118 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_11) (= g_s97$1_131 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_12) (= g_s98$1_132 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10) (= g_s107$1_122 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_9) (= g_s107$1_122 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10) (= g_s105$1_120 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_7) (= g_s105$1_120 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (or (= g_s95$1_129 g_s70_71) (= g_s95$1_129 g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (mem g_s102_100 g_s14_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s96_97 g_s96$2_134))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s100_104 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s109_111 g_s109$2_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s110_112 g_s110$2_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s102_100 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s94_95 g_s21_22))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s99_103 e102))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_13 lh_14 lh_15 lh_16 lh_17) (not (or (= g_s105$1_120 g_s79_80) (= g_s106$1_121 g_s79_80) (= g_s107$1_122 g_s79_80))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s106$1_121 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_8 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s106$1_121 g_s106_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s109$2_135 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_6 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s110$2_136 g_s75_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s107$1_122 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_9 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s107$1_122 g_s107_108))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_10 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s105$1_120 g_s78_79))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_7 lh_13 lh_14 lh_15 lh_16 lh_17) (= g_s105$1_120 g_s105_106))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s60_61))
(define-fun lh_3 () Bool (= g_s102$1_126 g_s15_15))
(define-fun lh_4 () Bool (= (apply g_s16_18 g_s101$1_116) TRUE))
(define-fun lh_5 () Bool (= g_s94$1_128 g_s22_23))
(define-fun lh_6 () Bool (= g_s95$1_129 g_s70_71))
(define-fun lh_7 () Bool (= g_s113$1_133 g_s3_4))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s16_18 (|+->| (dom g_s16_18) (ran g_s16_18))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s101$1_116 (dom g_s16_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s19_20 (|+->| (dom g_s19_20) (ran g_s19_20))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet g_s101$1_116 g_s10_11) (dom g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s60_61))
(define-fun lh_3 () Bool (= g_s102$1_126 g_s15_15))
(define-fun lh_4 () Bool (= (apply g_s16_18 g_s101$1_116) TRUE))
(define-fun lh_5 () Bool (= g_s94$1_128 g_s22_23))
(define-fun lh_6 () Bool (= g_s95$1_129 g_s70_71))
(define-fun lh_7 () Bool (= g_s113$1_133 g_s3_4))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s16_18 (|+->| (dom g_s16_18) (ran g_s16_18))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s101$1_116 (dom g_s16_18)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s19_20 (|+->| (dom g_s19_20) (ran g_s19_20))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet g_s101$1_116 g_s10_11) (dom g_s19_20)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s124_145 g_s17_17))
(define-fun lh_2 () Bool (= g_s99$1_115 e0))
(define-fun lh_3 () Bool (or (= g_s100$1_125 g_s60_61) (= g_s100$1_125 g_s62_63) (= g_s100$1_125 g_s63_64)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s91_92 (|+->| (dom g_s91_92) (ran g_s91_92))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s124_145 (dom g_s91_92)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (or (= g_s100$1_125 g_s60_61) (= g_s100$1_125 g_s62_63) (= g_s100$1_125 g_s63_64)))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s90_91 (|+->| (dom g_s90_91) (ran g_s90_91))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s100$1_125 (dom g_s90_91)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (or (= g_s100$1_125 g_s60_61) (= g_s100$1_125 g_s62_63) (= g_s100$1_125 g_s63_64)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s90_91 (|+->| (dom g_s90_91) (ran g_s90_91))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s100$1_125 (dom g_s90_91)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s99$1_115 e102))
(define-fun lh_2 () Bool (= g_s100$1_125 g_s63_64))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s90_91 (|+->| (dom g_s90_91) (ran g_s90_91))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s63_64 (dom g_s90_91)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)