(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e86 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s106_129 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s78$1_112 () U)
(declare-fun g_s78$2_120 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s79$1_113 () U)
(declare-fun g_s79$2_121 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s80$1_114 () U)
(declare-fun g_s80$2_117 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s81$1_115 () U)
(declare-fun g_s81$2_125 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s82$1_116 () U)
(declare-fun g_s82$2_126 () U)
(declare-fun g_s83_87 () U)
(declare-fun g_s83$1_99 () U)
(declare-fun g_s84_88 () U)
(declare-fun g_s84$1_109 () U)
(declare-fun g_s84$2_128 () U)
(declare-fun g_s85_85 () U)
(declare-fun g_s85$1_100 () U)
(declare-fun g_s86_84 () U)
(declare-fun g_s86$1_110 () U)
(declare-fun g_s87_89 () U)
(declare-fun g_s88_93 () U)
(declare-fun g_s88$1_103 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s89$1_104 () U)
(declare-fun g_s89$2_122 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s90$1_105 () U)
(declare-fun g_s90$2_123 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s91$1_106 () U)
(declare-fun g_s91$2_124 () U)
(declare-fun g_s92_94 () U)
(declare-fun g_s92$1_111 () U)
(declare-fun g_s92$2_127 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s93$1_101 () U)
(declare-fun g_s93$2_118 () U)
(declare-fun g_s94_96 () U)
(declare-fun g_s94$1_102 () U)
(declare-fun g_s94$2_119 () U)
(declare-fun g_s95_97 () U)
(declare-fun g_s95$1_107 () U)
(declare-fun g_s96_98 () U)
(declare-fun g_s96$1_108 () U)
(declare-fun e78 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s0_1 (SET (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))) (= g_s4_5 (SET (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6))))))))))))))))))))))))))))))))))))) (= g_s41_42 (SET (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 g_s42_43)))))) (not (= g_s47_48 empty)) (= g_s48_49 (SET (mapplet g_s51_52 (mapplet g_s50_51 g_s49_50)))) (= g_s52_53 (SET (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54)))) (= g_s56_57 (SET (mapplet g_s58_59 g_s57_58))) (= g_s59_60 (SET (mapplet g_s62_63 (mapplet g_s61_62 g_s60_61)))) (= g_s63_64 (SET (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 g_s64_65))))) (subset g_s68_69 g_s4_5) (subset g_s69_70 g_s4_5) (subset g_s70_71 g_s4_5) (subset g_s71_72 g_s4_5) (subset g_s72_73 g_s4_5) (subset g_s73_74 g_s4_5) (= g_s68_69 (SET (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 g_s14_15)))))) (= g_s69_70 (SET (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 g_s22_23)))))) (= g_s70_71 (set_diff (apply g_s74_75 g_s42_43) (binary_union g_s68_69 g_s69_70))) (= g_s71_72 (SET (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 g_s36_37))))) (= g_s72_73 (set_diff (apply g_s74_75 g_s44_45) g_s71_72)) (= g_s73_74 (apply g_s74_75 g_s45_46)) (mem g_s75_76 (|-->>| g_s47_48 g_s4_5)) (mem g_s76_77 (|+->| g_s47_48 g_s48_49)) (= (dom g_s76_77) e78) (= (ran g_s76_77) g_s48_49) (mem g_s74_75 (|-->| g_s41_42 (POW g_s4_5))) (= g_s74_75 (SET (mapplet (mapplet g_s46_47 empty) (mapplet (mapplet g_s45_46 (SET (mapplet g_s21_22 g_s20_21))) (mapplet (mapplet g_s44_45 (SET (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 g_s5_6)))))))) (mapplet (mapplet g_s43_44 empty) (mapplet g_s42_43 (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6))))))))))))))))))))))))))))))))))))))
(define-fun |def_abs| () Bool (and (mem g_s78_79 g_s0_1) (or (= g_s79_80 g_s53_54) (= g_s79_80 g_s54_55)) (mem g_s80_81 BOOL) (mem g_s81_82 BOOL) (mem g_s82_83 BOOL) (=> (and (= g_s83_87 e86) (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46))) (= (apply g_s75_76 g_s85_85) g_s86_84)) (= g_s87_89 (apply (SET (mapplet (mapplet TRUE g_s79_80) (mapplet FALSE g_s55_56))) (bool (and (= g_s78_79 g_s2_3) (= g_s80_81 TRUE))))) (=> (= g_s88_93 TRUE) (and (= g_s89_90 g_s61_62) (= g_s90_91 g_s61_62) (= g_s91_92 g_s61_62))) (mem g_s84_88 g_s41_42) (mem g_s86_84 g_s4_5) (mem g_s92_94 g_s4_5) (=> (and (= g_s83_87 e86) (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46))) (= (apply g_s75_76 g_s85_85) g_s86_84)) (=> (= g_s89_90 g_s61_62) (not (= g_s84_88 g_s46_47))) (mem g_s83_87 INTEGER) (and (|>=i| g_s83_87 e0) (|<=i| g_s83_87 e86)) (mem g_s85_85 g_s47_48) (mem g_s93_95 g_s56_57) (mem g_s94_96 g_s56_57) (mem g_s88_93 BOOL) (mem g_s87_89 g_s52_53) (mem g_s89_90 g_s59_60) (mem g_s90_91 g_s59_60) (mem g_s91_92 g_s59_60) (mem g_s95_97 g_s63_64) (mem g_s96_98 BOOL) (=> (= g_s88_93 TRUE) (= g_s90_91 g_s61_62)) (=> (= g_s88_93 TRUE) (= g_s89_90 g_s61_62)) (=> (= g_s88_93 TRUE) (= g_s91_92 g_s61_62)) (not (or (= g_s89_90 g_s62_63) (= g_s90_91 g_s62_63) (= g_s91_92 g_s62_63))) (=> (not (= g_s87_89 g_s53_54)) (not (= g_s95_97 g_s64_65))) (=> (not (= g_s87_89 g_s53_54)) (not (= g_s95_97 g_s65_66))) (=> (not (= g_s87_89 g_s54_55)) (not (= g_s95_97 g_s66_67))) (=> (= g_s93_95 g_s58_59) (not (= g_s95_97 g_s64_65))) (=> (= g_s93_95 g_s58_59) (not (= g_s95_97 g_s65_66))) (=> (= g_s94_96 g_s58_59) (not (= g_s95_97 g_s66_67))) (=> (and (= g_s88_93 TRUE) (not (= g_s87_89 g_s54_55))) (not (= g_s95_97 g_s66_67))) (= g_s70_71 (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))))))))))))))))))) (= g_s72_73 (SET (mapplet g_s35_36 (mapplet g_s34_35 g_s5_6)))) (= g_s73_74 (SET (mapplet g_s21_22 g_s20_21))) (= (bool (= g_s87_89 g_s53_54)) (bool (and (= g_s78_79 g_s2_3) (= g_s79_80 g_s53_54) (= g_s80_81 TRUE)))) (= (bool (= g_s87_89 g_s54_55)) (bool (and (= g_s78_79 g_s2_3) (= g_s79_80 g_s54_55) (= g_s80_81 TRUE)))) (= (bool (= g_s87_89 g_s55_56)) (bool (not (and (= g_s78_79 g_s2_3) (= g_s80_81 TRUE))))) (= (apply g_s74_75 g_s42_43) (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 g_s5_6)))))))))))))))))))))))))))))) (= (apply g_s74_75 g_s43_44) empty) (= (apply g_s74_75 g_s44_45) (SET (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 g_s5_6)))))))) (= (apply g_s74_75 g_s45_46) (SET (mapplet g_s21_22 g_s20_21))) (= (apply g_s74_75 g_s46_47) empty) (=> (= g_s88_93 TRUE) (and (= g_s90_91 g_s61_62) (= g_s89_90 g_s61_62) (= g_s91_92 g_s61_62)))))
(define-fun |def_inv| () Bool (and (= g_s83_87 g_s83$1_99) (= g_s85_85 g_s85$1_100) (= g_s93_95 g_s93$1_101) (= g_s94_96 g_s94$1_102) (= g_s88_93 g_s88$1_103) (= g_s89_90 g_s89$1_104) (= g_s90_91 g_s90$1_105) (= g_s91_92 g_s91$1_106) (= g_s95_97 g_s95$1_107) (= g_s96_98 g_s96$1_108) (= g_s84_88 g_s84$1_109) (= g_s86_84 g_s86$1_110) (= g_s92_94 g_s92$1_111) (= g_s78_79 g_s78$1_112) (= g_s79_80 g_s79$1_113) (= g_s80_81 g_s80$1_114) (= g_s81_82 g_s81$1_115) (= g_s82_83 g_s82$1_116)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s42_43))
(define-fun lh_3 () Bool (mem g_s86$1_110 g_s70_71))
(define-fun lh_4 () Bool (= g_s93_95 g_s58_59))
(define-fun lh_5 () Bool (= g_s94_96 g_s58_59))
(define-fun lh_6 () Bool (not (= g_s89_90 g_s60_61)))
(define-fun lh_7 () Bool (not (= g_s90_91 g_s60_61)))
(define-fun lh_8 () Bool (not (= g_s91_92 g_s60_61)))
(define-fun lh_9 () Bool (= g_s88_93 TRUE))
(define-fun lh_10 () Bool (= g_s89$1_104 g_s61_62))
(define-fun lh_11 () Bool (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46)))
(define-fun lh_12 () Bool (= g_s84_88 g_s46_47))
(define-fun lh_13 () Bool (= g_s84_88 g_s43_44))
(define-fun lh_14 () Bool (= g_s89$1_104 g_s60_61))
(define-fun lh_15 () Bool (not (= g_s89$1_104 g_s89_90)))
(define-fun lh_16 () Bool (= g_s90$1_105 g_s60_61))
(define-fun lh_17 () Bool (not (= g_s90$1_105 g_s90_91)))
(define-fun lh_18 () Bool (= g_s91$1_106 g_s60_61))
(define-fun lh_19 () Bool (not (= g_s91$1_106 g_s91_92)))
(define-fun lh_20 () Bool (= g_s81_82 FALSE))
(define-fun lh_21 () Bool (= g_s82_83 FALSE))
(define-fun lh_22 () Bool (mem g_s80$2_117 BOOL))
(define-fun lh_23 () Bool (mem g_s93$2_118 g_s56_57))
(define-fun lh_24 () Bool (=> (= g_s93$1_101 g_s58_59) (= g_s93$2_118 g_s58_59)))
(define-fun lh_25 () Bool (mem g_s94$2_119 g_s56_57))
(define-fun lh_26 () Bool (=> (= g_s94$1_102 g_s58_59) (= g_s94$2_119 g_s58_59)))
(define-fun lh_27 () Bool (mem g_s78$2_120 g_s0_1))
(define-fun lh_28 () Bool (or (= g_s79$2_121 g_s53_54) (= g_s79$2_121 g_s54_55)))
(define-fun lh_29 () Bool (mem g_s89$2_122 g_s59_60))
(define-fun lh_30 () Bool (mem g_s90$2_123 g_s59_60))
(define-fun lh_31 () Bool (mem g_s91$2_124 g_s59_60))
(define-fun lh_32 () Bool (=> (not (= g_s89$1_104 g_s60_61)) (= g_s89$2_122 g_s89$1_104)))
(define-fun lh_33 () Bool (=> (not (= g_s90$1_105 g_s60_61)) (= g_s90$2_123 g_s90$1_105)))
(define-fun lh_34 () Bool (=> (not (= g_s91$1_106 g_s60_61)) (= g_s91$2_124 g_s91$1_106)))
(define-fun lh_35 () Bool (=> (= g_s88$1_103 TRUE) (and (= g_s90$2_123 g_s61_62) (= g_s89$2_122 g_s61_62) (= g_s91$2_124 g_s61_62))))
(define-fun lh_36 () Bool (not (or (= g_s89$2_122 g_s62_63) (= g_s90$2_123 g_s62_63) (= g_s91$2_124 g_s62_63))))
(define-fun lh_37 () Bool (mem g_s81$2_125 BOOL))
(define-fun lh_38 () Bool (=> (= g_s81$1_115 FALSE) (= g_s81$2_125 FALSE)))
(define-fun lh_39 () Bool (mem g_s82$2_126 BOOL))
(define-fun lh_40 () Bool (=> (= g_s82$1_116 FALSE) (= g_s82$2_126 FALSE)))
(define-fun lh_41 () Bool (= g_s89$2_122 g_s61_62))
(define-fun lh_42 () Bool (= g_s89$2_122 g_s60_61))
(define-fun lh_43 () Bool (not (= g_s89$2_122 g_s89_90)))
(define-fun lh_44 () Bool (= g_s90$2_123 g_s60_61))
(define-fun lh_45 () Bool (not (= g_s90$2_123 g_s90_91)))
(define-fun lh_46 () Bool (= g_s91$2_124 g_s60_61))
(define-fun lh_47 () Bool (not (= g_s91$2_124 g_s91_92)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_10) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_13) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s93$1_101 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (= g_s94$1_102 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_20) (= g_s81$1_115 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_21) (= g_s82$1_116 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9) (= g_s89$1_104 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_14 lh_15) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_16 lh_17) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_18 lh_19) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_10 lh_22 lh_23 lh_24 lh_25 lh_26) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_22 lh_23 lh_24 lh_25 lh_26) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_13 lh_22 lh_23 lh_24 lh_25 lh_26) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_14 lh_15 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_16 lh_17 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_18 lh_19 lh_22 lh_23 lh_24 lh_25 lh_26) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (or (= g_s86$1_110 g_s40_41) (= g_s86$1_110 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_12 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 47 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_13 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 48 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_11 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 49 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s90$2_123 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 50 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s90$2_123 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 51 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 52 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 53 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_20 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s81$2_125 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 54 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s82$2_126 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 55 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s91$2_124 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 56 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s91$2_124 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 57 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_9 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s89$2_122 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 58 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40) (= g_s89$2_122 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 59 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_42 lh_43) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 60 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_44 lh_45) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 61 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_46 lh_47) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s44_45))
(define-fun lh_3 () Bool (mem g_s86$1_110 g_s72_73))
(define-fun lh_4 () Bool (or (= g_s92$2_127 g_s40_41) (= g_s92$2_127 g_s86$1_110)))
(define-fun lh_5 () Bool (mem g_s93$2_118 g_s56_57))
(define-fun lh_6 () Bool (=> (= g_s93$1_101 g_s58_59) (= g_s93$2_118 g_s58_59)))
(define-fun lh_7 () Bool (mem g_s94$2_119 g_s56_57))
(define-fun lh_8 () Bool (=> (= g_s94$1_102 g_s58_59) (= g_s94$2_119 g_s58_59)))
(define-fun lh_9 () Bool (= g_s93_95 g_s58_59))
(define-fun lh_10 () Bool (= g_s94_96 g_s58_59))
(define-fun lh_11 () Bool (not (= g_s89_90 g_s60_61)))
(define-fun lh_12 () Bool (not (= g_s90_91 g_s60_61)))
(define-fun lh_13 () Bool (not (= g_s91_92 g_s60_61)))
(define-fun lh_14 () Bool (= g_s88_93 TRUE))
(define-fun lh_15 () Bool (= g_s89$1_104 g_s61_62))
(define-fun lh_16 () Bool (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46)))
(define-fun lh_17 () Bool (= g_s84_88 g_s46_47))
(define-fun lh_18 () Bool (= g_s84_88 g_s43_44))
(define-fun lh_19 () Bool (= g_s89$1_104 g_s60_61))
(define-fun lh_20 () Bool (not (= g_s89$1_104 g_s89_90)))
(define-fun lh_21 () Bool (= g_s90$1_105 g_s60_61))
(define-fun lh_22 () Bool (not (= g_s90$1_105 g_s90_91)))
(define-fun lh_23 () Bool (= g_s91$1_106 g_s60_61))
(define-fun lh_24 () Bool (not (= g_s91$1_106 g_s91_92)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (= g_s92$2_127 g_s40_41) (= g_s92$2_127 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_15) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_17) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_18) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_16) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_12) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_10) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_13) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s89$1_104 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_11) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_19 lh_20) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_21 lh_22) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_23 lh_24) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_19 lh_20) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_21 lh_22) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_23 lh_24) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s45_46))
(define-fun lh_3 () Bool (mem g_s86$1_110 (apply g_s74_75 g_s45_46)))
(define-fun lh_4 () Bool (or (= g_s92$2_127 g_s40_41) (= g_s92$2_127 g_s86$1_110)))
(define-fun lh_5 () Bool (mem g_s93$2_118 g_s56_57))
(define-fun lh_6 () Bool (=> (= g_s93$1_101 g_s58_59) (= g_s93$2_118 g_s58_59)))
(define-fun lh_7 () Bool (mem g_s94$2_119 g_s56_57))
(define-fun lh_8 () Bool (=> (= g_s94$1_102 g_s58_59) (= g_s94$2_119 g_s58_59)))
(define-fun lh_9 () Bool (= g_s93_95 g_s58_59))
(define-fun lh_10 () Bool (= g_s94_96 g_s58_59))
(define-fun lh_11 () Bool (not (= g_s89_90 g_s60_61)))
(define-fun lh_12 () Bool (not (= g_s90_91 g_s60_61)))
(define-fun lh_13 () Bool (not (= g_s91_92 g_s60_61)))
(define-fun lh_14 () Bool (= g_s88_93 TRUE))
(define-fun lh_15 () Bool (= g_s89$1_104 g_s61_62))
(define-fun lh_16 () Bool (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46)))
(define-fun lh_17 () Bool (= g_s84_88 g_s46_47))
(define-fun lh_18 () Bool (= g_s84_88 g_s43_44))
(define-fun lh_19 () Bool (= g_s89$1_104 g_s60_61))
(define-fun lh_20 () Bool (not (= g_s89$1_104 g_s89_90)))
(define-fun lh_21 () Bool (= g_s90$1_105 g_s60_61))
(define-fun lh_22 () Bool (not (= g_s90$1_105 g_s90_91)))
(define-fun lh_23 () Bool (= g_s91$1_106 g_s60_61))
(define-fun lh_24 () Bool (not (= g_s91$1_106 g_s91_92)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (= g_s92$2_127 g_s40_41) (= g_s92$2_127 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_15) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_17) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_18) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_16) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_12) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_10) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_13) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (= g_s89$1_104 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_11) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_19 lh_20) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_21 lh_22) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_23 lh_24) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_19 lh_20) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_21 lh_22) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_23 lh_24) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s46_47))
(define-fun lh_3 () Bool (= g_s93_95 g_s58_59))
(define-fun lh_4 () Bool (= g_s94_96 g_s58_59))
(define-fun lh_5 () Bool (not (= g_s89_90 g_s60_61)))
(define-fun lh_6 () Bool (not (= g_s90_91 g_s60_61)))
(define-fun lh_7 () Bool (not (= g_s91_92 g_s60_61)))
(define-fun lh_8 () Bool (= g_s88_93 TRUE))
(define-fun lh_9 () Bool (= g_s89$1_104 g_s61_62))
(define-fun lh_10 () Bool (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46)))
(define-fun lh_11 () Bool (= g_s84_88 g_s46_47))
(define-fun lh_12 () Bool (= g_s84_88 g_s43_44))
(define-fun lh_13 () Bool (= g_s89$1_104 g_s60_61))
(define-fun lh_14 () Bool (not (= g_s89$1_104 g_s89_90)))
(define-fun lh_15 () Bool (= g_s90$1_105 g_s60_61))
(define-fun lh_16 () Bool (not (= g_s90$1_105 g_s90_91)))
(define-fun lh_17 () Bool (= g_s91$1_106 g_s60_61))
(define-fun lh_18 () Bool (not (= g_s91$1_106 g_s91_92)))
(define-fun lh_19 () Bool (= g_s82_83 FALSE))
(define-fun lh_20 () Bool (mem g_s80$2_117 BOOL))
(define-fun lh_21 () Bool (mem g_s93$2_118 g_s56_57))
(define-fun lh_22 () Bool (=> (= g_s93$1_101 g_s58_59) (= g_s93$2_118 g_s58_59)))
(define-fun lh_23 () Bool (mem g_s94$2_119 g_s56_57))
(define-fun lh_24 () Bool (=> (= g_s94$1_102 g_s58_59) (= g_s94$2_119 g_s58_59)))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_12) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s93$1_101 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s94$1_102 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_19) (= g_s82$1_116 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s89$1_104 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9 lh_20 lh_21 lh_22 lh_23 lh_24) (not (= g_s42_43 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_20 lh_21 lh_22 lh_23 lh_24) (or (= g_s42_43 g_s46_47) (= g_s42_43 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_12 lh_20 lh_21 lh_22 lh_23 lh_24) (or (= g_s42_43 g_s43_44) (= g_s42_43 g_s45_46) (= g_s42_43 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s42_43 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18 lh_20 lh_21 lh_22 lh_23 lh_24) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s43_44))
(define-fun lh_3 () Bool (= g_s93_95 g_s58_59))
(define-fun lh_4 () Bool (= g_s94_96 g_s58_59))
(define-fun lh_5 () Bool (not (= g_s89_90 g_s60_61)))
(define-fun lh_6 () Bool (not (= g_s90_91 g_s60_61)))
(define-fun lh_7 () Bool (not (= g_s91_92 g_s60_61)))
(define-fun lh_8 () Bool (= g_s88_93 TRUE))
(define-fun lh_9 () Bool (= g_s89$1_104 g_s61_62))
(define-fun lh_10 () Bool (or (= g_s84_88 g_s42_43) (= g_s84_88 g_s44_45) (= g_s84_88 g_s45_46)))
(define-fun lh_11 () Bool (= g_s84_88 g_s46_47))
(define-fun lh_12 () Bool (= g_s84_88 g_s43_44))
(define-fun lh_13 () Bool (= g_s89$1_104 g_s60_61))
(define-fun lh_14 () Bool (not (= g_s89$1_104 g_s89_90)))
(define-fun lh_15 () Bool (= g_s90$1_105 g_s60_61))
(define-fun lh_16 () Bool (not (= g_s90$1_105 g_s90_91)))
(define-fun lh_17 () Bool (= g_s91$1_106 g_s60_61))
(define-fun lh_18 () Bool (not (= g_s91$1_106 g_s91_92)))
(define-fun lh_19 () Bool (= g_s82_83 FALSE))
(define-fun lh_20 () Bool (mem g_s80$2_117 BOOL))
(define-fun lh_21 () Bool (or (= g_s84$2_128 g_s44_45) (= g_s84$2_128 g_s45_46)))
(define-fun lh_22 () Bool (mem g_s93$2_118 g_s56_57))
(define-fun lh_23 () Bool (=> (= g_s93$1_101 g_s58_59) (= g_s93$2_118 g_s58_59)))
(define-fun lh_24 () Bool (mem g_s94$2_119 g_s56_57))
(define-fun lh_25 () Bool (=> (= g_s94$1_102 g_s58_59) (= g_s94$2_119 g_s58_59)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (not (= g_s84$1_109 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11) (or (= g_s84$1_109 g_s46_47) (= g_s84$1_109 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_12) (or (= g_s84$1_109 g_s43_44) (= g_s84$1_109 g_s45_46) (= g_s84$1_109 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s84$1_109 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s93$1_101 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s94$1_102 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_19) (= g_s82$1_116 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s89$1_104 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18) (= g_s84$1_109 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (or (and (= g_s84_88 g_s42_43) (mem g_s86_84 g_s70_71)) (and (= g_s84_88 g_s44_45) (mem g_s86_84 g_s72_73)) (and (= g_s84_88 g_s45_46) (mem g_s86_84 g_s73_74)) (or (= g_s84_88 g_s46_47) (= g_s84_88 g_s43_44))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (or (= g_s40_41 g_s40_41) (= g_s40_41 g_s86_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (or (= g_s79$1_113 g_s53_54) (= g_s79$1_113 g_s54_55)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s83_87 e86))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (not (or (= g_s89$1_104 g_s62_63) (= g_s90$1_105 g_s62_63) (= g_s91$1_106 g_s62_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (not (= g_s84$2_128 g_s46_47)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (or (= g_s84$2_128 g_s46_47) (= g_s84$2_128 g_s42_43)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_12 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (or (= g_s84$2_128 g_s43_44) (= g_s84$2_128 g_s45_46) (= g_s84$2_128 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84$2_128 g_s84_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s90$1_105 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s90$1_105 g_s90_91))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s93$2_118 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s94$2_119 g_s58_59))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s91$1_106 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s91$1_106 g_s91_92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s89$1_104 g_s89_90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84_88 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_13 lh_14 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84$2_128 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_15 lh_16 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84$2_128 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_17 lh_18 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25) (= g_s84$2_128 g_s42_43))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (= g_s84$1_109 g_s45_46))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s74_75 (|+->| (dom g_s74_75) (ran g_s74_75))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s45_46 (dom g_s74_75)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s106_129 g_s47_48))
(define-fun lh_2 () Bool (= g_s83$1_99 e0))
(define-fun lh_3 () Bool (or (= g_s84$1_109 g_s42_43) (= g_s84$1_109 g_s44_45) (= g_s84$1_109 g_s45_46)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s75_76 (|+->| (dom g_s75_76) (ran g_s75_76))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s106_129 (dom g_s75_76)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (or (= g_s84$1_109 g_s42_43) (= g_s84$1_109 g_s44_45) (= g_s84$1_109 g_s45_46)))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s74_75 (|+->| (dom g_s74_75) (ran g_s74_75))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s84$1_109 (dom g_s74_75)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s83$1_99 e86))
(define-fun lh_2 () Bool (or (= g_s84$1_109 g_s42_43) (= g_s84$1_109 g_s44_45) (= g_s84$1_109 g_s45_46)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s74_75 (|+->| (dom g_s74_75) (ran g_s74_75))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s84$1_109 (dom g_s74_75)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)