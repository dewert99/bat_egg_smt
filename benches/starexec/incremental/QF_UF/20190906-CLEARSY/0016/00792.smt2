(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e225 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_137 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_139 () U)
(declare-fun g_s139_140 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_141 () U)
(declare-fun g_s141_142 () U)
(declare-fun g_s142_143 () U)
(declare-fun g_s143_144 () U)
(declare-fun g_s144_145 () U)
(declare-fun g_s145_146 () U)
(declare-fun g_s146_147 () U)
(declare-fun g_s147_148 () U)
(declare-fun g_s148_149 () U)
(declare-fun g_s149_150 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_151 () U)
(declare-fun g_s151_152 () U)
(declare-fun g_s152_153 () U)
(declare-fun g_s153_154 () U)
(declare-fun g_s154_155 () U)
(declare-fun g_s155_156 () U)
(declare-fun g_s156_157 () U)
(declare-fun g_s157_158 () U)
(declare-fun g_s158_159 () U)
(declare-fun g_s159_160 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_161 () U)
(declare-fun g_s161_162 () U)
(declare-fun g_s162_163 () U)
(declare-fun g_s163_164 () U)
(declare-fun g_s164_165 () U)
(declare-fun g_s165_166 () U)
(declare-fun g_s166_167 () U)
(declare-fun g_s167_168 () U)
(declare-fun g_s168_169 () U)
(declare-fun g_s169_170 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_171 () U)
(declare-fun g_s171_172 () U)
(declare-fun g_s172_173 () U)
(declare-fun g_s173_174 () U)
(declare-fun g_s174_175 () U)
(declare-fun g_s175_176 () U)
(declare-fun g_s176_177 () U)
(declare-fun g_s177_178 () U)
(declare-fun g_s178_179 () U)
(declare-fun g_s179_180 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_181 () U)
(declare-fun g_s181_182 () U)
(declare-fun g_s182_183 () U)
(declare-fun g_s183_184 () U)
(declare-fun g_s184_185 () U)
(declare-fun g_s185_186 () U)
(declare-fun g_s186_187 () U)
(declare-fun g_s187_188 () U)
(declare-fun g_s188_189 () U)
(declare-fun g_s189_190 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_191 () U)
(declare-fun g_s191_192 () U)
(declare-fun g_s192_193 () U)
(declare-fun g_s193_194 () U)
(declare-fun g_s194_195 () U)
(declare-fun g_s195_196 () U)
(declare-fun g_s196_197 () U)
(declare-fun g_s197_198 () U)
(declare-fun g_s198_199 () U)
(declare-fun g_s199_200 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_201 () U)
(declare-fun g_s201_202 () U)
(declare-fun g_s202_203 () U)
(declare-fun g_s203_204 () U)
(declare-fun g_s204_205 () U)
(declare-fun g_s205_206 () U)
(declare-fun g_s206_207 () U)
(declare-fun g_s207_208 () U)
(declare-fun g_s208_209 () U)
(declare-fun g_s209_210 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_211 () U)
(declare-fun g_s211_212 () U)
(declare-fun g_s212_213 () U)
(declare-fun g_s213_214 () U)
(declare-fun g_s214_215 () U)
(declare-fun g_s215_216 () U)
(declare-fun g_s216_217 () U)
(declare-fun g_s217_218 () U)
(declare-fun g_s218_219 () U)
(declare-fun g_s219_220 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_221 () U)
(declare-fun g_s223_224 () U)
(declare-fun g_s224_226 () U)
(declare-fun g_s225_227 () U)
(declare-fun g_s226_228 () U)
(declare-fun g_s227_229 () U)
(declare-fun g_s228_230 () U)
(declare-fun g_s229_231 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_232 () U)
(declare-fun g_s231_233 () U)
(declare-fun g_s232_234 () U)
(declare-fun g_s233_235 () U)
(declare-fun g_s234_236 () U)
(declare-fun g_s235_237 () U)
(declare-fun g_s236_238 () U)
(declare-fun g_s237_239 () U)
(declare-fun g_s238_240 () U)
(declare-fun g_s239_241 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_242 () U)
(declare-fun g_s241_243 () U)
(declare-fun g_s242_244 () U)
(declare-fun g_s243_245 () U)
(declare-fun g_s244_246 () U)
(declare-fun g_s245_247 () U)
(declare-fun g_s246_248 () U)
(declare-fun g_s247_249 () U)
(declare-fun g_s248_250 () U)
(declare-fun g_s249_251 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_252 () U)
(declare-fun g_s251_253 () U)
(declare-fun g_s252_254 () U)
(declare-fun g_s253_255 () U)
(declare-fun g_s254_256 () U)
(declare-fun g_s255_257 () U)
(declare-fun g_s256_258 () U)
(declare-fun g_s257_259 () U)
(declare-fun g_s258_260 () U)
(declare-fun g_s259_261 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_262 () U)
(declare-fun g_s261_263 () U)
(declare-fun g_s262_264 () U)
(declare-fun g_s263_265 () U)
(declare-fun g_s264_266 () U)
(declare-fun g_s265_267 () U)
(declare-fun g_s266_268 () U)
(declare-fun g_s267_269 () U)
(declare-fun g_s268_270 () U)
(declare-fun g_s269_271 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_272 () U)
(declare-fun g_s271_274 () U)
(declare-fun g_s272_273 () U)
(declare-fun g_s273_275 () U)
(declare-fun g_s274_276 () U)
(declare-fun g_s275_277 () U)
(declare-fun g_s276_278 () U)
(declare-fun g_s277_279 () U)
(declare-fun g_s278_280 () U)
(declare-fun g_s279_281 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_282 () U)
(declare-fun g_s281_283 () U)
(declare-fun g_s282_284 () U)
(declare-fun g_s283_285 () U)
(declare-fun g_s284_286 () U)
(declare-fun g_s285_287 () U)
(declare-fun g_s286_288 () U)
(declare-fun g_s287_289 () U)
(declare-fun g_s288_290 () U)
(declare-fun g_s289_291 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_292 () U)
(declare-fun g_s291_293 () U)
(declare-fun g_s292_294 () U)
(declare-fun g_s293_295 () U)
(declare-fun g_s294_296 () U)
(declare-fun g_s295_297 () U)
(declare-fun g_s296_298 () U)
(declare-fun g_s297_299 () U)
(declare-fun g_s298_300 () U)
(declare-fun g_s299_301 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_302 () U)
(declare-fun g_s301_303 () U)
(declare-fun g_s302_304 () U)
(declare-fun g_s303_305 () U)
(declare-fun g_s304_306 () U)
(declare-fun g_s305_307 () U)
(declare-fun g_s306_308 () U)
(declare-fun g_s307_309 () U)
(declare-fun g_s308_310 () U)
(declare-fun g_s309_311 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_312 () U)
(declare-fun g_s311_313 () U)
(declare-fun g_s312_314 () U)
(declare-fun g_s313_315 () U)
(declare-fun g_s314_316 () U)
(declare-fun g_s315_317 () U)
(declare-fun g_s316_318 () U)
(declare-fun g_s317_319 () U)
(declare-fun g_s318_320 () U)
(declare-fun g_s319_321 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_322 () U)
(declare-fun g_s321_323 () U)
(declare-fun g_s322_324 () U)
(declare-fun g_s323_325 () U)
(declare-fun g_s324_326 () U)
(declare-fun g_s325_327 () U)
(declare-fun g_s326_328 () U)
(declare-fun g_s327_329 () U)
(declare-fun g_s328_330 () U)
(declare-fun g_s329_331 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_332 () U)
(declare-fun g_s331_333 () U)
(declare-fun g_s332_334 () U)
(declare-fun g_s333_335 () U)
(declare-fun g_s334_336 () U)
(declare-fun g_s335_337 () U)
(declare-fun g_s336_338 () U)
(declare-fun g_s337_339 () U)
(declare-fun g_s338_340 () U)
(declare-fun g_s339_341 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_342 () U)
(declare-fun g_s341_343 () U)
(declare-fun g_s342_344 () U)
(declare-fun g_s343_345 () U)
(declare-fun g_s344_346 () U)
(declare-fun g_s345_347 () U)
(declare-fun g_s346_348 () U)
(declare-fun g_s347_349 () U)
(declare-fun g_s348_350 () U)
(declare-fun g_s349_351 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_352 () U)
(declare-fun g_s351_353 () U)
(declare-fun g_s352_354 () U)
(declare-fun g_s353_355 () U)
(declare-fun g_s354_356 () U)
(declare-fun g_s355_357 () U)
(declare-fun g_s356_358 () U)
(declare-fun g_s357_359 () U)
(declare-fun g_s358_360 () U)
(declare-fun g_s359_361 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_362 () U)
(declare-fun g_s361_363 () U)
(declare-fun g_s362_364 () U)
(declare-fun g_s363_365 () U)
(declare-fun g_s364_366 () U)
(declare-fun g_s365_367 () U)
(declare-fun g_s367_368 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e223 () U)
(declare-fun e222 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (= g_s8_9 (SET (mapplet g_s10_11 g_s9_10))) (= g_s11_12 (SET (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 g_s12_13))))) (= g_s16_17 (SET (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 g_s17_18))))) (= g_s21_22 (SET (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 g_s22_23)))))))))) (= g_s31_32 (SET (mapplet g_s34_35 (mapplet g_s33_34 g_s32_33)))) (= g_s35_36 (SET (mapplet g_s37_38 g_s36_37))) (= g_s38_39 (SET (mapplet g_s41_42 (mapplet g_s40_41 g_s39_40)))) (= g_s42_43 (SET (mapplet g_s44_45 g_s43_44))) (= g_s45_46 (SET (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47))))) (= g_s50_51 (SET (mapplet g_s52_53 g_s51_52))) (= g_s53_54 (SET (mapplet g_s56_57 (mapplet g_s55_56 g_s54_55)))) (= g_s57_58 (SET (mapplet g_s60_61 (mapplet g_s59_60 g_s58_59)))) (= g_s61_62 (SET (mapplet g_s63_64 g_s62_63))) (= g_s64_65 (SET (mapplet g_s67_68 (mapplet g_s66_67 g_s65_66)))) (= g_s68_69 (SET (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 g_s69_70)))))) (= g_s74_75 (SET (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76)))) (= g_s78_79 (SET (mapplet g_s81_82 (mapplet g_s80_81 g_s79_80)))) (= g_s82_83 (SET (mapplet g_s85_86 (mapplet g_s84_85 g_s83_84)))) (= g_s86_87 (SET (mapplet g_s89_90 (mapplet g_s88_89 g_s87_88)))) (= g_s90_91 (SET (mapplet g_s93_94 (mapplet g_s92_93 g_s91_92)))) (= g_s94_95 (SET (mapplet g_s101_102 (mapplet g_s100_101 (mapplet g_s99_100 (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 g_s95_96)))))))) (= g_s102_103 (SET (mapplet g_s106_107 (mapplet g_s105_106 (mapplet g_s104_105 g_s103_104))))) (= g_s107_108 (SET (mapplet g_s111_112 (mapplet g_s110_111 (mapplet g_s109_110 g_s108_109))))) (= g_s112_113 (SET (mapplet g_s115_116 (mapplet g_s114_115 g_s113_114)))) (= g_s116_117 (SET (mapplet g_s120_121 (mapplet g_s119_120 (mapplet g_s118_119 g_s117_118))))) (= g_s121_122 (SET (mapplet g_s125_126 (mapplet g_s124_125 (mapplet g_s123_124 g_s122_123))))) (= g_s126_127 (SET (mapplet g_s130_131 (mapplet g_s129_130 (mapplet g_s128_129 g_s127_128))))) (= g_s131_132 (SET (mapplet g_s135_136 (mapplet g_s134_135 (mapplet g_s133_134 g_s132_133))))) (= g_s136_137 (SET (mapplet g_s139_140 (mapplet g_s138_139 g_s137_138)))) (= g_s140_141 (SET (mapplet g_s144_145 (mapplet g_s143_144 (mapplet g_s142_143 g_s141_142))))) (= g_s145_146 (SET (mapplet g_s148_149 (mapplet g_s147_148 g_s146_147)))) (= g_s149_150 (SET (mapplet g_s152_153 (mapplet g_s151_152 g_s150_151)))) (= g_s153_154 (SET (mapplet g_s160_161 (mapplet g_s159_160 (mapplet g_s158_159 (mapplet g_s157_158 (mapplet g_s156_157 (mapplet g_s155_156 g_s154_155)))))))) (= g_s161_162 (SET (mapplet g_s165_166 (mapplet g_s164_165 (mapplet g_s163_164 g_s162_163))))) (= g_s166_167 (SET (mapplet g_s170_171 (mapplet g_s169_170 (mapplet g_s168_169 g_s167_168))))) (not (= g_s171_172 empty)) (not (= g_s172_173 empty)) (not (= g_s173_174 empty)) (not (= g_s174_175 empty)) (not (= g_s175_176 empty)) (not (= g_s176_177 empty)) (not (= g_s177_178 empty)) (not (= g_s178_179 empty)) (not (= g_s179_180 empty)) (not (= g_s180_181 empty)) (not (= g_s181_182 empty)) (not (= g_s182_183 empty)) (not (= g_s183_184 empty)) (= g_s184_185 (SET (mapplet g_s188_189 (mapplet g_s187_188 (mapplet g_s186_187 g_s185_186))))) (not (= g_s189_190 empty)) (not (= g_s190_191 empty)) (not (= g_s191_192 empty)) (not (= g_s192_193 empty)) (not (= g_s193_194 empty)) (not (= g_s194_195 empty)) (not (= g_s195_196 empty)) (not (= g_s196_197 empty)) (not (= g_s197_198 empty)) (not (= g_s198_199 empty)) (not (= g_s199_200 empty)) (not (= g_s200_201 empty)) (not (= g_s201_202 empty)) (not (= g_s202_203 empty)) (not (= g_s203_204 empty)) (= g_s204_205 (SET (mapplet g_s206_207 g_s205_206))) (not (= g_s207_208 empty)) (not (= g_s208_209 empty)) (not (= g_s209_210 empty)) (not (= g_s210_211 empty)) (not (= g_s211_212 empty)) (not (= g_s212_213 empty)) (not (= g_s213_214 empty)) (not (= g_s214_215 empty)) (not (= g_s215_216 empty)) (not (= g_s216_217 empty)) (not (= g_s217_218 empty)) (not (= g_s218_219 empty)) (not (= g_s219_220 empty)) (mem g_s220_221 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s220_221 (binary_union e223 e222)) (mem g_s223_224 (|-->| BOOL NAT)) (= g_s223_224 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e225)))) (subset g_s224_226 g_s171_172) (mem g_s225_227 g_s171_172) (not (mem g_s225_227 g_s224_226)) (subset g_s226_228 g_s172_173) (mem g_s227_229 g_s172_173) (not (mem g_s227_229 g_s226_228)) (subset g_s228_230 g_s173_174) (mem g_s229_231 g_s173_174) (not (mem g_s229_231 g_s228_230)) (subset g_s230_232 g_s174_175) (mem g_s231_233 g_s174_175) (not (mem g_s231_233 g_s230_232)) (subset g_s232_234 g_s166_167) (not (mem g_s167_168 g_s232_234)) (= g_s232_234 (SET (mapplet g_s170_171 (mapplet g_s169_170 g_s168_169)))) (mem g_s233_235 (|+->| g_s230_232 g_s228_230)) (mem g_s234_236 (|+->| g_s228_230 g_s230_232)) (subset g_s235_237 NAT) (not (= g_s235_237 empty)) (= g_s235_237 (interval (imin g_s235_237) (imax g_s235_237))) (not (mem MaxInt g_s235_237)) (subset g_s236_238 NAT) (not (= g_s236_238 empty)) (= g_s236_238 (interval (imin g_s236_238) (imax g_s236_238))) (not (mem MaxInt g_s236_238)) (subset g_s237_239 NAT) (not (= g_s237_239 empty)) (= g_s237_239 (interval (imin g_s237_239) (imax g_s237_239))) (not (mem MaxInt g_s237_239)) (subset g_s238_240 g_s175_176) (mem g_s239_241 g_s175_176) (not (mem g_s239_241 g_s238_240)) (mem g_s240_242 (|+->| NAT g_s175_176)) (mem g_s240_242 (perm g_s238_240)) (subset g_s241_243 g_s176_177) (mem g_s242_244 g_s176_177) (not (mem g_s242_244 g_s241_243)) (mem g_s243_245 (|+->| NAT g_s176_177)) (mem g_s243_245 (perm g_s241_243)) (subset g_s244_246 g_s177_178) (mem g_s245_247 g_s177_178) (not (mem g_s245_247 g_s244_246)) (mem g_s246_248 (|+->| NAT g_s177_178)) (mem g_s246_248 (perm g_s244_246)) (subset g_s247_249 g_s178_179) (mem g_s248_250 g_s178_179) (not (mem g_s248_250 g_s247_249)) (mem g_s249_251 (|+->| NAT g_s178_179)) (mem g_s249_251 (perm g_s247_249)) (subset g_s250_252 g_s179_180) (mem g_s251_253 g_s179_180) (not (mem g_s251_253 g_s250_252)) (mem g_s252_254 (|+->| NAT g_s179_180)) (mem g_s252_254 (perm g_s250_252)) (subset g_s253_255 g_s180_181) (mem g_s254_256 g_s180_181) (not (mem g_s254_256 g_s253_255)) (mem g_s255_257 (|+->| NAT g_s180_181)) (mem g_s255_257 (perm g_s253_255)) (subset g_s256_258 g_s181_182) (mem g_s257_259 g_s181_182) (not (mem g_s257_259 g_s256_258)) (mem g_s258_260 (|+->| NAT g_s181_182)) (mem g_s258_260 (perm g_s256_258)) (subset g_s259_261 g_s182_183) (mem g_s260_262 g_s182_183) (not (mem g_s260_262 g_s259_261)) (mem g_s261_263 (|+->| NAT g_s182_183)) (mem g_s261_263 (perm g_s259_261)) (subset g_s262_264 g_s183_184) (mem g_s263_265 g_s183_184) (not (mem g_s263_265 g_s262_264)) (mem g_s264_266 (|+->| NAT g_s183_184)) (mem g_s264_266 (perm g_s262_264)) (subset g_s265_267 g_s140_141) (not (mem g_s141_142 g_s265_267)) (= g_s265_267 (SET (mapplet g_s144_145 (mapplet g_s143_144 g_s142_143)))) (subset g_s266_268 g_s189_190) (mem g_s267_269 g_s189_190) (not (mem g_s267_269 g_s266_268)) (subset g_s268_270 g_s190_191) (mem g_s269_271 g_s190_191) (not (mem g_s269_271 g_s268_270)) (mem g_s270_272 (|+->| NAT g_s190_191)) (mem g_s270_272 (perm g_s268_270)) (mem g_s271_274 (|>->| g_s268_270 g_s272_273)) (subset g_s273_275 g_s191_192) (mem g_s274_276 g_s191_192) (not (mem g_s274_276 g_s273_275)) (mem g_s275_277 (|+->| NAT g_s191_192)) (mem g_s275_277 (perm g_s273_275)) (subset g_s276_278 g_s192_193) (mem g_s277_279 g_s192_193) (not (mem g_s277_279 g_s276_278)) (subset g_s278_280 g_s193_194) (mem g_s279_281 g_s193_194) (not (mem g_s279_281 g_s278_280)) (mem g_s280_282 (|+->| NAT g_s193_194)) (mem g_s280_282 (perm g_s278_280)) (subset g_s281_283 g_s194_195) (mem g_s282_284 g_s194_195) (not (mem g_s282_284 g_s281_283)) (mem g_s283_285 (|+->| NAT g_s194_195)) (mem g_s283_285 (perm g_s281_283)) (subset g_s284_286 g_s194_195) (mem g_s285_287 g_s194_195) (not (mem g_s285_287 g_s284_286)) (mem g_s286_288 (|+->| NAT g_s194_195)) (mem g_s286_288 (perm g_s284_286)) (subset g_s287_289 g_s194_195) (mem g_s288_290 g_s194_195) (not (mem g_s288_290 g_s287_289)) (mem g_s289_291 (|+->| NAT g_s194_195)) (mem g_s289_291 (perm g_s287_289)) (subset g_s284_286 g_s287_289) (subset g_s281_283 g_s284_286) (subset g_s290_292 g_s195_196) (mem g_s291_293 g_s195_196) (not (mem g_s291_293 g_s290_292)) (mem g_s292_294 (|+->| NAT g_s195_196)) (mem g_s292_294 (perm g_s290_292)) (subset g_s293_295 g_s195_196) (mem g_s294_296 g_s195_196) (not (mem g_s294_296 g_s293_295)) (mem g_s295_297 (|+->| NAT g_s195_196)) (mem g_s295_297 (perm g_s293_295)) (subset g_s290_292 g_s293_295) (= g_s296_298 NATURAL) (= g_s297_299 NATURAL) (= g_s298_300 NATURAL) (= g_s299_301 NATURAL) (= g_s300_302 NATURAL) (subset g_s301_303 g_s196_197) (mem g_s302_304 g_s196_197) (not (mem g_s302_304 g_s301_303)) (mem g_s303_305 (|+->| NAT g_s196_197)) (mem g_s303_305 (perm g_s301_303)) (subset g_s304_306 g_s197_198) (mem g_s305_307 g_s197_198) (not (mem g_s305_307 g_s304_306)) (mem g_s306_308 (|+->| NAT g_s197_198)) (mem g_s306_308 (perm g_s304_306)) (subset g_s307_309 g_s198_199) (mem g_s308_310 g_s198_199) (not (mem g_s308_310 g_s307_309)) (mem g_s309_311 (|+->| NAT g_s198_199)) (mem g_s309_311 (perm g_s307_309)) (subset g_s310_312 g_s199_200) (mem g_s311_313 g_s199_200) (not (mem g_s311_313 g_s310_312)) (mem g_s312_314 (|+->| NAT g_s199_200)) (mem g_s312_314 (perm g_s310_312)) (= (card g_s310_312) g_s313_315) (subset g_s314_316 g_s200_201) (mem g_s315_317 g_s200_201) (not (mem g_s315_317 g_s314_316)) (mem g_s316_318 (|+->| NAT g_s200_201)) (mem g_s316_318 (perm g_s314_316)) (subset g_s317_319 g_s201_202) (mem g_s318_320 g_s201_202) (not (mem g_s318_320 g_s317_319)) (mem g_s319_321 (|+->| NAT g_s201_202)) (mem g_s319_321 (perm g_s317_319)) (= (card g_s317_319) g_s320_322) (subset g_s321_323 g_s202_203) (mem g_s322_324 g_s202_203) (not (mem g_s322_324 g_s321_323)) (mem g_s323_325 (|+->| NAT g_s202_203)) (mem g_s323_325 (perm g_s321_323)) (subset g_s324_326 g_s203_204) (mem g_s325_327 g_s203_204) (not (mem g_s325_327 g_s324_326)) (mem g_s326_328 (|+->| NAT g_s203_204)) (mem g_s326_328 (perm g_s324_326)) (subset g_s327_329 g_s207_208) (mem g_s328_330 g_s207_208) (not (mem g_s328_330 g_s327_329)) (mem g_s329_331 (|+->| NAT g_s207_208)) (mem g_s329_331 (perm g_s327_329)) (subset g_s330_332 g_s208_209) (mem g_s331_333 g_s208_209) (not (mem g_s331_333 g_s330_332)) (mem g_s332_334 (|+->| NAT g_s208_209)) (mem g_s332_334 (perm g_s330_332)) (subset g_s333_335 g_s209_210) (mem g_s334_336 g_s209_210) (not (mem g_s334_336 g_s333_335)) (mem g_s335_337 (|+->| NAT g_s209_210)) (mem g_s335_337 (perm g_s333_335)) (subset g_s336_338 g_s210_211) (mem g_s337_339 g_s210_211) (not (mem g_s337_339 g_s336_338)) (mem g_s338_340 (|+->| NAT g_s210_211)) (mem g_s338_340 (perm g_s336_338)) (subset g_s339_341 g_s211_212) (mem g_s340_342 g_s211_212) (not (mem g_s340_342 g_s339_341)) (mem g_s341_343 (|+->| NAT g_s211_212)) (mem g_s341_343 (perm g_s339_341)) (subset g_s342_344 g_s212_213) (mem g_s343_345 g_s212_213) (not (mem g_s343_345 g_s342_344)) (mem g_s344_346 (|+->| NAT g_s212_213)) (mem g_s344_346 (perm g_s342_344)) (subset g_s345_347 g_s213_214) (mem g_s346_348 g_s213_214) (not (mem g_s346_348 g_s345_347)) (mem g_s347_349 (|+->| NAT g_s213_214)) (mem g_s347_349 (perm g_s345_347)) (subset g_s348_350 g_s214_215) (mem g_s349_351 g_s214_215) (not (mem g_s349_351 g_s348_350)) (mem g_s350_352 (|+->| NAT g_s214_215)) (mem g_s350_352 (perm g_s348_350)) (subset g_s351_353 g_s215_216) (mem g_s352_354 g_s215_216) (not (mem g_s352_354 g_s351_353)) (mem g_s353_355 (|+->| NAT g_s215_216)) (mem g_s353_355 (perm g_s351_353)) (subset g_s354_356 g_s216_217) (mem g_s355_357 g_s216_217) (not (mem g_s355_357 g_s354_356)) (mem g_s356_358 (|+->| NAT g_s216_217)) (mem g_s356_358 (perm g_s354_356)) (subset g_s357_359 g_s217_218) (mem g_s358_360 g_s217_218) (not (mem g_s358_360 g_s357_359)) (subset g_s359_361 g_s218_219) (mem g_s360_362 g_s218_219) (not (mem g_s360_362 g_s359_361)) (mem g_s361_363 (|+->| NAT g_s218_219)) (mem g_s361_363 (perm g_s359_361)) (subset g_s362_364 g_s219_220) (mem g_s363_365 g_s219_220) (not (mem g_s363_365 g_s362_364)) (mem g_s364_366 (|+->| NAT g_s219_220)) (mem g_s364_366 (perm g_s362_364))))
(define-fun |def_seext| () Bool (and (subset NAT NATURAL) (subset g_s235_237 NATURAL) (subset g_s236_238 NATURAL) (subset g_s237_239 NATURAL)))
(define-fun |def_lprp| () Bool (and (mem g_s365_367 (|-->| g_s190_191 g_s189_190)) (mem (range_restriction (domain_restriction g_s268_270 g_s365_367) g_s266_268) (|>->| g_s268_270 g_s266_268))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s367_368 g_s190_191))
(assert (mem g_s367_368 g_s268_270))
; PO 1 in group 0
(push 1)
(assert (not (mem g_s365_367 (|+->| (dom g_s365_367) (ran g_s365_367)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem g_s367_368 (dom g_s365_367))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)