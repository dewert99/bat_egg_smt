(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e141 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun e169 () U)
(declare-fun e171 () U)
(declare-fun e173 () U)
(declare-fun e175 () U)
(declare-fun e177 () U)
(declare-fun e179 () U)
(declare-fun e181 () U)
(declare-fun e183 () U)
(declare-fun e185 () U)
(declare-fun e187 () U)
(declare-fun e189 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e213 () U)
(declare-fun e215 () U)
(declare-fun e217 () U)
(declare-fun e219 () U)
(declare-fun e221 () U)
(declare-fun e223 () U)
(declare-fun e225 () U)
(declare-fun e227 () U)
(declare-fun e229 () U)
(declare-fun e231 () U)
(declare-fun e233 () U)
(declare-fun e235 () U)
(declare-fun e237 () U)
(declare-fun e239 () U)
(declare-fun e241 () U)
(declare-fun e243 () U)
(declare-fun e245 () U)
(declare-fun e247 () U)
(declare-fun e249 () U)
(declare-fun e251 () U)
(declare-fun e253 () U)
(declare-fun e255 () U)
(declare-fun e257 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s118_118 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_132 () U)
(declare-fun g_s131_131 () U)
(declare-fun g_s132_134 () U)
(declare-fun g_s133_133 () U)
(declare-fun g_s134_136 () U)
(declare-fun g_s135_135 () U)
(declare-fun g_s136_137 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_139 () U)
(declare-fun g_s139_140 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_142 () U)
(declare-fun g_s141_144 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_148 () U)
(declare-fun g_s144_150 () U)
(declare-fun g_s145_152 () U)
(declare-fun g_s146_154 () U)
(declare-fun g_s147_156 () U)
(declare-fun g_s148_158 () U)
(declare-fun g_s149_160 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_162 () U)
(declare-fun g_s151_164 () U)
(declare-fun g_s152_166 () U)
(declare-fun g_s153_168 () U)
(declare-fun g_s154_170 () U)
(declare-fun g_s155_172 () U)
(declare-fun g_s156_174 () U)
(declare-fun g_s157_176 () U)
(declare-fun g_s158_178 () U)
(declare-fun g_s159_180 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_182 () U)
(declare-fun g_s161_184 () U)
(declare-fun g_s162_186 () U)
(declare-fun g_s163_188 () U)
(declare-fun g_s164_190 () U)
(declare-fun g_s165_192 () U)
(declare-fun g_s166_194 () U)
(declare-fun g_s167_196 () U)
(declare-fun g_s168_198 () U)
(declare-fun g_s169_200 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_202 () U)
(declare-fun g_s171_204 () U)
(declare-fun g_s172_206 () U)
(declare-fun g_s173_208 () U)
(declare-fun g_s174_210 () U)
(declare-fun g_s175_212 () U)
(declare-fun g_s176_214 () U)
(declare-fun g_s177_216 () U)
(declare-fun g_s178_218 () U)
(declare-fun g_s179_220 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_222 () U)
(declare-fun g_s181_224 () U)
(declare-fun g_s182_226 () U)
(declare-fun g_s183_228 () U)
(declare-fun g_s184_230 () U)
(declare-fun g_s185_232 () U)
(declare-fun g_s186_234 () U)
(declare-fun g_s187_236 () U)
(declare-fun g_s188_238 () U)
(declare-fun g_s189_240 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_242 () U)
(declare-fun g_s191_244 () U)
(declare-fun g_s192_246 () U)
(declare-fun g_s193_248 () U)
(declare-fun g_s194_250 () U)
(declare-fun g_s195_252 () U)
(declare-fun g_s196_254 () U)
(declare-fun g_s197_256 () U)
(declare-fun g_s198_258 () U)
(declare-fun g_s199_259 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_260 () U)
(declare-fun g_s201_261 () U)
(declare-fun g_s202_262 () U)
(declare-fun g_s203_263 () U)
(declare-fun g_s204_264 () U)
(declare-fun g_s205_265 () U)
(declare-fun g_s206_266 () U)
(declare-fun g_s207_267 () U)
(declare-fun g_s208_268 () U)
(declare-fun g_s209_269 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_270 () U)
(declare-fun g_s211_271 () U)
(declare-fun g_s212_272 () U)
(declare-fun g_s213_273 () U)
(declare-fun g_s214_274 () U)
(declare-fun g_s215_275 () U)
(declare-fun g_s216_276 () U)
(declare-fun g_s217_277 () U)
(declare-fun g_s218_278 () U)
(declare-fun g_s219_279 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_280 () U)
(declare-fun g_s221_281 () U)
(declare-fun g_s222_282 () U)
(declare-fun g_s223_283 () U)
(declare-fun g_s224_284 () U)
(declare-fun g_s225_285 () U)
(declare-fun g_s226_287 () U)
(declare-fun g_s227_286 () U)
(declare-fun g_s228_289 () U)
(declare-fun g_s229_288 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_291 () U)
(declare-fun g_s231_290 () U)
(declare-fun g_s232_292 () U)
(declare-fun g_s233_294 () U)
(declare-fun g_s234_293 () U)
(declare-fun g_s235_296 () U)
(declare-fun g_s236_295 () U)
(declare-fun g_s237_297 () U)
(declare-fun g_s238_298 () U)
(declare-fun g_s239_299 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_300 () U)
(declare-fun g_s241_301 () U)
(declare-fun g_s242_302 () U)
(declare-fun g_s243_303 () U)
(declare-fun g_s244_304 () U)
(declare-fun g_s245_305 () U)
(declare-fun g_s246_306 () U)
(declare-fun g_s247_308 () U)
(declare-fun g_s248_307 () U)
(declare-fun g_s249_309 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_310 () U)
(declare-fun g_s251_311 () U)
(declare-fun g_s252_312 () U)
(declare-fun g_s253_313 () U)
(declare-fun g_s254_314 () U)
(declare-fun g_s255_316 () U)
(declare-fun g_s256_315 () U)
(declare-fun g_s257_317 () U)
(declare-fun g_s258_318 () U)
(declare-fun g_s259_319 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_320 () U)
(declare-fun g_s261_321 () U)
(declare-fun g_s262_322 () U)
(declare-fun g_s263_323 () U)
(declare-fun g_s264_324 () U)
(declare-fun g_s265_325 () U)
(declare-fun g_s266_326 () U)
(declare-fun g_s267_327 () U)
(declare-fun g_s268_328 () U)
(declare-fun g_s269_329 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_331 () U)
(declare-fun g_s271_330 () U)
(declare-fun g_s272_332 () U)
(declare-fun g_s273_333 () U)
(declare-fun g_s274_334 () U)
(declare-fun g_s275_335 () U)
(declare-fun g_s276_336 () U)
(declare-fun g_s277_337 () U)
(declare-fun g_s278_338 () U)
(declare-fun g_s279_339 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_341 () U)
(declare-fun g_s281_340 () U)
(declare-fun g_s282_342 () U)
(declare-fun g_s283_343 () U)
(declare-fun g_s284_344 () U)
(declare-fun g_s285_345 () U)
(declare-fun g_s286_346 () U)
(declare-fun g_s287_347 () U)
(declare-fun g_s288_348 () U)
(declare-fun g_s289_349 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_350 () U)
(declare-fun g_s291_351 () U)
(declare-fun g_s292_352 () U)
(declare-fun g_s293_353 () U)
(declare-fun g_s294_354 () U)
(declare-fun g_s294$1_359 () U)
(declare-fun g_s295_355 () U)
(declare-fun g_s295$1_357 () U)
(declare-fun g_s296_356 () U)
(declare-fun g_s296$1_358 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_360 () U)
(declare-fun g_s301_361 () U)
(declare-fun g_s302_362 () U)
(declare-fun g_s303_363 () U)
(declare-fun g_s304_364 () U)
(declare-fun g_s307_365 () U)
(declare-fun g_s308_367 () U)
(declare-fun g_s308$1_366 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))) (= g_s8_9 (SET (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 g_s9_10))))) (= g_s13_14 (SET (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 g_s14_15)))))))))) (= g_s23_24 (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))) (= g_s27_28 (SET (mapplet g_s29_30 g_s28_29))) (= g_s30_31 (SET (mapplet g_s33_34 (mapplet g_s32_33 g_s31_32)))) (= g_s34_35 (SET (mapplet g_s36_37 g_s35_36))) (= g_s37_38 (SET (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39))))) (= g_s42_43 (SET (mapplet g_s44_45 g_s43_44))) (= g_s45_46 (SET (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47)))) (= g_s49_50 (SET (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51)))) (= g_s53_54 (SET (mapplet g_s55_56 g_s54_55))) (= g_s56_57 (SET (mapplet g_s59_60 (mapplet g_s58_59 g_s57_58)))) (= g_s60_61 (SET (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 g_s61_62)))))) (= g_s66_67 (SET (mapplet g_s69_70 (mapplet g_s68_69 g_s67_68)))) (= g_s70_71 (SET (mapplet g_s73_74 (mapplet g_s72_73 g_s71_72)))) (= g_s74_75 (SET (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76)))) (= g_s78_79 (SET (mapplet g_s81_82 (mapplet g_s80_81 g_s79_80)))) (= g_s82_83 (SET (mapplet g_s85_86 (mapplet g_s84_85 g_s83_84)))) (= g_s86_87 (SET (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 (mapplet g_s90_91 (mapplet g_s89_90 (mapplet g_s88_89 g_s87_88)))))))) (not (= g_s94_95 empty)) (not (= g_s95_96 empty)) (not (= g_s96_97 empty)) (not (= g_s97_98 empty)) (= g_s98_99 (SET (mapplet g_s108_109 (mapplet g_s107_108 (mapplet g_s106_107 (mapplet g_s105_106 (mapplet g_s104_105 (mapplet g_s103_104 (mapplet g_s102_103 (mapplet g_s101_102 (mapplet g_s100_101 g_s99_100))))))))))) (subset g_s109_110 g_s94_95) (mem g_s110_111 g_s94_95) (not (mem g_s110_111 g_s109_110)) (subset g_s111_112 g_s95_96) (mem g_s112_113 g_s95_96) (not (mem g_s112_113 g_s111_112)) (subset g_s113_114 g_s96_97) (mem g_s114_115 g_s96_97) (not (mem g_s114_115 g_s113_114)) (subset g_s115_116 g_s97_98) (mem g_s116_117 g_s97_98) (not (mem g_s116_117 g_s115_116)) (subset g_s117_119 g_s118_118) (not (mem g_s119_120 g_s117_119)) (= g_s117_119 (SET (mapplet g_s122_123 (mapplet g_s121_122 g_s120_121)))) (mem g_s123_124 (|+->| g_s115_116 g_s113_114)) (mem g_s124_125 (|+->| g_s113_114 g_s115_116)) (mem g_s125_126 g_s111_112) (mem g_s126_127 g_s109_110) (mem g_s127_128 g_s111_112) (mem g_s128_129 g_s111_112) (mem g_s129_130 g_s115_116) (mem g_s130_132 g_s131_131) (mem g_s132_134 g_s133_133) (mem g_s134_136 g_s135_135) (mem g_s136_137 NAT)))
(define-fun |def_seext| () Bool (and (= g_s137_138 TRUE) (= g_s138_139 FALSE) (= g_s139_140 e0) (= g_s140_142 e141) (= g_s141_144 e143) (= g_s142_146 e145) (= g_s143_148 e147) (= g_s144_150 e149) (= g_s145_152 e151) (= g_s146_154 e153) (= g_s147_156 e155) (= g_s148_158 e157) (= g_s149_160 e159) (= g_s150_162 e161) (= g_s151_164 e163) (= g_s152_166 e165) (= g_s153_168 e167) (= g_s154_170 e169) (= g_s155_172 e171) (= g_s156_174 e173) (= g_s157_176 e175) (= g_s158_178 e177) (= g_s159_180 e179) (= g_s160_182 e181) (= g_s161_184 e183) (= g_s162_186 e185) (= g_s163_188 e187) (= g_s164_190 e189) (= g_s165_192 e191) (= g_s166_194 e193) (= g_s167_196 e195) (= g_s168_198 e197) (= g_s169_200 e199) (= g_s170_202 e201) (= g_s171_204 e203) (= g_s172_206 e205) (= g_s173_208 e207) (= g_s174_210 e209) (= g_s175_212 e211) (= g_s176_214 e213) (= g_s177_216 e215) (= g_s178_218 e217) (= g_s179_220 e219) (= g_s180_222 e221) (= g_s181_224 e223) (= g_s182_226 e225) (= g_s183_228 e227) (= g_s184_230 e229) (= g_s185_232 e231) (= g_s186_234 e233) (= g_s187_236 e235) (= g_s188_238 e237) (= g_s189_240 e239) (= g_s190_242 e241) (= g_s191_244 e243) (= g_s192_246 e245) (= g_s193_248 e247) (= g_s194_250 e249) (= g_s195_252 e251) (= g_s196_254 e253) (= g_s197_256 e255) (= g_s198_258 e257) (= g_s199_259 g_s99_100) (= g_s200_260 g_s100_101) (= g_s201_261 g_s101_102) (= g_s202_262 g_s102_103) (= g_s203_263 g_s103_104) (= g_s204_264 g_s104_105) (= g_s205_265 g_s105_106) (= g_s206_266 g_s106_107) (= g_s207_267 g_s107_108) (= g_s208_268 g_s108_109) (mem g_s209_269 g_s97_98) (mem g_s210_270 g_s95_96) (mem g_s211_271 BOOL) (mem g_s212_272 BOOL) (mem g_s213_273 BOOL) (mem g_s214_274 g_s97_98) (mem g_s215_275 g_s95_96) (mem g_s216_276 BOOL) (mem g_s217_277 BOOL) (mem g_s218_278 BOOL) (mem g_s219_279 g_s97_98) (mem g_s220_280 g_s95_96) (mem g_s221_281 BOOL) (mem g_s222_282 BOOL) (mem g_s223_283 BOOL) (mem g_s224_284 g_s97_98) (mem g_s225_285 g_s95_96) (mem g_s226_287 g_s227_286) (mem g_s228_289 g_s229_288) (mem g_s230_291 g_s231_290) (mem g_s232_292 BOOL) (mem g_s233_294 g_s234_293) (mem g_s235_296 g_s236_295) (mem g_s237_297 BOOL) (mem g_s238_298 g_s234_293) (mem g_s239_299 g_s236_295) (mem g_s240_300 BOOL) (mem g_s241_301 (|-->| g_s234_293 BOOL)) (mem g_s242_302 BOOL) (mem g_s243_303 BOOL) (mem g_s244_304 BOOL) (mem g_s245_305 g_s97_98) (mem g_s246_306 g_s95_96) (mem g_s247_308 g_s248_307) (mem g_s249_309 g_s49_50) (mem g_s250_310 BOOL) (mem g_s251_311 BOOL) (mem g_s252_312 BOOL) (mem g_s253_313 g_s97_98) (mem g_s254_314 g_s95_96) (mem g_s255_316 g_s256_315) (mem g_s257_317 g_s56_57) (mem g_s258_318 BOOL) (mem g_s259_319 BOOL) (mem g_s260_320 BOOL) (mem g_s261_321 g_s97_98) (mem g_s262_322 g_s95_96) (mem g_s263_323 g_s96_97) (mem g_s264_324 BOOL) (mem g_s265_325 BOOL) (mem g_s266_326 BOOL) (mem g_s267_327 g_s97_98) (mem g_s268_328 g_s95_96) (mem g_s269_329 g_s95_96) (mem g_s270_331 g_s271_330) (mem g_s272_332 g_s53_54) (mem g_s273_333 BOOL) (mem g_s274_334 BOOL) (mem g_s275_335 BOOL) (mem g_s276_336 g_s97_98) (mem g_s277_337 g_s95_96) (mem g_s278_338 g_s95_96) (mem g_s279_339 g_s271_330) (mem g_s280_341 g_s281_340) (mem g_s282_342 BOOL) (mem g_s283_343 BOOL) (mem g_s284_344 BOOL) (mem g_s285_345 BOOL) (mem g_s286_346 BOOL) (mem g_s287_347 BOOL) (mem g_s288_348 BOOL) (mem g_s289_349 BOOL) (mem g_s290_350 BOOL) (mem g_s291_351 BOOL) (mem g_s292_352 BOOL) (mem g_s293_353 BOOL)))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset g_s294_354 g_s98_99) (subset g_s295_355 g_s98_99) (subset g_s296_356 g_s98_99)))
(define-fun |def_inv| () Bool (and (= g_s295_355 g_s295$1_357) (= g_s296_356 g_s296$1_358) (= g_s294_354 g_s294$1_359) (subset g_s295$1_357 g_s98_99) (subset g_s296$1_358 g_s98_99) (subset g_s294$1_359 g_s98_99)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
; PO 1 in group 0
(assert (not (subset empty g_s98_99)))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s300_360 g_s98_99))
(assert (mem g_s301_361 BOOL))
(assert (mem g_s302_362 BOOL))
(assert (mem g_s303_363 g_s97_98))
(assert (mem g_s304_364 g_s95_96))
(assert (mem g_s300_360 g_s98_99))
(assert (mem g_s301_361 BOOL))
(assert (mem g_s302_362 BOOL))
(assert (mem g_s303_363 g_s97_98))
(assert (mem g_s304_364 g_s95_96))
(define-fun lh_1 () Bool (= g_s301_361 TRUE))
(define-fun lh_2 () Bool (= g_s302_362 TRUE))
(define-fun lh_3 () Bool (= g_s303_363 g_s129_130))
(define-fun lh_4 () Bool (= g_s304_364 g_s125_126))
(define-fun lh_5 () Bool (not (and (= g_s302_362 TRUE) (= g_s303_363 g_s129_130) (= g_s304_364 g_s125_126))))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_5) (subset (set_diff g_s296$1_358 (SET g_s300_360)) g_s98_99))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_5) (subset (binary_union g_s295$1_357 (SET g_s300_360)) g_s98_99))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset (binary_union g_s295$1_357 (SET g_s300_360)) g_s98_99))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset (binary_union g_s296$1_358 (SET g_s300_360)) g_s98_99))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 2
(assert (not (subset (image (inverse (SET (mapplet (mapplet g_s108_109 g_s287_347) (mapplet (mapplet g_s107_108 g_s286_346) (mapplet (mapplet g_s106_107 g_s293_353) (mapplet (mapplet g_s105_106 g_s292_352) (mapplet (mapplet g_s104_105 g_s291_351) (mapplet (mapplet g_s103_104 g_s290_350) (mapplet (mapplet g_s102_103 g_s289_349) (mapplet (mapplet g_s101_102 g_s288_348) (mapplet (mapplet g_s100_101 g_s285_345) (mapplet g_s99_100 FALSE)))))))))))) (SET TRUE)) g_s98_99)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s307_365 g_s98_99))
(assert (= g_s308_367 g_s308$1_366))
(assert (mem g_s307_365 g_s98_99))
; PO 1 in group 3
(assert (not (= (bool (mem g_s307_365 g_s294_354)) (bool (mem g_s307_365 g_s294$1_359)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s307_365 g_s98_99))
(assert (= g_s308_367 g_s308$1_366))
(assert (mem g_s307_365 g_s98_99))
; PO 1 in group 4
(assert (not (= (bool (mem g_s307_365 g_s295_355)) (bool (mem g_s307_365 g_s295$1_357)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s307_365 g_s98_99))
(assert (= g_s308_367 g_s308$1_366))
(assert (mem g_s307_365 g_s98_99))
; PO 1 in group 5
(assert (not (= (bool (mem g_s307_365 g_s296_356)) (bool (mem g_s307_365 g_s296$1_358)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)