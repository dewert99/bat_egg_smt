(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e84 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_102 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_107 () U)
(declare-fun g_s106_108 () U)
(declare-fun g_s107_109 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_112 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s112_114 () U)
(declare-fun g_s113_115 () U)
(declare-fun g_s114_116 () U)
(declare-fun g_s115_117 () U)
(declare-fun g_s116_118 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s123_120 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_85 () U)
(declare-fun g_s84_86 () U)
(declare-fun g_s85_87 () U)
(declare-fun g_s86_88 () U)
(declare-fun g_s87_89 () U)
(declare-fun g_s88_90 () U)
(declare-fun g_s89_91 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_92 () U)
(declare-fun g_s91_93 () U)
(declare-fun g_s92_94 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s94_96 () U)
(declare-fun g_s95_97 () U)
(declare-fun g_s96_98 () U)
(declare-fun g_s97_99 () U)
(declare-fun g_s98_100 () U)
(declare-fun g_s99_101 () U)
(declare-fun e82 () U)
(declare-fun e81 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (= g_s10_11 (SET (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12))))) (= g_s15_16 (SET (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 g_s16_17))))) (= g_s20_21 (SET (mapplet g_s23_24 (mapplet g_s22_23 g_s21_22)))) (= g_s24_25 (SET (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 g_s25_26))))) (= g_s29_30 (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 g_s30_31))))) (= g_s34_35 (SET (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 g_s35_36))))) (= g_s39_40 (SET (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 g_s40_41))))) (= g_s44_45 (SET (mapplet g_s47_48 (mapplet g_s46_47 g_s45_46)))) (= g_s48_49 (SET (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 g_s49_50))))) (= g_s53_54 (SET (mapplet g_s56_57 (mapplet g_s55_56 g_s54_55)))) (= g_s57_58 (SET (mapplet g_s60_61 (mapplet g_s59_60 g_s58_59)))) (= g_s61_62 (SET (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 g_s62_63)))))))) (= g_s69_70 (SET (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 g_s70_71))))) (= g_s74_75 (SET (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76))))) (mem g_s79_80 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s79_80 (binary_union e82 e81)) (mem g_s82_83 (|-->| BOOL NAT)) (= g_s82_83 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e84))))))
(define-fun |def_seext| () Bool  (mem g_s83_85 g_s8_9))
(define-fun |def_lprp| () Bool (and (not (= g_s84_86 empty)) (not (= g_s85_87 empty)) (not (= g_s86_88 empty)) (not (= g_s87_89 empty)) (not (= g_s88_90 empty)) (not (= g_s89_91 empty)) (not (= g_s90_92 empty)) (= g_s91_93 (SET (mapplet g_s95_97 (mapplet g_s94_96 (mapplet g_s93_95 g_s92_94))))) (subset g_s96_98 g_s84_86) (mem g_s97_99 g_s84_86) (not (mem g_s97_99 g_s96_98)) (mem g_s98_100 (|+->| NAT g_s84_86)) (mem g_s98_100 (perm g_s96_98)) (subset g_s99_101 g_s85_87) (mem g_s100_102 g_s85_87) (not (mem g_s100_102 g_s99_101)) (mem g_s101_103 (|+->| NAT g_s85_87)) (mem g_s101_103 (perm g_s99_101)) (subset g_s102_104 g_s86_88) (mem g_s103_105 g_s86_88) (not (mem g_s103_105 g_s102_104)) (mem g_s104_106 (|+->| NAT g_s86_88)) (mem g_s104_106 (perm g_s102_104)) (subset g_s105_107 g_s87_89) (mem g_s106_108 g_s87_89) (not (mem g_s106_108 g_s105_107)) (mem g_s107_109 (|+->| NAT g_s87_89)) (mem g_s107_109 (perm g_s105_107)) (subset g_s108_110 g_s88_90) (mem g_s109_111 g_s88_90) (not (mem g_s109_111 g_s108_110)) (mem g_s110_112 (|+->| NAT g_s88_90)) (mem g_s110_112 (perm g_s108_110)) (subset g_s111_113 g_s89_91) (mem g_s112_114 g_s89_91) (not (mem g_s112_114 g_s111_113)) (mem g_s113_115 (|+->| NAT g_s89_91)) (mem g_s113_115 (perm g_s111_113)) (subset g_s114_116 g_s90_92) (mem g_s115_117 g_s90_92) (not (mem g_s115_117 g_s114_116)) (mem g_s116_118 (|+->| NAT g_s90_92)) (mem g_s116_118 (perm g_s114_116)) (subset g_s117_119 g_s48_49) (not (mem g_s49_50 g_s117_119)) (= g_s117_119 (SET (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51))))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool (and (not (= g_s84_86 empty)) (not (= g_s85_87 empty)) (not (= g_s86_88 empty)) (not (= g_s87_89 empty)) (not (= g_s88_90 empty)) (not (= g_s89_91 empty)) (not (= g_s90_92 empty)) (= g_s91_93 (SET (mapplet g_s95_97 (mapplet g_s94_96 (mapplet g_s93_95 g_s92_94)))))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_sets|)
(define-fun lh_1 () Bool (subset g_s96_98 g_s84_86))
(define-fun lh_2 () Bool (mem g_s97_99 g_s84_86))
(define-fun lh_3 () Bool (not (mem g_s97_99 g_s96_98)))
(define-fun lh_4 () Bool (mem g_s98_100 (|+->| NAT g_s84_86)))
(define-fun lh_5 () Bool (mem g_s98_100 (perm g_s96_98)))
(define-fun lh_6 () Bool (subset g_s99_101 g_s85_87))
(define-fun lh_7 () Bool (mem g_s100_102 g_s85_87))
(define-fun lh_8 () Bool (not (mem g_s100_102 g_s99_101)))
(define-fun lh_9 () Bool (mem g_s101_103 (|+->| NAT g_s85_87)))
(define-fun lh_10 () Bool (mem g_s101_103 (perm g_s99_101)))
(define-fun lh_11 () Bool (subset g_s102_104 g_s86_88))
(define-fun lh_12 () Bool (mem g_s103_105 g_s86_88))
(define-fun lh_13 () Bool (not (mem g_s103_105 g_s102_104)))
(define-fun lh_14 () Bool (mem g_s104_106 (|+->| NAT g_s86_88)))
(define-fun lh_15 () Bool (mem g_s104_106 (perm g_s102_104)))
(define-fun lh_16 () Bool (subset g_s105_107 g_s87_89))
(define-fun lh_17 () Bool (mem g_s106_108 g_s87_89))
(define-fun lh_18 () Bool (not (mem g_s106_108 g_s105_107)))
(define-fun lh_19 () Bool (mem g_s107_109 (|+->| NAT g_s87_89)))
(define-fun lh_20 () Bool (mem g_s107_109 (perm g_s105_107)))
(define-fun lh_21 () Bool (subset g_s108_110 g_s88_90))
(define-fun lh_22 () Bool (mem g_s109_111 g_s88_90))
(define-fun lh_23 () Bool (not (mem g_s109_111 g_s108_110)))
(define-fun lh_24 () Bool (mem g_s110_112 (|+->| NAT g_s88_90)))
(define-fun lh_25 () Bool (mem g_s110_112 (perm g_s108_110)))
(define-fun lh_26 () Bool (subset g_s111_113 g_s89_91))
(define-fun lh_27 () Bool (mem g_s112_114 g_s89_91))
(define-fun lh_28 () Bool (not (mem g_s112_114 g_s111_113)))
(define-fun lh_29 () Bool (mem g_s113_115 (|+->| NAT g_s89_91)))
(define-fun lh_30 () Bool (mem g_s113_115 (perm g_s111_113)))
(define-fun lh_31 () Bool (subset g_s114_116 g_s90_92))
(define-fun lh_32 () Bool (mem g_s115_117 g_s90_92))
(define-fun lh_33 () Bool (not (mem g_s115_117 g_s114_116)))
(define-fun lh_34 () Bool (mem g_s116_118 (|+->| NAT g_s90_92)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s96_98 (FIN g_s96_98)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s99_101 (FIN g_s99_101)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem g_s102_104 (FIN g_s102_104)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (mem g_s105_107 (FIN g_s105_107)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (mem g_s108_110 (FIN g_s108_110)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29) (mem g_s111_113 (FIN g_s111_113)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34) (mem g_s114_116 (FIN g_s114_116)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s96_98) INT))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s96_98 (FIN g_s96_98))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (mem g_s96_98 (FIN g_s96_98)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s98_100)))
; PO 1 in group 2
(assert (not (mem g_s98_100 (|+->| (dom g_s98_100) (ran g_s98_100)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s99_101) INT))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s99_101 (FIN g_s99_101))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> lh_1 (mem g_s99_101 (FIN g_s99_101)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s101_103)))
; PO 1 in group 4
(assert (not (mem g_s101_103 (|+->| (dom g_s101_103) (ran g_s101_103)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s102_104) INT))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s102_104 (FIN g_s102_104))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> lh_1 (mem g_s102_104 (FIN g_s102_104)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s104_106)))
; PO 1 in group 6
(assert (not (mem g_s104_106 (|+->| (dom g_s104_106) (ran g_s104_106)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s105_107) INT))
; PO 1 in group 7
(push 1)
(assert (not (mem g_s105_107 (FIN g_s105_107))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> lh_1 (mem g_s105_107 (FIN g_s105_107)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s107_109)))
; PO 1 in group 8
(assert (not (mem g_s107_109 (|+->| (dom g_s107_109) (ran g_s107_109)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s108_110) INT))
; PO 1 in group 9
(push 1)
(assert (not (mem g_s108_110 (FIN g_s108_110))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> lh_1 (mem g_s108_110 (FIN g_s108_110)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s110_112)))
; PO 1 in group 10
(assert (not (mem g_s110_112 (|+->| (dom g_s110_112) (ran g_s110_112)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s111_113) INT))
; PO 1 in group 11
(push 1)
(assert (not (mem g_s111_113 (FIN g_s111_113))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> lh_1 (mem g_s111_113 (FIN g_s111_113)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s113_115)))
; PO 1 in group 12
(assert (not (mem g_s113_115 (|+->| (dom g_s113_115) (ran g_s113_115)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s114_116) INT))
; PO 1 in group 13
(push 1)
(assert (not (mem g_s114_116 (FIN g_s114_116))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> lh_1 (mem g_s114_116 (FIN g_s114_116)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_120 NATURAL))
(assert (mem g_s123_120 (dom g_s116_118)))
; PO 1 in group 14
(assert (not (mem g_s116_118 (|+->| (dom g_s116_118) (ran g_s116_118)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)