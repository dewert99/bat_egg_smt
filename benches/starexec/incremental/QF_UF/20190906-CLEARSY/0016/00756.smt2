(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e28 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_102 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_107 () U)
(declare-fun g_s106_108 () U)
(declare-fun g_s107_109 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_112 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s112_114 () U)
(declare-fun g_s113_115 () U)
(declare-fun g_s114_116 () U)
(declare-fun g_s115_117 () U)
(declare-fun g_s116_118 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s118_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121$1_122 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_25 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_54 () U)
(declare-fun g_s53_55 () U)
(declare-fun g_s54_56 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_58 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58_60 () U)
(declare-fun g_s59_61 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_62 () U)
(declare-fun g_s61_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s63_65 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s69_71 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s71_73 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s73_75 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s75_77 () U)
(declare-fun g_s76_78 () U)
(declare-fun g_s77_79 () U)
(declare-fun g_s78_80 () U)
(declare-fun g_s79_81 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_82 () U)
(declare-fun g_s81_83 () U)
(declare-fun g_s82_84 () U)
(declare-fun g_s83_85 () U)
(declare-fun g_s84_86 () U)
(declare-fun g_s85_87 () U)
(declare-fun g_s86_88 () U)
(declare-fun g_s87_89 () U)
(declare-fun g_s88_91 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_92 () U)
(declare-fun g_s91_93 () U)
(declare-fun g_s92_94 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s94_96 () U)
(declare-fun g_s95_97 () U)
(declare-fun g_s96_98 () U)
(declare-fun g_s97_99 () U)
(declare-fun g_s98_100 () U)
(declare-fun g_s99_101 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (not (= g_s12_13 empty)) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (not (= g_s15_16 empty)) (not (= g_s16_17 empty)) (= g_s17_18 (SET (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 g_s18_19))))) (not (= g_s22_23 empty)) (not (= g_s23_24 empty)) (= g_s24_26 (interval (iuminus g_s25_25) g_s25_25)) (= g_s26_27 (interval e0 g_s25_25)) (= g_s27_29 (interval e28 g_s25_25)) (subset g_s27_29 g_s26_27) (subset g_s26_27 g_s24_26) (subset g_s26_27 NAT) (subset g_s27_29 NAT1) (subset g_s24_26 INT) (mem g_s28_30 g_s24_26) (mem g_s28_30 g_s26_27) (not (mem g_s28_30 g_s27_29)) (mem g_s29_31 g_s24_26) (not (mem g_s29_31 g_s26_27)) (= g_s30_32 (interval (iuminus g_s25_25) g_s25_25)) (subset g_s30_32 INT) (subset g_s31_33 g_s0_1) (mem g_s32_34 g_s0_1) (mem g_s32_34 g_s31_33) (mem g_s33_35 g_s0_1) (not (mem g_s33_35 g_s31_33)) (mem g_s34_36 (|+->| NAT g_s0_1)) (mem g_s34_36 (perm g_s31_33)) (= (card g_s31_33) g_s35_37) (subset g_s36_38 g_s1_2) (mem g_s37_39 g_s1_2) (mem g_s37_39 g_s36_38) (mem g_s38_40 g_s1_2) (not (mem g_s38_40 g_s36_38)) (mem g_s39_41 (|+->| NAT g_s1_2)) (mem g_s39_41 (perm g_s36_38)) (= (card g_s36_38) g_s40_42) (subset g_s41_43 g_s2_3) (mem g_s42_44 g_s2_3) (not (mem g_s42_44 g_s41_43)) (mem g_s43_45 (|+->| NAT g_s2_3)) (mem g_s43_45 (perm g_s41_43)) (subset g_s44_46 g_s3_4) (mem g_s45_47 g_s3_4) (not (mem g_s45_47 g_s44_46)) (mem g_s46_48 (|+->| NAT g_s3_4)) (mem g_s46_48 (perm g_s44_46)) (subset g_s47_49 g_s4_5) (mem g_s48_50 g_s4_5) (not (mem g_s48_50 g_s47_49)) (mem g_s49_51 (|+->| NAT g_s4_5)) (mem g_s49_51 (perm g_s47_49)) (subset g_s50_52 g_s5_6) (mem g_s51_53 g_s5_6) (not (mem g_s51_53 g_s50_52)) (mem g_s52_54 (|+->| NAT g_s5_6)) (mem g_s52_54 (perm g_s50_52)) (subset g_s53_55 g_s6_7) (mem g_s54_56 g_s6_7) (not (mem g_s54_56 g_s53_55)) (mem g_s55_57 (|+->| NAT g_s6_7)) (mem g_s55_57 (perm g_s53_55)) (subset g_s56_58 g_s7_8) (mem g_s57_59 g_s7_8) (not (mem g_s57_59 g_s56_58)) (mem g_s58_60 (|+->| NAT g_s7_8)) (mem g_s58_60 (perm g_s56_58)) (subset g_s59_61 g_s8_9) (mem g_s60_62 g_s8_9) (not (mem g_s60_62 g_s59_61)) (mem g_s61_63 (|+->| NAT g_s8_9)) (mem g_s61_63 (perm g_s59_61)) (subset g_s62_64 g_s9_10) (mem g_s63_65 g_s9_10) (not (mem g_s63_65 g_s62_64)) (mem g_s64_66 (|+->| NAT g_s9_10)) (mem g_s64_66 (perm g_s62_64)) (mem g_s65_68 (|-->| (set_prod g_s66_67 g_s66_67) g_s66_67)) (subset g_s67_69 g_s10_11) (mem g_s68_70 g_s10_11) (not (mem g_s68_70 g_s67_69)) (mem g_s69_71 (|+->| NAT g_s10_11)) (mem g_s69_71 (perm g_s67_69)) (subset g_s70_72 g_s11_12) (mem g_s71_73 g_s11_12) (not (mem g_s71_73 g_s70_72)) (mem g_s72_74 (|+->| NAT g_s11_12)) (mem g_s72_74 (perm g_s70_72)) (subset g_s73_75 g_s12_13) (mem g_s74_76 g_s12_13) (not (mem g_s74_76 g_s73_75)) (mem g_s75_77 (|+->| NAT g_s12_13)) (mem g_s75_77 (perm g_s73_75)) (subset g_s76_78 g_s13_14) (mem g_s77_79 g_s13_14) (not (mem g_s77_79 g_s76_78)) (mem g_s78_80 (|+->| NAT g_s13_14)) (mem g_s78_80 (perm g_s76_78)) (subset g_s79_81 g_s14_15) (mem g_s80_82 g_s14_15) (not (mem g_s80_82 g_s79_81)) (mem g_s81_83 (|+->| NAT g_s14_15)) (mem g_s81_83 (perm g_s79_81)) (subset g_s82_84 g_s15_16) (mem g_s83_85 g_s15_16) (not (mem g_s83_85 g_s82_84)) (mem g_s84_86 (|+->| NAT g_s15_16)) (mem g_s84_86 (perm g_s82_84)) (subset g_s85_87 g_s16_17) (mem g_s86_88 g_s16_17) (not (mem g_s86_88 g_s85_87)) (mem g_s87_89 (|+->| NAT g_s16_17)) (mem g_s87_89 (perm g_s85_87)) (subset g_s88_91 g_s89_90) (not (mem g_s90_92 g_s88_91)) (= g_s88_91 (SET (mapplet g_s93_95 (mapplet g_s92_94 g_s91_93)))) (subset g_s94_96 g_s22_23) (mem g_s95_97 g_s22_23) (not (mem g_s95_97 g_s94_96)) (mem g_s96_98 (|+->| NAT g_s22_23)) (mem g_s96_98 (perm g_s94_96)) (subset g_s97_99 g_s22_23) (mem g_s98_100 g_s22_23) (not (mem g_s98_100 g_s97_99)) (mem g_s99_101 (|+->| NAT g_s22_23)) (mem g_s99_101 (perm g_s97_99)) (subset g_s100_102 g_s22_23) (mem g_s101_103 g_s22_23) (not (mem g_s101_103 g_s100_102)) (mem g_s102_104 (|+->| NAT g_s22_23)) (mem g_s102_104 (perm g_s100_102)) (subset g_s97_99 g_s100_102) (subset g_s94_96 g_s97_99) (subset g_s103_105 g_s23_24) (mem g_s104_106 g_s23_24) (not (mem g_s104_106 g_s103_105)) (mem g_s105_107 (|+->| NAT g_s23_24)) (mem g_s105_107 (perm g_s103_105)) (subset g_s106_108 g_s23_24) (mem g_s107_109 g_s23_24) (not (mem g_s107_109 g_s106_108)) (mem g_s108_110 (|+->| NAT g_s23_24)) (mem g_s108_110 (perm g_s106_108)) (subset g_s103_105 g_s106_108) (mem g_s109_111 (|+->| g_s47_49 g_s94_96)) (mem g_s110_112 (|+->| g_s47_49 g_s94_96)) (mem g_s111_113 (|+->| g_s62_64 g_s94_96)) (mem g_s112_114 (|+->| g_s76_78 g_s94_96)) (mem g_s113_115 (|+->| g_s76_78 g_s94_96))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (subset g_s114_116 g_s94_96) (subset g_s115_117 g_s76_78) (subset g_s116_118 g_s62_64) (subset g_s117_119 g_s76_78) (mem g_s118_120 (|+->| g_s76_78 g_s26_27))))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s120_121 g_s13_14))
(assert (mem g_s120_121 g_s76_78))
(define-fun lh_1 () Bool (mem g_s120_121 (dom g_s118_120)))
(define-fun lh_2 () Bool (mem g_s121$1_122 g_s24_26))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2) (mem g_s118_120 (|+->| (dom g_s118_120) (ran g_s118_120))))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s120_121 g_s13_14))
(assert (mem g_s120_121 g_s76_78))
(assert (mem g_s120_121 (dom g_s118_120)))
(define-fun lh_1 () Bool (mem g_s121$1_122 g_s24_26))
; PO 1 in group 1
(assert (not (=> lh_1 (mem g_s118_120 (|+->| (dom g_s118_120) (ran g_s118_120))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)