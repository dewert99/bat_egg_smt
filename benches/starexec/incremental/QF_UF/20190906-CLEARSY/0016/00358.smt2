(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e109 () U)
(declare-fun e111 () U)
(declare-fun e113 () U)
(declare-fun e115 () U)
(declare-fun e117 () U)
(declare-fun e119 () U)
(declare-fun e121 () U)
(declare-fun e123 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e129 () U)
(declare-fun e131 () U)
(declare-fun e133 () U)
(declare-fun e135 () U)
(declare-fun e137 () U)
(declare-fun e139 () U)
(declare-fun e141 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun e169 () U)
(declare-fun e171 () U)
(declare-fun e173 () U)
(declare-fun e175 () U)
(declare-fun e177 () U)
(declare-fun e179 () U)
(declare-fun e181 () U)
(declare-fun e183 () U)
(declare-fun e185 () U)
(declare-fun e187 () U)
(declare-fun e189 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e213 () U)
(declare-fun e215 () U)
(declare-fun e217 () U)
(declare-fun e219 () U)
(declare-fun e221 () U)
(declare-fun e223 () U)
(declare-fun e225 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_112 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_114 () U)
(declare-fun g_s111_116 () U)
(declare-fun g_s112_118 () U)
(declare-fun g_s113_120 () U)
(declare-fun g_s114_122 () U)
(declare-fun g_s115_124 () U)
(declare-fun g_s116_126 () U)
(declare-fun g_s117_128 () U)
(declare-fun g_s118_130 () U)
(declare-fun g_s119_132 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_134 () U)
(declare-fun g_s121_136 () U)
(declare-fun g_s122_138 () U)
(declare-fun g_s123_140 () U)
(declare-fun g_s124_142 () U)
(declare-fun g_s125_144 () U)
(declare-fun g_s126_146 () U)
(declare-fun g_s127_148 () U)
(declare-fun g_s128_150 () U)
(declare-fun g_s129_152 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_154 () U)
(declare-fun g_s131_156 () U)
(declare-fun g_s132_158 () U)
(declare-fun g_s133_160 () U)
(declare-fun g_s134_162 () U)
(declare-fun g_s135_164 () U)
(declare-fun g_s136_166 () U)
(declare-fun g_s137_168 () U)
(declare-fun g_s138_170 () U)
(declare-fun g_s139_172 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_174 () U)
(declare-fun g_s141_176 () U)
(declare-fun g_s142_178 () U)
(declare-fun g_s143_180 () U)
(declare-fun g_s144_182 () U)
(declare-fun g_s145_184 () U)
(declare-fun g_s146_186 () U)
(declare-fun g_s147_188 () U)
(declare-fun g_s148_190 () U)
(declare-fun g_s149_192 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_194 () U)
(declare-fun g_s151_196 () U)
(declare-fun g_s152_198 () U)
(declare-fun g_s153_200 () U)
(declare-fun g_s154_202 () U)
(declare-fun g_s155_204 () U)
(declare-fun g_s156_206 () U)
(declare-fun g_s157_208 () U)
(declare-fun g_s158_210 () U)
(declare-fun g_s159_212 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_214 () U)
(declare-fun g_s161_216 () U)
(declare-fun g_s162_218 () U)
(declare-fun g_s163_220 () U)
(declare-fun g_s164_222 () U)
(declare-fun g_s165_224 () U)
(declare-fun g_s166_226 () U)
(declare-fun g_s167_227 () U)
(declare-fun g_s168_228 () U)
(declare-fun g_s169$1_229 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s173_230 () U)
(declare-fun g_s173$1_231 () U)
(declare-fun g_s175_232 () U)
(declare-fun g_s175$1_233 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))) (= g_s8_9 (SET (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 g_s9_10))))) (= g_s13_14 (SET (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 g_s14_15)))))))))) (= g_s23_24 (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))) (= g_s27_28 (SET (mapplet g_s29_30 g_s28_29))) (= g_s30_31 (SET (mapplet g_s33_34 (mapplet g_s32_33 g_s31_32)))) (= g_s34_35 (SET (mapplet g_s36_37 g_s35_36))) (= g_s37_38 (SET (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39))))) (= g_s42_43 (SET (mapplet g_s44_45 g_s43_44))) (= g_s45_46 (SET (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47)))) (= g_s49_50 (SET (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51)))) (= g_s53_54 (SET (mapplet g_s55_56 g_s54_55))) (= g_s56_57 (SET (mapplet g_s59_60 (mapplet g_s58_59 g_s57_58)))) (= g_s60_61 (SET (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 g_s61_62)))))) (= g_s66_67 (SET (mapplet g_s69_70 (mapplet g_s68_69 g_s67_68)))) (= g_s70_71 (SET (mapplet g_s73_74 (mapplet g_s72_73 g_s71_72)))) (= g_s74_75 (SET (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76)))) (= g_s78_79 (SET (mapplet g_s81_82 (mapplet g_s80_81 g_s79_80)))) (= g_s82_83 (SET (mapplet g_s85_86 (mapplet g_s84_85 g_s83_84)))) (= g_s86_87 (SET (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 (mapplet g_s90_91 (mapplet g_s89_90 (mapplet g_s88_89 g_s87_88)))))))) (not (= g_s94_95 empty)) (not (= g_s95_96 empty)) (not (= g_s96_97 empty)) (subset g_s97_98 g_s94_95) (mem g_s98_99 g_s94_95) (not (mem g_s98_99 g_s97_98)) (mem g_s99_100 (|+->| NAT g_s94_95)) (mem g_s99_100 (perm g_s97_98)) (subset g_s100_101 g_s95_96) (mem g_s101_102 g_s95_96) (not (mem g_s101_102 g_s100_101)) (mem g_s102_103 (|+->| NAT g_s95_96)) (mem g_s102_103 (perm g_s100_101)) (subset g_s103_104 g_s96_97) (mem g_s104_105 g_s96_97) (not (mem g_s104_105 g_s103_104))))
(define-fun |def_seext| () Bool (and (= g_s105_106 TRUE) (= g_s106_107 FALSE) (= g_s107_108 e0) (= g_s108_110 e109) (= g_s109_112 e111) (= g_s110_114 e113) (= g_s111_116 e115) (= g_s112_118 e117) (= g_s113_120 e119) (= g_s114_122 e121) (= g_s115_124 e123) (= g_s116_126 e125) (= g_s117_128 e127) (= g_s118_130 e129) (= g_s119_132 e131) (= g_s120_134 e133) (= g_s121_136 e135) (= g_s122_138 e137) (= g_s123_140 e139) (= g_s124_142 e141) (= g_s125_144 e143) (= g_s126_146 e145) (= g_s127_148 e147) (= g_s128_150 e149) (= g_s129_152 e151) (= g_s130_154 e153) (= g_s131_156 e155) (= g_s132_158 e157) (= g_s133_160 e159) (= g_s134_162 e161) (= g_s135_164 e163) (= g_s136_166 e165) (= g_s137_168 e167) (= g_s138_170 e169) (= g_s139_172 e171) (= g_s140_174 e173) (= g_s141_176 e175) (= g_s142_178 e177) (= g_s143_180 e179) (= g_s144_182 e181) (= g_s145_184 e183) (= g_s146_186 e185) (= g_s147_188 e187) (= g_s148_190 e189) (= g_s149_192 e191) (= g_s150_194 e193) (= g_s151_196 e195) (= g_s152_198 e197) (= g_s153_200 e199) (= g_s154_202 e201) (= g_s155_204 e203) (= g_s156_206 e205) (= g_s157_208 e207) (= g_s158_210 e209) (= g_s159_212 e211) (= g_s160_214 e213) (= g_s161_216 e215) (= g_s162_218 e217) (= g_s163_220 e219) (= g_s164_222 e221) (= g_s165_224 e223) (= g_s166_226 e225)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset g_s167_227 g_s100_101) (subset g_s168_228 g_s100_101) (= (binary_inter g_s167_227 g_s168_228) empty)))
(define-fun |def_inv| () Bool (and (= g_s167_227 (image g_s102_103 (interval e109 g_s169$1_229))) (mem g_s169$1_229 NATURAL) (and (|>=i| g_s169$1_229 e0) (|<=i| g_s169$1_229 (size g_s102_103)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 NATURAL)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s102_103)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (= empty (image g_s102_103 (interval e109 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s173$1_231 g_s173_230))
(define-fun lh_1 () Bool (mem (card g_s100_101) INT))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_1 (mem (card g_s100_101) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (and (|>=i| (card g_s100_101) e0) (|<=i| (card g_s100_101) (size g_s102_103))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> lh_1 (= g_s100_101 (image g_s102_103 (interval e109 (card g_s100_101)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> lh_1 (= (bool (|<=i| g_s108_110 (card g_s100_101))) (bool (not (= g_s100_101 empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s173$1_231 g_s173_230))
(assert (= g_s175$1_233 g_s175_232))
(define-fun lh_1 () Bool (not (= g_s167_227 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s169$1_229))
(define-fun lh_3 () Bool (mem g_s169$1_229 NATURAL))
(define-fun lh_4 () Bool (mem g_s169$1_229 (dom g_s102_103)))
; PO 1 in group 2
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s169$1_229))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s169$1_229 (dom g_s102_103)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s102_103 g_s169$1_229) g_s100_101))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s102_103 g_s169$1_229) g_s167_227))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s169$1_229 g_s108_110) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s169$1_229 g_s108_110) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s169$1_229 g_s108_110) e0) (|<=i| (|-i| g_s169$1_229 g_s108_110) (size g_s102_103))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s108_110 (|-i| g_s169$1_229 g_s108_110))) (bool (not (= g_s167_227 (SET (apply g_s102_103 g_s169$1_229)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s167_227 (SET (apply g_s102_103 g_s169$1_229))) (image g_s102_103 (interval e109 (|-i| g_s169$1_229 g_s108_110)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (= g_s167_227 (image g_s102_103 (interval e109 g_s169$1_229))))
(define-fun lh_2 () Bool (mem g_s169$1_229 NATURAL))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2) (mem g_s102_103 (seq (ran g_s102_103))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)