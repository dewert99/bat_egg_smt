(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e179 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_137 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_139 () U)
(declare-fun g_s139_140 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_141 () U)
(declare-fun g_s141_142 () U)
(declare-fun g_s142_143 () U)
(declare-fun g_s143_144 () U)
(declare-fun g_s144_145 () U)
(declare-fun g_s145_146 () U)
(declare-fun g_s146_147 () U)
(declare-fun g_s147_148 () U)
(declare-fun g_s148_149 () U)
(declare-fun g_s149_150 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_151 () U)
(declare-fun g_s151_152 () U)
(declare-fun g_s152_153 () U)
(declare-fun g_s153_154 () U)
(declare-fun g_s154_155 () U)
(declare-fun g_s155_156 () U)
(declare-fun g_s156_157 () U)
(declare-fun g_s157_158 () U)
(declare-fun g_s158_159 () U)
(declare-fun g_s159_160 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_161 () U)
(declare-fun g_s161_162 () U)
(declare-fun g_s162_163 () U)
(declare-fun g_s163_164 () U)
(declare-fun g_s164_165 () U)
(declare-fun g_s165_166 () U)
(declare-fun g_s166_167 () U)
(declare-fun g_s167_168 () U)
(declare-fun g_s168_169 () U)
(declare-fun g_s169_170 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_171 () U)
(declare-fun g_s171_172 () U)
(declare-fun g_s172_173 () U)
(declare-fun g_s173_174 () U)
(declare-fun g_s174_175 () U)
(declare-fun g_s175_177 () U)
(declare-fun g_s176_176 () U)
(declare-fun g_s177_178 () U)
(declare-fun g_s178_180 () U)
(declare-fun g_s179_181 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_182 () U)
(declare-fun g_s181_183 () U)
(declare-fun g_s182_184 () U)
(declare-fun g_s183_185 () U)
(declare-fun g_s184_186 () U)
(declare-fun g_s185_187 () U)
(declare-fun g_s186_188 () U)
(declare-fun g_s187_189 () U)
(declare-fun g_s188_190 () U)
(declare-fun g_s189_191 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_192 () U)
(declare-fun g_s191_193 () U)
(declare-fun g_s192_194 () U)
(declare-fun g_s193_195 () U)
(declare-fun g_s194_196 () U)
(declare-fun g_s195_197 () U)
(declare-fun g_s196_198 () U)
(declare-fun g_s197_199 () U)
(declare-fun g_s198_200 () U)
(declare-fun g_s199_201 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_202 () U)
(declare-fun g_s201_203 () U)
(declare-fun g_s202_204 () U)
(declare-fun g_s203_205 () U)
(declare-fun g_s204_206 () U)
(declare-fun g_s205_207 () U)
(declare-fun g_s206_208 () U)
(declare-fun g_s207_209 () U)
(declare-fun g_s208_210 () U)
(declare-fun g_s209_211 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_212 () U)
(declare-fun g_s211_213 () U)
(declare-fun g_s212_214 () U)
(declare-fun g_s213_215 () U)
(declare-fun g_s214_216 () U)
(declare-fun g_s215_217 () U)
(declare-fun g_s216_218 () U)
(declare-fun g_s217_219 () U)
(declare-fun g_s218_220 () U)
(declare-fun g_s219_221 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_222 () U)
(declare-fun g_s221_223 () U)
(declare-fun g_s222_224 () U)
(declare-fun g_s223_225 () U)
(declare-fun g_s224_226 () U)
(declare-fun g_s225_227 () U)
(declare-fun g_s226_228 () U)
(declare-fun g_s227_229 () U)
(declare-fun g_s228_230 () U)
(declare-fun g_s229_231 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_232 () U)
(declare-fun g_s231_233 () U)
(declare-fun g_s232_234 () U)
(declare-fun g_s233_235 () U)
(declare-fun g_s234_236 () U)
(declare-fun g_s235_237 () U)
(declare-fun g_s236_238 () U)
(declare-fun g_s237_239 () U)
(declare-fun g_s238_240 () U)
(declare-fun g_s239_241 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_242 () U)
(declare-fun g_s241_243 () U)
(declare-fun g_s242_244 () U)
(declare-fun g_s243_245 () U)
(declare-fun g_s244_246 () U)
(declare-fun g_s245_247 () U)
(declare-fun g_s246_248 () U)
(declare-fun g_s247_249 () U)
(declare-fun g_s248_250 () U)
(declare-fun g_s249_251 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_252 () U)
(declare-fun g_s251_253 () U)
(declare-fun g_s252_254 () U)
(declare-fun g_s253_255 () U)
(declare-fun g_s254_256 () U)
(declare-fun g_s255_257 () U)
(declare-fun g_s256_258 () U)
(declare-fun g_s257_259 () U)
(declare-fun g_s258_260 () U)
(declare-fun g_s259_261 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_262 () U)
(declare-fun g_s261_263 () U)
(declare-fun g_s262_264 () U)
(declare-fun g_s263_265 () U)
(declare-fun g_s264_266 () U)
(declare-fun g_s265_267 () U)
(declare-fun g_s266_268 () U)
(declare-fun g_s267_269 () U)
(declare-fun g_s268_270 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s272_271 () U)
(declare-fun g_s273$1_272 () U)
(declare-fun g_s276$1_273 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280$1_274 () U)
(declare-fun g_s284$1_275 () U)
(declare-fun g_s287$1_276 () U)
(declare-fun g_s289$1_277 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s291$1_278 () U)
(declare-fun g_s293$1_279 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))) (= g_s8_9 (SET (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 g_s9_10))))) (= g_s13_14 (SET (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 g_s14_15)))))))))) (= g_s23_24 (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))) (= g_s27_28 (SET (mapplet g_s29_30 g_s28_29))) (= g_s30_31 (SET (mapplet g_s33_34 (mapplet g_s32_33 g_s31_32)))) (= g_s34_35 (SET (mapplet g_s36_37 g_s35_36))) (= g_s37_38 (SET (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39))))) (= g_s42_43 (SET (mapplet g_s44_45 g_s43_44))) (= g_s45_46 (SET (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47)))) (= g_s49_50 (SET (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51)))) (= g_s53_54 (SET (mapplet g_s55_56 g_s54_55))) (= g_s56_57 (SET (mapplet g_s59_60 (mapplet g_s58_59 g_s57_58)))) (= g_s60_61 (SET (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 g_s61_62)))))) (= g_s66_67 (SET (mapplet g_s69_70 (mapplet g_s68_69 g_s67_68)))) (= g_s70_71 (SET (mapplet g_s73_74 (mapplet g_s72_73 g_s71_72)))) (= g_s74_75 (SET (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76)))) (= g_s78_79 (SET (mapplet g_s81_82 (mapplet g_s80_81 g_s79_80)))) (= g_s82_83 (SET (mapplet g_s85_86 (mapplet g_s84_85 g_s83_84)))) (= g_s86_87 (SET (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 (mapplet g_s90_91 (mapplet g_s89_90 (mapplet g_s88_89 g_s87_88)))))))) (= g_s94_95 (SET (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 g_s95_96))))) (= g_s99_100 (SET (mapplet g_s103_104 (mapplet g_s102_103 (mapplet g_s101_102 g_s100_101))))) (= g_s104_105 (SET (mapplet g_s107_108 (mapplet g_s106_107 g_s105_106)))) (= g_s108_109 (SET (mapplet g_s112_113 (mapplet g_s111_112 (mapplet g_s110_111 g_s109_110))))) (= g_s113_114 (SET (mapplet g_s117_118 (mapplet g_s116_117 (mapplet g_s115_116 g_s114_115))))) (= g_s118_119 (SET (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 g_s119_120))))) (= g_s123_124 (SET (mapplet g_s127_128 (mapplet g_s126_127 (mapplet g_s125_126 g_s124_125))))) (= g_s128_129 (SET (mapplet g_s131_132 (mapplet g_s130_131 g_s129_130)))) (= g_s132_133 (SET (mapplet g_s136_137 (mapplet g_s135_136 (mapplet g_s134_135 g_s133_134))))) (= g_s137_138 (SET (mapplet g_s140_141 (mapplet g_s139_140 g_s138_139)))) (= g_s141_142 (SET (mapplet g_s144_145 (mapplet g_s143_144 g_s142_143)))) (= g_s145_146 (SET (mapplet g_s152_153 (mapplet g_s151_152 (mapplet g_s150_151 (mapplet g_s149_150 (mapplet g_s148_149 (mapplet g_s147_148 g_s146_147)))))))) (= g_s153_154 (SET (mapplet g_s157_158 (mapplet g_s156_157 (mapplet g_s155_156 g_s154_155))))) (= g_s158_159 (SET (mapplet g_s162_163 (mapplet g_s161_162 (mapplet g_s160_161 g_s159_160))))) (not (= g_s163_164 empty)) (not (= g_s164_165 empty)) (not (= g_s165_166 empty)) (not (= g_s166_167 empty)) (not (= g_s167_168 empty)) (not (= g_s168_169 empty)) (not (= g_s169_170 empty)) (not (= g_s170_171 empty)) (not (= g_s171_172 empty)) (not (= g_s172_173 empty)) (not (= g_s173_174 empty)) (not (= g_s174_175 empty)) (= g_s175_177 (interval (iuminus g_s176_176) g_s176_176)) (= g_s177_178 (interval e0 g_s176_176)) (= g_s178_180 (interval e179 g_s176_176)) (subset g_s178_180 g_s177_178) (subset g_s177_178 g_s175_177) (subset g_s177_178 NAT) (subset g_s178_180 NAT1) (subset g_s175_177 INT) (mem g_s179_181 g_s175_177) (mem g_s179_181 g_s177_178) (not (mem g_s179_181 g_s178_180)) (mem g_s180_182 g_s175_177) (not (mem g_s180_182 g_s177_178)) (= g_s181_183 (interval (iuminus g_s176_176) g_s176_176)) (subset g_s181_183 INT) (subset g_s182_184 g_s163_164) (mem g_s183_185 g_s163_164) (mem g_s183_185 g_s182_184) (mem g_s184_186 g_s163_164) (not (mem g_s184_186 g_s182_184)) (mem g_s185_187 (|+->| NAT g_s163_164)) (mem g_s185_187 (perm g_s182_184)) (= (card g_s182_184) g_s186_188) (subset g_s187_189 g_s164_165) (mem g_s188_190 g_s164_165) (mem g_s188_190 g_s187_189) (mem g_s189_191 g_s164_165) (not (mem g_s189_191 g_s187_189)) (mem g_s190_192 (|+->| NAT g_s164_165)) (mem g_s190_192 (perm g_s187_189)) (= (card g_s187_189) g_s191_193) (subset g_s192_194 INT) (subset g_s193_195 NAT) (subset g_s193_195 g_s192_194) (mem g_s194_196 g_s192_194) (not (mem g_s194_196 g_s193_195)) (= g_s195_197 INTEGER) (subset g_s196_198 INTEGER) (subset g_s196_198 g_s195_197) (mem g_s197_199 g_s195_197) (not (mem g_s197_199 g_s196_198)) (= g_s198_200 INTEGER) (= g_s199_201 NATURAL) (subset g_s199_201 g_s198_200) (mem g_s200_202 g_s199_201) (mem g_s201_203 g_s199_201) (mem g_s202_204 g_s198_200) (not (mem g_s202_204 g_s199_201)) (|<=i| g_s200_202 g_s201_203) (subset g_s203_205 g_s165_166) (mem g_s204_206 g_s165_166) (not (mem g_s204_206 g_s203_205)) (mem g_s205_207 (|+->| NAT g_s165_166)) (mem g_s205_207 (perm g_s203_205)) (subset g_s193_195 g_s196_198) (subset g_s206_208 g_s166_167) (mem g_s207_209 g_s166_167) (not (mem g_s207_209 g_s206_208)) (subset g_s208_210 g_s167_168) (mem g_s209_211 g_s167_168) (not (mem g_s209_211 g_s208_210)) (subset g_s210_212 g_s168_169) (mem g_s211_213 g_s168_169) (not (mem g_s211_213 g_s210_212)) (subset g_s212_214 g_s169_170) (mem g_s213_215 g_s169_170) (not (mem g_s213_215 g_s212_214)) (subset g_s214_216 g_s158_159) (not (mem g_s159_160 g_s214_216)) (= g_s214_216 (SET (mapplet g_s162_163 (mapplet g_s161_162 g_s160_161)))) (mem g_s215_217 (|+->| g_s212_214 g_s210_212)) (mem g_s216_218 (|+->| g_s210_212 g_s212_214)) (subset g_s217_219 g_s170_171) (mem g_s218_220 g_s170_171) (not (mem g_s218_220 g_s217_219)) (mem g_s219_221 (|+->| NAT g_s170_171)) (mem g_s219_221 (perm g_s217_219)) (subset g_s220_222 g_s171_172) (mem g_s221_223 g_s171_172) (not (mem g_s221_223 g_s220_222)) (mem g_s222_224 (|+->| NAT g_s171_172)) (mem g_s222_224 (perm g_s220_222)) (subset g_s223_225 g_s172_173) (mem g_s224_226 g_s172_173) (not (mem g_s224_226 g_s223_225)) (subset g_s225_227 g_s99_100) (not (mem g_s100_101 g_s225_227)) (= g_s225_227 (SET (mapplet g_s103_104 g_s102_103))) (subset g_s226_228 g_s99_100) (not (mem g_s100_101 g_s226_228)) (= g_s226_228 (SET (mapplet g_s103_104 (mapplet g_s102_103 g_s101_102)))) (mem g_s227_229 (|>->>| g_s225_227 g_s225_227)) (= (binary_inter g_s227_229 (id g_s225_227)) empty) (mem g_s228_230 (|>->| g_s30_31 g_s99_100)) (not (mem (apply g_s228_230 g_s31_32) g_s225_227)) (mem g_s229_231 (|>->>| g_s45_46 (set_diff g_s99_100 (SET g_s101_102)))) (mem g_s230_232 (|>->>| (set_diff g_s99_100 (SET g_s101_102)) g_s45_46)) (= g_s229_231 (inverse g_s230_232)) (not (mem (apply g_s229_231 g_s46_47) g_s225_227)) (mem g_s231_233 (|-->| g_s37_38 g_s30_31)) (= (apply g_s231_233 g_s41_42) g_s31_32) (subset g_s232_234 g_s23_24) (not (mem g_s24_25 g_s232_234)) (= g_s232_234 (SET (mapplet g_s26_27 g_s25_26))) (subset g_s233_235 g_s173_174) (mem g_s234_236 g_s173_174) (not (mem g_s234_236 g_s233_235)) (mem g_s235_237 (|+->| NAT g_s173_174)) (mem g_s235_237 (perm g_s233_235)) (subset g_s236_238 g_s174_175) (mem g_s237_239 g_s174_175) (not (mem g_s237_239 g_s236_238)) (mem g_s238_240 (|+->| NAT g_s174_175)) (mem g_s238_240 (perm g_s236_238)) (mem g_s239_241 (|>->| g_s236_238 g_s182_184)) (= g_s240_242 INTEGER) (= g_s241_243 NATURAL) (subset g_s241_243 g_s240_242) (mem g_s242_244 g_s240_242) (not (mem g_s242_244 g_s241_243)) (mem g_s243_245 g_s241_243) (subset g_s244_246 g_s137_138) (not (mem g_s140_141 g_s244_246)) (= g_s244_246 (SET (mapplet g_s139_140 g_s138_139))) (mem g_s245_247 (|>->>| g_s34_35 g_s244_246))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s246_248 (|+->| g_s236_238 g_s210_212)) (subset g_s247_249 g_s236_238) (subset g_s248_250 g_s236_238) (subset g_s249_251 g_s236_238) (mem g_s250_252 (|+->| g_s236_238 g_s223_225)) (mem g_s251_253 (|+->| g_s236_238 g_s193_195)) (mem g_s252_254 (|-->| g_s236_238 g_s30_31)) (mem g_s253_255 (|+->| g_s236_238 g_s223_225)) (mem g_s254_256 (|+->| g_s236_238 g_s193_195)) (mem g_s255_257 (|-->| g_s236_238 g_s30_31)) (mem g_s256_258 (|+->| g_s236_238 g_s199_201)) (mem g_s257_259 (|+->| g_s236_238 g_s241_243)) (subset g_s258_260 g_s236_238) (subset g_s259_261 g_s236_238) (mem g_s260_262 (|+->| g_s236_238 g_s232_234)) (mem g_s261_263 (|+->| g_s236_238 g_s177_178)) (subset g_s262_264 g_s236_238) (subset g_s263_265 g_s236_238) (subset g_s264_266 g_s236_238) (mem g_s265_267 (|+->| g_s236_238 g_s244_246)) (subset g_s266_268 g_s236_238) (mem g_s267_269 (|-->| g_s236_238 g_s30_31)) (subset g_s268_270 g_s236_238)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s193_195))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s199_201))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s177_178))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s241_243))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s232_234))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s244_246))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s210_212))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s236_238 g_s223_225))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem (set_prod g_s236_238 (SET g_s31_32)) (|-->| g_s236_238 g_s30_31))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (subset empty g_s236_238)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(define-fun lh_1 () Bool (mem g_s272_271 (dom g_s246_248)))
(define-fun lh_2 () Bool (mem g_s273$1_272 g_s168_169))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2) (mem g_s246_248 (|+->| (dom g_s246_248) (ran g_s246_248))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(define-fun lh_1 () Bool (mem g_s272_271 (dom g_s251_253)))
(define-fun lh_2 () Bool (mem g_s276$1_273 g_s192_194))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2) (mem g_s251_253 (|+->| (dom g_s251_253) (ran g_s251_253))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s251_253)))
(define-fun lh_1 () Bool (mem g_s276$1_273 g_s192_194))
; PO 1 in group 3
(assert (not (=> lh_1 (mem g_s251_253 (|+->| (dom g_s251_253) (ran g_s251_253))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s252_254 (|+->| (dom g_s252_254) (ran g_s252_254)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s272_271 (dom g_s252_254))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(define-fun lh_1 () Bool (mem g_s272_271 (dom g_s254_256)))
(define-fun lh_2 () Bool (mem g_s280$1_274 g_s192_194))
; PO 1 in group 5
(assert (not (=> (and lh_1 lh_2) (mem g_s254_256 (|+->| (dom g_s254_256) (ran g_s254_256))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s254_256)))
(define-fun lh_1 () Bool (mem g_s280$1_274 g_s192_194))
; PO 1 in group 6
(assert (not (=> lh_1 (mem g_s254_256 (|+->| (dom g_s254_256) (ran g_s254_256))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
; PO 1 in group 7
(push 1)
(assert (not (mem g_s255_257 (|+->| (dom g_s255_257) (ran g_s255_257)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (mem g_s272_271 (dom g_s255_257))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(define-fun lh_1 () Bool (mem g_s272_271 (dom g_s256_258)))
(define-fun lh_2 () Bool (mem g_s284$1_275 g_s198_200))
; PO 1 in group 8
(assert (not (=> (and lh_1 lh_2) (mem g_s256_258 (|+->| (dom g_s256_258) (ran g_s256_258))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s256_258)))
(define-fun lh_1 () Bool (mem g_s284$1_275 g_s198_200))
; PO 1 in group 9
(assert (not (=> lh_1 (mem g_s256_258 (|+->| (dom g_s256_258) (ran g_s256_258))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s257_259)))
(define-fun lh_1 () Bool (mem g_s287$1_276 g_s240_242))
; PO 1 in group 10
(assert (not (=> lh_1 (mem g_s257_259 (|+->| (dom g_s257_259) (ran g_s257_259))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s260_262)))
(define-fun lh_1 () Bool (mem g_s289$1_277 g_s23_24))
; PO 1 in group 11
(assert (not (=> lh_1 (mem g_s260_262 (|+->| (dom g_s260_262) (ran g_s260_262))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s265_267)))
(define-fun lh_1 () Bool (mem g_s291$1_278 g_s137_138))
; PO 1 in group 12
(assert (not (=> lh_1 (mem g_s265_267 (|+->| (dom g_s265_267) (ran g_s265_267))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(define-fun lh_1 () Bool (mem g_s272_271 (dom g_s261_263)))
(define-fun lh_2 () Bool (mem g_s293$1_279 g_s175_177))
; PO 1 in group 13
(assert (not (=> (and lh_1 lh_2) (mem g_s261_263 (|+->| (dom g_s261_263) (ran g_s261_263))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
(assert (mem g_s272_271 (dom g_s261_263)))
(define-fun lh_1 () Bool (mem g_s293$1_279 g_s175_177))
; PO 1 in group 14
(assert (not (=> lh_1 (mem g_s261_263 (|+->| (dom g_s261_263) (ran g_s261_263))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_271 g_s174_175))
(assert (mem g_s272_271 g_s236_238))
; PO 1 in group 15
(push 1)
(assert (not (mem g_s267_269 (|+->| (dom g_s267_269) (ran g_s267_269)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (mem g_s272_271 (dom g_s267_269))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)