(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e14 () U)
(declare-fun e4 () U)
(declare-fun e11 () U)
(declare-fun e10 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_15 () U)
(declare-fun g_s11_16 () U)
(declare-fun g_s12_17 () U)
(declare-fun g_s13_18 () U)
(declare-fun g_s14_19 () U)
(declare-fun g_s15_20 () U)
(declare-fun g_s16_21 () U)
(declare-fun g_s17_22 () U)
(declare-fun g_s18_23 () U)
(declare-fun g_s19_24 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_25 () U)
(declare-fun g_s21_26 () U)
(declare-fun g_s22_27 () U)
(declare-fun g_s25_29 () U)
(declare-fun g_s26_30 () U)
(declare-fun g_s27_31 () U)
(declare-fun g_s28_32 () U)
(declare-fun g_s29_33 () U)
(declare-fun g_s3_5 () U)
(declare-fun g_s30_34 () U)
(declare-fun g_s31_35 () U)
(declare-fun g_s32_36 () U)
(declare-fun g_s33_37 () U)
(declare-fun g_s34_38 () U)
(declare-fun g_s35_39 () U)
(declare-fun g_s36_40 () U)
(declare-fun g_s37_41 () U)
(declare-fun g_s38_42 () U)
(declare-fun g_s39_43 () U)
(declare-fun g_s4_6 () U)
(declare-fun g_s41_44 () U)
(declare-fun g_s42_45 () U)
(declare-fun g_s43$1_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s49_49 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s50$1_50 () U)
(declare-fun g_s52$1_51 () U)
(declare-fun g_s55_52 () U)
(declare-fun g_s56_53 () U)
(declare-fun g_s57_54 () U)
(declare-fun g_s6_8 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s8_12 () U)
(declare-fun g_s9_13 () U)
(declare-fun e28 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (mem g_s2_3 NAT1) (= g_s2_3 (|-i| MaxInt e4)) (mem g_s3_5 NAT1) (mem g_s4_6 NAT1) (mem g_s5_7 NAT1) (mem g_s6_8 NAT1) (mem g_s7_9 NAT1) (= g_s6_8 e10) (= g_s7_9 e11) (= g_s8_12 (interval (iuminus g_s2_3) g_s2_3)) (= g_s9_13 (interval e0 g_s2_3)) (= g_s10_15 (interval e14 g_s2_3)) (subset g_s10_15 g_s9_13) (subset g_s9_13 g_s8_12) (subset g_s9_13 NAT) (subset g_s10_15 NAT1) (subset g_s8_12 INT) (mem g_s11_16 g_s8_12) (mem g_s11_16 g_s9_13) (not (mem g_s11_16 g_s10_15)) (mem g_s12_17 g_s8_12) (not (mem g_s12_17 g_s9_13)) (= g_s13_18 (interval (iuminus g_s2_3) g_s2_3)) (subset g_s13_18 INT) (subset g_s14_19 g_s0_1) (mem g_s15_20 g_s0_1) (mem g_s15_20 g_s14_19) (mem g_s16_21 g_s0_1) (not (mem g_s16_21 g_s14_19)) (mem g_s17_22 (|+->| NAT g_s0_1)) (mem g_s17_22 (perm g_s14_19)) (= (card g_s14_19) g_s6_8) (subset g_s18_23 g_s1_2) (mem g_s19_24 g_s1_2) (mem g_s19_24 g_s18_23) (mem g_s20_25 g_s1_2) (not (mem g_s20_25 g_s18_23)) (mem g_s21_26 (|+->| NAT g_s1_2)) (mem g_s21_26 (perm g_s18_23)) (= (card g_s18_23) g_s7_9)))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s22_27 (|+->| (set_prod g_s13_18 g_s13_18) g_s13_18)) (= (dom g_s22_27) e28) (subset g_s25_29 g_s13_18) (mem g_s26_30 (|-->| (set_prod g_s9_13 g_s9_13) g_s13_18)) (mem g_s27_31 (|+->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (mem g_s28_32 (|-->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (mem g_s29_33 (|-->| (set_prod g_s9_13 g_s13_18) (POW g_s9_13))) (mem g_s30_34 (|-->| (set_prod g_s9_13 g_s9_13) (POW g_s9_13))) (mem g_s31_35 (|-->| (set_prod g_s9_13 g_s9_13) (POW g_s9_13))) (mem g_s32_36 (|-->| (set_prod g_s9_13 g_s9_13) (POW g_s9_13))) (mem g_s33_37 (|-->| (set_prod g_s9_13 g_s9_13) (POW g_s9_13))) (mem g_s34_38 (|<->| g_s9_13 g_s9_13)) (mem g_s35_39 (|<->| g_s9_13 g_s9_13)) (mem g_s36_40 (|<->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (mem g_s37_41 (|<->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (mem g_s38_42 (|<->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (mem g_s39_43 (|<->| (set_prod g_s9_13 g_s13_18) g_s9_13)) (= (dom g_s27_31) (set_prod g_s9_13 (interval e0 g_s2_3)))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s41_44 g_s13_18))
(assert (mem g_s42_45 g_s13_18))
(assert (|>=i| g_s42_45 e0))
(define-fun lh_1 () Bool (mem g_s43$1_46 g_s13_18))
; PO 1 in group 0
(push 1)
(assert (not (=> lh_1 (mem g_s22_27 (|+->| (dom g_s22_27) (ran g_s22_27))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> lh_1 (mem (mapplet g_s41_44 g_s42_45) (dom g_s22_27)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s46_47 g_s8_12))
(assert (mem g_s46_47 g_s9_13))
(assert (mem g_s47_48 g_s8_12))
(assert (mem g_s47_48 g_s9_13))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s26_30 (|+->| (dom g_s26_30) (ran g_s26_30)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem (mapplet g_s46_47 g_s47_48) (dom g_s26_30))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s49_49 g_s8_12))
(assert (mem g_s49_49 g_s9_13))
(assert (mem g_s42_45 g_s13_18))
(assert (|>=i| g_s42_45 e0))
(define-fun lh_1 () Bool (mem g_s50$1_50 g_s8_12))
; PO 1 in group 2
(push 1)
(assert (not (=> lh_1 (mem g_s27_31 (|+->| (dom g_s27_31) (ran g_s27_31))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> lh_1 (mem (mapplet g_s49_49 g_s42_45) (dom g_s27_31)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s49_49 g_s8_12))
(assert (mem g_s49_49 g_s9_13))
(assert (mem g_s42_45 g_s13_18))
(define-fun lh_1 () Bool (mem g_s52$1_51 g_s8_12))
; PO 1 in group 3
(push 1)
(assert (not (=> lh_1 (mem g_s28_32 (|+->| (dom g_s28_32) (ran g_s28_32))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> lh_1 (mem (mapplet g_s49_49 g_s42_45) (dom g_s28_32)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s46_47 g_s8_12))
(assert (mem g_s46_47 g_s9_13))
(assert (mem g_s42_45 g_s13_18))
(assert (mem g_s47_48 g_s8_12))
(assert (mem g_s47_48 g_s9_13))
(assert (|>=i| g_s42_45 e0))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s29_33 (|+->| (dom g_s29_33) (ran g_s29_33)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem (mapplet g_s46_47 g_s42_45) (dom g_s29_33))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s55_52 g_s8_12))
(assert (mem g_s55_52 g_s9_13))
(assert (mem g_s56_53 g_s8_12))
(assert (mem g_s56_53 g_s9_13))
(assert (mem g_s57_54 g_s8_12))
(assert (mem g_s57_54 g_s9_13))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s30_34 (|+->| (dom g_s30_34) (ran g_s30_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (mem (mapplet g_s55_52 g_s56_53) (dom g_s30_34))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s55_52 g_s8_12))
(assert (mem g_s55_52 g_s9_13))
(assert (mem g_s56_53 g_s8_12))
(assert (mem g_s56_53 g_s9_13))
(assert (mem g_s57_54 g_s8_12))
(assert (mem g_s57_54 g_s9_13))
; PO 1 in group 6
(push 1)
(assert (not (mem g_s31_35 (|+->| (dom g_s31_35) (ran g_s31_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (mem (mapplet g_s55_52 g_s56_53) (dom g_s31_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s55_52 g_s8_12))
(assert (mem g_s55_52 g_s9_13))
(assert (mem g_s56_53 g_s8_12))
(assert (mem g_s56_53 g_s9_13))
(assert (mem g_s57_54 g_s8_12))
(assert (mem g_s57_54 g_s9_13))
; PO 1 in group 7
(push 1)
(assert (not (mem g_s32_36 (|+->| (dom g_s32_36) (ran g_s32_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (mem (mapplet g_s55_52 g_s56_53) (dom g_s32_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s55_52 g_s8_12))
(assert (mem g_s55_52 g_s9_13))
(assert (mem g_s56_53 g_s8_12))
(assert (mem g_s56_53 g_s9_13))
(assert (mem g_s57_54 g_s8_12))
(assert (mem g_s57_54 g_s9_13))
; PO 1 in group 8
(push 1)
(assert (not (mem g_s33_37 (|+->| (dom g_s33_37) (ran g_s33_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (mem (mapplet g_s55_52 g_s56_53) (dom g_s33_37))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)