(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e15 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_102 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_107 () U)
(declare-fun g_s106_108 () U)
(declare-fun g_s107_109 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s110_112 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s112_114 () U)
(declare-fun g_s113_115 () U)
(declare-fun g_s114_116 () U)
(declare-fun g_s115_117 () U)
(declare-fun g_s116_118 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s118_120 () U)
(declare-fun g_s119_121 () U)
(declare-fun g_s120_122 () U)
(declare-fun g_s121_123 () U)
(declare-fun g_s122_124 () U)
(declare-fun g_s123_125 () U)
(declare-fun g_s124_126 () U)
(declare-fun g_s125_127 () U)
(declare-fun g_s126_128 () U)
(declare-fun g_s127_129 () U)
(declare-fun g_s128_130 () U)
(declare-fun g_s129_131 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_132 () U)
(declare-fun g_s131_133 () U)
(declare-fun g_s132_134 () U)
(declare-fun g_s133_135 () U)
(declare-fun g_s134_136 () U)
(declare-fun g_s135_137 () U)
(declare-fun g_s136_138 () U)
(declare-fun g_s137_139 () U)
(declare-fun g_s138_140 () U)
(declare-fun g_s139_141 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s140_142 () U)
(declare-fun g_s141_143 () U)
(declare-fun g_s142_144 () U)
(declare-fun g_s143_145 () U)
(declare-fun g_s144_146 () U)
(declare-fun g_s145_147 () U)
(declare-fun g_s146_148 () U)
(declare-fun g_s147_149 () U)
(declare-fun g_s148_150 () U)
(declare-fun g_s149_151 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s150_152 () U)
(declare-fun g_s151_153 () U)
(declare-fun g_s152_154 () U)
(declare-fun g_s153_155 () U)
(declare-fun g_s154_156 () U)
(declare-fun g_s155_157 () U)
(declare-fun g_s156_158 () U)
(declare-fun g_s157_159 () U)
(declare-fun g_s158_160 () U)
(declare-fun g_s159_161 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s160_162 () U)
(declare-fun g_s161_163 () U)
(declare-fun g_s162_164 () U)
(declare-fun g_s163_165 () U)
(declare-fun g_s164_166 () U)
(declare-fun g_s165_167 () U)
(declare-fun g_s166_168 () U)
(declare-fun g_s167_169 () U)
(declare-fun g_s168_170 () U)
(declare-fun g_s169_171 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s170_172 () U)
(declare-fun g_s171_173 () U)
(declare-fun g_s172_174 () U)
(declare-fun g_s173_175 () U)
(declare-fun g_s174_176 () U)
(declare-fun g_s175_177 () U)
(declare-fun g_s176_178 () U)
(declare-fun g_s177_179 () U)
(declare-fun g_s178_180 () U)
(declare-fun g_s179_181 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s180_182 () U)
(declare-fun g_s181_183 () U)
(declare-fun g_s182_184 () U)
(declare-fun g_s183_185 () U)
(declare-fun g_s184_186 () U)
(declare-fun g_s185_187 () U)
(declare-fun g_s186_188 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s192_189 () U)
(declare-fun g_s192_190 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_54 () U)
(declare-fun g_s53_55 () U)
(declare-fun g_s54_56 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_58 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58_60 () U)
(declare-fun g_s59_61 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_62 () U)
(declare-fun g_s61_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s63_65 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_67 () U)
(declare-fun g_s66_68 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s69_71 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s71_73 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s73_75 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s75_77 () U)
(declare-fun g_s76_78 () U)
(declare-fun g_s77_79 () U)
(declare-fun g_s78_80 () U)
(declare-fun g_s79_81 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_82 () U)
(declare-fun g_s81_83 () U)
(declare-fun g_s82_84 () U)
(declare-fun g_s83_85 () U)
(declare-fun g_s84_86 () U)
(declare-fun g_s85_87 () U)
(declare-fun g_s86_88 () U)
(declare-fun g_s87_89 () U)
(declare-fun g_s88_90 () U)
(declare-fun g_s89_91 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_92 () U)
(declare-fun g_s91_93 () U)
(declare-fun g_s92_94 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s94_96 () U)
(declare-fun g_s95_97 () U)
(declare-fun g_s96_98 () U)
(declare-fun g_s97_99 () U)
(declare-fun g_s98_100 () U)
(declare-fun g_s99_101 () U)
(declare-fun e13 () U)
(declare-fun e12 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (mem g_s10_11 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s10_11 (binary_union e13 e12)) (mem g_s13_14 (|-->| BOOL NAT)) (= g_s13_14 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e15)))) (mem g_s14_16 BOOL) (mem g_s15_17 NAT) (|<=i| g_s15_17 g_s16_18) (mem g_s17_19 NAT) (|<=i| g_s17_19 g_s18_20) (|<=i| g_s17_19 g_s19_21) (mem g_s20_22 NAT) (|<=i| g_s20_22 g_s21_23) (mem g_s22_24 NAT) (|<=i| g_s22_24 g_s23_25) (mem g_s24_26 NAT) (|<=i| g_s24_26 g_s25_27) (mem g_s26_28 NAT) (|<=i| g_s26_28 g_s27_29) (mem g_s28_30 NAT) (|<=i| g_s28_30 g_s29_31) (mem g_s30_32 NAT) (|<=i| g_s30_32 g_s31_33) (mem g_s32_34 NAT) (|<=i| g_s32_34 g_s31_33) (mem g_s33_35 NAT) (|<=i| g_s33_35 g_s34_36) (mem g_s35_37 NAT) (|<=i| g_s35_37 g_s36_38) (mem g_s37_39 NAT) (|<=i| g_s37_39 g_s36_38) (mem g_s38_40 NAT) (|<=i| g_s38_40 g_s39_41) (mem g_s40_42 NAT) (|<=i| g_s40_42 g_s41_43) (mem g_s42_44 NAT) (|<=i| g_s42_44 g_s43_45) (mem g_s44_46 NAT) (|<=i| g_s44_46 g_s45_47) (mem g_s46_48 NAT) (|<=i| g_s46_48 g_s47_49) (mem g_s48_50 NAT) (|<=i| g_s48_50 g_s49_51) (mem g_s50_52 NAT1) (|<=i| g_s50_52 g_s51_53) (mem g_s52_54 NAT) (|<=i| g_s52_54 g_s53_55) (mem g_s54_56 NAT) (|<=i| g_s54_56 g_s52_54) (mem g_s55_57 NAT) (|<=i| g_s55_57 g_s56_58) (mem g_s57_59 NAT) (|<=i| g_s57_59 g_s58_60) (|<=i| g_s57_59 g_s55_57) (mem g_s59_61 NAT) (|<=i| g_s59_61 g_s60_62) (mem g_s61_63 NAT) (|<=i| g_s61_63 g_s62_64) (mem g_s63_65 NAT) (|<=i| g_s63_65 g_s64_66) (mem g_s65_67 NAT) (|<=i| g_s65_67 g_s66_68) (mem g_s67_69 NAT) (|<=i| g_s67_69 g_s68_70) (mem g_s69_71 NAT) (|<=i| g_s69_71 g_s70_72) (mem g_s71_73 NAT1) (|<=i| g_s71_73 g_s72_74) (|<=i| g_s71_73 g_s73_75) (mem g_s74_76 NAT1) (|<=i| g_s74_76 g_s75_77) (|<=i| g_s74_76 g_s72_74) (mem g_s76_78 NAT) (|<=i| g_s76_78 g_s77_79) (|<=i| g_s76_78 g_s72_74) (mem g_s78_80 NAT) (|<=i| g_s78_80 g_s79_81) (|<=i| g_s78_80 g_s72_74) (mem g_s80_82 NAT) (|<=i| g_s80_82 g_s81_83) (mem g_s82_84 NAT) (|<=i| g_s82_84 g_s83_85) (mem g_s84_86 NAT) (|<=i| g_s84_86 g_s85_87) (mem g_s86_88 NAT) (|<=i| g_s86_88 g_s87_89) (mem g_s88_90 NAT1) (|<=i| g_s88_90 g_s89_91) (mem g_s90_92 NAT) (|<=i| g_s90_92 g_s91_93) (mem g_s92_94 NAT1) (|<=i| g_s92_94 g_s93_95) (mem g_s94_96 NAT) (|<=i| g_s94_96 g_s95_97) (mem g_s96_98 NAT) (|<=i| g_s96_98 g_s97_99) (mem g_s98_100 NAT) (|<=i| g_s98_100 g_s99_101) (mem g_s100_102 NAT) (|<=i| g_s100_102 g_s101_103) (mem g_s102_104 NAT) (|<=i| g_s102_104 g_s103_105) (mem g_s104_106 NAT) (|<=i| g_s104_106 g_s105_107) (mem g_s106_108 NAT) (|<=i| g_s106_108 g_s107_109) (mem g_s108_110 NAT1) (|<=i| g_s108_110 g_s109_111) (mem g_s110_112 NAT) (|<=i| g_s110_112 g_s111_113) (mem g_s112_114 NAT) (|<=i| g_s112_114 g_s110_112) (mem g_s113_115 NAT) (|<=i| g_s113_115 g_s114_116) (mem g_s115_117 NAT) (|<=i| g_s115_117 g_s113_115) (mem g_s116_118 NAT) (|<=i| g_s116_118 g_s117_119) (mem g_s118_120 NAT) (|<=i| g_s118_120 g_s119_121) (mem g_s120_122 NAT) (|<=i| g_s120_122 g_s121_123) (mem g_s122_124 NAT) (|<=i| g_s122_124 g_s123_125) (mem g_s124_126 NAT) (|<=i| g_s124_126 g_s125_127) (mem g_s126_128 NAT) (|<=i| g_s126_128 g_s127_129) (mem g_s128_130 NAT) (|<=i| g_s128_130 g_s129_131) (mem g_s130_132 NAT) (|<=i| g_s130_132 g_s131_133) (mem g_s132_134 NAT) (|<=i| g_s132_134 g_s131_133) (mem g_s133_135 NAT) (|<=i| g_s133_135 g_s134_136) (mem g_s135_137 NAT) (|<=i| g_s135_137 g_s136_138) (mem g_s137_139 NAT) (|<=i| g_s137_139 g_s138_140) (mem g_s139_141 NAT) (|<=i| g_s139_141 g_s140_142) (mem g_s141_143 NAT) (|<=i| g_s141_143 g_s142_144) (mem g_s143_145 NAT) (|<=i| g_s143_145 g_s144_146) (|<=i| g_s143_145 g_s145_147) (mem g_s146_148 NAT) (|<=i| g_s146_148 g_s147_149) (mem g_s148_150 NAT) (|<=i| g_s148_150 g_s149_151) (mem g_s150_152 NAT) (|<=i| g_s150_152 g_s151_153) (mem g_s152_154 NAT) (|<=i| g_s152_154 g_s153_155) (mem g_s154_156 NAT) (|<=i| g_s154_156 g_s155_157) (mem g_s156_158 NAT) (|<=i| g_s156_158 g_s157_159) (mem g_s158_160 NAT) (|<=i| g_s158_160 g_s159_161) (|<=i| g_s158_160 g_s160_162) (mem g_s161_163 NAT) (|<=i| g_s161_163 g_s162_164) (mem g_s163_165 BOOL) (mem g_s164_166 BOOL) (mem g_s165_167 NAT) (|<=i| g_s165_167 g_s166_168) (mem g_s167_169 NAT) (|<=i| g_s167_169 g_s168_170) (mem g_s169_171 NAT) (|<=i| g_s169_171 g_s170_172) (mem g_s171_173 NAT) (|<=i| g_s171_173 g_s172_174) (mem g_s173_175 NAT) (|<=i| g_s173_175 g_s18_20)))
(define-fun |def_seext| () Bool  (mem g_s174_176 g_s8_9))
(define-fun |def_lprp| () Bool (and (not (= g_s175_177 empty)) (not (= g_s176_178 empty)) (subset g_s177_179 g_s175_177) (mem g_s178_180 g_s175_177) (not (mem g_s178_180 g_s177_179)) (mem g_s179_181 (|+->| NAT g_s175_177)) (mem g_s179_181 (perm g_s177_179)) (= (card g_s177_179) g_s108_110) (subset g_s180_182 g_s176_178) (mem g_s181_183 g_s176_178) (not (mem g_s181_183 g_s180_182)) (mem g_s182_184 g_s176_178) (mem g_s182_184 g_s180_182) (mem g_s183_185 g_s176_178) (mem g_s183_185 g_s180_182) (mem g_s184_186 g_s176_178) (mem g_s184_186 g_s180_182) (mem g_s185_187 g_s176_178) (mem g_s185_187 g_s180_182) (mem g_s186_188 (|+->| NAT g_s176_178)) (mem g_s186_188 (perm g_s180_182))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool (and (not (= g_s175_177 empty)) (not (= g_s176_178 empty))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_sets|)
(define-fun lh_1 () Bool (subset g_s177_179 g_s175_177))
(define-fun lh_2 () Bool (mem g_s178_180 g_s175_177))
(define-fun lh_3 () Bool (not (mem g_s178_180 g_s177_179)))
(define-fun lh_4 () Bool (mem g_s179_181 (|+->| NAT g_s175_177)))
(define-fun lh_5 () Bool (mem g_s179_181 (perm g_s177_179)))
(define-fun lh_6 () Bool (= (card g_s177_179) g_s108_110))
(define-fun lh_7 () Bool (subset g_s180_182 g_s176_178))
(define-fun lh_8 () Bool (mem g_s181_183 g_s176_178))
(define-fun lh_9 () Bool (not (mem g_s181_183 g_s180_182)))
(define-fun lh_10 () Bool (mem g_s182_184 g_s176_178))
(define-fun lh_11 () Bool (mem g_s182_184 g_s180_182))
(define-fun lh_12 () Bool (mem g_s183_185 g_s176_178))
(define-fun lh_13 () Bool (mem g_s183_185 g_s180_182))
(define-fun lh_14 () Bool (mem g_s184_186 g_s176_178))
(define-fun lh_15 () Bool (mem g_s184_186 g_s180_182))
(define-fun lh_16 () Bool (mem g_s185_187 g_s176_178))
(define-fun lh_17 () Bool (mem g_s185_187 g_s180_182))
(define-fun lh_18 () Bool (mem g_s186_188 (|+->| NAT g_s176_178)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s177_179 (FIN g_s177_179)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s177_179 (FIN g_s177_179)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem g_s180_182 (FIN g_s180_182)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s177_179) INT))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s177_179 (FIN g_s177_179))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (mem g_s177_179 (FIN g_s177_179)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s192_189 NATURAL))
(assert (mem g_s192_189 (dom g_s179_181)))
; PO 1 in group 2
(assert (not (mem g_s179_181 (|+->| (dom g_s179_181) (ran g_s179_181)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s192_190 g_s175_177))
(assert (mem g_s192_190 (ran g_s179_181)))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s192_190 (dom (inverse g_s179_181)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem (inverse g_s179_181) (|+->| (dom (inverse g_s179_181)) (ran (inverse g_s179_181))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem (card g_s180_182) INT))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s180_182 (FIN g_s180_182))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> lh_1 (mem g_s180_182 (FIN g_s180_182)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s192_189 NATURAL))
(assert (mem g_s192_189 (dom g_s186_188)))
; PO 1 in group 5
(assert (not (mem g_s186_188 (|+->| (dom g_s186_188) (ran g_s186_188)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)