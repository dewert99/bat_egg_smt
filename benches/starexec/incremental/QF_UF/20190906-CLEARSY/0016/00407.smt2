(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e20 () U)
(declare-fun e22 () U)
(declare-fun e24 () U)
(declare-fun e26 () U)
(declare-fun e28 () U)
(declare-fun e30 () U)
(declare-fun e32 () U)
(declare-fun e34 () U)
(declare-fun e36 () U)
(declare-fun e38 () U)
(declare-fun e40 () U)
(declare-fun e42 () U)
(declare-fun e44 () U)
(declare-fun e46 () U)
(declare-fun e48 () U)
(declare-fun e50 () U)
(declare-fun e52 () U)
(declare-fun e54 () U)
(declare-fun e56 () U)
(declare-fun e58 () U)
(declare-fun e60 () U)
(declare-fun e62 () U)
(declare-fun e64 () U)
(declare-fun e66 () U)
(declare-fun e68 () U)
(declare-fun e70 () U)
(declare-fun e72 () U)
(declare-fun e74 () U)
(declare-fun e76 () U)
(declare-fun e78 () U)
(declare-fun e80 () U)
(declare-fun e82 () U)
(declare-fun e84 () U)
(declare-fun e86 () U)
(declare-fun e88 () U)
(declare-fun e90 () U)
(declare-fun e92 () U)
(declare-fun e94 () U)
(declare-fun e96 () U)
(declare-fun e98 () U)
(declare-fun e100 () U)
(declare-fun e102 () U)
(declare-fun e104 () U)
(declare-fun e106 () U)
(declare-fun e108 () U)
(declare-fun e110 () U)
(declare-fun e112 () U)
(declare-fun e114 () U)
(declare-fun e116 () U)
(declare-fun e118 () U)
(declare-fun e120 () U)
(declare-fun e122 () U)
(declare-fun e124 () U)
(declare-fun e126 () U)
(declare-fun e128 () U)
(declare-fun e130 () U)
(declare-fun e132 () U)
(declare-fun e134 () U)
(declare-fun e136 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s11_11 () U)
(declare-fun g_s15_14 () U)
(declare-fun g_s16_15 () U)
(declare-fun g_s17_16 () U)
(declare-fun g_s18_17 () U)
(declare-fun g_s19_18 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_19 () U)
(declare-fun g_s21_21 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_27 () U)
(declare-fun g_s25_29 () U)
(declare-fun g_s26_31 () U)
(declare-fun g_s27_33 () U)
(declare-fun g_s28_35 () U)
(declare-fun g_s29_37 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_39 () U)
(declare-fun g_s31_41 () U)
(declare-fun g_s32_43 () U)
(declare-fun g_s33_45 () U)
(declare-fun g_s34_47 () U)
(declare-fun g_s35_49 () U)
(declare-fun g_s36_51 () U)
(declare-fun g_s37_53 () U)
(declare-fun g_s38_55 () U)
(declare-fun g_s39_57 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_59 () U)
(declare-fun g_s41_61 () U)
(declare-fun g_s42_63 () U)
(declare-fun g_s43_65 () U)
(declare-fun g_s44_67 () U)
(declare-fun g_s45_69 () U)
(declare-fun g_s46_71 () U)
(declare-fun g_s47_73 () U)
(declare-fun g_s48_75 () U)
(declare-fun g_s49_77 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_79 () U)
(declare-fun g_s51_81 () U)
(declare-fun g_s52_83 () U)
(declare-fun g_s53_85 () U)
(declare-fun g_s54_87 () U)
(declare-fun g_s55_89 () U)
(declare-fun g_s56_91 () U)
(declare-fun g_s57_93 () U)
(declare-fun g_s58_95 () U)
(declare-fun g_s59_97 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_99 () U)
(declare-fun g_s61_101 () U)
(declare-fun g_s62_103 () U)
(declare-fun g_s63_105 () U)
(declare-fun g_s64_107 () U)
(declare-fun g_s65_109 () U)
(declare-fun g_s66_111 () U)
(declare-fun g_s67_113 () U)
(declare-fun g_s68_115 () U)
(declare-fun g_s69_117 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_119 () U)
(declare-fun g_s71_121 () U)
(declare-fun g_s72_123 () U)
(declare-fun g_s73_125 () U)
(declare-fun g_s74_127 () U)
(declare-fun g_s75_129 () U)
(declare-fun g_s76_131 () U)
(declare-fun g_s77_133 () U)
(declare-fun g_s78_135 () U)
(declare-fun g_s79_137 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_138 () U)
(declare-fun g_s81_139 () U)
(declare-fun g_s82$1_140 () U)
(declare-fun g_s86_141 () U)
(declare-fun g_s86$1_142 () U)
(declare-fun g_s88_143 () U)
(declare-fun g_s88$1_144 () U)
(declare-fun g_s9_10 () U)
(declare-fun e13 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (= g_s1_2 (SET (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 g_s2_3))))) (not (= g_s6_7 empty)) (subset g_s7_8 g_s0_1) (mem g_s7_8 (FIN g_s0_1)) (not (= g_s7_8 empty)) (mem g_s8_9 (|+->| NATURAL g_s0_1)) (mem g_s8_9 (perm g_s7_8)) (mem g_s9_10 g_s0_1) (not (mem g_s9_10 g_s7_8)) (mem g_s10_12 (|+->| (set_prod g_s11_11 INTEGER) g_s7_8)) (= (dom g_s10_12) e13) (mem g_s10_12 (|>->>| (dom g_s10_12) g_s7_8)) (subset g_s15_14 g_s6_7) (mem g_s16_15 (|+->| NATURAL g_s6_7)) (mem g_s16_15 (perm g_s15_14)) (mem g_s17_16 g_s6_7) (not (mem g_s17_16 g_s15_14))))
(define-fun |def_seext| () Bool (and (= g_s18_17 TRUE) (= g_s19_18 FALSE) (= g_s20_19 e0) (= g_s21_21 e20) (= g_s22_23 e22) (= g_s23_25 e24) (= g_s24_27 e26) (= g_s25_29 e28) (= g_s26_31 e30) (= g_s27_33 e32) (= g_s28_35 e34) (= g_s29_37 e36) (= g_s30_39 e38) (= g_s31_41 e40) (= g_s32_43 e42) (= g_s33_45 e44) (= g_s34_47 e46) (= g_s35_49 e48) (= g_s36_51 e50) (= g_s37_53 e52) (= g_s38_55 e54) (= g_s39_57 e56) (= g_s40_59 e58) (= g_s41_61 e60) (= g_s42_63 e62) (= g_s43_65 e64) (= g_s44_67 e66) (= g_s45_69 e68) (= g_s46_71 e70) (= g_s47_73 e72) (= g_s48_75 e74) (= g_s49_77 e76) (= g_s50_79 e78) (= g_s51_81 e80) (= g_s52_83 e82) (= g_s53_85 e84) (= g_s54_87 e86) (= g_s55_89 e88) (= g_s56_91 e90) (= g_s57_93 e92) (= g_s58_95 e94) (= g_s59_97 e96) (= g_s60_99 e98) (= g_s61_101 e100) (= g_s62_103 e102) (= g_s63_105 e104) (= g_s64_107 e106) (= g_s65_109 e108) (= g_s66_111 e110) (= g_s67_113 e112) (= g_s68_115 e114) (= g_s69_117 e116) (= g_s70_119 e118) (= g_s71_121 e120) (= g_s72_123 e122) (= g_s73_125 e124) (= g_s74_127 e126) (= g_s75_129 e128) (= g_s76_131 e130) (= g_s77_133 e132) (= g_s78_135 e134) (= g_s79_137 e136)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset g_s80_138 g_s7_8) (subset g_s81_139 g_s7_8) (= (binary_inter g_s80_138 g_s81_139) empty)))
(define-fun |def_inv| () Bool (and (mem g_s82$1_140 NATURAL) (and (|>=i| g_s82$1_140 e0) (|<=i| g_s82$1_140 (size g_s8_9))) (= g_s80_138 (image g_s8_9 (interval e20 g_s82$1_140)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 NATURAL)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s8_9)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (= empty (image g_s8_9 (interval e20 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s86$1_142 g_s86_141))
; PO 1 in group 1
(push 1)
(assert (not (mem (card g_s7_8) NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (and (|>=i| (card g_s7_8) e0) (|<=i| (card g_s7_8) (size g_s8_9)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (= g_s7_8 (image g_s8_9 (interval e20 (card g_s7_8))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (= (bool (|<=i| g_s21_21 (card g_s7_8))) (bool (not (= g_s7_8 empty))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s86$1_142 g_s86_141))
(assert (= g_s88$1_144 g_s88_143))
(define-fun lh_1 () Bool (not (= g_s80_138 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s82$1_140))
(define-fun lh_3 () Bool (mem g_s82$1_140 NATURAL))
(define-fun lh_4 () Bool (mem g_s82$1_140 (dom g_s8_9)))
; PO 1 in group 2
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s82$1_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s82$1_140 (dom g_s8_9)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s8_9 g_s82$1_140) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s8_9 g_s82$1_140) g_s80_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s82$1_140 g_s21_21) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s82$1_140 g_s21_21) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s82$1_140 g_s21_21) e0) (|<=i| (|-i| g_s82$1_140 g_s21_21) (size g_s8_9))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s21_21 (|-i| g_s82$1_140 g_s21_21))) (bool (not (= g_s80_138 (SET (apply g_s8_9 g_s82$1_140)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s80_138 (SET (apply g_s8_9 g_s82$1_140))) (image g_s8_9 (interval e20 (|-i| g_s82$1_140 g_s21_21)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (mem g_s82$1_140 NATURAL))
; PO 1 in group 3
(assert (not (=> lh_1 (mem g_s8_9 (seq (ran g_s8_9))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)