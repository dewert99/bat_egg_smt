(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e132 () U)
(declare-fun e134 () U)
(declare-fun e136 () U)
(declare-fun e138 () U)
(declare-fun e140 () U)
(declare-fun e142 () U)
(declare-fun e144 () U)
(declare-fun e146 () U)
(declare-fun e148 () U)
(declare-fun e150 () U)
(declare-fun e152 () U)
(declare-fun e154 () U)
(declare-fun e156 () U)
(declare-fun e158 () U)
(declare-fun e160 () U)
(declare-fun e162 () U)
(declare-fun e164 () U)
(declare-fun e166 () U)
(declare-fun e168 () U)
(declare-fun e170 () U)
(declare-fun e172 () U)
(declare-fun e174 () U)
(declare-fun e176 () U)
(declare-fun e178 () U)
(declare-fun e180 () U)
(declare-fun e182 () U)
(declare-fun e184 () U)
(declare-fun e186 () U)
(declare-fun e188 () U)
(declare-fun e190 () U)
(declare-fun e192 () U)
(declare-fun e194 () U)
(declare-fun e196 () U)
(declare-fun e198 () U)
(declare-fun e200 () U)
(declare-fun e202 () U)
(declare-fun e204 () U)
(declare-fun e206 () U)
(declare-fun e208 () U)
(declare-fun e210 () U)
(declare-fun e212 () U)
(declare-fun e214 () U)
(declare-fun e216 () U)
(declare-fun e218 () U)
(declare-fun e220 () U)
(declare-fun e222 () U)
(declare-fun e224 () U)
(declare-fun e226 () U)
(declare-fun e228 () U)
(declare-fun e230 () U)
(declare-fun e232 () U)
(declare-fun e234 () U)
(declare-fun e236 () U)
(declare-fun e238 () U)
(declare-fun e240 () U)
(declare-fun e242 () U)
(declare-fun e244 () U)
(declare-fun e246 () U)
(declare-fun e248 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_116 () U)
(declare-fun g_s115_115 () U)
(declare-fun g_s119_118 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_119 () U)
(declare-fun g_s121_120 () U)
(declare-fun g_s122_121 () U)
(declare-fun g_s123_122 () U)
(declare-fun g_s124_123 () U)
(declare-fun g_s125_124 () U)
(declare-fun g_s126_125 () U)
(declare-fun g_s127_126 () U)
(declare-fun g_s128_127 () U)
(declare-fun g_s129_128 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_129 () U)
(declare-fun g_s131_130 () U)
(declare-fun g_s132_131 () U)
(declare-fun g_s133_133 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_137 () U)
(declare-fun g_s136_139 () U)
(declare-fun g_s137_141 () U)
(declare-fun g_s138_143 () U)
(declare-fun g_s139_145 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_147 () U)
(declare-fun g_s141_149 () U)
(declare-fun g_s142_151 () U)
(declare-fun g_s143_153 () U)
(declare-fun g_s144_155 () U)
(declare-fun g_s145_157 () U)
(declare-fun g_s146_159 () U)
(declare-fun g_s147_161 () U)
(declare-fun g_s148_163 () U)
(declare-fun g_s149_165 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_167 () U)
(declare-fun g_s151_169 () U)
(declare-fun g_s152_171 () U)
(declare-fun g_s153_173 () U)
(declare-fun g_s154_175 () U)
(declare-fun g_s155_177 () U)
(declare-fun g_s156_179 () U)
(declare-fun g_s157_181 () U)
(declare-fun g_s158_183 () U)
(declare-fun g_s159_185 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_187 () U)
(declare-fun g_s161_189 () U)
(declare-fun g_s162_191 () U)
(declare-fun g_s163_193 () U)
(declare-fun g_s164_195 () U)
(declare-fun g_s165_197 () U)
(declare-fun g_s166_199 () U)
(declare-fun g_s167_201 () U)
(declare-fun g_s168_203 () U)
(declare-fun g_s169_205 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_207 () U)
(declare-fun g_s171_209 () U)
(declare-fun g_s172_211 () U)
(declare-fun g_s173_213 () U)
(declare-fun g_s174_215 () U)
(declare-fun g_s175_217 () U)
(declare-fun g_s176_219 () U)
(declare-fun g_s177_221 () U)
(declare-fun g_s178_223 () U)
(declare-fun g_s179_225 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_227 () U)
(declare-fun g_s181_229 () U)
(declare-fun g_s182_231 () U)
(declare-fun g_s183_233 () U)
(declare-fun g_s184_235 () U)
(declare-fun g_s185_237 () U)
(declare-fun g_s186_239 () U)
(declare-fun g_s187_241 () U)
(declare-fun g_s188_243 () U)
(declare-fun g_s189_245 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_247 () U)
(declare-fun g_s191_249 () U)
(declare-fun g_s192_250 () U)
(declare-fun g_s193_251 () U)
(declare-fun g_s194_252 () U)
(declare-fun g_s195_253 () U)
(declare-fun g_s196_254 () U)
(declare-fun g_s197_255 () U)
(declare-fun g_s198_256 () U)
(declare-fun g_s199_257 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_258 () U)
(declare-fun g_s201_259 () U)
(declare-fun g_s202$1_260 () U)
(declare-fun g_s203$1_261 () U)
(declare-fun g_s204$1_262 () U)
(declare-fun g_s205$1_263 () U)
(declare-fun g_s206$1_264 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_265 () U)
(declare-fun g_s210$1_266 () U)
(declare-fun g_s216_267 () U)
(declare-fun g_s216_273 () U)
(declare-fun g_s216_275 () U)
(declare-fun g_s216$1_268 () U)
(declare-fun g_s216$1_274 () U)
(declare-fun g_s216$1_276 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s221_269 () U)
(declare-fun g_s221$1_270 () U)
(declare-fun g_s223_271 () U)
(declare-fun g_s223$1_272 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e117 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (= g_s10_11 (SET (mapplet g_s12_13 g_s11_12))) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (not (= g_s15_16 empty)) (not (= g_s16_17 empty)) (not (= g_s17_18 empty)) (not (= g_s18_19 empty)) (not (= g_s19_20 empty)) (not (= g_s20_21 empty)) (not (= g_s21_22 empty)) (not (= g_s22_23 empty)) (not (= g_s23_24 empty)) (not (= g_s24_25 empty)) (not (= g_s25_26 empty)) (not (= g_s26_27 empty)) (= g_s27_28 (SET (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 g_s28_29))))) (not (= g_s32_33 empty)) (not (= g_s33_34 empty)) (not (= g_s34_35 empty)) (not (= g_s35_36 empty)) (subset g_s36_37 g_s0_1) (mem g_s37_38 g_s0_1) (not (mem g_s37_38 g_s36_37)) (mem g_s38_39 (|+->| NAT g_s0_1)) (mem g_s38_39 (perm g_s36_37)) (= (card g_s36_37) g_s39_40) (subset g_s40_41 g_s1_2) (mem g_s41_42 g_s1_2) (not (mem g_s41_42 g_s40_41)) (mem g_s42_43 g_s1_2) (mem g_s42_43 g_s40_41) (mem g_s43_44 g_s1_2) (mem g_s43_44 g_s40_41) (mem g_s44_45 g_s1_2) (mem g_s44_45 g_s40_41) (mem g_s45_46 g_s1_2) (mem g_s45_46 g_s40_41) (mem g_s46_47 (|+->| NAT g_s1_2)) (mem g_s46_47 (perm g_s40_41)) (subset g_s47_48 g_s2_3) (mem g_s48_49 g_s2_3) (not (mem g_s48_49 g_s47_48)) (mem g_s49_50 (|+->| NAT g_s2_3)) (mem g_s49_50 (perm g_s47_48)) (subset g_s50_51 g_s3_4) (mem g_s51_52 g_s3_4) (not (mem g_s51_52 g_s50_51)) (mem g_s52_53 (|+->| NAT g_s3_4)) (mem g_s52_53 (perm g_s50_51)) (subset g_s53_54 g_s4_5) (mem g_s54_55 g_s4_5) (not (mem g_s54_55 g_s53_54)) (mem g_s55_56 (|+->| NAT g_s4_5)) (mem g_s55_56 (perm g_s53_54)) (subset g_s56_57 g_s5_6) (mem g_s57_58 g_s5_6) (not (mem g_s57_58 g_s56_57)) (mem g_s58_59 (|+->| NAT g_s5_6)) (mem g_s58_59 (perm g_s56_57)) (= (card g_s56_57) g_s59_60) (subset g_s60_61 g_s6_7) (mem g_s61_62 g_s6_7) (not (mem g_s61_62 g_s60_61)) (mem g_s62_63 (|+->| NAT g_s6_7)) (mem g_s62_63 (perm g_s60_61)) (subset g_s63_64 g_s7_8) (mem g_s64_65 g_s7_8) (not (mem g_s64_65 g_s63_64)) (mem g_s65_66 (|+->| NAT g_s7_8)) (mem g_s65_66 (perm g_s63_64)) (= (card g_s63_64) g_s66_67) (subset g_s67_68 g_s8_9) (mem g_s68_69 g_s8_9) (not (mem g_s68_69 g_s67_68)) (mem g_s69_70 (|+->| NAT g_s8_9)) (mem g_s69_70 (perm g_s67_68)) (subset g_s70_71 g_s9_10) (mem g_s71_72 g_s9_10) (not (mem g_s71_72 g_s70_71)) (mem g_s72_73 (|+->| NAT g_s9_10)) (mem g_s72_73 (perm g_s70_71)) (subset g_s73_74 g_s13_14) (mem g_s74_75 g_s13_14) (not (mem g_s74_75 g_s73_74)) (mem g_s75_76 (|+->| NAT g_s13_14)) (mem g_s75_76 (perm g_s73_74)) (subset g_s76_77 g_s14_15) (mem g_s77_78 g_s14_15) (not (mem g_s77_78 g_s76_77)) (mem g_s78_79 (|+->| NAT g_s14_15)) (mem g_s78_79 (perm g_s76_77)) (subset g_s79_80 g_s15_16) (mem g_s80_81 g_s15_16) (not (mem g_s80_81 g_s79_80)) (mem g_s81_82 (|+->| NAT g_s15_16)) (mem g_s81_82 (perm g_s79_80)) (subset g_s82_83 g_s16_17) (mem g_s83_84 g_s16_17) (not (mem g_s83_84 g_s82_83)) (mem g_s84_85 (|+->| NAT g_s16_17)) (mem g_s84_85 (perm g_s82_83)) (subset g_s85_86 g_s17_18) (mem g_s86_87 g_s17_18) (not (mem g_s86_87 g_s85_86)) (mem g_s87_88 (|+->| NAT g_s17_18)) (mem g_s87_88 (perm g_s85_86)) (subset g_s88_89 g_s18_19) (mem g_s89_90 g_s18_19) (not (mem g_s89_90 g_s88_89)) (mem g_s90_91 (|+->| NAT g_s18_19)) (mem g_s90_91 (perm g_s88_89)) (subset g_s91_92 g_s19_20) (mem g_s92_93 g_s19_20) (not (mem g_s92_93 g_s91_92)) (mem g_s93_94 (|+->| NAT g_s19_20)) (mem g_s93_94 (perm g_s91_92)) (subset g_s94_95 g_s20_21) (mem g_s95_96 g_s20_21) (not (mem g_s95_96 g_s94_95)) (mem g_s96_97 (|+->| NAT g_s20_21)) (mem g_s96_97 (perm g_s94_95)) (subset g_s97_98 g_s21_22) (mem g_s98_99 g_s21_22) (not (mem g_s98_99 g_s97_98)) (mem g_s99_100 (|+->| NAT g_s21_22)) (mem g_s99_100 (perm g_s97_98)) (subset g_s100_101 g_s22_23) (mem g_s101_102 g_s22_23) (not (mem g_s101_102 g_s100_101)) (mem g_s102_103 (|+->| NAT g_s22_23)) (mem g_s102_103 (perm g_s100_101)) (subset g_s103_104 g_s23_24) (mem g_s104_105 g_s23_24) (not (mem g_s104_105 g_s103_104)) (subset g_s105_106 g_s24_25) (mem g_s106_107 g_s24_25) (not (mem g_s106_107 g_s105_106)) (mem g_s107_108 (|+->| NAT g_s24_25)) (mem g_s107_108 (perm g_s105_106)) (subset g_s108_109 g_s25_26) (mem g_s109_110 g_s25_26) (not (mem g_s109_110 g_s108_109)) (mem g_s110_111 (|+->| NAT g_s25_26)) (mem g_s110_111 (perm g_s108_109)) (subset g_s111_112 g_s26_27) (mem g_s111_112 (FIN g_s26_27)) (not (= g_s111_112 empty)) (mem g_s112_113 (|+->| NATURAL g_s26_27)) (mem g_s112_113 (perm g_s111_112)) (mem g_s113_114 g_s26_27) (not (mem g_s113_114 g_s111_112)) (mem g_s114_116 (|+->| (set_prod g_s115_115 INTEGER) g_s111_112)) (= (dom g_s114_116) e117) (mem g_s114_116 (|>->>| (dom g_s114_116) g_s111_112)) (subset g_s119_118 g_s32_33) (mem g_s120_119 (|+->| NATURAL g_s32_33)) (mem g_s120_119 (perm g_s119_118)) (mem g_s121_120 g_s32_33) (not (mem g_s121_120 g_s119_118)) (subset g_s122_121 g_s33_34) (mem g_s123_122 g_s33_34) (not (mem g_s123_122 g_s122_121)) (mem g_s124_123 (|+->| NAT g_s33_34)) (mem g_s124_123 (perm g_s122_121)) (subset g_s125_124 g_s34_35) (mem g_s126_125 g_s34_35) (not (mem g_s126_125 g_s125_124)) (mem g_s127_126 (|+->| NAT g_s34_35)) (mem g_s127_126 (perm g_s125_124)) (subset g_s128_127 g_s35_36) (mem g_s129_128 g_s35_36) (not (mem g_s129_128 g_s128_127))))
(define-fun |def_seext| () Bool (and (= g_s130_129 TRUE) (= g_s131_130 FALSE) (= g_s132_131 e0) (= g_s133_133 e132) (= g_s134_135 e134) (= g_s135_137 e136) (= g_s136_139 e138) (= g_s137_141 e140) (= g_s138_143 e142) (= g_s139_145 e144) (= g_s140_147 e146) (= g_s141_149 e148) (= g_s142_151 e150) (= g_s143_153 e152) (= g_s144_155 e154) (= g_s145_157 e156) (= g_s146_159 e158) (= g_s147_161 e160) (= g_s148_163 e162) (= g_s149_165 e164) (= g_s150_167 e166) (= g_s151_169 e168) (= g_s152_171 e170) (= g_s153_173 e172) (= g_s154_175 e174) (= g_s155_177 e176) (= g_s156_179 e178) (= g_s157_181 e180) (= g_s158_183 e182) (= g_s159_185 e184) (= g_s160_187 e186) (= g_s161_189 e188) (= g_s162_191 e190) (= g_s163_193 e192) (= g_s164_195 e194) (= g_s165_197 e196) (= g_s166_199 e198) (= g_s167_201 e200) (= g_s168_203 e202) (= g_s169_205 e204) (= g_s170_207 e206) (= g_s171_209 e208) (= g_s172_211 e210) (= g_s173_213 e212) (= g_s174_215 e214) (= g_s175_217 e216) (= g_s176_219 e218) (= g_s177_221 e220) (= g_s178_223 e222) (= g_s179_225 e224) (= g_s180_227 e226) (= g_s181_229 e228) (= g_s182_231 e230) (= g_s183_233 e232) (= g_s184_235 e234) (= g_s185_237 e236) (= g_s186_239 e238) (= g_s187_241 e240) (= g_s188_243 e242) (= g_s189_245 e244) (= g_s190_247 e246) (= g_s191_249 e248)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset g_s192_250 g_s36_37) (subset g_s193_251 g_s36_37) (= (binary_inter g_s192_250 g_s193_251) empty) (subset g_s194_252 g_s56_57) (subset g_s195_253 g_s56_57) (= (binary_inter g_s194_252 g_s195_253) empty) (subset g_s196_254 g_s63_64) (subset g_s197_255 g_s63_64) (= (binary_inter g_s196_254 g_s197_255) empty) (subset g_s198_256 g_s111_112) (subset g_s199_257 g_s111_112) (= (binary_inter g_s198_256 g_s199_257) empty) (subset g_s200_258 g_s125_124) (subset g_s201_259 g_s125_124) (= (binary_inter g_s200_258 g_s201_259) empty)))
(define-fun |def_inv| () Bool (and (mem g_s202$1_260 NATURAL) (mem g_s203$1_261 NATURAL) (mem g_s204$1_262 NATURAL) (mem g_s205$1_263 NATURAL) (mem g_s206$1_264 NATURAL) (and (|>=i| g_s202$1_260 e0) (|<=i| g_s202$1_260 (size g_s38_39))) (and (|>=i| g_s203$1_261 e0) (|<=i| g_s203$1_261 (size g_s58_59))) (and (|>=i| g_s204$1_262 e0) (|<=i| g_s204$1_262 (size g_s65_66))) (and (|>=i| g_s205$1_263 e0) (|<=i| g_s205$1_263 (size g_s112_113))) (and (|>=i| g_s206$1_264 e0) (|<=i| g_s206$1_264 (size g_s127_126))) (= g_s192_250 (image g_s38_39 (interval e132 g_s202$1_260))) (= g_s194_252 (image g_s58_59 (interval e132 g_s203$1_261))) (= g_s196_254 (image g_s65_66 (interval e132 g_s204$1_262))) (= g_s198_256 (image g_s112_113 (interval e132 g_s205$1_263))) (= g_s200_258 (image g_s127_126 (interval e132 g_s206$1_264)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 NATURAL)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s112_113)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s127_126)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s38_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s58_59)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 (size g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (= empty (image g_s112_113 (interval e132 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (= empty (image g_s127_126 (interval e132 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (= empty (image g_s38_39 (interval e132 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (= empty (image g_s58_59 (interval e132 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (= empty (image g_s65_66 (interval e132 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(define-fun lh_1 () Bool (mem (card g_s36_37) INT))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_1 (mem (card g_s36_37) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (and (|>=i| (card g_s36_37) e0) (|<=i| (card g_s36_37) (size g_s38_39))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> lh_1 (= g_s36_37 (image g_s38_39 (interval e132 (card g_s36_37)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> lh_1 (= (bool (|<=i| g_s133_133 (card g_s36_37))) (bool (not (= g_s36_37 empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(define-fun lh_1 () Bool (mem (card g_s56_57) INT))
; PO 1 in group 2
(push 1)
(assert (not (=> lh_1 (mem (card g_s56_57) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> lh_1 (and (|>=i| (card g_s56_57) e0) (|<=i| (card g_s56_57) (size g_s58_59))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> lh_1 (= g_s56_57 (image g_s58_59 (interval e132 (card g_s56_57)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> lh_1 (= (bool (|<=i| g_s133_133 (card g_s56_57))) (bool (not (= g_s56_57 empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(define-fun lh_1 () Bool (mem (card g_s63_64) INT))
; PO 1 in group 3
(push 1)
(assert (not (=> lh_1 (mem (card g_s63_64) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> lh_1 (and (|>=i| (card g_s63_64) e0) (|<=i| (card g_s63_64) (size g_s65_66))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> lh_1 (= g_s63_64 (image g_s65_66 (interval e132 (card g_s63_64)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> lh_1 (= (bool (|<=i| g_s133_133 (card g_s63_64))) (bool (not (= g_s63_64 empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
; PO 1 in group 4
(push 1)
(assert (not (mem (card g_s111_112) NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (and (|>=i| (card g_s111_112) e0) (|<=i| (card g_s111_112) (size g_s112_113)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (= g_s111_112 (image g_s112_113 (interval e132 (card g_s111_112))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (= (bool (|<=i| g_s133_133 (card g_s111_112))) (bool (not (= g_s111_112 empty))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(define-fun lh_1 () Bool (mem (card g_s125_124) INT))
; PO 1 in group 5
(push 1)
(assert (not (=> lh_1 (mem (card g_s125_124) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> lh_1 (and (|>=i| (card g_s125_124) e0) (|<=i| (card g_s125_124) (size g_s127_126))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> lh_1 (= g_s125_124 (image g_s127_126 (interval e132 (card g_s125_124)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> lh_1 (= (bool (|<=i| g_s133_133 (card g_s125_124))) (bool (not (= g_s125_124 empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(assert (= g_s216$1_268 g_s216_267))
(define-fun lh_1 () Bool (not (= g_s192_250 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s202$1_260))
(define-fun lh_3 () Bool (mem g_s202$1_260 NATURAL))
(define-fun lh_4 () Bool (mem g_s202$1_260 (dom g_s38_39)))
; PO 1 in group 6
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s202$1_260))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s202$1_260 (dom g_s38_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s38_39 g_s202$1_260) g_s36_37))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s38_39 g_s202$1_260) g_s192_250))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s202$1_260 e132) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s202$1_260 e132) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s202$1_260 e132) e0) (|<=i| (|-i| g_s202$1_260 e132) (size g_s38_39))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s133_133 (|-i| g_s202$1_260 e132))) (bool (not (= g_s192_250 (SET (apply g_s38_39 g_s202$1_260)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s192_250 (SET (apply g_s38_39 g_s202$1_260))) (image g_s38_39 (interval e132 (|-i| g_s202$1_260 e132)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(assert (= g_s221$1_270 g_s221_269))
(define-fun lh_1 () Bool (not (= g_s194_252 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s203$1_261))
(define-fun lh_3 () Bool (mem g_s203$1_261 NATURAL))
(define-fun lh_4 () Bool (mem g_s203$1_261 (dom g_s58_59)))
; PO 1 in group 7
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s203$1_261))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s203$1_261 (dom g_s58_59)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s58_59 g_s203$1_261) g_s56_57))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s58_59 g_s203$1_261) g_s194_252))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s203$1_261 e132) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s203$1_261 e132) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s203$1_261 e132) e0) (|<=i| (|-i| g_s203$1_261 e132) (size g_s58_59))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s133_133 (|-i| g_s203$1_261 e132))) (bool (not (= g_s194_252 (SET (apply g_s58_59 g_s203$1_261)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s194_252 (SET (apply g_s58_59 g_s203$1_261))) (image g_s58_59 (interval e132 (|-i| g_s203$1_261 e132)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(assert (= g_s223$1_272 g_s223_271))
(define-fun lh_1 () Bool (not (= g_s196_254 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s204$1_262))
(define-fun lh_3 () Bool (mem g_s204$1_262 NATURAL))
(define-fun lh_4 () Bool (mem g_s204$1_262 (dom g_s65_66)))
; PO 1 in group 8
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s204$1_262))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s204$1_262 (dom g_s65_66)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s65_66 g_s204$1_262) g_s63_64))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s65_66 g_s204$1_262) g_s196_254))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s204$1_262 e132) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s204$1_262 e132) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s204$1_262 e132) e0) (|<=i| (|-i| g_s204$1_262 e132) (size g_s65_66))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s133_133 (|-i| g_s204$1_262 e132))) (bool (not (= g_s196_254 (SET (apply g_s65_66 g_s204$1_262)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s196_254 (SET (apply g_s65_66 g_s204$1_262))) (image g_s65_66 (interval e132 (|-i| g_s204$1_262 e132)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(assert (= g_s216$1_274 g_s216_273))
(define-fun lh_1 () Bool (not (= g_s198_256 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s205$1_263))
(define-fun lh_3 () Bool (mem g_s205$1_263 NATURAL))
(define-fun lh_4 () Bool (mem g_s205$1_263 (dom g_s112_113)))
; PO 1 in group 9
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s205$1_263))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s205$1_263 (dom g_s112_113)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s112_113 g_s205$1_263) g_s111_112))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s112_113 g_s205$1_263) g_s198_256))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s205$1_263 g_s133_133) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s205$1_263 g_s133_133) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s205$1_263 g_s133_133) e0) (|<=i| (|-i| g_s205$1_263 g_s133_133) (size g_s112_113))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s133_133 (|-i| g_s205$1_263 g_s133_133))) (bool (not (= g_s198_256 (SET (apply g_s112_113 g_s205$1_263)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s198_256 (SET (apply g_s112_113 g_s205$1_263))) (image g_s112_113 (interval e132 (|-i| g_s205$1_263 g_s133_133)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s210$1_266 g_s210_265))
(assert (= g_s216$1_276 g_s216_275))
(define-fun lh_1 () Bool (not (= g_s200_258 empty)))
(define-fun lh_2 () Bool (|<=i| e0 g_s206$1_264))
(define-fun lh_3 () Bool (mem g_s206$1_264 NATURAL))
(define-fun lh_4 () Bool (mem g_s206$1_264 (dom g_s127_126)))
; PO 1 in group 10
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s206$1_264))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s206$1_264 (dom g_s127_126)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s127_126 g_s206$1_264) g_s125_124))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s127_126 g_s206$1_264) g_s200_258))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s206$1_264 g_s133_133) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (|-i| g_s206$1_264 g_s133_133) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (and (|>=i| (|-i| g_s206$1_264 g_s133_133) e0) (|<=i| (|-i| g_s206$1_264 g_s133_133) (size g_s127_126))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (|<=i| g_s133_133 (|-i| g_s206$1_264 g_s133_133))) (bool (not (= g_s200_258 (SET (apply g_s127_126 g_s206$1_264)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (set_diff g_s200_258 (SET (apply g_s127_126 g_s206$1_264))) (image g_s127_126 (interval e132 (|-i| g_s206$1_264 g_s133_133)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (mem g_s202$1_260 NATURAL))
(define-fun lh_2 () Bool (mem g_s203$1_261 NATURAL))
(define-fun lh_3 () Bool (mem g_s204$1_262 NATURAL))
(define-fun lh_4 () Bool (mem g_s205$1_263 NATURAL))
(define-fun lh_5 () Bool (mem g_s206$1_264 NATURAL))
(define-fun lh_6 () Bool (and (|>=i| g_s202$1_260 e0) (|<=i| g_s202$1_260 (size g_s38_39))))
(define-fun lh_7 () Bool (and (|>=i| g_s203$1_261 e0) (|<=i| g_s203$1_261 (size g_s58_59))))
(define-fun lh_8 () Bool (and (|>=i| g_s204$1_262 e0) (|<=i| g_s204$1_262 (size g_s65_66))))
(define-fun lh_9 () Bool (and (|>=i| g_s205$1_263 e0) (|<=i| g_s205$1_263 (size g_s112_113))))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s38_39 (seq (ran g_s38_39))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem g_s58_59 (seq (ran g_s58_59))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s65_66 (seq (ran g_s65_66))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem g_s112_113 (seq (ran g_s112_113))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s127_126 (seq (ran g_s127_126))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)