(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e6 () U)
(declare-fun e56 () U)
(declare-fun e58 () U)
(declare-fun e60 () U)
(declare-fun e62 () U)
(declare-fun e64 () U)
(declare-fun e66 () U)
(declare-fun e68 () U)
(declare-fun e70 () U)
(declare-fun e72 () U)
(declare-fun e74 () U)
(declare-fun e76 () U)
(declare-fun e78 () U)
(declare-fun e80 () U)
(declare-fun e82 () U)
(declare-fun e84 () U)
(declare-fun e86 () U)
(declare-fun e88 () U)
(declare-fun e90 () U)
(declare-fun e92 () U)
(declare-fun e94 () U)
(declare-fun e96 () U)
(declare-fun e98 () U)
(declare-fun e100 () U)
(declare-fun e102 () U)
(declare-fun e104 () U)
(declare-fun e106 () U)
(declare-fun e108 () U)
(declare-fun e110 () U)
(declare-fun e112 () U)
(declare-fun e114 () U)
(declare-fun e116 () U)
(declare-fun e118 () U)
(declare-fun e120 () U)
(declare-fun e122 () U)
(declare-fun e124 () U)
(declare-fun e126 () U)
(declare-fun e128 () U)
(declare-fun e130 () U)
(declare-fun e132 () U)
(declare-fun e134 () U)
(declare-fun e136 () U)
(declare-fun e138 () U)
(declare-fun e140 () U)
(declare-fun e142 () U)
(declare-fun e144 () U)
(declare-fun e146 () U)
(declare-fun e148 () U)
(declare-fun e150 () U)
(declare-fun e152 () U)
(declare-fun e154 () U)
(declare-fun e156 () U)
(declare-fun e158 () U)
(declare-fun e160 () U)
(declare-fun e162 () U)
(declare-fun e164 () U)
(declare-fun e166 () U)
(declare-fun e168 () U)
(declare-fun e170 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s100_147 () U)
(declare-fun g_s101_149 () U)
(declare-fun g_s102_151 () U)
(declare-fun g_s103_153 () U)
(declare-fun g_s104_155 () U)
(declare-fun g_s105_157 () U)
(declare-fun g_s106_159 () U)
(declare-fun g_s107_161 () U)
(declare-fun g_s108_163 () U)
(declare-fun g_s109_165 () U)
(declare-fun g_s11_13 () U)
(declare-fun g_s110_167 () U)
(declare-fun g_s111_169 () U)
(declare-fun g_s112_171 () U)
(declare-fun g_s113_172 () U)
(declare-fun g_s113$1_173 () U)
(declare-fun g_s115$1_174 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s13_15 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_4 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_3 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_59 () U)
(declare-fun g_s57_61 () U)
(declare-fun g_s58_63 () U)
(declare-fun g_s59_65 () U)
(declare-fun g_s6_8 () U)
(declare-fun g_s60_67 () U)
(declare-fun g_s61_69 () U)
(declare-fun g_s62_71 () U)
(declare-fun g_s63_73 () U)
(declare-fun g_s64_75 () U)
(declare-fun g_s65_77 () U)
(declare-fun g_s66_79 () U)
(declare-fun g_s67_81 () U)
(declare-fun g_s68_83 () U)
(declare-fun g_s69_85 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s70_87 () U)
(declare-fun g_s71_89 () U)
(declare-fun g_s72_91 () U)
(declare-fun g_s73_93 () U)
(declare-fun g_s74_95 () U)
(declare-fun g_s75_97 () U)
(declare-fun g_s76_99 () U)
(declare-fun g_s77_101 () U)
(declare-fun g_s78_103 () U)
(declare-fun g_s79_105 () U)
(declare-fun g_s8_10 () U)
(declare-fun g_s80_107 () U)
(declare-fun g_s81_109 () U)
(declare-fun g_s82_111 () U)
(declare-fun g_s83_113 () U)
(declare-fun g_s84_115 () U)
(declare-fun g_s85_117 () U)
(declare-fun g_s86_119 () U)
(declare-fun g_s87_121 () U)
(declare-fun g_s88_123 () U)
(declare-fun g_s89_125 () U)
(declare-fun g_s9_11 () U)
(declare-fun g_s90_127 () U)
(declare-fun g_s91_129 () U)
(declare-fun g_s92_131 () U)
(declare-fun g_s93_133 () U)
(declare-fun g_s94_135 () U)
(declare-fun g_s95_137 () U)
(declare-fun g_s96_139 () U)
(declare-fun g_s97_141 () U)
(declare-fun g_s98_143 () U)
(declare-fun g_s99_145 () U)
(declare-fun e51 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (= g_s2_4 (interval (iuminus g_s3_3) g_s3_3)) (= g_s4_5 (interval e0 g_s3_3)) (= g_s5_7 (interval e6 g_s3_3)) (subset g_s5_7 g_s4_5) (subset g_s4_5 g_s2_4) (subset g_s4_5 NAT) (subset g_s5_7 NAT1) (subset g_s2_4 INT) (mem g_s6_8 g_s2_4) (mem g_s6_8 g_s4_5) (not (mem g_s6_8 g_s5_7)) (mem g_s7_9 g_s2_4) (not (mem g_s7_9 g_s4_5)) (= g_s8_10 (interval (iuminus g_s3_3) g_s3_3)) (subset g_s8_10 INT) (subset g_s9_11 g_s0_1) (mem g_s10_12 g_s0_1) (mem g_s10_12 g_s9_11) (mem g_s11_13 g_s0_1) (not (mem g_s11_13 g_s9_11)) (mem g_s12_14 (|+->| NAT g_s0_1)) (mem g_s12_14 (perm g_s9_11)) (= (card g_s9_11) g_s13_15) (subset g_s14_16 g_s1_2) (mem g_s15_17 g_s1_2) (mem g_s15_17 g_s14_16) (mem g_s16_18 g_s1_2) (not (mem g_s16_18 g_s14_16)) (mem g_s17_19 (|+->| NAT g_s1_2)) (mem g_s17_19 (perm g_s14_16)) (= (card g_s14_16) g_s18_20) (mem g_s19_21 g_s8_10) (mem g_s20_22 g_s8_10) (mem g_s21_23 g_s8_10) (mem g_s22_24 g_s8_10) (mem g_s23_25 g_s8_10) (mem g_s24_26 g_s8_10) (|>=i| g_s19_21 e0) (|>=i| g_s20_22 e0) (|>=i| g_s21_23 e0) (|>=i| g_s22_24 e0) (|>=i| g_s23_25 e6) (|>=i| g_s24_26 e6) (mem g_s25_27 (|+->| (set_prod g_s8_10 g_s8_10) g_s8_10)) (subset g_s26_28 g_s8_10) (mem g_s27_29 (|-->| (set_prod g_s4_5 g_s4_5) g_s8_10)) (mem g_s28_30 (|+->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s29_31 (|-->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s30_32 (|-->| (set_prod g_s4_5 g_s8_10) (POW g_s4_5))) (mem g_s31_33 (|-->| (set_prod g_s4_5 g_s4_5) (POW g_s4_5))) (mem g_s32_34 (|-->| (set_prod g_s4_5 g_s4_5) (POW g_s4_5))) (mem g_s33_35 (|-->| (set_prod g_s4_5 g_s4_5) (POW g_s4_5))) (mem g_s34_36 (|-->| (set_prod g_s4_5 g_s4_5) (POW g_s4_5))) (mem g_s35_37 (|<->| g_s4_5 g_s4_5)) (mem g_s36_38 (|<->| g_s4_5 g_s4_5)) (mem g_s37_39 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s38_40 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s39_41 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s40_42 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s41_43 (|<->| g_s4_5 g_s4_5)) (mem g_s42_44 (|<->| g_s4_5 g_s4_5)) (mem g_s43_45 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s44_46 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s45_47 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s46_48 (|<->| (set_prod g_s4_5 g_s8_10) g_s4_5)) (mem g_s47_49 (|-->| (set_prod g_s4_5 g_s4_5) g_s4_5)) (mem g_s48_50 (|-->| (set_prod g_s4_5 g_s4_5) g_s4_5)) (= (dom g_s28_30) (set_prod g_s4_5 (interval e0 g_s3_3))) (= (dom g_s25_27) e51)))
(define-fun |def_seext| () Bool (and (= g_s51_52 TRUE) (= g_s52_53 FALSE) (= g_s53_54 e0) (= g_s54_55 e6) (= g_s55_57 e56) (= g_s56_59 e58) (= g_s57_61 e60) (= g_s58_63 e62) (= g_s59_65 e64) (= g_s60_67 e66) (= g_s61_69 e68) (= g_s62_71 e70) (= g_s63_73 e72) (= g_s64_75 e74) (= g_s65_77 e76) (= g_s66_79 e78) (= g_s67_81 e80) (= g_s68_83 e82) (= g_s69_85 e84) (= g_s70_87 e86) (= g_s71_89 e88) (= g_s72_91 e90) (= g_s73_93 e92) (= g_s74_95 e94) (= g_s75_97 e96) (= g_s76_99 e98) (= g_s77_101 e100) (= g_s78_103 e102) (= g_s79_105 e104) (= g_s80_107 e106) (= g_s81_109 e108) (= g_s82_111 e110) (= g_s83_113 e112) (= g_s84_115 e114) (= g_s85_117 e116) (= g_s86_119 e118) (= g_s87_121 e120) (= g_s88_123 e122) (= g_s89_125 e124) (= g_s90_127 e126) (= g_s91_129 e128) (= g_s92_131 e130) (= g_s93_133 e132) (= g_s94_135 e134) (= g_s95_137 e136) (= g_s96_139 e138) (= g_s97_141 e140) (= g_s98_143 e142) (= g_s99_145 e144) (= g_s100_147 e146) (= g_s101_149 e148) (= g_s102_151 e150) (= g_s103_153 e152) (= g_s104_155 e154) (= g_s105_157 e156) (= g_s106_159 e158) (= g_s107_161 e160) (= g_s108_163 e162) (= g_s109_165 e164) (= g_s110_167 e166) (= g_s111_169 e168) (= g_s112_171 e170)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s113_172 g_s2_4) (mem g_s113_172 g_s4_5) (mem g_s113_172 g_s2_4) (mem g_s113_172 g_s4_5)))
(define-fun |def_inv| () Bool (and (= g_s113_172 g_s113$1_173) (mem g_s113$1_173 g_s2_4)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s113$1_173 g_s2_4))
(define-fun lh_2 () Bool (mem g_s113$1_173 g_s4_5))
(define-fun lh_3 () Bool (mem g_s23_25 g_s8_10))
(define-fun lh_4 () Bool (|>=i| g_s23_25 e0))
(define-fun lh_5 () Bool (mem g_s115$1_174 g_s2_4))
(define-fun lh_6 () Bool (= g_s115$1_174 (apply g_s28_30 (mapplet g_s113$1_173 g_s23_25))))
; PO 1 in group 0
(push 1)
(assert (not (mem g_s113$1_173 g_s4_5)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (|>=i| g_s23_25 e0)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (apply g_s28_30 (mapplet g_s113$1_173 g_s23_25)) g_s115$1_174))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)