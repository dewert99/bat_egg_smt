(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_137 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_139 () U)
(declare-fun g_s139_140 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_141 () U)
(declare-fun g_s141_142 () U)
(declare-fun g_s142_143 () U)
(declare-fun g_s143_144 () U)
(declare-fun g_s144_145 () U)
(declare-fun g_s145_146 () U)
(declare-fun g_s146_147 () U)
(declare-fun g_s147_148 () U)
(declare-fun g_s148_149 () U)
(declare-fun g_s149_150 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_151 () U)
(declare-fun g_s151_152 () U)
(declare-fun g_s152_153 () U)
(declare-fun g_s153_154 () U)
(declare-fun g_s154_156 () U)
(declare-fun g_s155_155 () U)
(declare-fun g_s156_157 () U)
(declare-fun g_s157_158 () U)
(declare-fun g_s158_159 () U)
(declare-fun g_s159_160 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_161 () U)
(declare-fun g_s161_162 () U)
(declare-fun g_s162_163 () U)
(declare-fun g_s163_164 () U)
(declare-fun g_s164_165 () U)
(declare-fun g_s165_166 () U)
(declare-fun g_s166_167 () U)
(declare-fun g_s167_168 () U)
(declare-fun g_s168_169 () U)
(declare-fun g_s169_170 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_171 () U)
(declare-fun g_s171_172 () U)
(declare-fun g_s172_173 () U)
(declare-fun g_s173_174 () U)
(declare-fun g_s174_176 () U)
(declare-fun g_s175_175 () U)
(declare-fun g_s176_177 () U)
(declare-fun g_s177_178 () U)
(declare-fun g_s178_179 () U)
(declare-fun g_s179_180 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_181 () U)
(declare-fun g_s181_182 () U)
(declare-fun g_s182_183 () U)
(declare-fun g_s183_185 () U)
(declare-fun g_s184_184 () U)
(declare-fun g_s185_186 () U)
(declare-fun g_s186_187 () U)
(declare-fun g_s187_188 () U)
(declare-fun g_s188_189 () U)
(declare-fun g_s189_190 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_191 () U)
(declare-fun g_s191_192 () U)
(declare-fun g_s192_193 () U)
(declare-fun g_s193_194 () U)
(declare-fun g_s194_195 () U)
(declare-fun g_s195_196 () U)
(declare-fun g_s196_197 () U)
(declare-fun g_s197_198 () U)
(declare-fun g_s198_199 () U)
(declare-fun g_s199_200 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_201 () U)
(declare-fun g_s201_202 () U)
(declare-fun g_s202_203 () U)
(declare-fun g_s203_204 () U)
(declare-fun g_s204_205 () U)
(declare-fun g_s205_206 () U)
(declare-fun g_s206_207 () U)
(declare-fun g_s207_208 () U)
(declare-fun g_s208_209 () U)
(declare-fun g_s209_210 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_211 () U)
(declare-fun g_s211_212 () U)
(declare-fun g_s212_213 () U)
(declare-fun g_s213_214 () U)
(declare-fun g_s214_215 () U)
(declare-fun g_s215_216 () U)
(declare-fun g_s216_217 () U)
(declare-fun g_s217_218 () U)
(declare-fun g_s218_219 () U)
(declare-fun g_s219_220 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_221 () U)
(declare-fun g_s221_222 () U)
(declare-fun g_s222_223 () U)
(declare-fun g_s223_224 () U)
(declare-fun g_s224_225 () U)
(declare-fun g_s225_226 () U)
(declare-fun g_s226_227 () U)
(declare-fun g_s227_228 () U)
(declare-fun g_s228_229 () U)
(declare-fun g_s229_230 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_231 () U)
(declare-fun g_s231_232 () U)
(declare-fun g_s232_233 () U)
(declare-fun g_s233_234 () U)
(declare-fun g_s234_235 () U)
(declare-fun g_s235_236 () U)
(declare-fun g_s236_237 () U)
(declare-fun g_s237_238 () U)
(declare-fun g_s238_239 () U)
(declare-fun g_s239_240 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_241 () U)
(declare-fun g_s241_242 () U)
(declare-fun g_s242_243 () U)
(declare-fun g_s243_244 () U)
(declare-fun g_s244_245 () U)
(declare-fun g_s245_246 () U)
(declare-fun g_s246_247 () U)
(declare-fun g_s247_248 () U)
(declare-fun g_s248_249 () U)
(declare-fun g_s249_250 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_251 () U)
(declare-fun g_s251_252 () U)
(declare-fun g_s252_253 () U)
(declare-fun g_s253_254 () U)
(declare-fun g_s254_255 () U)
(declare-fun g_s255_256 () U)
(declare-fun g_s256_257 () U)
(declare-fun g_s257_258 () U)
(declare-fun g_s258_259 () U)
(declare-fun g_s259_260 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_261 () U)
(declare-fun g_s261_262 () U)
(declare-fun g_s262_263 () U)
(declare-fun g_s263_264 () U)
(declare-fun g_s264_265 () U)
(declare-fun g_s265_266 () U)
(declare-fun g_s266_267 () U)
(declare-fun g_s267_268 () U)
(declare-fun g_s268_269 () U)
(declare-fun g_s269_270 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_271 () U)
(declare-fun g_s272_272 () U)
(declare-fun g_s273_273 () U)
(declare-fun g_s274$1_274 () U)
(declare-fun g_s279$1_275 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s281$1_276 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))) (= g_s8_9 (SET (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 g_s9_10))))) (= g_s13_14 (SET (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 g_s14_15)))))))))) (= g_s23_24 (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))) (= g_s27_28 (SET (mapplet g_s29_30 g_s28_29))) (= g_s30_31 (SET (mapplet g_s33_34 (mapplet g_s32_33 g_s31_32)))) (= g_s34_35 (SET (mapplet g_s36_37 g_s35_36))) (= g_s37_38 (SET (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 g_s38_39))))) (= g_s42_43 (SET (mapplet g_s44_45 g_s43_44))) (= g_s45_46 (SET (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47)))) (= g_s49_50 (SET (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51)))) (= g_s53_54 (SET (mapplet g_s55_56 g_s54_55))) (= g_s56_57 (SET (mapplet g_s59_60 (mapplet g_s58_59 g_s57_58)))) (= g_s60_61 (SET (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 g_s61_62)))))) (= g_s66_67 (SET (mapplet g_s69_70 (mapplet g_s68_69 g_s67_68)))) (= g_s70_71 (SET (mapplet g_s73_74 (mapplet g_s72_73 g_s71_72)))) (= g_s74_75 (SET (mapplet g_s77_78 (mapplet g_s76_77 g_s75_76)))) (= g_s78_79 (SET (mapplet g_s81_82 (mapplet g_s80_81 g_s79_80)))) (= g_s82_83 (SET (mapplet g_s85_86 (mapplet g_s84_85 g_s83_84)))) (= g_s86_87 (SET (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 (mapplet g_s90_91 (mapplet g_s89_90 (mapplet g_s88_89 g_s87_88)))))))) (not (= g_s94_95 empty)) (not (= g_s95_96 empty)) (not (= g_s96_97 empty)) (not (= g_s97_98 empty)) (not (= g_s98_99 empty)) (not (= g_s99_100 empty)) (not (= g_s100_101 empty)) (not (= g_s101_102 empty)) (not (= g_s102_103 empty)) (not (= g_s103_104 empty)) (not (= g_s104_105 empty)) (not (= g_s105_106 empty)) (not (= g_s106_107 empty)) (not (= g_s107_108 empty)) (not (= g_s108_109 empty)) (not (= g_s109_110 empty)) (not (= g_s110_111 empty)) (not (= g_s111_112 empty)) (not (= g_s112_113 empty)) (not (= g_s113_114 empty)) (not (= g_s114_115 empty)) (not (= g_s115_116 empty)) (not (= g_s116_117 empty)) (not (= g_s117_118 empty)) (= g_s118_119 (SET (mapplet g_s120_121 g_s119_120))) (not (= g_s121_122 empty)) (not (= g_s122_123 empty)) (not (= g_s123_124 empty)) (not (= g_s124_125 empty)) (not (= g_s125_126 empty)) (not (= g_s126_127 empty)) (not (= g_s127_128 empty)) (not (= g_s128_129 empty)) (not (= g_s129_130 empty)) (not (= g_s130_131 empty)) (not (= g_s131_132 empty)) (not (= g_s132_133 empty)) (not (= g_s133_134 empty)) (subset g_s134_135 g_s94_95) (mem g_s135_136 g_s94_95) (not (mem g_s135_136 g_s134_135)) (mem g_s136_137 (|+->| NAT g_s94_95)) (mem g_s136_137 (perm g_s134_135)) (subset g_s137_138 g_s95_96) (mem g_s138_139 g_s95_96) (not (mem g_s138_139 g_s137_138)) (mem g_s139_140 (|+->| NAT g_s95_96)) (mem g_s139_140 (perm g_s137_138)) (subset g_s140_141 g_s96_97) (mem g_s141_142 g_s96_97) (not (mem g_s141_142 g_s140_141)) (mem g_s142_143 (|+->| NAT g_s96_97)) (mem g_s142_143 (perm g_s140_141)) (subset g_s143_144 g_s97_98) (mem g_s144_145 g_s97_98) (not (mem g_s144_145 g_s143_144)) (mem g_s145_146 (|+->| NAT g_s97_98)) (mem g_s145_146 (perm g_s143_144)) (subset g_s146_147 g_s98_99) (mem g_s147_148 g_s98_99) (not (mem g_s147_148 g_s146_147)) (subset g_s148_149 g_s99_100) (mem g_s149_150 g_s99_100) (not (mem g_s149_150 g_s148_149)) (subset g_s150_151 g_s100_101) (mem g_s151_152 g_s100_101) (not (mem g_s151_152 g_s150_151)) (subset g_s152_153 g_s101_102) (mem g_s153_154 g_s101_102) (not (mem g_s153_154 g_s152_153)) (subset g_s154_156 g_s155_155) (not (mem g_s156_157 g_s154_156)) (= g_s154_156 (SET (mapplet g_s159_160 (mapplet g_s158_159 g_s157_158)))) (mem g_s160_161 (|+->| g_s152_153 g_s150_151)) (mem g_s161_162 (|+->| g_s150_151 g_s152_153)) (subset g_s162_163 g_s102_103) (mem g_s163_164 g_s102_103) (not (mem g_s163_164 g_s162_163)) (mem g_s164_165 (|+->| NAT g_s102_103)) (mem g_s164_165 (perm g_s162_163)) (subset g_s165_166 g_s103_104) (mem g_s166_167 g_s103_104) (not (mem g_s166_167 g_s165_166)) (mem g_s167_168 (|+->| NAT g_s103_104)) (mem g_s167_168 (perm g_s165_166)) (subset g_s168_169 g_s104_105) (mem g_s169_170 g_s104_105) (not (mem g_s169_170 g_s168_169)) (mem g_s170_171 (|+->| NAT g_s104_105)) (mem g_s170_171 (perm g_s168_169)) (subset g_s171_172 g_s105_106) (mem g_s172_173 g_s105_106) (not (mem g_s172_173 g_s171_172)) (mem g_s173_174 (|+->| NAT g_s105_106)) (mem g_s173_174 (perm g_s171_172)) (mem g_s174_176 (|>->| g_s162_163 g_s175_175)) (subset g_s176_177 g_s23_24) (not (mem g_s24_25 g_s176_177)) (= g_s176_177 (SET (mapplet g_s26_27 g_s25_26))) (subset g_s177_178 g_s106_107) (mem g_s178_179 g_s106_107) (not (mem g_s178_179 g_s177_178)) (mem g_s179_180 (|+->| NAT g_s106_107)) (mem g_s179_180 (perm g_s177_178)) (subset g_s180_181 g_s107_108) (mem g_s181_182 g_s107_108) (not (mem g_s181_182 g_s180_181)) (mem g_s182_183 (|+->| NAT g_s107_108)) (mem g_s182_183 (perm g_s180_181)) (mem g_s183_185 (|>->| g_s180_181 g_s184_184)) (subset g_s185_186 g_s108_109) (mem g_s186_187 g_s108_109) (not (mem g_s186_187 g_s185_186)) (mem g_s187_188 (|+->| NAT g_s108_109)) (mem g_s187_188 (perm g_s185_186)) (subset g_s188_189 g_s108_109) (mem g_s189_190 g_s108_109) (not (mem g_s189_190 g_s188_189)) (mem g_s190_191 (|+->| NAT g_s108_109)) (mem g_s190_191 (perm g_s188_189)) (subset g_s191_192 g_s108_109) (mem g_s192_193 g_s108_109) (not (mem g_s192_193 g_s191_192)) (mem g_s193_194 (|+->| NAT g_s108_109)) (mem g_s193_194 (perm g_s191_192)) (subset g_s188_189 g_s191_192) (subset g_s185_186 g_s188_189) (subset g_s194_195 g_s109_110) (mem g_s195_196 g_s109_110) (not (mem g_s195_196 g_s194_195)) (mem g_s196_197 (|+->| NAT g_s109_110)) (mem g_s196_197 (perm g_s194_195)) (subset g_s197_198 g_s109_110) (mem g_s198_199 g_s109_110) (not (mem g_s198_199 g_s197_198)) (mem g_s199_200 (|+->| NAT g_s109_110)) (mem g_s199_200 (perm g_s197_198)) (subset g_s194_195 g_s197_198) (subset g_s200_201 g_s110_111) (mem g_s201_202 g_s110_111) (not (mem g_s201_202 g_s200_201)) (mem g_s202_203 (|+->| NAT g_s110_111)) (mem g_s202_203 (perm g_s200_201)) (subset g_s203_204 g_s111_112) (mem g_s204_205 g_s111_112) (not (mem g_s204_205 g_s203_204)) (mem g_s205_206 (|+->| NAT g_s111_112)) (mem g_s205_206 (perm g_s203_204)) (subset g_s206_207 g_s112_113) (mem g_s207_208 g_s112_113) (not (mem g_s207_208 g_s206_207)) (mem g_s208_209 (|+->| NAT g_s112_113)) (mem g_s208_209 (perm g_s206_207)) (subset g_s209_210 g_s113_114) (mem g_s210_211 g_s113_114) (not (mem g_s210_211 g_s209_210)) (mem g_s211_212 (|+->| NAT g_s113_114)) (mem g_s211_212 (perm g_s209_210)) (= (card g_s209_210) g_s212_213) (subset g_s213_214 g_s114_115) (mem g_s214_215 g_s114_115) (not (mem g_s214_215 g_s213_214)) (mem g_s215_216 (|+->| NAT g_s114_115)) (mem g_s215_216 (perm g_s213_214)) (subset g_s216_217 g_s115_116) (mem g_s217_218 g_s115_116) (not (mem g_s217_218 g_s216_217)) (mem g_s218_219 (|+->| NAT g_s115_116)) (mem g_s218_219 (perm g_s216_217)) (= (card g_s216_217) g_s219_220) (subset g_s220_221 g_s116_117) (mem g_s221_222 g_s116_117) (not (mem g_s221_222 g_s220_221)) (mem g_s222_223 (|+->| NAT g_s116_117)) (mem g_s222_223 (perm g_s220_221)) (subset g_s223_224 g_s117_118) (mem g_s224_225 g_s117_118) (not (mem g_s224_225 g_s223_224)) (mem g_s225_226 (|+->| NAT g_s117_118)) (mem g_s225_226 (perm g_s223_224)) (subset g_s226_227 g_s121_122) (mem g_s227_228 g_s121_122) (not (mem g_s227_228 g_s226_227)) (mem g_s228_229 (|+->| NAT g_s121_122)) (mem g_s228_229 (perm g_s226_227)) (subset g_s229_230 g_s122_123) (mem g_s230_231 g_s122_123) (not (mem g_s230_231 g_s229_230)) (mem g_s231_232 (|+->| NAT g_s122_123)) (mem g_s231_232 (perm g_s229_230)) (subset g_s232_233 g_s123_124) (mem g_s233_234 g_s123_124) (not (mem g_s233_234 g_s232_233)) (mem g_s234_235 (|+->| NAT g_s123_124)) (mem g_s234_235 (perm g_s232_233)) (subset g_s235_236 g_s124_125) (mem g_s236_237 g_s124_125) (not (mem g_s236_237 g_s235_236)) (mem g_s237_238 (|+->| NAT g_s124_125)) (mem g_s237_238 (perm g_s235_236)) (subset g_s238_239 g_s125_126) (mem g_s239_240 g_s125_126) (not (mem g_s239_240 g_s238_239)) (mem g_s240_241 (|+->| NAT g_s125_126)) (mem g_s240_241 (perm g_s238_239)) (subset g_s241_242 g_s126_127) (mem g_s242_243 g_s126_127) (not (mem g_s242_243 g_s241_242)) (mem g_s243_244 (|+->| NAT g_s126_127)) (mem g_s243_244 (perm g_s241_242)) (subset g_s244_245 g_s127_128) (mem g_s245_246 g_s127_128) (not (mem g_s245_246 g_s244_245)) (mem g_s246_247 (|+->| NAT g_s127_128)) (mem g_s246_247 (perm g_s244_245)) (subset g_s247_248 g_s128_129) (mem g_s248_249 g_s128_129) (not (mem g_s248_249 g_s247_248)) (mem g_s249_250 (|+->| NAT g_s128_129)) (mem g_s249_250 (perm g_s247_248)) (subset g_s250_251 g_s129_130) (mem g_s251_252 g_s129_130) (not (mem g_s251_252 g_s250_251)) (mem g_s252_253 (|+->| NAT g_s129_130)) (mem g_s252_253 (perm g_s250_251)) (subset g_s253_254 g_s130_131) (mem g_s254_255 g_s130_131) (not (mem g_s254_255 g_s253_254)) (mem g_s255_256 (|+->| NAT g_s130_131)) (mem g_s255_256 (perm g_s253_254)) (subset g_s256_257 g_s131_132) (mem g_s257_258 g_s131_132) (not (mem g_s257_258 g_s256_257)) (subset g_s258_259 g_s132_133) (mem g_s259_260 g_s132_133) (not (mem g_s259_260 g_s258_259)) (mem g_s260_261 (|+->| NAT g_s132_133)) (mem g_s260_261 (perm g_s258_259)) (subset g_s261_262 g_s133_134) (mem g_s262_263 g_s133_134) (not (mem g_s262_263 g_s261_262)) (mem g_s263_264 (|+->| NAT g_s133_134)) (mem g_s263_264 (perm g_s261_262))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (subset g_s264_265 g_s185_186) (mem g_s265_266 (|<->| g_s162_163 g_s109_110)) (mem g_s266_267 (|-->| g_s247_248 (|+->| g_s140_141 g_s60_61))) (mem g_s267_268 (|-->| g_s247_248 (POW g_s140_141))) (mem g_s268_269 (|-->| g_s247_248 (POW g_s140_141))) (mem g_s269_270 (|-->| g_s247_248 (|+->| g_s140_141 g_s176_177))) (mem g_s270_271 (|-->| g_s247_248 (|+->| g_s140_141 g_s150_151)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_272 g_s128_129))
(assert (mem g_s272_272 g_s247_248))
(assert (mem g_s273_273 g_s96_97))
(assert (mem g_s273_273 g_s140_141))
(define-fun lh_1 () Bool (mem g_s273_273 (dom (apply g_s266_267 g_s272_272))))
(define-fun lh_2 () Bool (mem g_s274$1_274 g_s60_61))
; PO 1 in group 0
(push 1)
(assert (not (mem g_s266_267 (|+->| (dom g_s266_267) (ran g_s266_267)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem g_s272_272 (dom g_s266_267))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s266_267 (|+->| (dom g_s266_267) (ran g_s266_267))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s272_272 (dom g_s266_267)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s266_267 g_s272_272) (|+->| (dom (apply g_s266_267 g_s272_272)) (ran (apply g_s266_267 g_s272_272)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_272 g_s128_129))
(assert (mem g_s272_272 g_s247_248))
(assert (mem g_s273_273 g_s96_97))
(assert (mem g_s273_273 g_s140_141))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s267_268 (|+->| (dom g_s267_268) (ran g_s267_268)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem g_s272_272 (dom g_s267_268))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_272 g_s128_129))
(assert (mem g_s272_272 g_s247_248))
(assert (mem g_s273_273 g_s96_97))
(assert (mem g_s273_273 g_s140_141))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s268_269 (|+->| (dom g_s268_269) (ran g_s268_269)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem g_s272_272 (dom g_s268_269))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_272 g_s128_129))
(assert (mem g_s272_272 g_s247_248))
(assert (mem g_s273_273 g_s96_97))
(assert (mem g_s273_273 g_s140_141))
(define-fun lh_1 () Bool (mem g_s273_273 (dom (apply g_s269_270 g_s272_272))))
(define-fun lh_2 () Bool (mem g_s279$1_275 g_s23_24))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s269_270 (|+->| (dom g_s269_270) (ran g_s269_270)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem g_s272_272 (dom g_s269_270))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s269_270 (|+->| (dom g_s269_270) (ran g_s269_270))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s272_272 (dom g_s269_270)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s269_270 g_s272_272) (|+->| (dom (apply g_s269_270 g_s272_272)) (ran (apply g_s269_270 g_s272_272)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s272_272 g_s128_129))
(assert (mem g_s272_272 g_s247_248))
(assert (mem g_s273_273 g_s96_97))
(assert (mem g_s273_273 g_s140_141))
(define-fun lh_1 () Bool (mem g_s273_273 (dom (apply g_s270_271 g_s272_272))))
(define-fun lh_2 () Bool (mem g_s281$1_276 g_s100_101))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s272_272 (dom g_s270_271))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s270_271 (|+->| (dom g_s270_271) (ran g_s270_271)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s272_272 (dom g_s270_271)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s270_271 (|+->| (dom g_s270_271) (ran g_s270_271))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s270_271 g_s272_272) (|+->| (dom (apply g_s270_271 g_s272_272)) (ran (apply g_s270_271 g_s272_272)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)