(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e6 () U)
(declare-fun e25 () U)
(declare-fun e27 () U)
(declare-fun e29 () U)
(declare-fun e31 () U)
(declare-fun e33 () U)
(declare-fun e35 () U)
(declare-fun e37 () U)
(declare-fun e39 () U)
(declare-fun e41 () U)
(declare-fun e43 () U)
(declare-fun e45 () U)
(declare-fun e47 () U)
(declare-fun e49 () U)
(declare-fun e51 () U)
(declare-fun e53 () U)
(declare-fun e55 () U)
(declare-fun e57 () U)
(declare-fun e59 () U)
(declare-fun e61 () U)
(declare-fun e63 () U)
(declare-fun e65 () U)
(declare-fun e67 () U)
(declare-fun e69 () U)
(declare-fun e71 () U)
(declare-fun e73 () U)
(declare-fun e75 () U)
(declare-fun e77 () U)
(declare-fun e79 () U)
(declare-fun e81 () U)
(declare-fun e83 () U)
(declare-fun e85 () U)
(declare-fun e87 () U)
(declare-fun e89 () U)
(declare-fun e91 () U)
(declare-fun e93 () U)
(declare-fun e95 () U)
(declare-fun e97 () U)
(declare-fun e99 () U)
(declare-fun e101 () U)
(declare-fun e103 () U)
(declare-fun e105 () U)
(declare-fun e107 () U)
(declare-fun e109 () U)
(declare-fun e111 () U)
(declare-fun e113 () U)
(declare-fun e115 () U)
(declare-fun e117 () U)
(declare-fun e119 () U)
(declare-fun e121 () U)
(declare-fun e123 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e129 () U)
(declare-fun e131 () U)
(declare-fun e133 () U)
(declare-fun e135 () U)
(declare-fun e137 () U)
(declare-fun e139 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s100_151 () U)
(declare-fun g_s100$1_152 () U)
(declare-fun g_s102_153 () U)
(declare-fun g_s102$1_154 () U)
(declare-fun g_s105_155 () U)
(declare-fun g_s105$1_156 () U)
(declare-fun g_s106_158 () U)
(declare-fun g_s11_13 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s13_15 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_4 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_26 () U)
(declare-fun g_s24_28 () U)
(declare-fun g_s25_30 () U)
(declare-fun g_s26_32 () U)
(declare-fun g_s27_34 () U)
(declare-fun g_s28_36 () U)
(declare-fun g_s29_38 () U)
(declare-fun g_s3_3 () U)
(declare-fun g_s30_40 () U)
(declare-fun g_s31_42 () U)
(declare-fun g_s32_44 () U)
(declare-fun g_s33_46 () U)
(declare-fun g_s34_48 () U)
(declare-fun g_s35_50 () U)
(declare-fun g_s36_52 () U)
(declare-fun g_s37_54 () U)
(declare-fun g_s38_56 () U)
(declare-fun g_s39_58 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_60 () U)
(declare-fun g_s41_62 () U)
(declare-fun g_s42_64 () U)
(declare-fun g_s43_66 () U)
(declare-fun g_s44_68 () U)
(declare-fun g_s45_70 () U)
(declare-fun g_s46_72 () U)
(declare-fun g_s47_74 () U)
(declare-fun g_s48_76 () U)
(declare-fun g_s49_78 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s50_80 () U)
(declare-fun g_s51_82 () U)
(declare-fun g_s52_84 () U)
(declare-fun g_s53_86 () U)
(declare-fun g_s54_88 () U)
(declare-fun g_s55_90 () U)
(declare-fun g_s56_92 () U)
(declare-fun g_s57_94 () U)
(declare-fun g_s58_96 () U)
(declare-fun g_s59_98 () U)
(declare-fun g_s6_8 () U)
(declare-fun g_s60_100 () U)
(declare-fun g_s61_102 () U)
(declare-fun g_s62_104 () U)
(declare-fun g_s63_106 () U)
(declare-fun g_s64_108 () U)
(declare-fun g_s65_110 () U)
(declare-fun g_s66_112 () U)
(declare-fun g_s67_114 () U)
(declare-fun g_s68_116 () U)
(declare-fun g_s69_118 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s70_120 () U)
(declare-fun g_s71_122 () U)
(declare-fun g_s72_124 () U)
(declare-fun g_s73_126 () U)
(declare-fun g_s74_128 () U)
(declare-fun g_s75_130 () U)
(declare-fun g_s76_132 () U)
(declare-fun g_s77_134 () U)
(declare-fun g_s78_136 () U)
(declare-fun g_s79_138 () U)
(declare-fun g_s8_10 () U)
(declare-fun g_s80_140 () U)
(declare-fun g_s81_141 () U)
(declare-fun g_s82_142 () U)
(declare-fun g_s83_143 () U)
(declare-fun g_s84$1_144 () U)
(declare-fun g_s85$1_145 () U)
(declare-fun g_s86$1_146 () U)
(declare-fun g_s9_11 () U)
(declare-fun g_s90_147 () U)
(declare-fun g_s91_148 () U)
(declare-fun g_s91$1_159 () U)
(declare-fun g_s92_149 () U)
(declare-fun g_s92$1_157 () U)
(declare-fun g_s93_150 () U)
(declare-fun g_s93$1_160 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (= g_s2_4 (interval (iuminus g_s3_3) g_s3_3)) (= g_s4_5 (interval e0 g_s3_3)) (= g_s5_7 (interval e6 g_s3_3)) (subset g_s5_7 g_s4_5) (subset g_s4_5 g_s2_4) (subset g_s4_5 NAT) (subset g_s5_7 NAT1) (subset g_s2_4 INT) (mem g_s6_8 g_s2_4) (mem g_s6_8 g_s4_5) (not (mem g_s6_8 g_s5_7)) (mem g_s7_9 g_s2_4) (not (mem g_s7_9 g_s4_5)) (= g_s8_10 (interval (iuminus g_s3_3) g_s3_3)) (subset g_s8_10 INT) (subset g_s9_11 g_s0_1) (mem g_s10_12 g_s0_1) (mem g_s10_12 g_s9_11) (mem g_s11_13 g_s0_1) (not (mem g_s11_13 g_s9_11)) (mem g_s12_14 (|+->| NAT g_s0_1)) (mem g_s12_14 (perm g_s9_11)) (= (card g_s9_11) g_s13_15) (subset g_s14_16 g_s1_2) (mem g_s15_17 g_s1_2) (mem g_s15_17 g_s14_16) (mem g_s16_18 g_s1_2) (not (mem g_s16_18 g_s14_16)) (mem g_s17_19 (|+->| NAT g_s1_2)) (mem g_s17_19 (perm g_s14_16)) (= (card g_s14_16) g_s18_20)))
(define-fun |def_seext| () Bool (and (= g_s19_21 TRUE) (= g_s20_22 FALSE) (= g_s21_23 e0) (= g_s22_24 e6) (= g_s23_26 e25) (= g_s24_28 e27) (= g_s25_30 e29) (= g_s26_32 e31) (= g_s27_34 e33) (= g_s28_36 e35) (= g_s29_38 e37) (= g_s30_40 e39) (= g_s31_42 e41) (= g_s32_44 e43) (= g_s33_46 e45) (= g_s34_48 e47) (= g_s35_50 e49) (= g_s36_52 e51) (= g_s37_54 e53) (= g_s38_56 e55) (= g_s39_58 e57) (= g_s40_60 e59) (= g_s41_62 e61) (= g_s42_64 e63) (= g_s43_66 e65) (= g_s44_68 e67) (= g_s45_70 e69) (= g_s46_72 e71) (= g_s47_74 e73) (= g_s48_76 e75) (= g_s49_78 e77) (= g_s50_80 e79) (= g_s51_82 e81) (= g_s52_84 e83) (= g_s53_86 e85) (= g_s54_88 e87) (= g_s55_90 e89) (= g_s56_92 e91) (= g_s57_94 e93) (= g_s58_96 e95) (= g_s59_98 e97) (= g_s60_100 e99) (= g_s61_102 e101) (= g_s62_104 e103) (= g_s63_106 e105) (= g_s64_108 e107) (= g_s65_110 e109) (= g_s66_112 e111) (= g_s67_114 e113) (= g_s68_116 e115) (= g_s69_118 e117) (= g_s70_120 e119) (= g_s71_122 e121) (= g_s72_124 e123) (= g_s73_126 e125) (= g_s74_128 e127) (= g_s75_130 e129) (= g_s76_132 e131) (= g_s77_134 e133) (= g_s78_136 e135) (= g_s79_138 e137) (= g_s80_140 e139)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s81_141 (|+->| g_s14_16 g_s4_5)) (mem g_s82_142 (|+->| g_s14_16 g_s4_5)) (subset g_s83_143 g_s14_16)))
(define-fun |def_inv| () Bool (and (mem g_s84$1_144 (|-->| g_s1_2 g_s2_4)) (= g_s81_141 (range_restriction (domain_restriction g_s14_16 g_s84$1_144) g_s4_5)) (mem g_s85$1_145 (|-->| g_s1_2 g_s2_4)) (= g_s82_142 (range_restriction (domain_restriction g_s14_16 g_s85$1_145) g_s4_5)) (mem g_s86$1_146 (|-->| g_s1_2 BOOL)) (= g_s83_143 (binary_inter g_s14_16 (image (inverse g_s86$1_146) (SET TRUE))))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem (set_prod g_s1_2 (SET FALSE)) (|-->| g_s1_2 BOOL))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (set_prod g_s1_2 (SET g_s7_9)) (|-->| g_s1_2 g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (= empty (binary_inter g_s14_16 (image (inverse (set_prod g_s1_2 (SET FALSE))) (SET TRUE))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (= empty (range_restriction (domain_restriction g_s14_16 (set_prod g_s1_2 (SET g_s7_9))) g_s4_5))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (mem g_s91_148 g_s5_7))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s84$1_144 (SET (mapplet g_s90_147 g_s91_148))) (|-->| g_s1_2 g_s2_4)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (|<+| g_s81_141 (SET (mapplet g_s90_147 g_s91_148))) (range_restriction (domain_restriction g_s14_16 (|<+| g_s84$1_144 (SET (mapplet g_s90_147 g_s91_148)))) g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (not (mem g_s91_148 g_s5_7)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s84$1_144 (SET (mapplet g_s90_147 g_s7_9))) (|-->| g_s1_2 g_s2_4)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (domain_subtraction (SET g_s90_147) g_s81_141) (range_restriction (domain_restriction g_s14_16 (|<+| g_s84$1_144 (SET (mapplet g_s90_147 g_s7_9)))) g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (mem g_s92_149 g_s5_7))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s85$1_145 (SET (mapplet g_s90_147 g_s92_149))) (|-->| g_s1_2 g_s2_4)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (|<+| g_s82_142 (SET (mapplet g_s90_147 g_s92_149))) (range_restriction (domain_restriction g_s14_16 (|<+| g_s85$1_145 (SET (mapplet g_s90_147 g_s92_149)))) g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (not (mem g_s92_149 g_s5_7)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s85$1_145 (SET (mapplet g_s90_147 g_s7_9))) (|-->| g_s1_2 g_s2_4)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (domain_subtraction (SET g_s90_147) g_s82_142) (range_restriction (domain_restriction g_s14_16 (|<+| g_s85$1_145 (SET (mapplet g_s90_147 g_s7_9)))) g_s4_5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (= g_s93_150 TRUE))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s86$1_146 (SET (mapplet g_s90_147 g_s19_21))) (|-->| g_s1_2 BOOL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_union g_s83_143 (SET g_s90_147)) (binary_inter g_s14_16 (image (inverse (|<+| g_s86$1_146 (SET (mapplet g_s90_147 g_s19_21)))) (SET TRUE)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
(define-fun lh_6 () Bool (not (= g_s93_150 TRUE)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s86$1_146 (SET (mapplet g_s90_147 g_s20_22))) (|-->| g_s1_2 BOOL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (set_diff g_s83_143 (SET g_s90_147)) (binary_inter g_s14_16 (image (inverse (|<+| g_s86$1_146 (SET (mapplet g_s90_147 g_s20_22)))) (SET TRUE)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s100$1_152 g_s100_151))
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s91_148 g_s2_4))
(define-fun lh_4 () Bool (mem g_s92_149 g_s2_4))
(define-fun lh_5 () Bool (mem g_s93_150 BOOL))
; PO 1 in group 7
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s93_150 (bool (= g_s93_150 TRUE))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s102$1_154 g_s102_153))
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem (apply g_s84$1_144 g_s90_147) g_s2_4))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s84$1_144 g_s90_147) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s84$1_144 g_s90_147) g_s4_5)) (bool (mem g_s90_147 (dom g_s81_141)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s105$1_156 g_s105_155))
(assert (= g_s92$1_157 g_s92_149))
(define-fun lh_1 () Bool (mem g_s106_158 g_s1_2))
(define-fun lh_2 () Bool (mem g_s106_158 g_s14_16))
(define-fun lh_3 () Bool (mem (apply g_s85$1_145 g_s106_158) g_s2_4))
(define-fun lh_4 () Bool (mem g_s106_158 (dom g_s82_142)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s85$1_145 g_s106_158) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s82_142 g_s106_158) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s85$1_145 g_s106_158) g_s4_5)) (bool (mem g_s106_158 (dom g_s82_142)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s85$1_145 g_s106_158) (apply g_s82_142 g_s106_158)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s92$1_157 g_s92_149))
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s90_147 (dom g_s82_142)))
(define-fun lh_4 () Bool (= (apply g_s82_142 g_s90_147) (apply g_s85$1_145 g_s90_147)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s82_142 g_s90_147) (apply g_s85$1_145 g_s90_147)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s82_142 g_s90_147) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s85$1_145 g_s90_147) (apply g_s82_142 g_s90_147)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s105$1_156 g_s105_155))
(define-fun lh_1 () Bool (mem g_s106_158 g_s1_2))
(define-fun lh_2 () Bool (mem g_s106_158 g_s14_16))
(define-fun lh_3 () Bool (mem (apply g_s85$1_145 g_s106_158) g_s2_4))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s85$1_145 g_s106_158) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s85$1_145 g_s106_158) g_s4_5)) (bool (mem g_s106_158 (dom g_s82_142)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s91$1_159 g_s91_148))
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (mem g_s90_147 (dom g_s81_141)))
(define-fun lh_4 () Bool (= (apply g_s81_141 g_s90_147) (apply g_s84$1_144 g_s90_147)))
; PO 1 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s81_141 g_s90_147) (apply g_s84$1_144 g_s90_147)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s81_141 g_s90_147) g_s2_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s84$1_144 g_s90_147) (apply g_s81_141 g_s90_147)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s93$1_160 g_s93_150))
(define-fun lh_1 () Bool (mem g_s90_147 g_s1_2))
(define-fun lh_2 () Bool (mem g_s90_147 g_s14_16))
(define-fun lh_3 () Bool (= (apply g_s86$1_146 g_s90_147) TRUE))
(define-fun lh_4 () Bool (=> (= (apply g_s86$1_146 g_s90_147) TRUE) (mem g_s90_147 g_s83_143)))
; PO 1 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s90_147 g_s83_143))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= (apply g_s86$1_146 g_s90_147) (bool (mem g_s90_147 g_s83_143))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s90_147 g_s1_2))
(assert (mem g_s90_147 g_s14_16))
(define-fun lh_1 () Bool (=> (= (apply g_s86$1_146 g_s90_147) TRUE) (mem g_s90_147 g_s83_143)))
; PO 1 in group 14
(push 1)
(assert (not (mem g_s86$1_146 (|+->| (dom g_s86$1_146) (ran g_s86$1_146)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (mem g_s90_147 (dom g_s86$1_146))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 14
(push 1)
(assert (not (=> lh_1 (mem g_s86$1_146 (|+->| (dom g_s86$1_146) (ran g_s86$1_146))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 14
(push 1)
(assert (not (=> lh_1 (mem g_s90_147 (dom g_s86$1_146)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s90_147 g_s1_2))
(assert (mem g_s90_147 g_s14_16))
(assert (mem g_s90_147 (dom g_s81_141)))
(define-fun lh_1 () Bool (= (apply g_s81_141 g_s90_147) (apply g_s84$1_144 g_s90_147)))
; PO 1 in group 15
(push 1)
(assert (not (mem g_s81_141 (|+->| (dom g_s81_141) (ran g_s81_141)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (mem g_s84$1_144 (|+->| (dom g_s84$1_144) (ran g_s84$1_144)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 15
(push 1)
(assert (not (mem g_s90_147 (dom g_s84$1_144))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 15
(push 1)
(assert (not (=> lh_1 (mem g_s84$1_144 (|+->| (dom g_s84$1_144) (ran g_s84$1_144))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 15
(push 1)
(assert (not (=> lh_1 (mem g_s90_147 (dom g_s84$1_144)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s106_158 g_s1_2))
(assert (mem g_s106_158 g_s14_16))
; PO 1 in group 16
(push 1)
(assert (not (mem g_s85$1_145 (|+->| (dom g_s85$1_145) (ran g_s85$1_145)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (mem g_s106_158 (dom g_s85$1_145))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s90_147 g_s1_2))
(assert (mem g_s90_147 g_s14_16))
(assert (mem g_s90_147 (dom g_s82_142)))
(define-fun lh_1 () Bool (= (apply g_s82_142 g_s90_147) (apply g_s85$1_145 g_s90_147)))
; PO 1 in group 17
(push 1)
(assert (not (mem g_s82_142 (|+->| (dom g_s82_142) (ran g_s82_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (mem g_s85$1_145 (|+->| (dom g_s85$1_145) (ran g_s85$1_145)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 17
(push 1)
(assert (not (mem g_s90_147 (dom g_s85$1_145))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 17
(push 1)
(assert (not (=> lh_1 (mem g_s85$1_145 (|+->| (dom g_s85$1_145) (ran g_s85$1_145))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 17
(push 1)
(assert (not (=> lh_1 (mem g_s90_147 (dom g_s85$1_145)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s106_158 g_s1_2))
(assert (mem g_s106_158 g_s14_16))
; PO 1 in group 18
(push 1)
(assert (not (mem g_s85$1_145 (|+->| (dom g_s85$1_145) (ran g_s85$1_145)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (mem g_s106_158 (dom g_s85$1_145))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 19 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s90_147 g_s1_2))
(assert (mem g_s90_147 g_s14_16))
; PO 1 in group 19
(push 1)
(assert (not (mem g_s84$1_144 (|+->| (dom g_s84$1_144) (ran g_s84$1_144)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 19
(push 1)
(assert (not (mem g_s90_147 (dom g_s84$1_144))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)