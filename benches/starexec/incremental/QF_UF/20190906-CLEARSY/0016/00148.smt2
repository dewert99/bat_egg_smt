(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e20 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_25 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_36 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36$1_38 () U)
(declare-fun g_s36$2_51 () U)
(declare-fun g_s37$1_39 () U)
(declare-fun g_s37$2_57 () U)
(declare-fun g_s38$1_40 () U)
(declare-fun g_s38$2_52 () U)
(declare-fun g_s39$1_41 () U)
(declare-fun g_s39$2_53 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40$1_42 () U)
(declare-fun g_s40$2_58 () U)
(declare-fun g_s41$1_43 () U)
(declare-fun g_s41$2_47 () U)
(declare-fun g_s42$1_44 () U)
(declare-fun g_s42$2_48 () U)
(declare-fun g_s43$1_45 () U)
(declare-fun g_s43$2_49 () U)
(declare-fun g_s44$1_46 () U)
(declare-fun g_s44$2_50 () U)
(declare-fun g_s48_54 () U)
(declare-fun g_s49$1_55 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50$1_56 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58$1_60 () U)
(declare-fun g_s59$1_61 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s61$1_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
(declare-fun e18 () U)
(declare-fun e17 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (= g_s9_10 (SET (mapplet g_s12_13 (mapplet g_s11_12 g_s10_11)))) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (mem g_s15_16 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s15_16 (binary_union e18 e17)) (mem g_s18_19 (|-->| BOOL NAT)) (= g_s18_19 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e20)))) (subset g_s19_21 g_s8_9) (mem g_s20_22 g_s8_9) (not (mem g_s20_22 g_s19_21)) (mem g_s21_23 (|+->| NAT g_s8_9)) (mem g_s21_23 (perm g_s19_21)) (subset g_s22_25 g_s23_24) (not (mem g_s24_26 g_s22_25)) (= g_s22_25 (SET (mapplet g_s26_28 g_s25_27))) (subset g_s27_29 g_s13_14) (mem g_s28_30 g_s13_14) (not (mem g_s28_30 g_s27_29)) (mem g_s29_31 (|+->| NAT g_s13_14)) (mem g_s29_31 (perm g_s27_29)) (subset g_s30_32 g_s14_15) (mem g_s31_33 g_s14_15) (not (mem g_s31_33 g_s30_32)) (mem g_s32_34 (|+->| NAT g_s14_15)) (mem g_s32_34 (perm g_s30_32)) (mem g_s33_36 (|>->| g_s30_32 g_s34_35))))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool  (subset g_s35_37 g_s19_21))
(define-fun |def_inv| () Bool (and (= g_s35_37 (binary_inter g_s19_21 (image (inverse g_s36$1_38) (SET TRUE)))) (mem g_s36$1_38 (|-->| g_s8_9 BOOL)) (mem g_s37$1_39 (|-->| g_s14_15 g_s8_9)) (mem g_s38$1_40 BOOL) (mem g_s39$1_41 g_s8_9) (mem g_s40$1_42 g_s14_15)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (subset g_s41$1_43 g_s19_21) (subset g_s42$1_44 g_s19_21) (= (binary_inter g_s42$1_44 g_s41$1_43) empty) (subset g_s43$1_45 g_s30_32) (subset g_s44$1_46 g_s30_32) (= (binary_inter g_s44$1_46 g_s43$1_45) empty)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (subset g_s41$2_47 g_s19_21))
(define-fun lh_2 () Bool (subset g_s42$2_48 g_s19_21))
(define-fun lh_3 () Bool (= (binary_inter g_s42$2_48 g_s41$2_47) empty))
(define-fun lh_4 () Bool (subset g_s43$2_49 g_s30_32))
(define-fun lh_5 () Bool (subset g_s44$2_50 g_s30_32))
(define-fun lh_6 () Bool (= (binary_inter g_s44$2_50 g_s43$2_49) empty))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (set_prod g_s8_9 (SET FALSE)) (|-->| g_s8_9 BOOL)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (set_prod g_s14_15 (SET g_s20_22)) (|-->| g_s14_15 g_s8_9)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (binary_inter g_s19_21 (image (inverse (set_prod g_s8_9 (SET FALSE))) (SET TRUE))) (POW g_s19_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s36$2_51 (|-->| g_s8_9 BOOL)))
(define-fun lh_2 () Bool (mem g_s38$2_52 BOOL))
(define-fun lh_3 () Bool (mem g_s39$2_53 g_s8_9))
(define-fun lh_4 () Bool (subset g_s19_21 g_s19_21))
(define-fun lh_5 () Bool (subset empty g_s19_21))
(define-fun lh_6 () Bool (= (binary_union empty g_s19_21) g_s19_21))
(define-fun lh_7 () Bool (= (binary_inter empty g_s19_21) empty))
(define-fun lh_8 () Bool (= g_s38$2_52 (bool (not (= g_s19_21 empty)))))
(define-fun lh_9 () Bool (= g_s38$2_52 TRUE))
(define-fun lh_10 () Bool (not (= g_s19_21 empty)))
(define-fun lh_11 () Bool (mem g_s48_54 g_s8_9))
(define-fun lh_12 () Bool (mem g_s48_54 g_s19_21))
(define-fun lh_13 () Bool (mem g_s49$1_55 g_s1_2))
(define-fun lh_14 () Bool (mem g_s50$1_56 BOOL))
; PO 1 in group 1
(push 1)
(assert (not (subset empty g_s19_21)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (subset g_s19_21 g_s19_21)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (= (binary_inter empty g_s19_21) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (= (binary_union empty g_s19_21) g_s19_21)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (|<=i| e0 (card g_s19_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (not (= g_s19_21 empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem (|<+| g_s36$2_51 (SET (mapplet g_s48_54 g_s50$1_56))) (|-->| g_s8_9 BOOL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (subset (set_diff g_s19_21 (SET g_s48_54)) g_s19_21))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (subset (binary_union empty (SET g_s48_54)) g_s19_21))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (bool (not (= g_s19_21 (SET g_s48_54)))) (bool (not (= (set_diff g_s19_21 (SET g_s48_54)) empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (binary_inter (binary_union empty (SET g_s48_54)) (set_diff g_s19_21 (SET g_s48_54))) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (binary_union (binary_union empty (SET g_s48_54)) (set_diff g_s19_21 (SET g_s48_54))) g_s19_21))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (|<i| (card (set_diff g_s19_21 (SET g_s48_54))) (card g_s19_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s37$2_57 (|-->| g_s14_15 g_s8_9)))
(define-fun lh_2 () Bool (mem g_s38$2_52 BOOL))
(define-fun lh_3 () Bool (mem g_s40$2_58 g_s14_15))
(define-fun lh_4 () Bool (subset g_s30_32 g_s30_32))
(define-fun lh_5 () Bool (subset empty g_s30_32))
(define-fun lh_6 () Bool (= (binary_union empty g_s30_32) g_s30_32))
(define-fun lh_7 () Bool (= (binary_inter empty g_s30_32) empty))
(define-fun lh_8 () Bool (= g_s38$2_52 (bool (not (= g_s30_32 empty)))))
(define-fun lh_9 () Bool (= g_s38$2_52 TRUE))
(define-fun lh_10 () Bool (not (= g_s30_32 empty)))
(define-fun lh_11 () Bool (mem g_s57_59 g_s14_15))
(define-fun lh_12 () Bool (mem g_s57_59 g_s30_32))
(define-fun lh_13 () Bool (mem g_s58$1_60 g_s0_1))
(define-fun lh_14 () Bool (mem g_s59$1_61 g_s8_9))
; PO 1 in group 2
(push 1)
(assert (not (subset empty g_s30_32)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (subset g_s30_32 g_s30_32)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (= (binary_inter empty g_s30_32) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (= (binary_union empty g_s30_32) g_s30_32)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (|<=i| e0 (card g_s30_32)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (not (= g_s30_32 empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem (|<+| g_s37$2_57 (SET (mapplet g_s57_59 g_s59$1_61))) (|-->| g_s14_15 g_s8_9)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (subset (set_diff g_s30_32 (SET g_s57_59)) g_s30_32))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (subset (binary_union empty (SET g_s57_59)) g_s30_32))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (bool (not (= g_s30_32 (SET g_s57_59)))) (bool (not (= (set_diff g_s30_32 (SET g_s57_59)) empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (binary_inter (binary_union empty (SET g_s57_59)) (set_diff g_s30_32 (SET g_s57_59))) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (binary_union (binary_union empty (SET g_s57_59)) (set_diff g_s30_32 (SET g_s57_59))) g_s30_32))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (|<i| (card (set_diff g_s30_32 (SET g_s57_59))) (card g_s30_32)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s61$1_63 g_s61_62))
(define-fun lh_1 () Bool (mem g_s62_64 g_s8_9))
(define-fun lh_2 () Bool (mem g_s62_64 g_s19_21))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2) (= (apply g_s36$1_38 g_s62_64) (bool (mem g_s62_64 g_s35_37))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s36$2_51 (|-->| g_s8_9 BOOL)))
(define-fun lh_2 () Bool (mem g_s38$2_52 BOOL))
(define-fun lh_3 () Bool (mem g_s39$2_53 g_s8_9))
(define-fun lh_4 () Bool (subset g_s19_21 g_s19_21))
(define-fun lh_5 () Bool (subset empty g_s19_21))
(define-fun lh_6 () Bool (= (binary_union empty g_s19_21) g_s19_21))
(define-fun lh_7 () Bool (= (binary_inter empty g_s19_21) empty))
(define-fun lh_8 () Bool (= g_s38$2_52 (bool (not (= g_s19_21 empty)))))
; PO 1 in group 4
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem g_s19_21 (FIN g_s19_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s37$2_57 (|-->| g_s14_15 g_s8_9)))
(define-fun lh_2 () Bool (mem g_s38$2_52 BOOL))
(define-fun lh_3 () Bool (mem g_s40$2_58 g_s14_15))
(define-fun lh_4 () Bool (subset g_s30_32 g_s30_32))
(define-fun lh_5 () Bool (subset empty g_s30_32))
(define-fun lh_6 () Bool (= (binary_union empty g_s30_32) g_s30_32))
(define-fun lh_7 () Bool (= (binary_inter empty g_s30_32) empty))
(define-fun lh_8 () Bool (= g_s38$2_52 (bool (not (= g_s30_32 empty)))))
; PO 1 in group 5
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem g_s30_32 (FIN g_s30_32)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s62_64 g_s8_9))
(assert (mem g_s62_64 g_s19_21))
; PO 1 in group 6
(push 1)
(assert (not (mem g_s62_64 (dom g_s36$1_38))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (mem g_s36$1_38 (|+->| (dom g_s36$1_38) (ran g_s36$1_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)