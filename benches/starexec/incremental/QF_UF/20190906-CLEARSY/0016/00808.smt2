(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s112_112 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s123_123 () U)
(declare-fun g_s124$1_126 () U)
(declare-fun g_s124$1_124 () U)
(declare-fun g_s124$1_125 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_100 () U)
(declare-fun g_s99_99 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))) (= g_s5_6 (SET (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 g_s6_7))))) (= g_s10_11 (SET (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12)))) (= g_s14_15 (SET (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 g_s15_16))))) (= g_s19_20 (SET (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 g_s20_21))))) (= g_s24_25 (SET (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 g_s25_26))))) (= g_s29_30 (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 g_s30_31))))) (= g_s34_35 (SET (mapplet g_s37_38 (mapplet g_s36_37 g_s35_36)))) (= g_s38_39 (SET (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 g_s39_40))))) (= g_s43_44 (SET (mapplet g_s46_47 (mapplet g_s45_46 g_s44_45)))) (= g_s47_48 (SET (mapplet g_s50_51 (mapplet g_s49_50 g_s48_49)))) (= g_s51_52 (SET (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 g_s52_53)))))))) (= g_s59_60 (SET (mapplet g_s63_64 (mapplet g_s62_63 (mapplet g_s61_62 g_s60_61))))) (= g_s64_65 (SET (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 g_s65_66))))) (not (= g_s69_70 empty)) (not (= g_s70_71 empty)) (not (= g_s71_72 empty)) (not (= g_s72_73 empty)) (not (= g_s73_74 empty)) (not (= g_s74_75 empty)) (not (= g_s75_76 empty)) (not (= g_s76_77 empty)) (not (= g_s77_78 empty)) (not (= g_s78_79 empty)) (= g_s79_80 (SET (mapplet g_s82_83 (mapplet g_s81_82 g_s80_81)))) (subset g_s83_84 g_s69_70) (mem g_s84_85 g_s69_70) (not (mem g_s84_85 g_s83_84)) (mem g_s85_86 (|+->| NAT g_s69_70)) (mem g_s85_86 (perm g_s83_84)) (subset g_s86_87 g_s70_71) (mem g_s87_88 g_s70_71) (not (mem g_s87_88 g_s86_87)) (mem g_s88_89 (|+->| NAT g_s70_71)) (mem g_s88_89 (perm g_s86_87)) (subset g_s89_90 g_s71_72) (mem g_s90_91 g_s71_72) (not (mem g_s90_91 g_s89_90)) (mem g_s91_92 (|+->| NAT g_s71_72)) (mem g_s91_92 (perm g_s89_90)) (subset g_s92_93 g_s72_73) (mem g_s93_94 g_s72_73) (not (mem g_s93_94 g_s92_93)) (mem g_s94_95 (|+->| NAT g_s72_73)) (mem g_s94_95 (perm g_s92_93)) (subset g_s95_96 g_s73_74) (mem g_s96_97 g_s73_74) (not (mem g_s96_97 g_s95_96)) (mem g_s97_98 (|+->| NAT g_s73_74)) (mem g_s97_98 (perm g_s95_96)) (mem g_s98_100 (|>->| g_s86_87 g_s99_99)) (subset g_s100_101 g_s74_75) (mem g_s101_102 g_s74_75) (not (mem g_s101_102 g_s100_101)) (subset g_s102_103 g_s75_76) (mem g_s103_104 g_s75_76) (not (mem g_s103_104 g_s102_103)) (subset g_s104_105 g_s76_77) (mem g_s105_106 g_s76_77) (not (mem g_s105_106 g_s104_105)) (mem g_s106_107 (|+->| NAT g_s76_77)) (mem g_s106_107 (perm g_s104_105)) (= g_s107_108 INT) (= g_s108_109 NAT) (mem g_s109_110 g_s107_108) (not (mem g_s109_110 g_s108_109)) (mem g_s110_111 g_s107_108) (mem g_s110_111 g_s108_109) (mem g_s111_113 (|>->| g_s104_105 g_s112_112)) (subset g_s113_114 g_s77_78) (mem g_s114_115 g_s77_78) (not (mem g_s114_115 g_s113_114)) (mem g_s115_116 (|+->| NAT g_s77_78)) (mem g_s115_116 (perm g_s113_114)) (subset g_s116_117 g_s78_79) (mem g_s117_118 g_s78_79) (not (mem g_s117_118 g_s116_117)) (mem g_s118_119 (|+->| NAT g_s78_79)) (mem g_s118_119 (perm g_s116_117))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s119_120 (|>+>| g_s83_84 g_s86_87)) (mem g_s120_121 (|-->| g_s83_84 g_s59_60)) (mem g_s121_122 (|>+>| g_s83_84 g_s104_105)) (= (binary_inter (dom g_s119_120) (dom g_s121_122)) empty)))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_123 g_s69_70))
(assert (mem g_s123_123 g_s83_84))
(define-fun lh_1 () Bool (mem g_s123_123 (dom g_s119_120)))
(define-fun lh_2 () Bool (mem g_s124$1_124 g_s70_71))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2) (mem g_s119_120 (|+->| (dom g_s119_120) (ran g_s119_120))))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_123 g_s69_70))
(assert (mem g_s123_123 g_s83_84))
(assert (mem g_s123_123 (dom g_s119_120)))
(define-fun lh_1 () Bool (mem g_s124$1_124 g_s70_71))
; PO 1 in group 1
(assert (not (=> lh_1 (mem g_s119_120 (|+->| (dom g_s119_120) (ran g_s119_120))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_123 g_s69_70))
(assert (mem g_s123_123 g_s83_84))
(define-fun lh_1 () Bool (mem g_s123_123 (dom g_s121_122)))
(define-fun lh_2 () Bool (mem g_s124$1_125 g_s76_77))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2) (mem g_s121_122 (|+->| (dom g_s121_122) (ran g_s121_122))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_123 g_s69_70))
(assert (mem g_s123_123 g_s83_84))
(assert (mem g_s123_123 (dom g_s121_122)))
(define-fun lh_1 () Bool (mem g_s124$1_125 g_s76_77))
; PO 1 in group 3
(assert (not (=> lh_1 (mem g_s121_122 (|+->| (dom g_s121_122) (ran g_s121_122))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s123_123 g_s69_70))
(assert (mem g_s123_123 g_s83_84))
(define-fun lh_1 () Bool (mem g_s124$1_126 g_s59_60))
; PO 1 in group 4
(push 1)
(assert (not (=> lh_1 (mem g_s120_121 (|+->| (dom g_s120_121) (ran g_s120_121))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> lh_1 (mem g_s123_123 (dom g_s120_121)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)