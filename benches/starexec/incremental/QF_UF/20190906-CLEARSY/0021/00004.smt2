(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e14 () U)
(declare-fun e61 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_15 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_17 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_30 () U)
(declare-fun g_s23_29 () U)
(declare-fun g_s24_28 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_26 () U)
(declare-fun g_s27_25 () U)
(declare-fun g_s28_24 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s29$1_49 () U)
(declare-fun g_s29$2_62 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s30$1_50 () U)
(declare-fun g_s30$2_63 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s31$1_51 () U)
(declare-fun g_s31$2_64 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s32$1_52 () U)
(declare-fun g_s32$2_65 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s33$1_53 () U)
(declare-fun g_s33$2_66 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s35$1_43 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s36$1_44 () U)
(declare-fun g_s36$2_57 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s37$1_45 () U)
(declare-fun g_s37$2_58 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s38$1_46 () U)
(declare-fun g_s38$2_59 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s39$1_47 () U)
(declare-fun g_s39$2_60 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s40$1_48 () U)
(declare-fun g_s41$1_54 () U)
(declare-fun g_s42$1_55 () U)
(declare-fun g_s43$1_56 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (= g_s0_1 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))))))) (subset g_s8_9 (set_prod (set_prod INTEGER g_s0_1) INTEGER)) (subset g_s9_10 (set_prod (set_prod INTEGER g_s0_1) INTEGER)) (subset g_s10_11 (set_prod (set_prod INTEGER g_s0_1) INTEGER)) (subset g_s11_12 (set_prod (set_prod INTEGER g_s0_1) INTEGER)) (subset g_s12_13 (set_prod (set_prod INTEGER g_s0_1) INTEGER)) (= g_s8_9 (set_prod (set_prod (SET e0) (SET (mapplet g_s2_3 (mapplet g_s4_5 (mapplet g_s6_7 (mapplet g_s5_6 g_s1_2)))))) (SET e0))) (= g_s9_10 (set_prod (set_prod (SET e0) (SET (mapplet g_s3_4 g_s7_8))) (SET e14))) (= g_s10_11 (set_prod (set_prod (SET e14) (SET g_s2_3)) (SET e0))) (= g_s11_12 (set_prod (set_prod (SET e14) (SET (mapplet g_s3_4 (mapplet g_s7_8 (mapplet g_s4_5 (mapplet g_s6_7 (mapplet g_s5_6 g_s1_2))))))) (SET e14))) (= g_s12_13 (binary_union (binary_union (binary_union g_s8_9 g_s9_10) g_s10_11) g_s11_12))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (not (= g_s13_15 empty)) (not (= g_s14_16 empty)) (not (= g_s15_17 empty)) (not (= g_s16_18 empty)) (subset g_s17_19 (set_prod g_s13_15 g_s14_16)) (subset g_s18_20 (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17)) (subset g_s19_21 (set_prod g_s13_15 g_s14_16)) (subset g_s20_22 (set_prod g_s13_15 g_s14_16)) (subset g_s21_23 (set_prod g_s13_15 g_s14_16)) (= g_s22_30 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s17_19 g_s15_17) (SET g_s23_29)) (set_prod g_s18_20 (SET g_s24_28))) (set_prod (set_prod g_s19_21 g_s15_17) (SET g_s25_27))) (set_prod (set_prod g_s20_22 g_s15_17) (SET g_s26_26))) (set_prod (set_prod g_s21_23 g_s15_17) (SET g_s27_25))) (set_prod (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17) (SET g_s28_24)))) (subset g_s22_30 (set_prod (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17) g_s16_18)) (mem g_s23_29 g_s16_18) (mem g_s24_28 g_s16_18) (mem g_s25_27 g_s16_18) (mem g_s26_26 g_s16_18) (mem g_s27_25 g_s16_18) (mem g_s28_24 g_s16_18) (not (mem g_s23_29 (SET (mapplet g_s28_24 (mapplet g_s27_25 (mapplet g_s26_26 (mapplet g_s25_27 g_s24_28))))))) (not (mem g_s24_28 (SET (mapplet g_s28_24 (mapplet g_s27_25 (mapplet g_s26_26 (mapplet g_s25_27 g_s23_29))))))) (not (mem g_s25_27 (SET (mapplet g_s28_24 (mapplet g_s27_25 (mapplet g_s26_26 (mapplet g_s24_28 g_s23_29))))))) (not (mem g_s26_26 (SET (mapplet g_s28_24 (mapplet g_s27_25 (mapplet g_s25_27 (mapplet g_s24_28 g_s23_29))))))) (not (mem g_s27_25 (SET (mapplet g_s28_24 (mapplet g_s26_26 (mapplet g_s25_27 (mapplet g_s24_28 g_s23_29))))))) (not (mem g_s28_24 (SET (mapplet g_s27_25 (mapplet g_s26_26 (mapplet g_s25_27 (mapplet g_s24_28 g_s23_29)))))))))
(define-fun |def_abs| () Bool (and (subset g_s29_31 (set_prod g_s13_15 g_s14_16)) (subset g_s30_32 (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17)) (subset g_s31_33 (set_prod g_s13_15 g_s14_16)) (subset g_s32_34 (set_prod g_s13_15 g_s14_16)) (subset g_s33_35 (set_prod g_s13_15 g_s14_16)) (= g_s34_36 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s29_31 g_s15_17) (SET g_s23_29)) (set_prod g_s30_32 (SET g_s24_28))) (set_prod (set_prod g_s31_33 g_s15_17) (SET g_s25_27))) (set_prod (set_prod g_s32_34 g_s15_17) (SET g_s26_26))) (set_prod (set_prod g_s33_35 g_s15_17) (SET g_s27_25))) (set_prod (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17) (SET g_s28_24)))) (mem g_s35_37 INTEGER) (mem g_s36_38 g_s13_15) (mem g_s37_39 g_s14_16) (mem g_s38_40 g_s15_17) (mem g_s39_41 g_s16_18) (mem g_s40_42 BOOL) (subset g_s34_36 (set_prod (set_prod (set_prod g_s13_15 g_s14_16) g_s15_17) g_s16_18))))
(define-fun |def_inv| () Bool (and (= g_s35_37 g_s35$1_43) (= g_s36_38 g_s36$1_44) (= g_s37_39 g_s37$1_45) (= g_s38_40 g_s38$1_46) (= g_s39_41 g_s39$1_47) (= g_s40_42 g_s40$1_48) (= g_s29_31 g_s29$1_49) (= g_s30_32 g_s30$1_50) (= g_s31_33 g_s31$1_51) (= g_s32_34 g_s32$1_52) (= g_s33_35 g_s33$1_53) (mem g_s41$1_54 INTEGER) (mem g_s42$1_55 g_s0_1) (mem g_s43$1_56 INTEGER) (mem (mapplet (mapplet g_s41$1_54 g_s42$1_55) g_s43$1_56) g_s12_13)))
(define-fun |def_ass| () Bool (and (mem g_s12_13 (|-->| (set_prod (SET (mapplet e14 e0)) g_s0_1) (SET (mapplet e14 e0)))) (or (= g_s43$1_56 e0) (= g_s43$1_56 e14))))
(define-fun |def_sets| () Bool  (= g_s0_1 (SET (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))))))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
; PO 1 in group 0
(assert (not (mem g_s12_13 (|-->| (set_prod (SET (mapplet e14 e0)) g_s0_1) (SET (mapplet e14 e0))))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert (mem g_s12_13 (|-->| (set_prod (SET (mapplet e14 e0)) g_s0_1) (SET (mapplet e14 e0)))))
; PO 1 in group 1
(assert (not (or (= g_s43$1_56 e0) (= g_s43$1_56 e14))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s36$2_57 g_s13_15))
(define-fun lh_2 () Bool (mem g_s37$2_58 g_s14_16))
(define-fun lh_3 () Bool (mem g_s38$2_59 g_s15_17))
(define-fun lh_4 () Bool (mem g_s39$2_60 g_s16_18))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (mapplet (mapplet e14 g_s7_8) e14) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s36$2_57 g_s13_15))
(define-fun lh_2 () Bool (mem g_s37$2_58 g_s14_16))
(define-fun lh_3 () Bool (mem g_s38$2_59 g_s15_17))
(define-fun lh_4 () Bool (mem g_s39$2_60 g_s16_18))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (mapplet (mapplet g_s43$1_56 g_s7_8) e14) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (=> (= g_s39$1_47 g_s23_29) (not (mem (mapplet g_s36$1_44 g_s37$1_45) g_s29$1_49))))
(define-fun lh_3 () Bool (=> (= g_s39$1_47 g_s24_28) (not (mem (mapplet (mapplet g_s36$1_44 g_s37$1_45) g_s38$1_46) g_s30$1_50))))
(define-fun lh_4 () Bool (=> (= g_s39$1_47 g_s25_27) (not (mem (mapplet g_s36$1_44 g_s37$1_45) g_s31$1_51))))
(define-fun lh_5 () Bool (=> (= g_s39$1_47 g_s26_26) (not (mem (mapplet g_s36$1_44 g_s37$1_45) g_s32$1_52))))
(define-fun lh_6 () Bool (=> (= g_s39$1_47 g_s27_25) (not (mem (mapplet g_s36$1_44 g_s37$1_45) g_s33$1_53))))
(define-fun lh_7 () Bool (not (= g_s39$1_47 g_s28_24)))
(define-fun lh_8 () Bool (= g_s39_41 g_s23_29))
(define-fun lh_9 () Bool (= g_s39_41 g_s24_28))
(define-fun lh_10 () Bool (= g_s39_41 g_s25_27))
(define-fun lh_11 () Bool (= g_s39_41 g_s26_26))
(define-fun lh_12 () Bool (= g_s39_41 g_s27_25))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (not (= g_s39_41 g_s28_24)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet (mapplet g_s43$1_56 g_s1_2) g_s43$1_56) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_11) (not (mem (mapplet g_s36_38 g_s37_39) g_s32_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_12) (not (mem (mapplet g_s36_38 g_s37_39) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (not (mem (mapplet g_s36_38 g_s37_39) g_s29_31)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_10) (not (mem (mapplet g_s36_38 g_s37_39) g_s31_33)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_9) (not (mem (mapplet (mapplet g_s36_38 g_s37_39) g_s38_40) g_s30_32)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (= g_s39$1_47 g_s23_29))
(define-fun lh_3 () Bool (mem (mapplet g_s36$1_44 g_s37$1_45) g_s29$1_49))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (mapplet g_s36_38 g_s37_39) g_s29_31))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (mapplet (mapplet g_s43$1_56 g_s5_6) g_s43$1_56) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 g_s23_29))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (= g_s39$1_47 g_s24_28))
(define-fun lh_3 () Bool (mem (mapplet (mapplet g_s36$1_44 g_s37$1_45) g_s38$1_46) g_s30$1_50))
(define-fun lh_4 () Bool (mem g_s29$2_62 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_5 () Bool (mem g_s30$2_63 (|<->| (set_prod g_s13_15 g_s14_16) g_s15_17)))
(define-fun lh_6 () Bool (mem g_s31$2_64 (|<->| g_s13_15 g_s14_16)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (mapplet (mapplet g_s36_38 g_s37_39) g_s38_40) g_s30_32))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (mapplet (mapplet g_s43$1_56 g_s6_7) g_s43$1_56) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s39_41 g_s24_28))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (= g_s39$1_47 g_s25_27))
(define-fun lh_3 () Bool (mem (mapplet g_s36$1_44 g_s37$1_45) g_s31$1_51))
(define-fun lh_4 () Bool (mem g_s37$2_58 g_s14_16))
(define-fun lh_5 () Bool (mem g_s29$2_62 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_6 () Bool (mem g_s31$2_64 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_7 () Bool (mem g_s32$2_65 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_8 () Bool (mem g_s33$2_66 (|<->| g_s13_15 g_s14_16)))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (mapplet g_s36_38 g_s37_39) g_s31_33))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (mapplet (mapplet g_s43$1_56 g_s2_3) e0) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s39_41 g_s25_27))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (= g_s39$1_47 g_s26_26))
(define-fun lh_3 () Bool (mem (mapplet g_s36$1_44 g_s37$1_45) g_s32$1_52))
(define-fun lh_4 () Bool (mem g_s29$2_62 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_5 () Bool (mem g_s31$2_64 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_6 () Bool (mem g_s32$2_65 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_7 () Bool (mem g_s33$2_66 (|<->| g_s13_15 g_s14_16)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet g_s36_38 g_s37_39) g_s32_34))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet (mapplet g_s43$1_56 g_s3_4) e14) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s39_41 g_s26_26))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s35$1_43 e61))
(define-fun lh_2 () Bool (= g_s39$1_47 g_s27_25))
(define-fun lh_3 () Bool (mem (mapplet g_s36$1_44 g_s37$1_45) g_s33$1_53))
(define-fun lh_4 () Bool (mem g_s37$2_58 g_s14_16))
(define-fun lh_5 () Bool (mem g_s31$2_64 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_6 () Bool (mem g_s32$2_65 (|<->| g_s13_15 g_s14_16)))
(define-fun lh_7 () Bool (mem g_s33$2_66 (|<->| g_s13_15 g_s14_16)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet g_s36_38 g_s37_39) g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (mapplet (mapplet g_s43$1_56 g_s4_5) g_s43$1_56) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s35_37 e61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s39_41 g_s27_25))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)