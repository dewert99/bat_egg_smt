(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e21 () U)
(declare-fun e68 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_4 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_31 () U)
(declare-fun g_s24_30 () U)
(declare-fun g_s25_29 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_27 () U)
(declare-fun g_s28_26 () U)
(declare-fun g_s29_25 () U)
(declare-fun g_s3_2 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s32$1_56 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s33$1_53 () U)
(declare-fun g_s33$2_69 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s34$1_54 () U)
(declare-fun g_s34$2_70 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s35$1_55 () U)
(declare-fun g_s35$2_71 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s39$1_47 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s40$1_48 () U)
(declare-fun g_s40$2_61 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s41$1_49 () U)
(declare-fun g_s41$2_62 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s42$1_50 () U)
(declare-fun g_s42$2_63 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s43$1_51 () U)
(declare-fun g_s43$2_64 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s44$1_52 () U)
(declare-fun g_s45$1_57 () U)
(declare-fun g_s45$2_65 () U)
(declare-fun g_s46$1_58 () U)
(declare-fun g_s47$1_59 () U)
(declare-fun g_s47$2_66 () U)
(declare-fun g_s48$1_60 () U)
(declare-fun g_s48$2_67 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s0_1 INTEGER) (= g_s1_4 (set_prod g_s2_3 g_s3_2)) (= g_s4_5 (set_prod g_s2_3 g_s3_2)) (|<i| e0 g_s0_1)))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s5_6 (SET (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 g_s6_7)))))))) (not (= g_s2_3 empty)) (not (= g_s3_2 empty)) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (subset g_s15_16 (set_prod (set_prod INTEGER g_s5_6) INTEGER)) (subset g_s16_17 (set_prod (set_prod INTEGER g_s5_6) INTEGER)) (subset g_s17_18 (set_prod (set_prod INTEGER g_s5_6) INTEGER)) (subset g_s18_19 (set_prod (set_prod INTEGER g_s5_6) INTEGER)) (subset g_s19_20 (set_prod (set_prod INTEGER g_s5_6) INTEGER)) (= g_s15_16 (set_prod (set_prod (SET e0) (SET (mapplet g_s7_8 (mapplet g_s9_10 (mapplet g_s11_12 (mapplet g_s10_11 g_s6_7)))))) (SET e0))) (= g_s16_17 (set_prod (set_prod (SET e0) (SET (mapplet g_s8_9 g_s12_13))) (SET e21))) (= g_s17_18 (set_prod (set_prod (SET e21) (SET g_s7_8)) (SET e0))) (= g_s18_19 (set_prod (set_prod (SET e21) (SET (mapplet g_s8_9 (mapplet g_s12_13 (mapplet g_s9_10 (mapplet g_s11_12 (mapplet g_s10_11 g_s6_7))))))) (SET e21))) (= g_s19_20 (binary_union (binary_union (binary_union g_s15_16 g_s16_17) g_s17_18) g_s18_19)) (subset g_s20_22 (set_prod g_s2_3 g_s3_2)) (subset g_s21_23 (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14)) (subset g_s22_24 (set_prod g_s2_3 g_s3_2)) (subset g_s1_4 (set_prod g_s2_3 g_s3_2)) (subset g_s4_5 (set_prod g_s2_3 g_s3_2)) (= g_s23_31 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s20_22 g_s13_14) (SET g_s24_30)) (set_prod g_s21_23 (SET g_s25_29))) (set_prod (set_prod g_s22_24 g_s13_14) (SET g_s26_28))) (set_prod (set_prod g_s1_4 g_s13_14) (SET g_s27_27))) (set_prod (set_prod g_s4_5 g_s13_14) (SET g_s28_26))) (set_prod (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14) (SET g_s29_25)))) (subset g_s23_31 (set_prod (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14) g_s14_15)) (mem g_s24_30 g_s14_15) (mem g_s25_29 g_s14_15) (mem g_s26_28 g_s14_15) (mem g_s27_27 g_s14_15) (mem g_s28_26 g_s14_15) (mem g_s29_25 g_s14_15) (not (mem g_s24_30 (SET (mapplet g_s29_25 (mapplet g_s28_26 (mapplet g_s27_27 (mapplet g_s26_28 g_s25_29))))))) (not (mem g_s25_29 (SET (mapplet g_s29_25 (mapplet g_s28_26 (mapplet g_s27_27 (mapplet g_s26_28 g_s24_30))))))) (not (mem g_s26_28 (SET (mapplet g_s29_25 (mapplet g_s28_26 (mapplet g_s27_27 (mapplet g_s25_29 g_s24_30))))))) (not (mem g_s27_27 (SET (mapplet g_s29_25 (mapplet g_s28_26 (mapplet g_s26_28 (mapplet g_s25_29 g_s24_30))))))) (not (mem g_s28_26 (SET (mapplet g_s29_25 (mapplet g_s27_27 (mapplet g_s26_28 (mapplet g_s25_29 g_s24_30))))))) (not (mem g_s29_25 (SET (mapplet g_s28_26 (mapplet g_s27_27 (mapplet g_s26_28 (mapplet g_s25_29 g_s24_30)))))))))
(define-fun |def_abs| () Bool (and (mem g_s30_32 INTEGER) (mem g_s31_33 g_s5_6) (mem g_s32_34 INTEGER) (mem (mapplet (mapplet g_s30_32 g_s31_33) g_s32_34) g_s19_20) (subset g_s33_35 (set_prod g_s2_3 g_s3_2)) (subset g_s34_36 (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14)) (subset g_s35_37 (set_prod g_s2_3 g_s3_2)) (subset g_s36_38 (set_prod g_s2_3 g_s3_2)) (subset g_s37_39 (set_prod g_s2_3 g_s3_2)) (= g_s38_40 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s33_35 g_s13_14) (SET g_s24_30)) (set_prod g_s34_36 (SET g_s25_29))) (set_prod (set_prod g_s35_37 g_s13_14) (SET g_s26_28))) (set_prod (set_prod g_s36_38 g_s13_14) (SET g_s27_27))) (set_prod (set_prod g_s37_39 g_s13_14) (SET g_s28_26))) (set_prod (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14) (SET g_s29_25)))) (mem g_s39_41 INTEGER) (mem g_s40_42 g_s2_3) (mem g_s41_43 g_s3_2) (mem g_s42_44 g_s13_14) (mem g_s43_45 g_s14_15) (mem g_s44_46 BOOL) (subset g_s38_40 (set_prod (set_prod (set_prod g_s2_3 g_s3_2) g_s13_14) g_s14_15)) (mem g_s19_20 (|-->| (set_prod (SET (mapplet e21 e0)) g_s5_6) (SET (mapplet e21 e0)))) (or (= g_s32_34 e0) (= g_s32_34 e21))))
(define-fun |def_inv| () Bool (and (= g_s39_41 g_s39$1_47) (= g_s40_42 g_s40$1_48) (= g_s41_43 g_s41$1_49) (= g_s42_44 g_s42$1_50) (= g_s43_45 g_s43$1_51) (= g_s44_46 g_s44$1_52) (= g_s33_35 g_s33$1_53) (= g_s34_36 g_s34$1_54) (= g_s35_37 g_s35$1_55) (= g_s32_34 g_s32$1_56) (mem g_s45$1_57 g_s3_2) (mem g_s46$1_58 INTEGER) (mem g_s47$1_59 (|<->| INTEGER g_s3_2)) (mem g_s48$1_60 (|<->| INTEGER g_s3_2)) (= g_s36_38 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56))))) (= g_s37_39 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56))))) (and (|>=i| g_s46$1_58 e0) (|<=i| g_s46$1_58 g_s0_1)) (mem g_s47$1_59 (|-->| (interval e21 g_s0_1) g_s3_2)) (mem g_s48$1_60 (|-->| (interval e21 g_s0_1) g_s3_2))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s40$2_61 g_s2_3))
(define-fun lh_2 () Bool (mem g_s41$2_62 g_s3_2))
(define-fun lh_3 () Bool (mem g_s42$2_63 g_s13_14))
(define-fun lh_4 () Bool (mem g_s43$2_64 g_s14_15))
(define-fun lh_5 () Bool (mem g_s45$2_65 g_s3_2))
(define-fun lh_6 () Bool (mem g_s47$2_66 (|-->| (interval e21 g_s0_1) g_s3_2)))
(define-fun lh_7 () Bool (mem g_s48$2_67 (|-->| (interval e21 g_s0_1) g_s3_2)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (and (|>=i| e0 e0) (|<=i| e0 g_s0_1)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s47$2_66 (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s48$2_67 (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s1_4 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet e0 e21))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s4_5 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet e0 e21))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s40$2_61 g_s2_3))
(define-fun lh_2 () Bool (mem g_s41$2_62 g_s3_2))
(define-fun lh_3 () Bool (mem g_s42$2_63 g_s13_14))
(define-fun lh_4 () Bool (mem g_s43$2_64 g_s14_15))
(define-fun lh_5 () Bool (mem g_s45$2_65 g_s3_2))
(define-fun lh_6 () Bool (mem g_s47$2_66 (|-->| (interval e21 g_s0_1) g_s3_2)))
(define-fun lh_7 () Bool (mem g_s48$2_67 (|-->| (interval e21 g_s0_1) g_s3_2)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (and (|>=i| e0 e0) (|<=i| e0 g_s0_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s47$2_66 (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s48$2_67 (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s1_4 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet e0 e21))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= g_s4_5 (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet e0 e21))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s24_30))
(define-fun lh_3 () Bool (mem (mapplet g_s40$1_48 g_s41$1_49) g_s33$1_53))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (mapplet g_s40_42 g_s41_43) g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s43_45 g_s24_30))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s24_30))
(define-fun lh_3 () Bool (not (mem (mapplet g_s40$1_48 g_s41$1_49) g_s33$1_53)))
(define-fun lh_4 () Bool (= g_s43_45 g_s24_30))
(define-fun lh_5 () Bool (= g_s43_45 g_s25_29))
(define-fun lh_6 () Bool (= g_s43_45 g_s26_28))
(define-fun lh_7 () Bool (= g_s43_45 g_s27_27))
(define-fun lh_8 () Bool (= g_s43_45 g_s28_26))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (= g_s43_45 g_s29_25)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (not (mem (mapplet g_s40_42 g_s41_43) g_s36_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (not (mem (mapplet g_s40_42 g_s41_43) g_s37_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (mem (mapplet g_s40_42 g_s41_43) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (not (mem (mapplet g_s40_42 g_s41_43) g_s35_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (not (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s25_29))
(define-fun lh_3 () Bool (mem (mapplet (mapplet g_s40$1_48 g_s41$1_49) g_s42$1_50) g_s34$1_54))
(define-fun lh_4 () Bool (mem g_s33$2_69 (|<->| g_s2_3 g_s3_2)))
(define-fun lh_5 () Bool (mem g_s34$2_70 (|<->| (set_prod g_s2_3 g_s3_2) g_s13_14)))
(define-fun lh_6 () Bool (mem g_s35$2_71 (|<->| g_s2_3 g_s3_2)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s43_45 g_s25_29))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s25_29))
(define-fun lh_3 () Bool (not (mem (mapplet (mapplet g_s40$1_48 g_s41$1_49) g_s42$1_50) g_s34$1_54)))
(define-fun lh_4 () Bool (= g_s43_45 g_s24_30))
(define-fun lh_5 () Bool (= g_s43_45 g_s25_29))
(define-fun lh_6 () Bool (= g_s43_45 g_s26_28))
(define-fun lh_7 () Bool (= g_s43_45 g_s27_27))
(define-fun lh_8 () Bool (= g_s43_45 g_s28_26))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (= g_s43_45 g_s29_25)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (not (mem (mapplet g_s40_42 g_s41_43) g_s36_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (not (mem (mapplet g_s40_42 g_s41_43) g_s37_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (mem (mapplet g_s40_42 g_s41_43) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (not (mem (mapplet g_s40_42 g_s41_43) g_s35_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (not (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s26_28))
(define-fun lh_3 () Bool (mem (mapplet g_s40$1_48 g_s41$1_49) g_s35$1_55))
(define-fun lh_4 () Bool (mem (mapplet g_s41$2_62 g_s45$2_65) (|<+| (set_prod g_s3_2 (SET g_s41$1_49)) (SET (mapplet g_s41$1_49 g_s45$1_57)))))
(define-fun lh_5 () Bool (mem g_s33$2_69 (|<->| g_s2_3 g_s3_2)))
(define-fun lh_6 () Bool (mem g_s35$2_71 (|<->| g_s2_3 g_s3_2)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet g_s46$1_58 e0)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet g_s46$1_58 e0)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (mapplet g_s40_42 g_s41_43) g_s35_37))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s43_45 g_s26_28))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s26_28))
(define-fun lh_3 () Bool (not (mem (mapplet g_s40$1_48 g_s41$1_49) g_s35$1_55)))
(define-fun lh_4 () Bool (= g_s43_45 g_s24_30))
(define-fun lh_5 () Bool (= g_s43_45 g_s25_29))
(define-fun lh_6 () Bool (= g_s43_45 g_s26_28))
(define-fun lh_7 () Bool (= g_s43_45 g_s27_27))
(define-fun lh_8 () Bool (= g_s43_45 g_s28_26))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (not (= g_s43_45 g_s29_25)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_7) (not (mem (mapplet g_s40_42 g_s41_43) g_s36_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_8) (not (mem (mapplet g_s40_42 g_s41_43) g_s37_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (mem (mapplet g_s40_42 g_s41_43) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_6) (not (mem (mapplet g_s40_42 g_s41_43) g_s35_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5) (not (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s27_27))
(define-fun lh_3 () Bool (= g_s32$1_56 e0))
(define-fun lh_4 () Bool (|<i| g_s46$1_58 g_s0_1))
(define-fun lh_5 () Bool (mem g_s33$2_69 (|<->| g_s2_3 g_s3_2)))
(define-fun lh_6 () Bool (mem g_s35$2_71 (|<->| g_s2_3 g_s3_2)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet (|+i| g_s46$1_58 e21) e21)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet (|+i| g_s46$1_58 e21) e21)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (mapplet g_s40_42 g_s41_43) g_s36_38))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s47$1_59 (SET (mapplet (|+i| g_s46$1_58 e21) g_s41$1_49))) (|-->| (interval e21 g_s0_1) g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s47$1_59 (SET (mapplet (|+i| g_s46$1_58 e21) g_s41$1_49))) (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s48$1_60 (SET (mapplet (|+i| g_s46$1_58 e21) g_s45$1_57))) (|-->| (interval e21 g_s0_1) g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s48$1_60 (SET (mapplet (|+i| g_s46$1_58 e21) g_s45$1_57))) (|<->| INTEGER g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (and (|>=i| (|+i| g_s46$1_58 e21) e0) (|<=i| (|+i| g_s46$1_58 e21) g_s0_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s43_45 g_s27_27))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s27_27))
(define-fun lh_3 () Bool (= g_s32$1_56 e21))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s33$1_53 (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s35$1_55 (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (mapplet g_s40_42 g_s41_43) g_s36_38))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= e21 g_s32$1_56))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s43_45 g_s27_27))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s27_27))
(define-fun lh_3 () Bool (= g_s32$1_56 e0))
(define-fun lh_4 () Bool (= g_s46$1_58 g_s0_1))
(define-fun lh_5 () Bool (= g_s43_45 g_s24_30))
(define-fun lh_6 () Bool (= g_s43_45 g_s25_29))
(define-fun lh_7 () Bool (= g_s43_45 g_s26_28))
(define-fun lh_8 () Bool (= g_s43_45 g_s27_27))
(define-fun lh_9 () Bool (= g_s43_45 g_s28_26))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (= g_s43_45 g_s29_25)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_8) (not (mem (mapplet g_s40_42 g_s41_43) g_s36_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_9) (not (mem (mapplet g_s40_42 g_s41_43) g_s37_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (not (mem (mapplet g_s40_42 g_s41_43) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_7) (not (mem (mapplet g_s40_42 g_s41_43) g_s35_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_6) (not (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s28_26))
(define-fun lh_3 () Bool (= g_s32$1_56 e0))
(define-fun lh_4 () Bool (|<i| e0 g_s46$1_58))
(define-fun lh_5 () Bool (mem g_s35$2_71 (|<->| g_s2_3 g_s3_2)))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet (|-i| g_s46$1_58 e21) g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet (|-i| g_s46$1_58 e21) g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (mapplet g_s40_42 g_s41_43) g_s37_39))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (and (|>=i| (|-i| g_s46$1_58 e21) e0) (|<=i| (|-i| g_s46$1_58 e21) g_s0_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s43_45 g_s28_26))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s28_26))
(define-fun lh_3 () Bool (= g_s32$1_56 e21))
; PO 1 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s35$1_55 (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet e0 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (dom (range_subtraction (set_prod (set_prod g_s2_3 g_s3_2) (SET (mapplet g_s0_1 e0))) (SET (mapplet g_s46$1_58 g_s32$1_56)))) (|<->| g_s2_3 g_s3_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (mapplet g_s40_42 g_s41_43) g_s37_39))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s43_45 g_s28_26))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s28_26))
(define-fun lh_3 () Bool (= g_s32$1_56 e0))
(define-fun lh_4 () Bool (= e0 g_s46$1_58))
(define-fun lh_5 () Bool (= g_s43_45 g_s24_30))
(define-fun lh_6 () Bool (= g_s43_45 g_s25_29))
(define-fun lh_7 () Bool (= g_s43_45 g_s26_28))
(define-fun lh_8 () Bool (= g_s43_45 g_s27_27))
(define-fun lh_9 () Bool (= g_s43_45 g_s28_26))
; PO 1 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (not (= g_s43_45 g_s29_25)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s39_41 e68))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_8) (not (mem (mapplet g_s40_42 g_s41_43) g_s36_38)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_9) (not (mem (mapplet g_s40_42 g_s41_43) g_s37_39)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (not (mem (mapplet g_s40_42 g_s41_43) g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_7) (not (mem (mapplet g_s40_42 g_s41_43) g_s35_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_6) (not (mem (mapplet (mapplet g_s40_42 g_s41_43) g_s42_44) g_s34_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s39$1_47 e68))
(define-fun lh_2 () Bool (= g_s43$1_51 g_s28_26))
(define-fun lh_3 () Bool (= g_s32$1_56 e0))
(define-fun lh_4 () Bool (|<i| e0 g_s46$1_58))
; PO 1 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s46$1_58 (dom g_s47$1_59)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s46$1_58 (dom g_s48$1_60)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s47$1_59 (|+->| (dom g_s47$1_59) (ran g_s47$1_59))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s48$1_60 (|+->| (dom g_s48$1_60) (ran g_s48$1_60))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)