(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e69 () U)
(declare-fun e90 () U)
(declare-fun g_s0_2 () U)
(declare-fun g_s1_1 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_103 () U)
(declare-fun g_s101_104 () U)
(declare-fun g_s101$1_122 () U)
(declare-fun g_s102_105 () U)
(declare-fun g_s102$1_123 () U)
(declare-fun g_s103_106 () U)
(declare-fun g_s103$1_124 () U)
(declare-fun g_s104_107 () U)
(declare-fun g_s104$1_125 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_109 () U)
(declare-fun g_s107_110 () U)
(declare-fun g_s108_111 () U)
(declare-fun g_s109_112 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_113 () U)
(declare-fun g_s110$1_118 () U)
(declare-fun g_s111_114 () U)
(declare-fun g_s111$1_120 () U)
(declare-fun g_s112$1_137 () U)
(declare-fun g_s112$2_151 () U)
(declare-fun g_s113$1_138 () U)
(declare-fun g_s113$2_152 () U)
(declare-fun g_s114$1_139 () U)
(declare-fun g_s114$2_153 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_5 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_35 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_37 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_39 () U)
(declare-fun g_s4_4 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_73 () U)
(declare-fun g_s69_72 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_70 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s72$1_136 () U)
(declare-fun g_s73_75 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s75_77 () U)
(declare-fun g_s75$1_129 () U)
(declare-fun g_s75$2_149 () U)
(declare-fun g_s76_78 () U)
(declare-fun g_s76$1_130 () U)
(declare-fun g_s76$2_150 () U)
(declare-fun g_s77_79 () U)
(declare-fun g_s78_80 () U)
(declare-fun g_s78$1_131 () U)
(declare-fun g_s78$2_140 () U)
(declare-fun g_s78$3_145 () U)
(declare-fun g_s79_81 () U)
(declare-fun g_s79$1_132 () U)
(declare-fun g_s79$2_141 () U)
(declare-fun g_s79$3_146 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_82 () U)
(declare-fun g_s80$1_133 () U)
(declare-fun g_s80$2_142 () U)
(declare-fun g_s81_83 () U)
(declare-fun g_s81$1_134 () U)
(declare-fun g_s81$2_143 () U)
(declare-fun g_s82_84 () U)
(declare-fun g_s82$1_135 () U)
(declare-fun g_s82$2_144 () U)
(declare-fun g_s83_85 () U)
(declare-fun g_s84_86 () U)
(declare-fun g_s85_87 () U)
(declare-fun g_s86_88 () U)
(declare-fun g_s87_91 () U)
(declare-fun g_s87$1_115 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s88$1_116 () U)
(declare-fun g_s89_92 () U)
(declare-fun g_s89$1_119 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_93 () U)
(declare-fun g_s90$1_117 () U)
(declare-fun g_s91_94 () U)
(declare-fun g_s91$1_128 () U)
(declare-fun g_s91$2_148 () U)
(declare-fun g_s92_96 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s93$1_121 () U)
(declare-fun g_s94_97 () U)
(declare-fun g_s95_98 () U)
(declare-fun g_s96_99 () U)
(declare-fun g_s96$1_126 () U)
(declare-fun g_s97_100 () U)
(declare-fun g_s97$1_127 () U)
(declare-fun g_s97$2_147 () U)
(declare-fun g_s98_101 () U)
(declare-fun g_s99_102 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s0_2 (|<->| g_s1_1 g_s1_1)) (mem g_s2_3 (|<->| g_s1_1 g_s1_1)) (mem g_s3_5 (|<->| g_s4_4 g_s1_1)) (mem g_s5_6 (|<->| g_s4_4 g_s1_1)) (mem g_s6_7 (|<->| g_s4_4 BOOL)) (subset g_s2_3 g_s0_2) (= g_s7_8 (binary_inter (composition g_s3_5 g_s0_2) (composition g_s5_6 (inverse g_s0_2)))) (= g_s8_9 (binary_inter (composition g_s3_5 g_s2_3) (composition g_s5_6 (inverse g_s0_2)))) (= g_s9_10 (image (inverse g_s6_7) (SET TRUE))) (mem g_s3_5 (|-->| g_s4_4 g_s1_1)) (mem g_s5_6 (|-->| g_s4_4 g_s1_1)) (mem g_s6_7 (|-->| g_s4_4 BOOL))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s10_11 (SET (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12))))))))))) (not (= g_s4_4 empty)) (= g_s21_22 (SET (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 g_s22_23)))))))) (not (= g_s1_1 empty)) (not (= g_s29_30 empty)) (not (= g_s30_31 empty)) (not (= g_s31_32 empty)) (mem g_s7_8 (|<->| g_s4_4 g_s1_1)) (mem g_s8_9 (|<->| g_s4_4 g_s1_1)) (mem g_s32_33 (|<->| g_s4_4 g_s29_30)) (mem g_s33_34 (|<->| g_s4_4 g_s31_32)) (subset g_s9_10 g_s4_4) (= g_s34_36 (image (ran (domain_restriction g_s9_10 (|><| g_s33_34 (|><| g_s7_8 g_s32_33)))) (SET g_s35_35))) (= g_s36_38 (image (ran (domain_restriction g_s9_10 (|><| g_s33_34 (|><| g_s7_8 g_s32_33)))) (SET g_s37_37))) (= g_s38_40 (image (ran (domain_restriction g_s9_10 (|><| g_s33_34 (|><| g_s7_8 g_s32_33)))) (SET g_s39_39))) (= g_s40_41 (image (ran (domain_restriction g_s9_10 (|><| g_s33_34 (|><| g_s8_9 g_s32_33)))) (SET g_s39_39))) (subset g_s8_9 g_s7_8) (mem g_s32_33 (|-->| g_s4_4 g_s29_30)) (subset (ran g_s33_34) (SET (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35)))) (mem g_s38_40 (|<->| g_s1_1 g_s29_30)) (mem g_s40_41 (|<->| g_s1_1 g_s29_30)) (subset g_s41_42 g_s29_30) (= g_s42_43 (set_prod (set_diff (dom g_s38_40) (dom (range_subtraction (|><| g_s38_40 g_s38_40) (id g_s29_30)))) g_s29_30)) (subset g_s40_41 g_s38_40) (mem g_s43_44 g_s29_30) (subset g_s34_36 (set_prod g_s1_1 g_s29_30)) (subset g_s36_38 (set_prod g_s1_1 g_s29_30)) (not (= g_s43_44 g_s44_45)) (= g_s45_46 (binary_union g_s34_36 (composition g_s34_36 (set_prod (SET g_s43_44) g_s29_30)))) (= g_s46_47 (binary_union g_s36_38 (composition g_s36_38 (set_prod (SET g_s43_44) g_s29_30)))) (mem g_s47_48 g_s30_31) (mem g_s44_45 g_s29_30) (subset g_s48_49 g_s1_1) (subset g_s49_50 g_s1_1) (subset g_s50_51 g_s1_1) (subset g_s51_52 g_s1_1) (mem g_s52_53 g_s1_1) (mem g_s53_54 g_s1_1) (mem g_s54_55 g_s1_1) (mem g_s55_56 g_s1_1) (subset g_s45_46 (set_prod g_s1_1 g_s29_30)) (subset g_s46_47 (set_prod g_s1_1 g_s29_30)) (subset g_s42_43 (set_prod g_s1_1 g_s29_30)) (subset g_s56_57 g_s29_30) (subset g_s49_50 g_s48_49) (subset g_s50_51 (set_diff g_s1_1 g_s48_49)) (subset g_s51_52 (set_diff g_s1_1 (binary_union g_s48_49 g_s50_51))) (mem g_s52_53 (set_diff g_s1_1 (binary_union (binary_union (binary_union g_s48_49 g_s50_51) g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54)))))) (mem g_s53_54 (set_diff g_s1_1 (binary_union (binary_union (binary_union g_s48_49 g_s50_51) g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s54_55 g_s52_53)))))) (mem g_s54_55 (set_diff g_s1_1 (binary_union (binary_union (binary_union g_s48_49 g_s50_51) g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s53_54 g_s52_53)))))) (mem g_s55_56 (set_diff g_s1_1 (binary_union (binary_union (binary_union g_s48_49 g_s50_51) g_s51_52) (SET (mapplet g_s54_55 (mapplet g_s53_54 g_s52_53)))))) (= g_s1_1 (binary_union (binary_union (binary_union g_s48_49 g_s50_51) g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 g_s52_53)))))) (= g_s57_58 (binary_union (binary_union (binary_union (binary_union (binary_union (binary_union (domain_restriction g_s48_49 g_s45_46) (set_prod g_s51_52 g_s56_57)) (set_prod (SET (mapplet g_s53_54 g_s52_53)) g_s56_57)) (set_prod g_s50_51 (SET g_s44_45))) (set_prod g_s49_50 g_s29_30)) (set_prod (SET g_s54_55) g_s29_30)) (SET (mapplet g_s55_56 g_s44_45)))) (= g_s58_59 (binary_union (set_prod (binary_union (binary_union (domain_restriction g_s48_49 g_s46_47) (set_prod g_s51_52 g_s56_57)) (SET (mapplet g_s55_56 g_s44_45))) g_s30_31) (set_prod (set_prod (SET (mapplet g_s53_54 g_s52_53)) g_s56_57) (SET g_s47_48)))) (= g_s59_60 (domain_restriction g_s48_49 g_s42_43)) (mem g_s60_61 INTEGER) (= g_s61_62 (set_prod g_s1_1 g_s29_30)) (= g_s62_63 (set_prod g_s1_1 g_s29_30)) (|<i| e0 g_s60_61) (subset g_s63_64 (set_prod (set_prod INTEGER g_s21_22) INTEGER)) (subset g_s64_65 (set_prod (set_prod INTEGER g_s21_22) INTEGER)) (subset g_s65_66 (set_prod (set_prod INTEGER g_s21_22) INTEGER)) (subset g_s66_67 (set_prod (set_prod INTEGER g_s21_22) INTEGER)) (subset g_s67_68 (set_prod (set_prod INTEGER g_s21_22) INTEGER)) (= g_s63_64 (set_prod (set_prod (SET e0) (SET (mapplet g_s23_24 (mapplet g_s25_26 (mapplet g_s27_28 (mapplet g_s26_27 g_s22_23)))))) (SET e0))) (= g_s64_65 (set_prod (set_prod (SET e0) (SET (mapplet g_s24_25 g_s28_29))) (SET e69))) (= g_s65_66 (set_prod (set_prod (SET e69) (SET g_s23_24)) (SET e0))) (= g_s66_67 (set_prod (set_prod (SET e69) (SET (mapplet g_s24_25 (mapplet g_s28_29 (mapplet g_s25_26 (mapplet g_s27_28 (mapplet g_s26_27 g_s22_23))))))) (SET e69))) (= g_s67_68 (binary_union (binary_union (binary_union g_s63_64 g_s64_65) g_s65_66) g_s66_67)) (subset g_s57_58 (set_prod g_s1_1 g_s29_30)) (subset g_s58_59 (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31)) (subset g_s59_60 (set_prod g_s1_1 g_s29_30)) (subset g_s61_62 (set_prod g_s1_1 g_s29_30)) (subset g_s62_63 (set_prod g_s1_1 g_s29_30)) (= g_s68_73 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s57_58 g_s30_31) (SET g_s35_35)) (set_prod g_s58_59 (SET g_s37_37))) (set_prod (set_prod g_s59_60 g_s30_31) (SET g_s39_39))) (set_prod (set_prod g_s61_62 g_s30_31) (SET g_s69_72))) (set_prod (set_prod g_s62_63 g_s30_31) (SET g_s70_71))) (set_prod (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31) (SET g_s71_70)))) (subset g_s68_73 (set_prod (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31) g_s31_32)) (mem g_s35_35 g_s31_32) (mem g_s37_37 g_s31_32) (mem g_s39_39 g_s31_32) (mem g_s69_72 g_s31_32) (mem g_s70_71 g_s31_32) (mem g_s71_70 g_s31_32) (not (mem g_s35_35 (SET (mapplet g_s71_70 (mapplet g_s70_71 (mapplet g_s69_72 (mapplet g_s39_39 g_s37_37))))))) (not (mem g_s37_37 (SET (mapplet g_s71_70 (mapplet g_s70_71 (mapplet g_s69_72 (mapplet g_s39_39 g_s35_35))))))) (not (mem g_s39_39 (SET (mapplet g_s71_70 (mapplet g_s70_71 (mapplet g_s69_72 (mapplet g_s37_37 g_s35_35))))))) (not (mem g_s69_72 (SET (mapplet g_s71_70 (mapplet g_s70_71 (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35))))))) (not (mem g_s70_71 (SET (mapplet g_s71_70 (mapplet g_s69_72 (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35))))))) (not (mem g_s71_70 (SET (mapplet g_s70_71 (mapplet g_s69_72 (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35)))))))))
(define-fun |def_abs| () Bool (and (subset g_s72_74 g_s10_11) (mem g_s73_75 (|<->| g_s4_4 g_s1_1)) (mem g_s74_76 (|<->| g_s4_4 g_s1_1)) (mem g_s75_77 (|<->| g_s4_4 g_s29_30)) (mem g_s76_78 (|<->| g_s4_4 g_s31_32)) (subset g_s77_79 g_s4_4) (subset g_s78_80 g_s4_4) (subset g_s79_81 g_s4_4) (subset g_s80_82 g_s29_30) (subset g_s81_83 g_s4_4) (subset g_s82_84 g_s4_4) (= g_s83_85 (image (ran (domain_restriction g_s77_79 (|><| g_s76_78 (|><| g_s73_75 g_s75_77)))) (SET g_s35_35))) (= g_s84_86 (image (ran (domain_restriction g_s77_79 (|><| g_s76_78 (|><| g_s73_75 g_s75_77)))) (SET g_s37_37))) (= g_s85_87 (image (ran (domain_restriction g_s77_79 (|><| g_s76_78 (|><| g_s73_75 g_s75_77)))) (SET g_s39_39))) (= g_s86_88 (image (ran (domain_restriction g_s77_79 (|><| g_s76_78 (|><| g_s74_76 g_s75_77)))) (SET g_s39_39))) (subset g_s74_76 g_s73_75) (mem g_s75_77 (|-->| g_s4_4 g_s29_30)) (subset (ran g_s76_78) (SET (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35)))) (=> (= g_s87_91 e90) (= g_s78_80 (binary_inter g_s77_79 (image (inverse g_s73_75) (SET g_s88_89))))) (=> (= g_s87_91 e90) (= g_s79_81 (binary_inter (binary_inter g_s77_79 (image (inverse g_s73_75) (SET g_s88_89))) (image (inverse g_s76_78) (SET g_s89_92))))) (=> (= g_s87_91 e90) (= g_s80_82 (image g_s75_77 g_s79_81))) (=> (= g_s87_91 e90) (= g_s81_83 (binary_inter (binary_inter g_s77_79 (image (inverse g_s74_76) (SET g_s88_89))) (image (inverse g_s76_78) (SET g_s89_92))))) (=> (= g_s87_91 e90) (= g_s82_84 (binary_inter (binary_inter (binary_inter g_s77_79 (image (inverse g_s73_75) (SET g_s88_89))) (image (inverse g_s76_78) (SET g_s89_92))) (image (inverse g_s75_77) (SET (mapplet g_s43_44 g_s90_93)))))) (mem g_s85_87 (|<->| g_s1_1 g_s29_30)) (mem g_s86_88 (|<->| g_s1_1 g_s29_30)) (subset g_s91_94 g_s29_30) (= g_s92_96 (set_prod (set_diff (dom (binary_union g_s86_88 (range_subtraction g_s85_87 (image (set_prod (SET e0) (set_diff g_s91_94 (SET g_s90_93))) (SET g_s93_95))))) (dom (range_subtraction (|><| g_s85_87 g_s85_87) (id g_s29_30)))) g_s29_30)) (subset g_s86_88 g_s85_87) (subset g_s83_85 (set_prod g_s1_1 g_s29_30)) (subset g_s84_86 (set_prod g_s1_1 g_s29_30)) (= g_s94_97 (binary_union g_s83_85 (composition g_s83_85 (set_prod (SET g_s43_44) g_s29_30)))) (= g_s95_98 (binary_union g_s84_86 (composition g_s84_86 (set_prod (SET g_s43_44) g_s29_30)))) (subset g_s94_97 (set_prod g_s1_1 g_s29_30)) (subset g_s95_98 (set_prod g_s1_1 g_s29_30)) (subset g_s92_96 (set_prod g_s1_1 g_s29_30)) (mem g_s96_99 BOOL) (subset g_s97_100 g_s29_30) (= g_s98_101 (binary_union (binary_union (binary_union (binary_union (binary_union (binary_union (domain_restriction g_s48_49 g_s94_97) (set_prod g_s51_52 g_s97_100)) (set_prod (SET (mapplet g_s53_54 g_s52_53)) g_s97_100)) (set_prod g_s50_51 (SET g_s44_45))) (dom (range_restriction (set_prod (set_prod g_s49_50 g_s29_30) (SET e69)) (SET g_s93_95)))) (set_prod (SET g_s54_55) g_s29_30)) (SET (mapplet g_s55_56 g_s44_45)))) (= g_s99_102 (binary_union (set_prod (binary_union (binary_union (binary_union (domain_restriction g_s48_49 g_s95_98) (set_prod g_s51_52 g_s97_100)) (dom (range_restriction (set_prod (set_prod g_s50_51 (SET g_s44_45)) (SET FALSE)) (SET g_s96_99)))) (SET (mapplet g_s55_56 g_s44_45))) g_s30_31) (set_prod (set_prod (SET (mapplet g_s53_54 g_s52_53)) g_s97_100) (SET g_s47_48)))) (= g_s100_103 (domain_restriction g_s48_49 g_s92_96)) (mem g_s101_104 g_s29_30) (mem g_s102_105 INTEGER) (mem g_s103_106 (|<->| INTEGER g_s29_30)) (mem g_s104_107 (|<->| INTEGER g_s29_30)) (= g_s105_108 (dom (range_subtraction (set_prod (set_prod g_s1_1 g_s29_30) (SET (mapplet g_s60_61 e0))) (SET (mapplet g_s102_105 g_s93_95))))) (= g_s106_109 (dom (range_subtraction (set_prod (set_prod g_s1_1 g_s29_30) (SET (mapplet e0 e0))) (SET (mapplet g_s102_105 g_s93_95))))) (and (|>=i| g_s102_105 e0) (|<=i| g_s102_105 g_s60_61)) (mem g_s103_106 (|-->| (interval e69 g_s60_61) g_s29_30)) (mem g_s104_107 (|-->| (interval e69 g_s60_61) g_s29_30)) (mem g_s107_110 INTEGER) (mem g_s108_111 g_s21_22) (mem g_s93_95 INTEGER) (mem (mapplet (mapplet g_s107_110 g_s108_111) g_s93_95) g_s67_68) (subset g_s98_101 (set_prod g_s1_1 g_s29_30)) (subset g_s99_102 (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31)) (subset g_s100_103 (set_prod g_s1_1 g_s29_30)) (subset g_s105_108 (set_prod g_s1_1 g_s29_30)) (subset g_s106_109 (set_prod g_s1_1 g_s29_30)) (= g_s109_112 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s98_101 g_s30_31) (SET g_s35_35)) (set_prod g_s99_102 (SET g_s37_37))) (set_prod (set_prod g_s100_103 g_s30_31) (SET g_s39_39))) (set_prod (set_prod g_s105_108 g_s30_31) (SET g_s69_72))) (set_prod (set_prod g_s106_109 g_s30_31) (SET g_s70_71))) (set_prod (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31) (SET g_s71_70)))) (mem g_s87_91 INTEGER) (mem g_s88_89 g_s1_1) (mem g_s90_93 g_s29_30) (mem g_s110_113 g_s30_31) (mem g_s89_92 g_s31_32) (mem g_s111_114 BOOL) (subset g_s109_112 (set_prod (set_prod (set_prod g_s1_1 g_s29_30) g_s30_31) g_s31_32)) (=> (and (= g_s87_91 e90) (= g_s89_92 g_s39_39)) (= g_s80_82 (image g_s85_87 (SET g_s88_89)))) (=> (and (= g_s87_91 e90) (= g_s89_92 g_s39_39)) (= (image g_s75_77 g_s81_83) (image g_s86_88 (SET g_s88_89)))) (=> (= g_s87_91 e90) (= g_s79_81 (binary_inter g_s78_80 (image (inverse g_s76_78) (SET g_s89_92))))) (= (binary_union g_s40_41 (range_subtraction g_s38_40 (image (set_prod (SET e0) (set_diff g_s41_42 (SET g_s44_45))) (SET e69)))) g_s38_40) (= (binary_union g_s86_88 (range_subtraction g_s85_87 (image (set_prod (SET e0) (set_diff g_s91_94 (SET g_s90_93))) (SET e0)))) (binary_union g_s86_88 (range_subtraction g_s85_87 (set_diff g_s91_94 (SET g_s90_93))))) (= (binary_union g_s86_88 (range_subtraction g_s85_87 (image (set_prod (SET e0) (set_diff g_s91_94 (SET g_s90_93))) (SET e69)))) g_s85_87) (mem g_s67_68 (|-->| (set_prod (SET (mapplet e69 e0)) g_s21_22) (SET (mapplet e69 e0)))) (or (= g_s93_95 e0) (= g_s93_95 e69))))
(define-fun |def_inv| () Bool (and (= g_s87_91 g_s87$1_115) (= g_s88_89 g_s88$1_116) (= g_s90_93 g_s90$1_117) (= g_s110_113 g_s110$1_118) (= g_s89_92 g_s89$1_119) (= g_s111_114 g_s111$1_120) (= g_s93_95 g_s93$1_121) (= g_s101_104 g_s101$1_122) (= g_s102_105 g_s102$1_123) (= g_s103_106 g_s103$1_124) (= g_s104_107 g_s104$1_125) (= g_s96_99 g_s96$1_126) (= g_s97_100 g_s97$1_127) (= g_s91_94 g_s91$1_128) (= g_s75_77 g_s75$1_129) (= g_s76_78 g_s76$1_130) (= g_s78_80 g_s78$1_131) (= g_s79_81 g_s79$1_132) (= g_s80_82 g_s80$1_133) (= g_s81_83 g_s81$1_134) (= g_s82_84 g_s82$1_135) (= g_s72_74 g_s72$1_136) (mem g_s112$1_137 (|<->| g_s4_4 g_s1_1)) (mem g_s113$1_138 (|<->| g_s4_4 g_s1_1)) (mem g_s114$1_139 (|<->| g_s4_4 BOOL)) (= g_s73_75 (binary_inter (composition g_s112$1_137 g_s0_2) (composition g_s113$1_138 (inverse g_s0_2)))) (= g_s74_76 (binary_inter (composition g_s112$1_137 g_s2_3) (composition g_s113$1_138 (inverse g_s0_2)))) (= g_s77_79 (image (inverse g_s114$1_139) (SET TRUE))) (mem g_s112$1_137 (|-->| g_s4_4 g_s1_1)) (mem g_s113$1_138 (|-->| g_s4_4 g_s1_1)) (mem g_s114$1_139 (|-->| g_s4_4 BOOL))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s87$1_115 e69))
(define-fun lh_2 () Bool (= g_s78$2_140 (binary_inter (binary_inter (image (inverse g_s114$1_139) (SET TRUE)) (image (inverse (composition g_s112$1_137 g_s0_2)) (SET g_s88$1_116))) (image (inverse (composition g_s113$1_138 (inverse g_s0_2))) (SET g_s88$1_116)))))
(define-fun lh_3 () Bool (= g_s79$2_141 (binary_inter g_s78$2_140 (image (inverse g_s76$1_130) (SET g_s89$1_119)))))
(define-fun lh_4 () Bool (= g_s80$2_142 (image g_s75$1_129 g_s79$2_141)))
(define-fun lh_5 () Bool (= g_s81$2_143 (binary_inter g_s79$2_141 (image (inverse (composition g_s112$1_137 g_s2_3)) (SET g_s88$1_116)))))
(define-fun lh_6 () Bool (= g_s82$2_144 (binary_inter g_s79$2_141 (image (inverse g_s75$1_129) (SET (mapplet g_s43_44 g_s90$1_117))))))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s87_91 e69))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter g_s78$3_145 (image (inverse g_s76_78) (SET g_s89_92))) g_s79$2_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter g_s78$3_145 (image (inverse g_s76_78) (SET g_s89_92))) (binary_inter (binary_inter g_s77_79 (image (inverse g_s73_75) (SET g_s88_89))) (image (inverse g_s76_78) (SET g_s89_92)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter g_s79$3_146 (image (inverse g_s75_77) (SET (mapplet g_s43_44 g_s90_93)))) g_s82$2_144))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter g_s79$3_146 (image (inverse g_s75_77) (SET (mapplet g_s43_44 g_s90_93)))) (binary_inter (binary_inter g_s78$3_145 (image (inverse g_s76_78) (SET g_s89_92))) (image (inverse g_s75_77) (SET (mapplet g_s43_44 g_s90_93))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter g_s77_79 (image (inverse g_s73_75) (SET g_s88_89))) g_s78$2_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (binary_inter (binary_inter g_s77_79 (image (inverse g_s74_76) (SET g_s88_89))) (image (inverse g_s76_78) (SET g_s89_92))) g_s81$2_143))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (image g_s75_77 g_s79$3_146) g_s80$2_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (image g_s75_77 g_s79$3_146) (image g_s75_77 (binary_inter g_s78$3_145 (image (inverse g_s76_78) (SET g_s89_92))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s87$1_115 e90))
(define-fun lh_2 () Bool (= g_s89$1_119 g_s37_37))
(define-fun lh_3 () Bool (mem g_s88$1_116 g_s50_51))
(define-fun lh_4 () Bool (= g_s90$1_117 g_s44_45))
(define-fun lh_5 () Bool (= g_s96$1_126 FALSE))
(define-fun lh_6 () Bool (mem g_s97$2_147 (POW g_s29_30)))
(define-fun lh_7 () Bool (mem g_s91$2_148 (POW g_s29_30)))
(define-fun lh_8 () Bool (mem g_s75$2_149 (|-->| g_s4_4 g_s29_30)))
(define-fun lh_9 () Bool (mem g_s76$2_150 (|<->| g_s4_4 (SET (mapplet g_s39_39 (mapplet g_s37_37 g_s35_35))))))
(define-fun lh_10 () Bool (mem g_s112$2_151 (|-->| g_s4_4 g_s1_1)))
(define-fun lh_11 () Bool (mem g_s113$2_152 (|-->| g_s4_4 g_s1_1)))
(define-fun lh_12 () Bool (mem g_s114$2_153 (|-->| g_s4_4 BOOL)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s88_89 g_s50_51))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s113$2_152 (|<->| g_s4_4 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s114$2_153 (|<->| g_s4_4 BOOL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s112$2_151 (|<->| g_s4_4 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem (binary_inter (composition g_s112$2_151 g_s0_2) (composition g_s113$2_152 (inverse g_s0_2))) (|<->| g_s4_4 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (subset (binary_inter (composition g_s112$2_151 g_s2_3) (composition g_s113$2_152 (inverse g_s0_2))) (binary_inter (composition g_s112$2_151 g_s0_2) (composition g_s113$2_152 (inverse g_s0_2)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s90_93 g_s44_45))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s96_99 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s87_91 e90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= g_s89_92 g_s37_37))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s87$1_115 e90))
(define-fun lh_2 () Bool (or (= g_s89$1_119 g_s35_35) (= g_s89$1_119 g_s37_37)))
(define-fun lh_3 () Bool (mem g_s88$1_116 (binary_union (binary_union g_s50_51 g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 g_s52_53)))))))
(define-fun lh_4 () Bool (=> (mem g_s88$1_116 g_s50_51) (not (= g_s90$1_117 g_s44_45))))
(define-fun lh_5 () Bool (=> (mem g_s88$1_116 g_s51_52) (not (mem g_s90$1_117 g_s97$1_127))))
(define-fun lh_6 () Bool (=> (and (or (= g_s88$1_116 g_s52_53) (= g_s88$1_116 g_s53_54)) (mem g_s90$1_117 g_s97$1_127)) (and (= g_s89$1_119 g_s37_37) (not (= g_s110$1_118 g_s47_48)))))
(define-fun lh_7 () Bool (=> (= g_s88$1_116 g_s54_55) (= g_s89$1_119 g_s37_37)))
(define-fun lh_8 () Bool (=> (= g_s88$1_116 g_s55_56) (not (= g_s90$1_117 g_s44_45))))
(define-fun lh_9 () Bool (mem g_s88_89 g_s50_51))
(define-fun lh_10 () Bool (mem g_s88_89 g_s51_52))
(define-fun lh_11 () Bool (or (= g_s88_89 g_s52_53) (= g_s88_89 g_s53_54)))
(define-fun lh_12 () Bool (= g_s89_92 g_s35_35))
(define-fun lh_13 () Bool (= g_s89_92 g_s37_37))
(define-fun lh_14 () Bool (= g_s88_89 g_s55_56))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem g_s88_89 (binary_union (binary_union g_s50_51 g_s51_52) (SET (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 g_s52_53)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (or (= g_s89_92 g_s35_35) (= g_s89_92 g_s37_37)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= g_s87_91 e90))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (binary_union g_s72_74 (SET g_s13_14)) (binary_union g_s72$1_136 (SET g_s13_14))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_10) (not (mem g_s90_93 g_s97_100)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (not (= g_s90_93 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_14) (not (= g_s90_93 g_s44_45)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_11 lh_13) (or (not (mem g_s90_93 g_s97_100)) (not (= g_s110_113 g_s47_48))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_11 lh_12) (not (mem g_s90_93 g_s97_100)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s87$1_115 e90))
(define-fun lh_2 () Bool (= g_s89$1_119 g_s70_71))
(define-fun lh_3 () Bool (= g_s93$1_121 e0))
(define-fun lh_4 () Bool (|<i| e0 g_s102$1_123))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s102$1_123 (dom g_s103$1_124)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s102$1_123 (dom g_s104$1_125)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s103$1_124 (|+->| (dom g_s103$1_124) (ran g_s103$1_124))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s104$1_125 (|+->| (dom g_s104$1_125) (ran g_s104$1_125))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)