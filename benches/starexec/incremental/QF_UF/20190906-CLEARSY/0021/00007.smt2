(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: Event-B
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e41 () U)
(declare-fun e89 () U)
(declare-fun g_s0_2 () U)
(declare-fun g_s1_1 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_4 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_3 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_48 () U)
(declare-fun g_s41_47 () U)
(declare-fun g_s42_46 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_44 () U)
(declare-fun g_s45_43 () U)
(declare-fun g_s46_42 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s49$1_79 () U)
(declare-fun g_s49$2_92 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s50$1_85 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s51$1_86 () U)
(declare-fun g_s51$2_93 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s53$1_80 () U)
(declare-fun g_s54_56 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_58 () U)
(declare-fun g_s56$1_81 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s57$1_82 () U)
(declare-fun g_s58_60 () U)
(declare-fun g_s58$1_83 () U)
(declare-fun g_s59_61 () U)
(declare-fun g_s59$1_84 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_62 () U)
(declare-fun g_s61_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s63_65 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_67 () U)
(declare-fun g_s65$1_73 () U)
(declare-fun g_s66_68 () U)
(declare-fun g_s66$1_74 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s67$1_75 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s68$1_76 () U)
(declare-fun g_s69_71 () U)
(declare-fun g_s69$1_77 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s70$1_78 () U)
(declare-fun g_s71$1_87 () U)
(declare-fun g_s71$2_90 () U)
(declare-fun g_s72$1_88 () U)
(declare-fun g_s72$2_91 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool true)
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s0_2 g_s1_1) (subset g_s2_4 (set_prod g_s3_3 g_s1_1)) (subset g_s4_5 (set_prod g_s3_3 g_s1_1)) (not (= g_s0_2 g_s5_6)) (= g_s6_7 (binary_union g_s2_4 (composition g_s2_4 (set_prod (SET g_s0_2) g_s1_1)))) (= g_s7_8 (binary_union g_s4_5 (composition g_s4_5 (set_prod (SET g_s0_2) g_s1_1))))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s8_9 (SET (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 g_s9_10)))))))) (not (= g_s3_3 empty)) (not (= g_s1_1 empty)) (not (= g_s16_17 empty)) (not (= g_s17_18 empty)) (mem g_s18_19 g_s16_17) (mem g_s5_6 g_s1_1) (subset g_s19_20 g_s3_3) (subset g_s20_21 g_s3_3) (subset g_s21_22 g_s3_3) (subset g_s22_23 g_s3_3) (mem g_s23_24 g_s3_3) (mem g_s24_25 g_s3_3) (mem g_s25_26 g_s3_3) (mem g_s26_27 g_s3_3) (subset g_s6_7 (set_prod g_s3_3 g_s1_1)) (subset g_s7_8 (set_prod g_s3_3 g_s1_1)) (subset g_s27_28 (set_prod g_s3_3 g_s1_1)) (subset g_s28_29 g_s1_1) (subset g_s20_21 g_s19_20) (subset g_s21_22 (set_diff g_s3_3 g_s19_20)) (subset g_s22_23 (set_diff g_s3_3 (binary_union g_s19_20 g_s21_22))) (mem g_s23_24 (set_diff g_s3_3 (binary_union (binary_union (binary_union g_s19_20 g_s21_22) g_s22_23) (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s24_25)))))) (mem g_s24_25 (set_diff g_s3_3 (binary_union (binary_union (binary_union g_s19_20 g_s21_22) g_s22_23) (SET (mapplet g_s26_27 (mapplet g_s25_26 g_s23_24)))))) (mem g_s25_26 (set_diff g_s3_3 (binary_union (binary_union (binary_union g_s19_20 g_s21_22) g_s22_23) (SET (mapplet g_s26_27 (mapplet g_s24_25 g_s23_24)))))) (mem g_s26_27 (set_diff g_s3_3 (binary_union (binary_union (binary_union g_s19_20 g_s21_22) g_s22_23) (SET (mapplet g_s25_26 (mapplet g_s24_25 g_s23_24)))))) (= g_s3_3 (binary_union (binary_union (binary_union g_s19_20 g_s21_22) g_s22_23) (SET (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 g_s23_24)))))) (= g_s29_30 (binary_union (binary_union (binary_union (binary_union (binary_union (binary_union (domain_restriction g_s19_20 g_s6_7) (set_prod g_s22_23 g_s28_29)) (set_prod (SET (mapplet g_s24_25 g_s23_24)) g_s28_29)) (set_prod g_s21_22 (SET g_s5_6))) (set_prod g_s20_21 g_s1_1)) (set_prod (SET g_s25_26) g_s1_1)) (SET (mapplet g_s26_27 g_s5_6)))) (= g_s30_31 (binary_union (set_prod (binary_union (binary_union (domain_restriction g_s19_20 g_s7_8) (set_prod g_s22_23 g_s28_29)) (SET (mapplet g_s26_27 g_s5_6))) g_s16_17) (set_prod (set_prod (SET (mapplet g_s24_25 g_s23_24)) g_s28_29) (SET g_s18_19)))) (= g_s31_32 (domain_restriction g_s19_20 g_s27_28)) (mem g_s32_33 INTEGER) (= g_s33_34 (set_prod g_s3_3 g_s1_1)) (= g_s34_35 (set_prod g_s3_3 g_s1_1)) (|<i| e0 g_s32_33) (subset g_s35_36 (set_prod (set_prod INTEGER g_s8_9) INTEGER)) (subset g_s36_37 (set_prod (set_prod INTEGER g_s8_9) INTEGER)) (subset g_s37_38 (set_prod (set_prod INTEGER g_s8_9) INTEGER)) (subset g_s38_39 (set_prod (set_prod INTEGER g_s8_9) INTEGER)) (subset g_s39_40 (set_prod (set_prod INTEGER g_s8_9) INTEGER)) (= g_s35_36 (set_prod (set_prod (SET e0) (SET (mapplet g_s10_11 (mapplet g_s12_13 (mapplet g_s14_15 (mapplet g_s13_14 g_s9_10)))))) (SET e0))) (= g_s36_37 (set_prod (set_prod (SET e0) (SET (mapplet g_s11_12 g_s15_16))) (SET e41))) (= g_s37_38 (set_prod (set_prod (SET e41) (SET g_s10_11)) (SET e0))) (= g_s38_39 (set_prod (set_prod (SET e41) (SET (mapplet g_s11_12 (mapplet g_s15_16 (mapplet g_s12_13 (mapplet g_s14_15 (mapplet g_s13_14 g_s9_10))))))) (SET e41))) (= g_s39_40 (binary_union (binary_union (binary_union g_s35_36 g_s36_37) g_s37_38) g_s38_39)) (subset g_s29_30 (set_prod g_s3_3 g_s1_1)) (subset g_s30_31 (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17)) (subset g_s31_32 (set_prod g_s3_3 g_s1_1)) (subset g_s33_34 (set_prod g_s3_3 g_s1_1)) (subset g_s34_35 (set_prod g_s3_3 g_s1_1)) (= g_s40_48 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s29_30 g_s16_17) (SET g_s41_47)) (set_prod g_s30_31 (SET g_s42_46))) (set_prod (set_prod g_s31_32 g_s16_17) (SET g_s43_45))) (set_prod (set_prod g_s33_34 g_s16_17) (SET g_s44_44))) (set_prod (set_prod g_s34_35 g_s16_17) (SET g_s45_43))) (set_prod (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17) (SET g_s46_42)))) (subset g_s40_48 (set_prod (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17) g_s17_18)) (mem g_s41_47 g_s17_18) (mem g_s42_46 g_s17_18) (mem g_s43_45 g_s17_18) (mem g_s44_44 g_s17_18) (mem g_s45_43 g_s17_18) (mem g_s46_42 g_s17_18) (not (mem g_s41_47 (SET (mapplet g_s46_42 (mapplet g_s45_43 (mapplet g_s44_44 (mapplet g_s43_45 g_s42_46))))))) (not (mem g_s42_46 (SET (mapplet g_s46_42 (mapplet g_s45_43 (mapplet g_s44_44 (mapplet g_s43_45 g_s41_47))))))) (not (mem g_s43_45 (SET (mapplet g_s46_42 (mapplet g_s45_43 (mapplet g_s44_44 (mapplet g_s42_46 g_s41_47))))))) (not (mem g_s44_44 (SET (mapplet g_s46_42 (mapplet g_s45_43 (mapplet g_s43_45 (mapplet g_s42_46 g_s41_47))))))) (not (mem g_s45_43 (SET (mapplet g_s46_42 (mapplet g_s44_44 (mapplet g_s43_45 (mapplet g_s42_46 g_s41_47))))))) (not (mem g_s46_42 (SET (mapplet g_s45_43 (mapplet g_s44_44 (mapplet g_s43_45 (mapplet g_s42_46 g_s41_47)))))))))
(define-fun |def_abs| () Bool (and (subset g_s47_49 (set_prod g_s3_3 g_s1_1)) (subset g_s48_50 (set_prod g_s3_3 g_s1_1)) (subset g_s49_51 (set_prod g_s3_3 g_s1_1)) (mem g_s50_52 BOOL) (subset g_s51_53 g_s1_1) (= g_s52_55 (binary_union (binary_union (binary_union (binary_union (binary_union (binary_union (domain_restriction g_s19_20 g_s47_49) (set_prod g_s22_23 g_s51_53)) (set_prod (SET (mapplet g_s24_25 g_s23_24)) g_s51_53)) (set_prod g_s21_22 (SET g_s5_6))) (dom (range_restriction (set_prod (set_prod g_s20_21 g_s1_1) (SET e41)) (SET g_s53_54)))) (set_prod (SET g_s25_26) g_s1_1)) (SET (mapplet g_s26_27 g_s5_6)))) (= g_s54_56 (binary_union (set_prod (binary_union (binary_union (binary_union (domain_restriction g_s19_20 g_s48_50) (set_prod g_s22_23 g_s51_53)) (dom (range_restriction (set_prod (set_prod g_s21_22 (SET g_s5_6)) (SET FALSE)) (SET g_s50_52)))) (SET (mapplet g_s26_27 g_s5_6))) g_s16_17) (set_prod (set_prod (SET (mapplet g_s24_25 g_s23_24)) g_s51_53) (SET g_s18_19)))) (= g_s55_57 (domain_restriction g_s19_20 g_s49_51)) (mem g_s56_58 g_s1_1) (mem g_s57_59 INTEGER) (mem g_s58_60 (|<->| INTEGER g_s1_1)) (mem g_s59_61 (|<->| INTEGER g_s1_1)) (= g_s60_62 (dom (range_subtraction (set_prod (set_prod g_s3_3 g_s1_1) (SET (mapplet g_s32_33 e0))) (SET (mapplet g_s57_59 g_s53_54))))) (= g_s61_63 (dom (range_subtraction (set_prod (set_prod g_s3_3 g_s1_1) (SET (mapplet e0 e0))) (SET (mapplet g_s57_59 g_s53_54))))) (and (|>=i| g_s57_59 e0) (|<=i| g_s57_59 g_s32_33)) (mem g_s58_60 (|-->| (interval e41 g_s32_33) g_s1_1)) (mem g_s59_61 (|-->| (interval e41 g_s32_33) g_s1_1)) (mem g_s62_64 INTEGER) (mem g_s63_65 g_s8_9) (mem g_s53_54 INTEGER) (mem (mapplet (mapplet g_s62_64 g_s63_65) g_s53_54) g_s39_40) (subset g_s52_55 (set_prod g_s3_3 g_s1_1)) (subset g_s54_56 (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17)) (subset g_s55_57 (set_prod g_s3_3 g_s1_1)) (subset g_s60_62 (set_prod g_s3_3 g_s1_1)) (subset g_s61_63 (set_prod g_s3_3 g_s1_1)) (= g_s64_66 (binary_union (binary_union (binary_union (binary_union (binary_union (set_prod (set_prod g_s52_55 g_s16_17) (SET g_s41_47)) (set_prod g_s54_56 (SET g_s42_46))) (set_prod (set_prod g_s55_57 g_s16_17) (SET g_s43_45))) (set_prod (set_prod g_s60_62 g_s16_17) (SET g_s44_44))) (set_prod (set_prod g_s61_63 g_s16_17) (SET g_s45_43))) (set_prod (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17) (SET g_s46_42)))) (mem g_s65_67 INTEGER) (mem g_s66_68 g_s3_3) (mem g_s67_69 g_s1_1) (mem g_s68_70 g_s16_17) (mem g_s69_71 g_s17_18) (mem g_s70_72 BOOL) (subset g_s64_66 (set_prod (set_prod (set_prod g_s3_3 g_s1_1) g_s16_17) g_s17_18)) (mem g_s39_40 (|-->| (set_prod (SET (mapplet e41 e0)) g_s8_9) (SET (mapplet e41 e0)))) (or (= g_s53_54 e0) (= g_s53_54 e41))))
(define-fun |def_inv| () Bool (and (= g_s65_67 g_s65$1_73) (= g_s66_68 g_s66$1_74) (= g_s67_69 g_s67$1_75) (= g_s68_70 g_s68$1_76) (= g_s69_71 g_s69$1_77) (= g_s70_72 g_s70$1_78) (= g_s49_51 g_s49$1_79) (= g_s53_54 g_s53$1_80) (= g_s56_58 g_s56$1_81) (= g_s57_59 g_s57$1_82) (= g_s58_60 g_s58$1_83) (= g_s59_61 g_s59$1_84) (= g_s50_52 g_s50$1_85) (= g_s51_53 g_s51$1_86) (subset g_s71$1_87 (set_prod g_s3_3 g_s1_1)) (subset g_s72$1_88 (set_prod g_s3_3 g_s1_1)) (= g_s47_49 (binary_union g_s71$1_87 (composition g_s71$1_87 (set_prod (SET g_s0_2) g_s1_1)))) (= g_s48_50 (binary_union g_s72$1_88 (composition g_s72$1_88 (set_prod (SET g_s0_2) g_s1_1))))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s41_47))
(define-fun lh_3 () Bool (mem g_s66$1_74 g_s19_20))
(define-fun lh_4 () Bool (=> (and (not (mem g_s67$1_75 (image g_s71$1_87 (SET g_s66$1_74)))) (not (mem g_s0_2 (image g_s71$1_87 (SET g_s66$1_74))))) (and (mem g_s66$1_74 g_s20_21) (= g_s53$1_80 e41))))
(define-fun lh_5 () Bool (not (mem (mapplet g_s66_68 g_s67_69) g_s47_49)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s66_68 g_s19_20))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s65_67 e89))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s69_71 g_s41_47))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s66_68 g_s20_21))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s53_54 e41))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s41_47))
(define-fun lh_3 () Bool (mem g_s66$1_74 g_s19_20))
(define-fun lh_4 () Bool (=> (mem g_s66$1_74 g_s20_21) (not (= g_s53$1_80 e41))))
(define-fun lh_5 () Bool (not (mem g_s67$1_75 (image g_s71$1_87 (SET g_s66$1_74)))))
(define-fun lh_6 () Bool (not (mem g_s0_2 (image g_s71$1_87 (SET g_s66$1_74)))))
(define-fun lh_7 () Bool (mem g_s66_68 g_s20_21))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (not (mem (mapplet g_s66_68 g_s67_69) g_s47_49)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem g_s66_68 g_s19_20))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s65_67 e89))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= g_s69_71 g_s41_47))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (not (= g_s53_54 e41)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s42_46))
(define-fun lh_3 () Bool (mem g_s66$1_74 g_s19_20))
(define-fun lh_4 () Bool (or (mem g_s67$1_75 (image g_s72$1_88 (SET g_s66$1_74))) (mem g_s0_2 (image g_s72$1_88 (SET g_s66$1_74)))))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s66_68 g_s19_20))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (mapplet g_s66_68 g_s67_69) g_s48_50))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s65_67 e89))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s69_71 g_s42_46))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s42_46))
(define-fun lh_3 () Bool (mem g_s66$1_74 g_s19_20))
(define-fun lh_4 () Bool (not (mem g_s67$1_75 (image g_s72$1_88 (SET g_s66$1_74)))))
(define-fun lh_5 () Bool (not (mem g_s0_2 (image g_s72$1_88 (SET g_s66$1_74)))))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (not (mem (mapplet g_s66_68 g_s67_69) g_s48_50)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s66_68 g_s19_20))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s65_67 e89))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= g_s69_71 g_s42_46))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s42_46))
(define-fun lh_3 () Bool (mem g_s66$1_74 g_s21_22))
(define-fun lh_4 () Bool (= g_s67$1_75 g_s5_6))
(define-fun lh_5 () Bool (= g_s50$1_85 FALSE))
(define-fun lh_6 () Bool (mem g_s71$2_90 (|<->| g_s3_3 g_s1_1)))
(define-fun lh_7 () Bool (mem g_s72$2_91 (|<->| g_s3_3 g_s1_1)))
(define-fun lh_8 () Bool (mem g_s49$2_92 (|<->| g_s3_3 g_s1_1)))
(define-fun lh_9 () Bool (mem g_s51$2_93 (POW g_s1_1)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s66_68 g_s21_22))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (binary_union g_s71$2_90 (composition g_s71$2_90 (set_prod (SET g_s0_2) g_s1_1))) (|<->| g_s3_3 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (binary_union g_s72$2_91 (composition g_s72$2_91 (set_prod (SET g_s0_2) g_s1_1))) (|<->| g_s3_3 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (subset g_s71$2_90 (set_prod g_s3_3 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (subset g_s72$2_91 (set_prod g_s3_3 g_s1_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s67_69 g_s5_6))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s50_52 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s65_67 e89))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s69_71 g_s42_46))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s65$1_73 e89))
(define-fun lh_2 () Bool (= g_s69$1_77 g_s45_43))
(define-fun lh_3 () Bool (= g_s53$1_80 e0))
(define-fun lh_4 () Bool (|<i| e0 g_s57$1_82))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s57$1_82 (dom g_s58$1_83)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s57$1_82 (dom g_s59$1_84)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s58$1_83 (|+->| (dom g_s58$1_83) (ran g_s58$1_83))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s59$1_84 (|+->| (dom g_s59$1_84) (ran g_s59$1_84))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)