(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e178 () U)
(declare-fun e0 () U)
(declare-fun e54 () U)
(declare-fun e51 () U)
(declare-fun e53 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_104 () U)
(declare-fun g_s101_105 () U)
(declare-fun g_s102_106 () U)
(declare-fun g_s103_107 () U)
(declare-fun g_s104_109 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_110 () U)
(declare-fun g_s107_111 () U)
(declare-fun g_s108_112 () U)
(declare-fun g_s109_113 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_114 () U)
(declare-fun g_s111_115 () U)
(declare-fun g_s112_116 () U)
(declare-fun g_s113_117 () U)
(declare-fun g_s114_118 () U)
(declare-fun g_s115_119 () U)
(declare-fun g_s116_120 () U)
(declare-fun g_s117_121 () U)
(declare-fun g_s118_122 () U)
(declare-fun g_s119_123 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_124 () U)
(declare-fun g_s121_125 () U)
(declare-fun g_s122_126 () U)
(declare-fun g_s123_127 () U)
(declare-fun g_s124_128 () U)
(declare-fun g_s125_129 () U)
(declare-fun g_s126_130 () U)
(declare-fun g_s127_131 () U)
(declare-fun g_s128_132 () U)
(declare-fun g_s129_133 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_134 () U)
(declare-fun g_s131_135 () U)
(declare-fun g_s132_136 () U)
(declare-fun g_s133_138 () U)
(declare-fun g_s134_137 () U)
(declare-fun g_s135_139 () U)
(declare-fun g_s136_140 () U)
(declare-fun g_s137_141 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_144 () U)
(declare-fun g_s141_145 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_147 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_149 () U)
(declare-fun g_s146_150 () U)
(declare-fun g_s147_151 () U)
(declare-fun g_s148_152 () U)
(declare-fun g_s149_153 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_154 () U)
(declare-fun g_s151_155 () U)
(declare-fun g_s152_156 () U)
(declare-fun g_s153_157 () U)
(declare-fun g_s154_158 () U)
(declare-fun g_s155_159 () U)
(declare-fun g_s156_160 () U)
(declare-fun g_s157_161 () U)
(declare-fun g_s158_162 () U)
(declare-fun g_s159_163 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_164 () U)
(declare-fun g_s161_165 () U)
(declare-fun g_s162_166 () U)
(declare-fun g_s163_167 () U)
(declare-fun g_s164_168 () U)
(declare-fun g_s165_169 () U)
(declare-fun g_s166_170 () U)
(declare-fun g_s167_171 () U)
(declare-fun g_s168_172 () U)
(declare-fun g_s169_173 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_174 () U)
(declare-fun g_s171_175 () U)
(declare-fun g_s172_176 () U)
(declare-fun g_s173_177 () U)
(declare-fun g_s174_179 () U)
(declare-fun g_s175_180 () U)
(declare-fun g_s176_181 () U)
(declare-fun g_s177_182 () U)
(declare-fun g_s178_183 () U)
(declare-fun g_s179_184 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_185 () U)
(declare-fun g_s181_186 () U)
(declare-fun g_s182_187 () U)
(declare-fun g_s183_188 () U)
(declare-fun g_s184_189 () U)
(declare-fun g_s185_190 () U)
(declare-fun g_s186_191 () U)
(declare-fun g_s187_192 () U)
(declare-fun g_s188_193 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s193_195 () U)
(declare-fun g_s194_197 () U)
(declare-fun g_s195_199 () U)
(declare-fun g_s196_201 () U)
(declare-fun g_s197_202 () U)
(declare-fun g_s198_203 () U)
(declare-fun g_s199_204 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_205 () U)
(declare-fun g_s204_217 () U)
(declare-fun g_s204_212 () U)
(declare-fun g_s204_215 () U)
(declare-fun g_s204_206 () U)
(declare-fun g_s204$1_218 () U)
(declare-fun g_s204$1_213 () U)
(declare-fun g_s204$1_216 () U)
(declare-fun g_s204$1_207 () U)
(declare-fun g_s205_208 () U)
(declare-fun g_s206_209 () U)
(declare-fun g_s207_210 () U)
(declare-fun g_s208_211 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s211_214 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_55 () U)
(declare-fun g_s52_56 () U)
(declare-fun g_s53_57 () U)
(declare-fun g_s54_58 () U)
(declare-fun g_s55_59 () U)
(declare-fun g_s56_60 () U)
(declare-fun g_s57_61 () U)
(declare-fun g_s58_62 () U)
(declare-fun g_s59_63 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_64 () U)
(declare-fun g_s61_65 () U)
(declare-fun g_s62_66 () U)
(declare-fun g_s63_67 () U)
(declare-fun g_s64_68 () U)
(declare-fun g_s65_69 () U)
(declare-fun g_s66_70 () U)
(declare-fun g_s67_71 () U)
(declare-fun g_s68_72 () U)
(declare-fun g_s69_73 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_74 () U)
(declare-fun g_s71_75 () U)
(declare-fun g_s72_77 () U)
(declare-fun g_s73_76 () U)
(declare-fun g_s74_78 () U)
(declare-fun g_s75_79 () U)
(declare-fun g_s76_80 () U)
(declare-fun g_s77_81 () U)
(declare-fun g_s78_82 () U)
(declare-fun g_s79_83 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_84 () U)
(declare-fun g_s81_85 () U)
(declare-fun g_s82_86 () U)
(declare-fun g_s83_87 () U)
(declare-fun g_s84_88 () U)
(declare-fun g_s85_89 () U)
(declare-fun g_s86_90 () U)
(declare-fun g_s87_92 () U)
(declare-fun g_s88_91 () U)
(declare-fun g_s89_93 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_94 () U)
(declare-fun g_s91_95 () U)
(declare-fun g_s92_96 () U)
(declare-fun g_s93_97 () U)
(declare-fun g_s94_98 () U)
(declare-fun g_s95_99 () U)
(declare-fun g_s96_100 () U)
(declare-fun g_s97_101 () U)
(declare-fun g_s98_102 () U)
(declare-fun g_s99_103 () U)
(declare-fun e194 () U)
(declare-fun e196 () U)
(declare-fun e198 () U)
(declare-fun e200 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))))))))))))))) (not (= g_s20_21 empty)) (not (= g_s21_22 empty)) (not (= g_s22_23 empty)) (not (= g_s23_24 empty)) (not (= g_s24_25 empty)) (not (= g_s25_26 empty)) (not (= g_s26_27 empty)) (not (= g_s27_28 empty)) (not (= g_s28_29 empty)) (subset g_s29_30 g_s20_21) (subset g_s30_31 g_s21_22) (subset g_s31_32 g_s27_28) (subset g_s32_33 g_s22_23) (mem g_s33_34 g_s22_23) (mem g_s33_34 g_s32_33) (mem g_s34_35 g_s22_23) (not (mem g_s34_35 g_s32_33)) (subset g_s35_36 g_s23_24) (mem g_s36_37 g_s23_24) (mem g_s36_37 g_s35_36) (mem g_s37_38 g_s23_24) (not (mem g_s37_38 g_s35_36)) (subset g_s38_39 g_s24_25) (mem g_s39_40 g_s24_25) (mem g_s39_40 g_s38_39) (mem g_s40_41 g_s24_25) (not (mem g_s40_41 g_s38_39)) (subset g_s41_42 g_s25_26) (mem g_s42_43 g_s25_26) (mem g_s42_43 g_s41_42) (mem g_s43_44 g_s25_26) (not (mem g_s43_44 g_s41_42)) (subset g_s44_45 g_s26_27) (mem g_s45_46 g_s20_21) (not (mem g_s45_46 g_s29_30)) (mem g_s46_47 g_s21_22) (not (mem g_s46_47 g_s30_31)) (subset g_s47_48 g_s28_29) (mem g_s48_49 g_s28_29) (not (mem g_s48_49 g_s47_48)) (mem g_s49_50 g_s28_29) (mem g_s49_50 g_s47_48) (= g_s50_52 (SET (mapplet e51 e0))) (= g_s51_55 (interval e54 e53)) (mem g_s52_56 (perm g_s29_30)) (|>=i| (size g_s52_56) e54) (|<i| (size g_s52_56) MaxInt) (mem g_s53_57 (perm g_s30_31)) (|>=i| (size g_s53_57) e54) (|<i| (size g_s53_57) MaxInt) (mem g_s54_58 (|>->>| g_s30_31 g_s29_30)) (= g_s54_58 (composition (inverse g_s53_57) g_s52_56)) (mem g_s55_59 (perm g_s32_33)) (|<i| (size g_s55_59) MaxInt) (mem g_s56_60 (perm g_s35_36)) (|<i| (size g_s56_60) MaxInt) (mem g_s57_61 (|>->>| g_s32_33 g_s35_36)) (= g_s57_61 (composition (inverse g_s55_59) g_s56_60)) (mem g_s58_62 (perm g_s38_39)) (|<i| (size g_s58_62) MaxInt) (mem g_s59_63 (perm g_s41_42)) (|<i| (size g_s59_63) MaxInt) (mem g_s60_64 (|>->>| g_s41_42 g_s38_39)) (= g_s60_64 (composition (inverse g_s59_63) g_s58_62)) (mem g_s61_65 (perm g_s31_32)) (|<i| (size g_s61_65) MaxInt) (mem g_s62_66 (perm g_s44_45)) (|<i| (size g_s62_66) MaxInt) (mem g_s63_67 (perm g_s47_48)) (= g_s64_68 (|-->| g_s22_23 g_s24_25)) (mem g_s65_69 g_s64_68) (= g_s65_69 (set_prod g_s22_23 (SET g_s40_41))) (= g_s66_70 (|-->| g_s25_26 g_s28_29)) (mem g_s67_71 g_s66_70) (= g_s67_71 (set_prod g_s25_26 (SET g_s48_49))) (= g_s68_72 (|-->| g_s28_29 g_s28_29)) (mem g_s69_73 g_s68_72) (= g_s69_73 (set_prod g_s28_29 (SET g_s48_49))) (= g_s70_74 (|-->| g_s28_29 g_s23_24)) (mem g_s71_75 g_s70_74) (= g_s71_75 (set_prod g_s28_29 (SET g_s37_38))) (= g_s72_77 (|-->| g_s20_21 g_s73_76)) (mem g_s74_78 g_s72_77) (= g_s75_79 (|-->| g_s20_21 g_s20_21)) (mem g_s76_80 g_s75_79) (= g_s76_80 (set_prod g_s20_21 (SET g_s45_46))) (= g_s77_81 (|-->| g_s21_22 g_s21_22)) (mem g_s78_82 g_s77_81) (= g_s78_82 (set_prod g_s21_22 (SET g_s46_47))) (= g_s79_83 (|-->| g_s21_22 g_s20_21)) (mem g_s80_84 g_s79_83) (= g_s80_84 (set_prod g_s21_22 (SET g_s45_46))) (= g_s81_85 (|-->| g_s21_22 g_s23_24)) (mem g_s82_86 g_s81_85) (= g_s82_86 (set_prod g_s21_22 (SET g_s37_38))) (= g_s83_87 (|-->| g_s26_27 g_s20_21)) (mem g_s84_88 g_s83_87) (= g_s84_88 (set_prod g_s26_27 (SET g_s45_46))) (= g_s85_89 (|-->| g_s26_27 g_s24_25)) (mem g_s86_90 g_s85_89) (= g_s86_90 (set_prod g_s26_27 (SET g_s40_41))) (= g_s87_92 (|-->| g_s26_27 g_s88_91)) (mem g_s89_93 g_s87_92) (= g_s90_94 (|-->| g_s24_25 g_s24_25)) (mem g_s91_95 g_s90_94) (= g_s91_95 (set_prod g_s24_25 (SET g_s40_41))) (= g_s92_96 (|-->| g_s25_26 g_s24_25)) (mem g_s93_97 g_s92_96) (= g_s93_97 (set_prod g_s25_26 (SET g_s40_41))) (= g_s94_98 (|-->| g_s25_26 g_s25_26)) (mem g_s95_99 g_s94_98) (= g_s95_99 (set_prod g_s25_26 (SET g_s43_44))) (= g_s96_100 (|-->| g_s23_24 g_s22_23)) (mem g_s97_101 g_s96_100) (= g_s97_101 (set_prod g_s23_24 (SET g_s34_35))) (= g_s98_102 (|-->| g_s25_26 INT)) (mem g_s99_103 g_s98_102) (= g_s99_103 (set_prod g_s25_26 (SET e0))) (= g_s100_104 (|-->| (dom g_s52_56) g_s20_21)) (mem g_s101_105 g_s100_104) (= g_s102_106 (|-->| (dom g_s53_57) g_s21_22)) (mem g_s103_107 g_s102_106) (= g_s104_109 (|-->| (dom g_s52_56) g_s105_108)) (mem g_s106_110 g_s104_109) (= g_s107_111 (|-->| (dom g_s55_59) g_s22_23)) (mem g_s108_112 g_s107_111) (= g_s109_113 (|-->| (dom g_s56_60) g_s23_24)) (mem g_s110_114 g_s109_113) (= g_s111_115 (|-->| (dom g_s58_62) g_s24_25)) (mem g_s112_116 g_s111_115) (= g_s113_117 (|-->| (dom g_s59_63) g_s25_26)) (mem g_s114_118 g_s113_117) (= g_s115_119 (|-->| (dom g_s63_67) g_s28_29)) (mem g_s116_120 g_s115_119) (= g_s117_121 (|-->| g_s24_25 BOOL)) (= g_s118_122 (|-->| g_s24_25 NAT)) (mem g_s119_123 g_s117_121) (= g_s119_123 (set_prod g_s24_25 (SET FALSE))) (mem g_s120_124 g_s118_122) (= g_s121_125 (|-->| g_s25_26 BOOL)) (mem g_s122_126 g_s121_125) (= g_s122_126 (set_prod g_s25_26 (SET FALSE))) (= g_s123_127 (|-->| g_s24_25 g_s22_23)) (mem g_s124_128 g_s123_127) (= g_s125_129 (|-->| g_s25_26 g_s23_24)) (mem g_s126_130 g_s125_129) (= g_s126_130 (set_prod g_s25_26 (SET g_s37_38))) (= g_s127_131 (|-->| g_s24_25 g_s88_91)) (mem g_s128_132 g_s127_131) (= g_s129_133 (|-->| g_s24_25 g_s0_1)) (mem g_s130_134 g_s129_133) (= g_s131_135 (|-->| g_s25_26 g_s3_4)) (mem g_s132_136 g_s131_135) (= g_s132_136 (set_prod g_s25_26 (SET g_s4_5))) (= g_s133_138 (|-->| g_s21_22 g_s134_137)) (mem g_s135_139 g_s133_138) (= g_s135_139 (set_prod g_s21_22 (SET g_s136_140))) (= g_s137_141 (|-->| g_s134_137 NAT)) (= g_s138_142 (|-->| g_s22_23 g_s105_108)) (mem g_s139_143 g_s138_142) (= g_s140_144 (|-->| g_s22_23 g_s20_21)) (mem g_s141_145 g_s140_144) (= g_s142_146 (|-->| g_s23_24 g_s21_22)) (mem g_s143_147 g_s142_146) (= g_s143_147 (set_prod g_s23_24 (SET g_s46_47))) (= g_s144_148 (|-->| g_s23_24 g_s25_26)) (mem g_s145_149 g_s144_148) (= g_s145_149 (set_prod g_s23_24 (SET g_s43_44))) (= g_s146_150 (|-->| g_s23_24 g_s23_24)) (mem g_s147_151 g_s146_150) (= g_s147_151 (set_prod g_s23_24 (SET g_s37_38))) (mem g_s148_152 NAT1) (|<i| g_s148_152 MaxInt) (mem g_s149_153 NAT1) (|<i| g_s149_153 MaxInt) (mem g_s150_154 NAT1) (|<i| g_s150_154 MaxInt) (mem g_s151_155 NAT) (|<i| g_s151_155 MaxInt) (mem g_s152_156 NAT) (|<i| g_s152_156 MaxInt) (mem g_s153_157 NAT) (|<i| g_s153_157 MaxInt) (mem g_s154_158 NAT) (|<i| g_s154_158 MaxInt) (= g_s155_159 (|-->| g_s22_23 (|-->| (interval e54 g_s148_152) g_s24_25))) (mem g_s156_160 g_s155_159) (= g_s157_161 (|-->| (interval e54 g_s149_153) g_s25_26)) (mem g_s158_162 g_s157_161) (= g_s159_163 (|-->| (interval e54 g_s151_155) g_s25_26)) (mem g_s160_164 g_s159_163) (= g_s161_165 (|-->| (interval e54 g_s154_158) g_s21_22)) (mem g_s162_166 g_s161_165) (= g_s163_167 (|-->| (interval e54 g_s152_156) g_s23_24)) (mem g_s164_168 g_s163_167) (= g_s165_169 (|-->| (interval e54 g_s153_157) g_s25_26)) (mem g_s166_170 g_s165_169) (= g_s167_171 (|-->| (interval e54 g_s153_157) g_s23_24)) (mem g_s168_172 g_s167_171) (= g_s169_173 (|-->| g_s22_23 NAT)) (mem g_s170_174 g_s169_173) (= g_s170_174 (set_prod g_s22_23 (SET e0))) (= g_s171_175 (|-->| g_s23_24 INT)) (= g_s172_176 (|-->| g_s23_24 BOOL)) (mem g_s173_177 g_s171_175) (= g_s173_177 (set_prod g_s23_24 (SET e178))) (mem g_s174_179 g_s172_176) (= g_s174_179 (set_prod g_s23_24 (SET FALSE))) (mem g_s175_180 NAT1) (|<=i| g_s175_180 (size g_s55_59)) (mem g_s176_181 NAT1) (|<=i| g_s176_181 (size g_s56_60)) (= g_s177_182 (|-->| g_s20_21 (|-->| (interval e54 g_s175_180) g_s22_23))) (mem g_s178_183 g_s177_182) (= g_s179_184 (|-->| g_s20_21 INT)) (mem g_s180_185 g_s179_184) (= g_s180_185 (set_prod g_s20_21 (SET e0))) (= g_s181_186 (|-->| g_s21_22 INT)) (mem g_s182_187 g_s181_186) (= g_s182_187 (set_prod g_s21_22 (SET e0))) (= g_s183_188 (id g_s50_52))))
(define-fun |def_seext| () Bool  (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (subset g_s184_189 g_s3_4) (subset g_s185_190 g_s3_4) (subset g_s186_191 g_s3_4) (mem g_s187_192 (|-->| (set_prod (set_prod (set_prod g_s0_1 BOOL) BOOL) g_s50_52) g_s3_4)) (mem g_s188_193 (|-->| g_s3_4 g_s0_1)) (= (composition g_s187_192 g_s188_193) e194) (= g_s185_190 (image (inverse g_s188_193) (SET g_s1_2))) (= g_s186_191 (image (inverse g_s188_193) (SET g_s2_3))) (mem g_s193_195 (|-->| g_s3_4 BOOL)) (= (composition g_s187_192 g_s193_195) e196) (mem g_s194_197 (|-->| g_s3_4 BOOL)) (= (composition g_s187_192 g_s194_197) e198) (= g_s184_189 (image (inverse g_s194_197) (SET TRUE))) (mem g_s195_199 (|-->| g_s3_4 g_s50_52)) (= (composition g_s187_192 g_s195_199) e200) (mem g_s196_201 (|-->| g_s3_4 g_s3_4)) (= (ran (composition g_s196_201 g_s193_195)) (SET TRUE)) (= (composition g_s196_201 g_s188_193) g_s188_193) (= (composition g_s196_201 g_s194_197) g_s194_197) (= (composition g_s196_201 g_s195_199) g_s195_199) (mem g_s197_202 (|-->| g_s3_4 g_s3_4)) (= (ran (composition g_s197_202 g_s194_197)) (SET FALSE)) (= (composition g_s197_202 g_s188_193) g_s188_193) (= (composition g_s197_202 g_s193_195) g_s193_195) (= (composition g_s197_202 g_s195_199) g_s195_199) (mem g_s198_203 (|-->| g_s3_4 g_s3_4)) (= (ran (composition g_s198_203 g_s194_197)) (SET TRUE)) (= (composition g_s198_203 g_s188_193) g_s188_193) (= (composition g_s198_203 g_s193_195) g_s193_195) (= (composition g_s198_203 g_s195_199) g_s195_199) (mem g_s199_204 (|-->| g_s3_4 g_s3_4)) (= (ran (composition g_s199_204 g_s195_199)) (SET e51)) (= (composition g_s199_204 g_s188_193) g_s188_193) (= (composition g_s199_204 g_s193_195) g_s193_195) (= (composition g_s199_204 g_s194_197) g_s194_197) (mem g_s200_205 (|-->| g_s3_4 g_s3_4)) (= (ran (composition g_s200_205 g_s195_199)) (SET e0)) (= (composition g_s200_205 g_s188_193) g_s188_193) (= (composition g_s200_205 g_s193_195) g_s193_195) (= (composition g_s200_205 g_s194_197) g_s194_197)))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s184_189 (SET (mapplet g_s18_19 (mapplet g_s16_17 (mapplet g_s14_15 (mapplet g_s12_13 (mapplet g_s10_11 (mapplet g_s8_9 (mapplet g_s6_7 g_s4_5))))))))) (= g_s185_190 (SET (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))))))) (= g_s186_191 (SET (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 g_s8_9))))))))) (= g_s188_193 (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (= g_s193_195 (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) (= g_s194_197 (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) (= g_s195_199 (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0)))))))))))))))))) (= g_s196_201 (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5)))))))))))))))))) (= g_s197_202 (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6)))))))))))))))))) (= g_s198_203 (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5)))))))))))))))))) (= g_s199_204 (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13)))))))))))))))))) (= g_s200_205 (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5)))))))))))))))))) (= g_s187_192 (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))) (|-->| g_s3_4 BOOL))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))) (|-->| g_s3_4 g_s50_52))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))) (|-->| g_s3_4 g_s0_1))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5))))))))))))))))) (|-->| g_s3_4 g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (|-->| g_s3_4 g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (|-->| g_s3_4 g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13))))))))))))))))) (|-->| g_s3_4 g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6))))))))))))))))) (|-->| g_s3_4 g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))) (|-->| g_s3_4 BOOL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))) (|-->| (set_prod (set_prod (set_prod g_s0_1 BOOL) BOOL) g_s50_52) g_s3_4))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (subset (SET (mapplet g_s18_19 (mapplet g_s16_17 (mapplet g_s14_15 (mapplet g_s12_13 (mapplet g_s10_11 (mapplet g_s8_9 (mapplet g_s6_7 g_s4_5)))))))) g_s3_4)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (subset (SET (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5)))))))) g_s3_4)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (subset (SET (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 g_s8_9)))))))) g_s3_4)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (= (ran (composition (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))))) (SET TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (= (ran (composition (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))))) (SET e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (= (ran (composition (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))))) (SET TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 0
(push 1)
(assert (not (= (ran (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))))) (SET e51))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 0
(push 1)
(assert (not (= (ran (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))))) (SET FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s18_19) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s16_17) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s14_15) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s12_13) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s10_11) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s8_9) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s6_7) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s4_5) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s11_12) (mapplet (mapplet g_s18_19 g_s10_11) (mapplet (mapplet g_s17_18 g_s9_10) (mapplet (mapplet g_s16_17 g_s8_9) (mapplet (mapplet g_s15_16 g_s7_8) (mapplet (mapplet g_s14_15 g_s6_7) (mapplet (mapplet g_s13_14 g_s5_6) (mapplet (mapplet g_s12_13 g_s4_5) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s10_11) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s6_7) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s17_18) (mapplet (mapplet g_s18_19 g_s16_17) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s13_14) (mapplet (mapplet g_s14_15 g_s12_13) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s9_10) (mapplet (mapplet g_s10_11 g_s8_9) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s8_9) (mapplet (mapplet g_s7_8 g_s5_6) (mapplet (mapplet g_s6_7 g_s4_5) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s18_19) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s16_17) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s14_15) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s12_13) (mapplet (mapplet g_s11_12 g_s19_20) (mapplet (mapplet g_s10_11 g_s18_19) (mapplet (mapplet g_s9_10 g_s17_18) (mapplet (mapplet g_s8_9 g_s16_17) (mapplet (mapplet g_s7_8 g_s15_16) (mapplet (mapplet g_s6_7 g_s14_15) (mapplet (mapplet g_s5_6 g_s13_14) (mapplet g_s4_5 g_s12_13))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet g_s19_20 g_s19_20) (mapplet (mapplet g_s18_19 g_s19_20) (mapplet (mapplet g_s17_18 g_s17_18) (mapplet (mapplet g_s16_17 g_s17_18) (mapplet (mapplet g_s15_16 g_s15_16) (mapplet (mapplet g_s14_15 g_s15_16) (mapplet (mapplet g_s13_14 g_s13_14) (mapplet (mapplet g_s12_13 g_s13_14) (mapplet (mapplet g_s11_12 g_s11_12) (mapplet (mapplet g_s10_11 g_s11_12) (mapplet (mapplet g_s9_10 g_s9_10) (mapplet (mapplet g_s8_9 g_s9_10) (mapplet (mapplet g_s7_8 g_s7_8) (mapplet (mapplet g_s6_7 g_s7_8) (mapplet (mapplet g_s5_6 g_s5_6) (mapplet g_s4_5 g_s5_6))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) e198)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 e51) (mapplet (mapplet g_s18_19 e51) (mapplet (mapplet g_s17_18 e51) (mapplet (mapplet g_s16_17 e51) (mapplet (mapplet g_s15_16 e51) (mapplet (mapplet g_s14_15 e51) (mapplet (mapplet g_s13_14 e51) (mapplet (mapplet g_s12_13 e51) (mapplet (mapplet g_s11_12 e0) (mapplet (mapplet g_s10_11 e0) (mapplet (mapplet g_s9_10 e0) (mapplet (mapplet g_s8_9 e0) (mapplet (mapplet g_s7_8 e0) (mapplet (mapplet g_s6_7 e0) (mapplet (mapplet g_s5_6 e0) (mapplet g_s4_5 e0)))))))))))))))))) e200)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) e194)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 0
(push 1)
(assert (not (= (composition (SET (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e51) g_s19_20) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e51) g_s18_19) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e51) g_s17_18) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e51) g_s16_17) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e51) g_s15_16) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e51) g_s14_15) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e51) g_s13_14) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e51) g_s12_13) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) FALSE) e0) g_s11_12) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 FALSE) TRUE) e0) g_s10_11) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) FALSE) e0) g_s9_10) (mapplet (mapplet (mapplet (mapplet (mapplet g_s2_3 TRUE) TRUE) e0) g_s8_9) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) FALSE) e0) g_s7_8) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 FALSE) TRUE) e0) g_s6_7) (mapplet (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) FALSE) e0) g_s5_6) (mapplet (mapplet (mapplet (mapplet g_s1_2 TRUE) TRUE) e0) g_s4_5))))))))))))))))) (SET (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 FALSE) (mapplet (mapplet g_s9_10 TRUE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 FALSE) (mapplet (mapplet g_s5_6 TRUE) (mapplet (mapplet g_s4_5 TRUE) (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 FALSE) (mapplet (mapplet g_s17_18 TRUE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 FALSE) (mapplet (mapplet g_s13_14 TRUE) (mapplet g_s12_13 TRUE)))))))))))))))))) e196)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 0
(push 1)
(assert (not (= (SET (mapplet g_s18_19 (mapplet g_s16_17 (mapplet g_s14_15 (mapplet g_s12_13 (mapplet g_s10_11 (mapplet g_s8_9 (mapplet g_s6_7 g_s4_5)))))))) (image (inverse (SET (mapplet (mapplet g_s19_20 FALSE) (mapplet (mapplet g_s18_19 TRUE) (mapplet (mapplet g_s17_18 FALSE) (mapplet (mapplet g_s16_17 TRUE) (mapplet (mapplet g_s15_16 FALSE) (mapplet (mapplet g_s14_15 TRUE) (mapplet (mapplet g_s13_14 FALSE) (mapplet (mapplet g_s12_13 TRUE) (mapplet (mapplet g_s11_12 FALSE) (mapplet (mapplet g_s10_11 TRUE) (mapplet (mapplet g_s9_10 FALSE) (mapplet (mapplet g_s8_9 TRUE) (mapplet (mapplet g_s7_8 FALSE) (mapplet (mapplet g_s6_7 TRUE) (mapplet (mapplet g_s5_6 FALSE) (mapplet g_s4_5 TRUE)))))))))))))))))) (SET TRUE)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 0
(push 1)
(assert (not (= (SET (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5)))))))) (image (inverse (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET g_s1_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 0
(push 1)
(assert (not (= (SET (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 g_s8_9)))))))) (image (inverse (SET (mapplet (mapplet g_s19_20 g_s2_3) (mapplet (mapplet g_s18_19 g_s2_3) (mapplet (mapplet g_s17_18 g_s2_3) (mapplet (mapplet g_s16_17 g_s2_3) (mapplet (mapplet g_s15_16 g_s1_2) (mapplet (mapplet g_s14_15 g_s1_2) (mapplet (mapplet g_s13_14 g_s1_2) (mapplet (mapplet g_s12_13 g_s1_2) (mapplet (mapplet g_s11_12 g_s2_3) (mapplet (mapplet g_s10_11 g_s2_3) (mapplet (mapplet g_s9_10 g_s2_3) (mapplet (mapplet g_s8_9 g_s2_3) (mapplet (mapplet g_s7_8 g_s1_2) (mapplet (mapplet g_s6_7 g_s1_2) (mapplet (mapplet g_s5_6 g_s1_2) (mapplet g_s4_5 g_s1_2)))))))))))))))))) (SET g_s2_3)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s205_208 g_s0_1))
(define-fun lh_2 () Bool (mem g_s206_209 BOOL))
(define-fun lh_3 () Bool (mem g_s207_210 BOOL))
(define-fun lh_4 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_5 () Bool (mem g_s208_211 g_s50_52))
(define-fun lh_6 () Bool (= g_s205_208 g_s1_2))
(define-fun lh_7 () Bool (= g_s206_209 TRUE))
(define-fun lh_8 () Bool (= g_s207_210 TRUE))
(define-fun lh_9 () Bool (= g_s208_211 e0))
(define-fun lh_10 () Bool (= g_s205_208 g_s2_3))
(define-fun lh_11 () Bool (not (= g_s205_208 g_s1_2)))
(define-fun lh_12 () Bool (not (= g_s205_208 g_s2_3)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_11 lh_12) (= g_s204$1_207 (apply g_s187_192 (mapplet (mapplet (mapplet g_s205_208 g_s206_209) g_s207_210) g_s208_211))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= g_s4_5 (apply g_s187_192 (mapplet (mapplet (mapplet g_s205_208 g_s206_209) g_s207_210) g_s208_211))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_7 lh_8 lh_9 lh_10) (= g_s8_9 (apply g_s187_192 (mapplet (mapplet (mapplet g_s205_208 g_s206_209) g_s207_210) g_s208_211))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_213 g_s204_212))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_212 BOOL))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s5_6))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s5_6)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= TRUE (apply g_s194_197 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= FALSE (apply g_s194_197 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_213 (apply g_s194_197 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_216 g_s204_215))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_215 g_s0_1))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s9_10)))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s1_2 (apply g_s188_193 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s2_3 (apply g_s188_193 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_216 (apply g_s188_193 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s6_7))
(define-fun lh_5 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_6 () Bool (= g_s211_214 g_s11_12))
(define-fun lh_7 () Bool (= g_s211_214 g_s12_13))
(define-fun lh_8 () Bool (= g_s211_214 g_s14_15))
(define-fun lh_9 () Bool (= g_s211_214 g_s17_18))
(define-fun lh_10 () Bool (= g_s211_214 g_s19_20))
(define-fun lh_11 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_12 () Bool (not (= g_s211_214 g_s6_7)))
(define-fun lh_13 () Bool (not (= g_s211_214 g_s9_10)))
(define-fun lh_14 () Bool (not (= g_s211_214 g_s11_12)))
(define-fun lh_15 () Bool (not (= g_s211_214 g_s12_13)))
(define-fun lh_16 () Bool (not (= g_s211_214 g_s14_15)))
(define-fun lh_17 () Bool (not (= g_s211_214 g_s17_18)))
(define-fun lh_18 () Bool (not (= g_s211_214 g_s19_20)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s7_8 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s15_16 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s5_6 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s13_14 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s11_12 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s19_20 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s9_10 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (= g_s17_18 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (= g_s204$1_207 (apply g_s197_202 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s6_7))
(define-fun lh_5 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_6 () Bool (= g_s211_214 g_s11_12))
(define-fun lh_7 () Bool (= g_s211_214 g_s12_13))
(define-fun lh_8 () Bool (= g_s211_214 g_s14_15))
(define-fun lh_9 () Bool (= g_s211_214 g_s17_18))
(define-fun lh_10 () Bool (= g_s211_214 g_s19_20))
(define-fun lh_11 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_12 () Bool (not (= g_s211_214 g_s6_7)))
(define-fun lh_13 () Bool (not (= g_s211_214 g_s9_10)))
(define-fun lh_14 () Bool (not (= g_s211_214 g_s11_12)))
(define-fun lh_15 () Bool (not (= g_s211_214 g_s12_13)))
(define-fun lh_16 () Bool (not (= g_s211_214 g_s14_15)))
(define-fun lh_17 () Bool (not (= g_s211_214 g_s17_18)))
(define-fun lh_18 () Bool (not (= g_s211_214 g_s19_20)))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s6_7 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s14_15 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s4_5 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s12_13 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s10_11 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s18_19 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s8_9 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (= g_s16_17 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (= g_s204$1_207 (apply g_s198_203 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s5_6))
(define-fun lh_5 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_6 () Bool (= g_s211_214 g_s8_9))
(define-fun lh_7 () Bool (= g_s211_214 g_s12_13))
(define-fun lh_8 () Bool (= g_s211_214 g_s13_14))
(define-fun lh_9 () Bool (= g_s211_214 g_s17_18))
(define-fun lh_10 () Bool (= g_s211_214 g_s16_17))
(define-fun lh_11 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_12 () Bool (not (= g_s211_214 g_s5_6)))
(define-fun lh_13 () Bool (not (= g_s211_214 g_s9_10)))
(define-fun lh_14 () Bool (not (= g_s211_214 g_s8_9)))
(define-fun lh_15 () Bool (not (= g_s211_214 g_s12_13)))
(define-fun lh_16 () Bool (not (= g_s211_214 g_s13_14)))
(define-fun lh_17 () Bool (not (= g_s211_214 g_s17_18)))
(define-fun lh_18 () Bool (not (= g_s211_214 g_s16_17)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s4_5 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s12_13 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s5_6 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s13_14 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s8_9 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s16_17 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s9_10 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (= g_s17_18 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (= g_s204$1_207 (apply g_s196_201 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_213 g_s204_212))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_212 BOOL))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s6_7))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s6_7)))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= TRUE (apply g_s193_195 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= FALSE (apply g_s193_195 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_213 (apply g_s193_195 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_218 g_s204_217))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_217 INT))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s12_13))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s12_13)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= e0 (apply g_s195_199 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= e51 (apply g_s195_199 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_218 (apply g_s195_199 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_213 g_s204_212))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_212 BOOL))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s9_10)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= TRUE (bool (mem g_s211_214 g_s185_190))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= FALSE (bool (mem g_s211_214 g_s185_190))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_213 (bool (mem g_s211_214 g_s185_190))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_213 g_s204_212))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_212 BOOL))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s9_10)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= TRUE (bool (mem g_s211_214 g_s186_191))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= FALSE (bool (mem g_s211_214 g_s186_191))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_213 (bool (mem g_s211_214 g_s186_191))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_213 g_s204_212))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_212 BOOL))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s5_6))
(define-fun lh_5 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_6 () Bool (not (= g_s211_214 g_s5_6)))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= TRUE (bool (mem g_s211_214 g_s184_189))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= FALSE (bool (mem g_s211_214 g_s184_189))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s204$1_213 (bool (mem g_s211_214 g_s184_189))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s5_6))
(define-fun lh_5 () Bool (= g_s211_214 g_s6_7))
(define-fun lh_6 () Bool (= g_s211_214 g_s7_8))
(define-fun lh_7 () Bool (= g_s211_214 g_s8_9))
(define-fun lh_8 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_9 () Bool (= g_s211_214 g_s10_11))
(define-fun lh_10 () Bool (= g_s211_214 g_s11_12))
(define-fun lh_11 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_12 () Bool (not (= g_s211_214 g_s5_6)))
(define-fun lh_13 () Bool (not (= g_s211_214 g_s6_7)))
(define-fun lh_14 () Bool (not (= g_s211_214 g_s7_8)))
(define-fun lh_15 () Bool (not (= g_s211_214 g_s8_9)))
(define-fun lh_16 () Bool (not (= g_s211_214 g_s9_10)))
(define-fun lh_17 () Bool (not (= g_s211_214 g_s10_11)))
(define-fun lh_18 () Bool (not (= g_s211_214 g_s11_12)))
; PO 1 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s14_15 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s15_16 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s12_13 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s13_14 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (= g_s18_19 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s19_20 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s16_17 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s17_18 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (= g_s204$1_207 (apply g_s199_204 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s204$1_207 g_s204_206))
(define-fun lh_1 () Bool (mem g_s211_214 g_s3_4))
(define-fun lh_2 () Bool (mem g_s204_206 g_s3_4))
(define-fun lh_3 () Bool (= g_s211_214 g_s4_5))
(define-fun lh_4 () Bool (= g_s211_214 g_s5_6))
(define-fun lh_5 () Bool (= g_s211_214 g_s6_7))
(define-fun lh_6 () Bool (= g_s211_214 g_s7_8))
(define-fun lh_7 () Bool (= g_s211_214 g_s8_9))
(define-fun lh_8 () Bool (= g_s211_214 g_s9_10))
(define-fun lh_9 () Bool (= g_s211_214 g_s10_11))
(define-fun lh_10 () Bool (= g_s211_214 g_s11_12))
(define-fun lh_11 () Bool (not (= g_s211_214 g_s4_5)))
(define-fun lh_12 () Bool (not (= g_s211_214 g_s5_6)))
(define-fun lh_13 () Bool (not (= g_s211_214 g_s6_7)))
(define-fun lh_14 () Bool (not (= g_s211_214 g_s7_8)))
(define-fun lh_15 () Bool (not (= g_s211_214 g_s8_9)))
(define-fun lh_16 () Bool (not (= g_s211_214 g_s9_10)))
(define-fun lh_17 () Bool (not (= g_s211_214 g_s10_11)))
(define-fun lh_18 () Bool (not (= g_s211_214 g_s11_12)))
; PO 1 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5) (= g_s6_7 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6) (= g_s7_8 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s4_5 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s5_6 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_9) (= g_s10_11 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_10) (= g_s11_12 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_7) (= g_s8_9 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8) (= g_s9_10 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (= g_s204$1_207 (apply g_s200_205 g_s211_214)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)