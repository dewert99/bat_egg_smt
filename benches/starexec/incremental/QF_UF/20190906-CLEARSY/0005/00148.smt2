(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e10 () U)
(declare-fun e0 () U)
(declare-fun e79 () U)
(declare-fun e92 () U)
(declare-fun e122 () U)
(declare-fun e120 () U)
(declare-fun e173 () U)
(declare-fun e115 () U)
(declare-fun e14 () U)
(declare-fun e137 () U)
(declare-fun e74 () U)
(declare-fun e12 () U)
(declare-fun e227 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_13 () U)
(declare-fun g_s100_118 () U)
(declare-fun g_s101_119 () U)
(declare-fun g_s102_121 () U)
(declare-fun g_s103_123 () U)
(declare-fun g_s104_124 () U)
(declare-fun g_s105_125 () U)
(declare-fun g_s106_126 () U)
(declare-fun g_s107_127 () U)
(declare-fun g_s108_128 () U)
(declare-fun g_s109_129 () U)
(declare-fun g_s11_15 () U)
(declare-fun g_s110_130 () U)
(declare-fun g_s111_131 () U)
(declare-fun g_s112_132 () U)
(declare-fun g_s113_133 () U)
(declare-fun g_s114_134 () U)
(declare-fun g_s115_135 () U)
(declare-fun g_s116_136 () U)
(declare-fun g_s117_138 () U)
(declare-fun g_s118_139 () U)
(declare-fun g_s119_140 () U)
(declare-fun g_s12_16 () U)
(declare-fun g_s120_141 () U)
(declare-fun g_s121_142 () U)
(declare-fun g_s122_143 () U)
(declare-fun g_s123_144 () U)
(declare-fun g_s124_145 () U)
(declare-fun g_s125_146 () U)
(declare-fun g_s126_147 () U)
(declare-fun g_s127_148 () U)
(declare-fun g_s128_149 () U)
(declare-fun g_s129_150 () U)
(declare-fun g_s13_17 () U)
(declare-fun g_s130_151 () U)
(declare-fun g_s131_152 () U)
(declare-fun g_s132_153 () U)
(declare-fun g_s133_154 () U)
(declare-fun g_s134_155 () U)
(declare-fun g_s135_156 () U)
(declare-fun g_s136_157 () U)
(declare-fun g_s137_158 () U)
(declare-fun g_s138_159 () U)
(declare-fun g_s139_160 () U)
(declare-fun g_s14_18 () U)
(declare-fun g_s140_161 () U)
(declare-fun g_s141_162 () U)
(declare-fun g_s142_163 () U)
(declare-fun g_s143_164 () U)
(declare-fun g_s144_165 () U)
(declare-fun g_s145_166 () U)
(declare-fun g_s146_167 () U)
(declare-fun g_s147_168 () U)
(declare-fun g_s148_169 () U)
(declare-fun g_s149_170 () U)
(declare-fun g_s15_19 () U)
(declare-fun g_s150_171 () U)
(declare-fun g_s151_172 () U)
(declare-fun g_s152_175 () U)
(declare-fun g_s153_176 () U)
(declare-fun g_s154_177 () U)
(declare-fun g_s155_178 () U)
(declare-fun g_s156_179 () U)
(declare-fun g_s157_180 () U)
(declare-fun g_s158_181 () U)
(declare-fun g_s159_182 () U)
(declare-fun g_s16_20 () U)
(declare-fun g_s160_183 () U)
(declare-fun g_s161_184 () U)
(declare-fun g_s162_185 () U)
(declare-fun g_s163_186 () U)
(declare-fun g_s164_187 () U)
(declare-fun g_s165_188 () U)
(declare-fun g_s166_189 () U)
(declare-fun g_s167_190 () U)
(declare-fun g_s168_191 () U)
(declare-fun g_s169_192 () U)
(declare-fun g_s17_21 () U)
(declare-fun g_s170_193 () U)
(declare-fun g_s171_194 () U)
(declare-fun g_s172_195 () U)
(declare-fun g_s173_196 () U)
(declare-fun g_s174_197 () U)
(declare-fun g_s175_198 () U)
(declare-fun g_s176_199 () U)
(declare-fun g_s177_200 () U)
(declare-fun g_s178_201 () U)
(declare-fun g_s179_202 () U)
(declare-fun g_s18_22 () U)
(declare-fun g_s180_203 () U)
(declare-fun g_s181_204 () U)
(declare-fun g_s182_205 () U)
(declare-fun g_s183_206 () U)
(declare-fun g_s184_207 () U)
(declare-fun g_s185_208 () U)
(declare-fun g_s186_221 () U)
(declare-fun g_s186$1_209 () U)
(declare-fun g_s187_222 () U)
(declare-fun g_s187$1_210 () U)
(declare-fun g_s188_223 () U)
(declare-fun g_s188$1_211 () U)
(declare-fun g_s189_224 () U)
(declare-fun g_s189$1_212 () U)
(declare-fun g_s19_23 () U)
(declare-fun g_s194_213 () U)
(declare-fun g_s195_214 () U)
(declare-fun g_s196$1_215 () U)
(declare-fun g_s197$1_216 () U)
(declare-fun g_s198$1_217 () U)
(declare-fun g_s199$1_218 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_24 () U)
(declare-fun g_s200$1_219 () U)
(declare-fun g_s200$2_220 () U)
(declare-fun g_s204_225 () U)
(declare-fun g_s205$1_226 () U)
(declare-fun g_s21_25 () U)
(declare-fun g_s22_26 () U)
(declare-fun g_s23_27 () U)
(declare-fun g_s24_28 () U)
(declare-fun g_s25_29 () U)
(declare-fun g_s26_30 () U)
(declare-fun g_s27_31 () U)
(declare-fun g_s28_32 () U)
(declare-fun g_s29_33 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_34 () U)
(declare-fun g_s31_35 () U)
(declare-fun g_s32_36 () U)
(declare-fun g_s33_37 () U)
(declare-fun g_s34_38 () U)
(declare-fun g_s35_39 () U)
(declare-fun g_s36_40 () U)
(declare-fun g_s37_41 () U)
(declare-fun g_s38_42 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s41_63 () U)
(declare-fun g_s42_62 () U)
(declare-fun g_s43_174 () U)
(declare-fun g_s46_58 () U)
(declare-fun g_s47_59 () U)
(declare-fun g_s48_60 () U)
(declare-fun g_s49_61 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_64 () U)
(declare-fun g_s51_65 () U)
(declare-fun g_s52_66 () U)
(declare-fun g_s53_67 () U)
(declare-fun g_s54_68 () U)
(declare-fun g_s55_69 () U)
(declare-fun g_s56_70 () U)
(declare-fun g_s57_71 () U)
(declare-fun g_s58_72 () U)
(declare-fun g_s59_73 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_75 () U)
(declare-fun g_s61_76 () U)
(declare-fun g_s62_77 () U)
(declare-fun g_s63_78 () U)
(declare-fun g_s64_80 () U)
(declare-fun g_s65_81 () U)
(declare-fun g_s66_82 () U)
(declare-fun g_s67_83 () U)
(declare-fun g_s68_84 () U)
(declare-fun g_s69_85 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_86 () U)
(declare-fun g_s71_87 () U)
(declare-fun g_s72_88 () U)
(declare-fun g_s73_89 () U)
(declare-fun g_s74_90 () U)
(declare-fun g_s75_91 () U)
(declare-fun g_s76_93 () U)
(declare-fun g_s77_94 () U)
(declare-fun g_s78_95 () U)
(declare-fun g_s79_96 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_97 () U)
(declare-fun g_s81_98 () U)
(declare-fun g_s82_99 () U)
(declare-fun g_s83_100 () U)
(declare-fun g_s84_101 () U)
(declare-fun g_s85_102 () U)
(declare-fun g_s86_103 () U)
(declare-fun g_s87_104 () U)
(declare-fun g_s88_105 () U)
(declare-fun g_s89_107 () U)
(declare-fun g_s9_11 () U)
(declare-fun g_s90_106 () U)
(declare-fun g_s91_109 () U)
(declare-fun g_s92_108 () U)
(declare-fun g_s93_110 () U)
(declare-fun g_s94_111 () U)
(declare-fun g_s95_112 () U)
(declare-fun g_s96_113 () U)
(declare-fun g_s97_114 () U)
(declare-fun g_s98_116 () U)
(declare-fun g_s99_117 () U)
(declare-fun e44 () U)
(declare-fun e47 () U)
(declare-fun e45 () U)
(declare-fun e48 () U)
(declare-fun e43 () U)
(declare-fun e46 () U)
(declare-fun e49 () U)
(declare-fun e50 () U)
(declare-fun e51 () U)
(declare-fun e52 () U)
(declare-fun e53 () U)
(declare-fun e54 () U)
(declare-fun e55 () U)
(declare-fun e56 () U)
(declare-fun e57 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2)))))) (= g_s6_7 (SET (mapplet g_s8_9 g_s7_8))) (= g_s9_11 (interval e0 e10)) (= g_s10_13 (interval e0 e12)) (= g_s11_15 (interval e0 e14)) (mem g_s12_16 (|-->| (set_prod g_s9_11 g_s11_15) g_s9_11)) (mem g_s13_17 (|-->| (set_prod g_s9_11 g_s11_15) g_s9_11)) (mem g_s14_18 (|-->| g_s9_11 g_s9_11)) (mem g_s15_19 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s16_20 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s17_21 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s18_22 (|-->| (set_prod g_s10_13 g_s11_15) g_s10_13)) (mem g_s19_23 (|-->| (set_prod g_s10_13 g_s11_15) g_s10_13)) (mem g_s20_24 (|-->| g_s10_13 g_s10_13)) (mem g_s21_25 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s22_26 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s23_27 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s24_28 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s25_29 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s26_30 (|-->| g_s11_15 g_s11_15)) (mem g_s27_31 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s28_32 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s29_33 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s30_34 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s31_35 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s32_36 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s33_37 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s34_38 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s35_39 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s36_40 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s37_41 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s38_42 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (= g_s12_16 e43) (= g_s18_22 e44) (= g_s24_28 e45) (= g_s13_17 e46) (= g_s19_23 e47) (= g_s25_29 e48) (= g_s30_34 e49) (= g_s31_35 e50) (= g_s32_36 e51) (= g_s33_37 e52) (= g_s34_38 e53) (= g_s35_39 e54) (= g_s36_40 e55) (= g_s37_41 e56) (= g_s38_42 e57) (mem g_s46_58 g_s9_11) (mem g_s47_59 g_s9_11) (not (= g_s46_58 g_s47_59)) (mem g_s48_60 NAT1) (mem g_s49_61 g_s9_11) (|<i| g_s49_61 (|-i| g_s41_63 g_s42_62)) (mem g_s50_64 g_s9_11) (= g_s50_64 (|+i| g_s49_61 g_s48_60)) (mem g_s51_65 g_s9_11) (mem g_s52_66 g_s9_11) (mem g_s53_67 NAT1) (mem g_s54_68 NAT1) (mem g_s48_60 NAT1) (mem g_s55_69 g_s9_11) (mem g_s56_70 g_s9_11) (mem g_s57_71 g_s9_11) (= g_s56_70 (|+i| g_s55_69 g_s53_67)) (= g_s57_71 (|+i| g_s55_69 g_s54_68)) (mem g_s58_72 g_s10_13) (mem g_s59_73 g_s9_11) (|<=i| g_s59_73 e74) (mem g_s60_75 NAT1) (mem g_s61_76 g_s9_11) (|<i| g_s61_76 (|-i| g_s41_63 g_s42_62)) (mem g_s62_77 g_s9_11) (= g_s62_77 (|+i| g_s61_76 g_s60_75)) (mem g_s63_78 g_s9_11) (|<=i| e79 g_s63_78) (mem g_s64_80 g_s9_11) (mem g_s65_81 g_s9_11) (mem g_s66_82 g_s9_11) (|<i| g_s66_82 (|-i| g_s41_63 g_s42_62)) (mem g_s67_83 g_s9_11) (mem g_s68_84 NAT1) (= g_s67_83 (|+i| g_s66_82 g_s68_84)) (mem g_s69_85 NATURAL1) (mem g_s70_86 g_s9_11) (= g_s70_86 (|+i| g_s66_82 g_s69_85)) (mem g_s71_87 g_s9_11) (mem g_s72_88 g_s9_11) (mem g_s73_89 g_s9_11) (mem g_s74_90 g_s9_11) (mem g_s75_91 g_s10_13) (|<i| (|*i| e92 g_s75_91) g_s42_62) (mem g_s76_93 NAT1) (mem g_s77_94 g_s10_13) (mem g_s78_95 g_s10_13) (= g_s78_95 (|+i| g_s77_94 g_s76_93)) (mem g_s79_96 g_s9_11) (mem g_s80_97 g_s9_11) (mem g_s81_98 g_s9_11) (mem g_s82_99 g_s9_11) (mem g_s83_100 g_s9_11) (mem g_s84_101 g_s9_11) (mem g_s85_102 g_s9_11) (mem g_s86_103 g_s9_11) (mem g_s87_104 g_s9_11) (mem g_s88_105 g_s9_11) (mem g_s89_107 (|-->| (set_prod (set_prod (set_prod g_s9_11 (|-->| (interval e0 g_s90_106) g_s9_11)) g_s11_15) g_s9_11) g_s10_13)) (mem g_s91_109 (|-->| (set_prod (set_prod (set_prod g_s9_11 (|-->| (interval e0 g_s92_108) g_s9_11)) g_s11_15) g_s9_11) g_s10_13)) (mem g_s93_110 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (= (apply g_s93_110 (mapplet e0 e0)) e0) (mem g_s94_111 (|-->| (set_prod g_s10_13 g_s10_13) g_s10_13)) (mem g_s95_112 (|-->| (set_prod g_s11_15 g_s11_15) g_s11_15)) (mem g_s96_113 (|-->| (set_prod g_s9_11 g_s9_11) g_s9_11)) (mem g_s97_114 g_s11_15) (|<i| g_s97_114 e14) (|<=i| e115 g_s97_114) (mem g_s98_116 g_s11_15) (|<=i| e79 g_s98_116) (mem g_s99_117 g_s11_15) (|<=i| e79 g_s99_117) (mem g_s100_118 g_s11_15) (|<=i| e79 g_s100_118) (mem g_s101_119 g_s11_15) (|<=i| e120 g_s101_119) (mem g_s102_121 g_s11_15) (= g_s102_121 (|-i| g_s101_119 e79)) (|<=i| g_s102_121 e122) (mem g_s103_123 g_s9_11) (mem g_s104_124 g_s9_11) (mem g_s105_125 g_s9_11) (mem g_s106_126 g_s9_11) (mem g_s107_127 g_s9_11) (mem g_s108_128 g_s9_11) (mem g_s109_129 g_s9_11) (mem g_s110_130 g_s9_11) (mem g_s111_131 g_s9_11) (mem g_s112_132 g_s9_11) (mem g_s113_133 g_s9_11) (mem g_s114_134 g_s9_11) (mem g_s115_135 g_s9_11) (mem g_s116_136 g_s10_13) (|<=i| g_s116_136 e137) (mem g_s117_138 g_s9_11) (mem g_s118_139 NATURAL1) (mem g_s119_140 NATURAL1) (mem g_s120_141 NATURAL1) (mem g_s121_142 NATURAL1) (mem g_s122_143 NATURAL1) (mem g_s123_144 NATURAL1) (mem g_s124_145 NATURAL1) (mem g_s125_146 NATURAL1) (|<i| g_s124_145 g_s125_146) (mem g_s126_147 g_s10_13) (mem g_s127_148 g_s9_11) (mem g_s128_149 g_s9_11) (mem g_s129_150 g_s9_11) (= g_s127_148 (|+i| g_s126_147 g_s118_139)) (= g_s128_149 (|+i| g_s126_147 g_s119_140)) (= g_s129_150 (|+i| g_s126_147 g_s120_141)) (mem g_s130_151 g_s9_11) (mem g_s131_152 g_s9_11) (mem g_s132_153 g_s9_11) (mem g_s133_154 g_s9_11) (mem g_s134_155 g_s9_11) (= g_s130_151 (|+i| g_s126_147 g_s121_142)) (= g_s131_152 (|+i| g_s126_147 g_s122_143)) (= g_s132_153 (|+i| g_s126_147 g_s123_144)) (= g_s133_154 (|+i| g_s126_147 g_s125_146)) (= g_s134_155 (|-i| (|+i| g_s126_147 g_s125_146) g_s124_145)) (mem g_s135_156 g_s11_15) (|<i| g_s135_156 e14) (mem g_s136_157 g_s11_15) (|<i| g_s136_157 e14) (mem g_s137_158 g_s11_15) (mem g_s138_159 g_s11_15) (mem g_s139_160 g_s10_13) (mem g_s140_161 g_s10_13) (mem g_s141_162 g_s10_13) (mem g_s142_163 g_s10_13) (mem g_s143_164 g_s10_13) (mem g_s144_165 g_s10_13) (mem g_s145_166 g_s10_13) (mem g_s146_167 g_s11_15) (|<=i| e79 g_s146_167) (mem g_s147_168 g_s11_15) (mem g_s148_169 g_s11_15) (mem g_s149_170 g_s11_15) (mem g_s150_171 g_s11_15) (mem g_s151_172 g_s11_15) (|<=i| g_s147_168 e173) (|<=i| g_s148_169 e173) (|<=i| g_s149_170 e173) (|<=i| g_s150_171 e173) (|<=i| g_s151_172 e173) (not (= g_s147_168 g_s148_169)) (not (= g_s147_168 g_s149_170)) (not (= g_s147_168 g_s150_171)) (not (= g_s147_168 g_s151_172)) (not (= g_s148_169 g_s149_170)) (not (= g_s148_169 g_s150_171)) (not (= g_s148_169 g_s151_172)) (not (= g_s149_170 g_s150_171)) (not (= g_s149_170 g_s151_172)) (not (= g_s150_171 g_s151_172)) (mem g_s41_63 g_s9_11) (mem g_s42_62 g_s10_13) (mem g_s43_174 g_s11_15) (mem g_s152_175 g_s11_15) (mem g_s153_176 g_s11_15) (= g_s41_63 e10) (= g_s42_62 e12) (= g_s43_174 e14) (and (|>=i| g_s152_175 e0) (|<=i| g_s152_175 g_s43_174)) (and (|>=i| g_s153_176 e0) (|<=i| g_s153_176 g_s43_174)) (not (= g_s152_175 g_s153_176)) (= g_s154_177 (SET (mapplet g_s153_176 g_s152_175))) (|<=i| g_s152_175 e92) (|<=i| g_s153_176 e92) (= g_s155_178 (SET (mapplet (mapplet FALSE g_s153_176) (mapplet TRUE g_s152_175))))))
(define-fun |def_seext| () Bool (and (mem g_s156_179 g_s9_11) (mem g_s157_180 g_s9_11) (mem g_s158_181 g_s11_15) (or (= g_s158_181 e79) (= g_s158_181 e92)) (mem g_s159_182 g_s9_11) (mem g_s160_183 g_s9_11) (mem g_s161_184 g_s9_11) (mem g_s162_185 g_s9_11) (mem g_s163_186 g_s9_11) (mem g_s164_187 g_s9_11) (mem g_s165_188 (|-->| (interval e0 g_s92_108) g_s11_15)) (mem g_s166_189 g_s9_11) (mem g_s167_190 g_s9_11) (mem g_s168_191 g_s9_11) (mem g_s169_192 g_s9_11) (mem g_s170_193 g_s9_11) (mem g_s171_194 (|-->| (interval e0 e92) g_s11_15)) (mem g_s172_195 (|-->| (interval e0 e92) g_s11_15)) (mem g_s173_196 g_s10_13) (mem g_s174_197 g_s9_11) (mem g_s175_198 g_s9_11) (mem g_s176_199 g_s9_11) (mem g_s177_200 g_s9_11) (mem g_s178_201 g_s9_11) (mem g_s179_202 g_s9_11) (mem g_s180_203 g_s9_11) (mem g_s181_204 g_s9_11) (mem g_s182_205 g_s9_11) (mem g_s183_206 g_s9_11) (mem g_s184_207 g_s9_11) (mem g_s185_208 g_s9_11) (mem g_s155_178 (|+->| BOOL g_s11_15)) (mem g_s155_178 (|+->| BOOL g_s10_13)) (mem g_s155_178 (|+->| BOOL g_s9_11))))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s186$1_209 g_s10_13) (mem g_s187$1_210 g_s9_11) (mem g_s188$1_211 g_s9_11) (mem g_s189$1_212 g_s11_15)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 g_s10_13)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem e0 g_s9_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 1
(assert (not (mem e0 g_s10_13)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s194_213 g_s9_11))
(define-fun lh_2 () Bool (mem g_s195_214 g_s9_11))
(define-fun lh_3 () Bool (mem g_s196$1_215 BOOL))
(define-fun lh_4 () Bool (mem g_s197$1_216 g_s9_11))
(define-fun lh_5 () Bool (mem g_s198$1_217 g_s9_11))
(define-fun lh_6 () Bool (mem g_s199$1_218 g_s10_13))
(define-fun lh_7 () Bool (|<i| e0 g_s187$1_210))
(define-fun lh_8 () Bool (= (modulo g_s194_213 e92) (modulo g_s195_214 e92)))
(define-fun lh_9 () Bool (= g_s195_214 g_s46_58))
(define-fun lh_10 () Bool (mem g_s186$1_209 g_s10_13))
(define-fun lh_11 () Bool (mem (modulo g_s194_213 e92) g_s9_11))
(define-fun lh_12 () Bool (mem g_s200$1_219 g_s9_11))
(define-fun lh_13 () Bool (= (bool (= g_s200$1_219 g_s186$1_209)) FALSE))
(define-fun lh_14 () Bool (mem e79 g_s11_15))
(define-fun lh_15 () Bool (= g_s195_214 g_s47_59))
(define-fun lh_16 () Bool (mem g_s200$2_220 g_s9_11))
(define-fun lh_17 () Bool (= (bool (= g_s200$2_220 e0)) FALSE))
(define-fun lh_18 () Bool (mem e92 g_s11_15))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (modulo g_s194_213 e92) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (modulo g_s195_214 e92) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (mem (modulo g_s194_213 e92) g_s9_11))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13) (mem e79 g_s11_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17) (mem e92 g_s11_15))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (apply g_s31_35 (mapplet g_s187$1_210 e79)) g_s9_11))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s186_221 g_s186$1_209))
(assert (= g_s187_222 g_s187$1_210))
(assert (= g_s188_223 g_s188$1_211))
(assert (= g_s189_224 g_s189$1_212))
(define-fun lh_1 () Bool (mem g_s204_225 g_s11_15))
(define-fun lh_2 () Bool (mem g_s205$1_226 g_s9_11))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s30_34 (mapplet e227 g_s111_131)) g_s9_11))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s194_213 g_s9_11))
(assert (mem g_s195_214 g_s9_11))
(define-fun lh_1 () Bool (mem g_s196$1_215 BOOL))
(define-fun lh_2 () Bool (mem g_s197$1_216 g_s9_11))
(define-fun lh_3 () Bool (mem g_s198$1_217 g_s9_11))
(define-fun lh_4 () Bool (mem g_s199$1_218 g_s10_13))
(define-fun lh_5 () Bool (|<i| e0 g_s187$1_210))
(define-fun lh_6 () Bool (= (modulo g_s194_213 e92) (modulo g_s195_214 e92)))
(define-fun lh_7 () Bool (= g_s195_214 g_s46_58))
(define-fun lh_8 () Bool (mem g_s200$1_219 g_s9_11))
(define-fun lh_9 () Bool (not (= (bool (= g_s200$1_219 g_s186$1_209)) FALSE)))
(define-fun lh_10 () Bool (= g_s195_214 g_s47_59))
(define-fun lh_11 () Bool (mem g_s200$2_220 g_s9_11))
(define-fun lh_12 () Bool (not (= (bool (= g_s200$2_220 e0)) FALSE)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s31_35 (|+->| (dom g_s31_35) (ran g_s31_35))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (mapplet g_s187$1_210 e79) (dom g_s31_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (|<=i| e0 g_s194_213))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (|<=i| e0 g_s195_214))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (|<=i| e79 e92))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s30_34 (|+->| (dom g_s30_34) (ran g_s30_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet g_s188$1_211 e79) (dom g_s30_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s30_34 (|+->| (dom g_s30_34) (ran g_s30_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem (mapplet (apply g_s30_34 (mapplet g_s188$1_211 e79)) e79) (dom g_s30_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s205$1_226 g_s9_11))
; PO 1 in group 5
(push 1)
(assert (not (=> lh_1 (mem g_s30_34 (|+->| (dom g_s30_34) (ran g_s30_34))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> lh_1 (mem (mapplet e227 g_s111_131) (dom g_s30_34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)