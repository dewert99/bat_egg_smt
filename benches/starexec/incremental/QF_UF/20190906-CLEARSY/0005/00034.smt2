(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e254 () U)
(declare-fun e137 () U)
(declare-fun e0 () U)
(declare-fun e198 () U)
(declare-fun e149 () U)
(declare-fun e197 () U)
(declare-fun e226 () U)
(declare-fun e200 () U)
(declare-fun e358 () U)
(declare-fun e206 () U)
(declare-fun e251 () U)
(declare-fun e201 () U)
(declare-fun e318 () U)
(declare-fun e225 () U)
(declare-fun e315 () U)
(declare-fun e349 () U)
(declare-fun e316 () U)
(declare-fun e227 () U)
(declare-fun e243 () U)
(declare-fun e245 () U)
(declare-fun e241 () U)
(declare-fun e313 () U)
(declare-fun e257 () U)
(declare-fun e314 () U)
(declare-fun e276 () U)
(declare-fun e223 () U)
(declare-fun e141 () U)
(declare-fun e374 () U)
(declare-fun e277 () U)
(declare-fun e139 () U)
(declare-fun e458 () U)
(declare-fun e459 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_138 () U)
(declare-fun g_s137_140 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_144 () U)
(declare-fun g_s141_145 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_147 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_150 () U)
(declare-fun g_s146_152 () U)
(declare-fun g_s147_151 () U)
(declare-fun g_s148_154 () U)
(declare-fun g_s149_153 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_155 () U)
(declare-fun g_s151_156 () U)
(declare-fun g_s152_157 () U)
(declare-fun g_s153_158 () U)
(declare-fun g_s154_159 () U)
(declare-fun g_s155_160 () U)
(declare-fun g_s156_161 () U)
(declare-fun g_s157_162 () U)
(declare-fun g_s158_163 () U)
(declare-fun g_s159_164 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_165 () U)
(declare-fun g_s161_166 () U)
(declare-fun g_s162_167 () U)
(declare-fun g_s163_168 () U)
(declare-fun g_s164_169 () U)
(declare-fun g_s165_170 () U)
(declare-fun g_s166_171 () U)
(declare-fun g_s167_172 () U)
(declare-fun g_s168_173 () U)
(declare-fun g_s169_174 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_175 () U)
(declare-fun g_s171_176 () U)
(declare-fun g_s172_177 () U)
(declare-fun g_s173_178 () U)
(declare-fun g_s174_179 () U)
(declare-fun g_s175_180 () U)
(declare-fun g_s176_181 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s181_199 () U)
(declare-fun g_s182_202 () U)
(declare-fun g_s183_203 () U)
(declare-fun g_s184_204 () U)
(declare-fun g_s185_205 () U)
(declare-fun g_s186_207 () U)
(declare-fun g_s187_208 () U)
(declare-fun g_s188_209 () U)
(declare-fun g_s189_210 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_211 () U)
(declare-fun g_s191_212 () U)
(declare-fun g_s192_213 () U)
(declare-fun g_s193_214 () U)
(declare-fun g_s194_215 () U)
(declare-fun g_s195_216 () U)
(declare-fun g_s196_217 () U)
(declare-fun g_s197_218 () U)
(declare-fun g_s198_219 () U)
(declare-fun g_s199_220 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_221 () U)
(declare-fun g_s201_222 () U)
(declare-fun g_s202_224 () U)
(declare-fun g_s203_228 () U)
(declare-fun g_s204_229 () U)
(declare-fun g_s205_230 () U)
(declare-fun g_s206_231 () U)
(declare-fun g_s207_232 () U)
(declare-fun g_s208_233 () U)
(declare-fun g_s209_234 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_235 () U)
(declare-fun g_s211_236 () U)
(declare-fun g_s212_237 () U)
(declare-fun g_s213_238 () U)
(declare-fun g_s214_239 () U)
(declare-fun g_s215_240 () U)
(declare-fun g_s216_242 () U)
(declare-fun g_s217_244 () U)
(declare-fun g_s218_246 () U)
(declare-fun g_s219_247 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_248 () U)
(declare-fun g_s221_249 () U)
(declare-fun g_s222_250 () U)
(declare-fun g_s223_253 () U)
(declare-fun g_s224_252 () U)
(declare-fun g_s225_255 () U)
(declare-fun g_s226_256 () U)
(declare-fun g_s227_258 () U)
(declare-fun g_s228_259 () U)
(declare-fun g_s229_260 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_261 () U)
(declare-fun g_s231_262 () U)
(declare-fun g_s232_263 () U)
(declare-fun g_s233_264 () U)
(declare-fun g_s234_265 () U)
(declare-fun g_s235_266 () U)
(declare-fun g_s236_267 () U)
(declare-fun g_s237_268 () U)
(declare-fun g_s238_269 () U)
(declare-fun g_s239_270 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_271 () U)
(declare-fun g_s241_272 () U)
(declare-fun g_s242_273 () U)
(declare-fun g_s243_274 () U)
(declare-fun g_s244_275 () U)
(declare-fun g_s245_278 () U)
(declare-fun g_s246_279 () U)
(declare-fun g_s247_280 () U)
(declare-fun g_s248_281 () U)
(declare-fun g_s249_282 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_283 () U)
(declare-fun g_s251_284 () U)
(declare-fun g_s252_285 () U)
(declare-fun g_s253_286 () U)
(declare-fun g_s254_287 () U)
(declare-fun g_s255_288 () U)
(declare-fun g_s256_289 () U)
(declare-fun g_s257_290 () U)
(declare-fun g_s258_291 () U)
(declare-fun g_s259_292 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_293 () U)
(declare-fun g_s261_294 () U)
(declare-fun g_s262_295 () U)
(declare-fun g_s263_296 () U)
(declare-fun g_s264_297 () U)
(declare-fun g_s265_298 () U)
(declare-fun g_s266_299 () U)
(declare-fun g_s267_300 () U)
(declare-fun g_s268_301 () U)
(declare-fun g_s269_302 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_303 () U)
(declare-fun g_s271_304 () U)
(declare-fun g_s272_305 () U)
(declare-fun g_s273_306 () U)
(declare-fun g_s274_307 () U)
(declare-fun g_s275_308 () U)
(declare-fun g_s276_309 () U)
(declare-fun g_s277_310 () U)
(declare-fun g_s278_311 () U)
(declare-fun g_s279_312 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_317 () U)
(declare-fun g_s281_319 () U)
(declare-fun g_s282_320 () U)
(declare-fun g_s283_321 () U)
(declare-fun g_s284_322 () U)
(declare-fun g_s285_323 () U)
(declare-fun g_s286_324 () U)
(declare-fun g_s287_325 () U)
(declare-fun g_s288_326 () U)
(declare-fun g_s289_327 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_328 () U)
(declare-fun g_s291_329 () U)
(declare-fun g_s292_330 () U)
(declare-fun g_s293_331 () U)
(declare-fun g_s294_332 () U)
(declare-fun g_s295_333 () U)
(declare-fun g_s296_334 () U)
(declare-fun g_s297_335 () U)
(declare-fun g_s298_336 () U)
(declare-fun g_s299_337 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_338 () U)
(declare-fun g_s301_339 () U)
(declare-fun g_s302_340 () U)
(declare-fun g_s303_341 () U)
(declare-fun g_s304_342 () U)
(declare-fun g_s305_343 () U)
(declare-fun g_s306_344 () U)
(declare-fun g_s307_345 () U)
(declare-fun g_s308_346 () U)
(declare-fun g_s309_347 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_348 () U)
(declare-fun g_s311_350 () U)
(declare-fun g_s312_351 () U)
(declare-fun g_s313_352 () U)
(declare-fun g_s314_353 () U)
(declare-fun g_s315_354 () U)
(declare-fun g_s316_355 () U)
(declare-fun g_s317_356 () U)
(declare-fun g_s318_357 () U)
(declare-fun g_s319_359 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_360 () U)
(declare-fun g_s321_361 () U)
(declare-fun g_s322_362 () U)
(declare-fun g_s323_363 () U)
(declare-fun g_s324_364 () U)
(declare-fun g_s325_365 () U)
(declare-fun g_s326_366 () U)
(declare-fun g_s327_367 () U)
(declare-fun g_s328_368 () U)
(declare-fun g_s329_369 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_370 () U)
(declare-fun g_s331_371 () U)
(declare-fun g_s332_372 () U)
(declare-fun g_s333_373 () U)
(declare-fun g_s334_375 () U)
(declare-fun g_s335_376 () U)
(declare-fun g_s336_377 () U)
(declare-fun g_s337_378 () U)
(declare-fun g_s338_379 () U)
(declare-fun g_s339_380 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_381 () U)
(declare-fun g_s341_382 () U)
(declare-fun g_s342_383 () U)
(declare-fun g_s343_384 () U)
(declare-fun g_s344_385 () U)
(declare-fun g_s345_386 () U)
(declare-fun g_s346_387 () U)
(declare-fun g_s347_388 () U)
(declare-fun g_s348_389 () U)
(declare-fun g_s349_390 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_391 () U)
(declare-fun g_s351_392 () U)
(declare-fun g_s352_393 () U)
(declare-fun g_s353_394 () U)
(declare-fun g_s354_395 () U)
(declare-fun g_s355_396 () U)
(declare-fun g_s356_397 () U)
(declare-fun g_s357_398 () U)
(declare-fun g_s358_399 () U)
(declare-fun g_s359_400 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_401 () U)
(declare-fun g_s361_402 () U)
(declare-fun g_s362_403 () U)
(declare-fun g_s363_404 () U)
(declare-fun g_s364_405 () U)
(declare-fun g_s365_406 () U)
(declare-fun g_s366_407 () U)
(declare-fun g_s367_408 () U)
(declare-fun g_s368_409 () U)
(declare-fun g_s369_410 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s370_411 () U)
(declare-fun g_s371_412 () U)
(declare-fun g_s372_413 () U)
(declare-fun g_s373_414 () U)
(declare-fun g_s374_415 () U)
(declare-fun g_s375_416 () U)
(declare-fun g_s376_417 () U)
(declare-fun g_s377_418 () U)
(declare-fun g_s378_419 () U)
(declare-fun g_s379_420 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s380_421 () U)
(declare-fun g_s381_422 () U)
(declare-fun g_s382_423 () U)
(declare-fun g_s383_424 () U)
(declare-fun g_s384_425 () U)
(declare-fun g_s385_426 () U)
(declare-fun g_s386_427 () U)
(declare-fun g_s387_428 () U)
(declare-fun g_s388_429 () U)
(declare-fun g_s389_430 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s390_431 () U)
(declare-fun g_s391_432 () U)
(declare-fun g_s392_433 () U)
(declare-fun g_s393_434 () U)
(declare-fun g_s394_435 () U)
(declare-fun g_s395_436 () U)
(declare-fun g_s396$1_437 () U)
(declare-fun g_s396$2_455 () U)
(declare-fun g_s396$3_456 () U)
(declare-fun g_s397$1_438 () U)
(declare-fun g_s398$1_439 () U)
(declare-fun g_s399$1_440 () U)
(declare-fun g_s399$2_449 () U)
(declare-fun g_s399$3_452 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s403$1_441 () U)
(declare-fun g_s404$1_442 () U)
(declare-fun g_s405_457 () U)
(declare-fun g_s405$1_443 () U)
(declare-fun g_s405$2_444 () U)
(declare-fun g_s409$1_445 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s410$1_446 () U)
(declare-fun g_s411$1_447 () U)
(declare-fun g_s412$1_448 () U)
(declare-fun g_s413$1_450 () U)
(declare-fun g_s413$2_453 () U)
(declare-fun g_s414$1_451 () U)
(declare-fun g_s414$2_454 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e188 () U)
(declare-fun e189 () U)
(declare-fun e190 () U)
(declare-fun e182 () U)
(declare-fun e185 () U)
(declare-fun e183 () U)
(declare-fun e186 () U)
(declare-fun e184 () U)
(declare-fun e187 () U)
(declare-fun e191 () U)
(declare-fun e192 () U)
(declare-fun e193 () U)
(declare-fun e194 () U)
(declare-fun e195 () U)
(declare-fun e196 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))))))))))))))))))))))))))))))))))))))))))))))) (= g_s52_53 (SET (mapplet g_s60_61 (mapplet g_s59_60 (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54))))))))) (= g_s61_62 (SET (mapplet g_s88_89 (mapplet g_s87_88 (mapplet g_s86_87 (mapplet g_s85_86 (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 (mapplet g_s81_82 (mapplet g_s80_81 (mapplet g_s79_80 (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 (mapplet g_s75_76 (mapplet g_s74_75 (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 (mapplet g_s69_70 (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 g_s62_63)))))))))))))))))))))))))))) (= g_s89_90 (SET (mapplet g_s91_92 g_s90_91))) (= g_s92_93 (SET (mapplet g_s101_102 (mapplet g_s100_101 (mapplet g_s99_100 (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 (mapplet g_s95_96 (mapplet g_s94_95 g_s93_94)))))))))) (= g_s102_103 (SET (mapplet g_s105_106 (mapplet g_s104_105 g_s103_104)))) (= g_s106_107 (SET (mapplet g_s108_109 g_s107_108))) (= g_s109_110 (SET (mapplet g_s116_117 (mapplet g_s115_116 (mapplet g_s114_115 (mapplet g_s113_114 (mapplet g_s112_113 (mapplet g_s111_112 g_s110_111)))))))) (= g_s117_118 (SET (mapplet g_s126_127 (mapplet g_s125_126 (mapplet g_s124_125 (mapplet g_s123_124 (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 (mapplet g_s119_120 g_s118_119)))))))))) (= g_s127_128 (SET (mapplet g_s131_132 (mapplet g_s130_131 (mapplet g_s129_130 g_s128_129))))) (= g_s132_133 (SET (mapplet g_s135_136 (mapplet g_s134_135 g_s133_134)))) (= g_s136_138 (interval e0 e137)) (= g_s137_140 (interval e0 e139)) (= g_s138_142 (interval e0 e141)) (mem g_s139_143 g_s136_138) (mem g_s140_144 g_s137_140) (mem g_s141_145 g_s138_142) (mem g_s142_146 g_s138_142) (mem g_s143_147 g_s138_142) (= g_s139_143 e137) (= g_s140_144 e139) (= g_s141_145 e141) (and (|>=i| g_s142_146 e0) (|<=i| g_s142_146 g_s141_145)) (and (|>=i| g_s143_147 e0) (|<=i| g_s143_147 g_s141_145)) (not (= g_s142_146 g_s143_147)) (= g_s144_148 (SET (mapplet g_s143_147 g_s142_146))) (|<=i| g_s142_146 e149) (|<=i| g_s143_147 e149) (= g_s145_150 (SET (mapplet (mapplet FALSE g_s143_147) (mapplet TRUE g_s142_146)))) (mem g_s146_152 (|-->| (set_prod (set_prod (set_prod g_s136_138 (|-->| (interval e0 g_s147_151) g_s136_138)) g_s138_142) g_s136_138) g_s137_140)) (mem g_s148_154 (|-->| (set_prod (set_prod (set_prod g_s136_138 (|-->| (interval e0 g_s149_153) g_s136_138)) g_s138_142) g_s136_138) g_s137_140)) (mem g_s150_155 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s151_156 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s152_157 (|-->| g_s136_138 g_s136_138)) (mem g_s153_158 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s154_159 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s155_160 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s156_161 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s157_162 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s158_163 (|-->| g_s137_140 g_s137_140)) (mem g_s159_164 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s160_165 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s161_166 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s162_167 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s163_168 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s164_169 (|-->| g_s138_142 g_s138_142)) (mem g_s165_170 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s166_171 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s167_172 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s168_173 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s169_174 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s170_175 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s171_176 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s172_177 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s173_178 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s174_179 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s175_180 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s176_181 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (= g_s150_155 e182) (= g_s156_161 e183) (= g_s162_167 e184) (= g_s151_156 e185) (= g_s157_162 e186) (= g_s163_168 e187) (= g_s168_173 e188) (= g_s169_174 e189) (= g_s170_175 e190) (= g_s171_176 e191) (= g_s172_177 e192) (= g_s173_178 e193) (= g_s174_179 e194) (= g_s175_180 e195) (= g_s176_181 e196) (= g_s181_199 (|-->| (interval e198 e197) g_s138_142)) (mem g_s182_202 (|-->| (set_prod (interval e0 e201) (interval e0 e200)) g_s138_142)) (mem g_s183_203 (|-->| (set_prod (interval e0 e201) (interval e0 e149)) g_s138_142)) (mem g_s184_204 (|-->| (set_prod (interval e0 e201) (interval e0 e149)) g_s138_142)) (mem g_s185_205 g_s138_142) (|<=i| e206 g_s185_205) (mem g_s186_207 (|-->| (interval e0 e201) g_s137_140)) (mem g_s187_208 (|-->| (interval e0 e201) g_s137_140)) (mem g_s188_209 g_s136_138) (mem g_s189_210 g_s138_142) (mem g_s190_211 g_s138_142) (mem g_s191_212 g_s138_142) (mem g_s192_213 g_s138_142) (mem g_s193_214 g_s138_142) (mem g_s194_215 g_s138_142) (mem g_s195_216 g_s138_142) (mem g_s196_217 g_s138_142) (mem g_s197_218 g_s138_142) (mem g_s198_219 g_s137_140) (not (= g_s197_218 g_s193_214)) (mem g_s199_220 g_s138_142) (mem g_s200_221 g_s138_142) (mem g_s201_222 g_s138_142) (|<=i| g_s201_222 e223) (mem g_s202_224 g_s138_142) (|<=i| (|+i| g_s201_222 e225) g_s200_221) (|<=i| (|+i| g_s202_224 e226) g_s200_221) (|<=i| e227 g_s200_221) (mem g_s203_228 g_s181_199) (= g_s203_228 (set_prod (interval e198 e197) (SET e141))) (mem g_s204_229 g_s138_142) (mem g_s205_230 g_s138_142) (mem g_s206_231 g_s138_142) (mem g_s207_232 g_s138_142) (mem g_s208_233 g_s138_142) (mem g_s209_234 g_s138_142) (mem g_s210_235 g_s138_142) (mem g_s211_236 g_s138_142) (mem g_s212_237 g_s138_142) (mem g_s213_238 g_s136_138) (mem g_s214_239 (|-->| (interval e0 e141) g_s137_140)) (mem g_s215_240 g_s138_142) (|<=i| g_s215_240 e241) (mem g_s216_242 g_s138_142) (|<i| g_s216_242 e243) (mem g_s217_244 g_s138_142) (|<i| g_s217_244 e243) (|<i| (|+i| g_s216_242 g_s217_244) e245) (mem g_s218_246 g_s137_140) (mem g_s219_247 g_s138_142) (mem g_s220_248 g_s138_142) (mem g_s221_249 g_s138_142) (mem g_s222_250 g_s138_142) (|<=i| e251 g_s220_248) (|<=i| g_s220_248 e241) (|<=i| (|+i| g_s223_253 g_s224_252) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245)) (|<=i| e0 (|-i| (|+i| e139 g_s224_252) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245))) (|<=i| (|+i| g_s223_253 g_s224_252) (|*i| g_s215_240 g_s185_205)) (|<=i| (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s216_242)) e245) (|+i| (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|+i| e245 g_s217_244)) e245) e198)) (|<=i| (|*i| g_s185_205 (|-i| e245 g_s217_244)) g_s139_143) (|<=i| (idiv (|*i| g_s215_240 (|*i| g_s185_205 (|-i| e245 g_s217_244))) e245) e139) (|<=i| g_s223_253 (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245)) (|<=i| (|*i| g_s215_240 g_s185_205) e139) (|<=i| e0 (|-i| (|+i| e198 (|*i| g_s215_240 g_s185_205)) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| (|-i| e245 g_s217_244) g_s216_242)) e245))) (|<=i| (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245) (|*i| g_s215_240 g_s185_205)) (|<=i| e0 (|-i| (|+i| e198 (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245)) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| (|-i| e245 g_s217_244) g_s216_242)) e245))) (|<=i| (|*i| g_s215_240 g_s185_205) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|+i| e245 g_s217_244)) e245)) (|<=i| e0 (|-i| (|+i| e198 (|*i| g_s215_240 g_s185_205)) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s216_242)) e245))) (|<=i| e0 (|+i| e198 (|*i| g_s215_240 g_s185_205))) (|<=i| e0 (|-i| (|+i| (|+i| e139 g_s223_253) g_s224_252) (|*i| g_s215_240 g_s185_205))) (|<=i| e0 (|-i| (|-i| e254 g_s212_237) (|*i| g_s215_240 g_s185_205))) (|<=i| e0 (|-i| (|-i| e254 g_s212_237) (idiv (|*i| (|*i| g_s215_240 g_s185_205) (|-i| e245 g_s217_244)) e245))) (|<=i| (|*i| (|*i| e149 g_s215_240) g_s185_205) e137) (|<=i| (|*i| (|*i| e149 g_s215_240) g_s185_205) e254) (|<=i| e0 (|-i| (|-i| e254 g_s212_237) (|*i| (|*i| e149 g_s215_240) g_s185_205))) (mem g_s225_255 g_s138_142) (|<i| g_s225_255 g_s141_145) (mem g_s226_256 g_s138_142) (|<=i| e257 g_s225_255) (= g_s226_256 (|-i| g_s225_255 e198)) (mem g_s227_258 g_s138_142) (mem g_s228_259 g_s138_142) (= g_s227_258 e149) (= g_s228_259 e198) (mem g_s229_260 g_s137_140) (mem g_s230_261 g_s137_140) (mem g_s231_262 g_s137_140) (mem g_s232_263 g_s138_142) (mem g_s233_264 g_s138_142) (mem g_s234_265 g_s138_142) (mem g_s235_266 g_s138_142) (mem g_s236_267 g_s138_142) (mem g_s237_268 g_s138_142) (not (= g_s236_267 g_s237_268)) (mem g_s238_269 g_s138_142) (mem g_s239_270 g_s138_142) (mem g_s240_271 g_s138_142) (not (= g_s238_269 g_s239_270)) (not (= g_s238_269 g_s240_271)) (not (= g_s239_270 g_s240_271)) (mem g_s241_272 g_s136_138) (mem g_s242_273 g_s138_142) (mem g_s243_274 g_s138_142) (mem g_s244_275 g_s137_140) (|<=i| e276 g_s244_275) (|<=i| g_s244_275 e277) (|<=i| g_s200_221 g_s244_275) (mem g_s245_278 (|-->| (interval e0 e141) g_s137_140)) (mem g_s246_279 g_s136_138) (mem g_s247_280 g_s136_138) (mem g_s248_281 g_s137_140) (mem g_s249_282 g_s137_140) (mem g_s250_283 g_s136_138) (mem g_s251_284 g_s136_138) (mem g_s252_285 g_s136_138) (mem g_s253_286 g_s136_138) (mem g_s254_287 g_s136_138) (mem g_s255_288 g_s136_138) (mem g_s256_289 g_s136_138) (mem g_s257_290 g_s136_138) (mem g_s258_291 g_s136_138) (mem g_s259_292 g_s136_138) (mem g_s260_293 g_s136_138) (mem g_s261_294 g_s136_138) (mem g_s262_295 g_s136_138) (mem g_s263_296 g_s136_138) (mem g_s264_297 g_s136_138) (mem g_s265_298 g_s136_138) (mem g_s266_299 g_s136_138) (mem g_s267_300 g_s136_138) (mem g_s268_301 g_s136_138) (mem g_s269_302 g_s136_138) (mem g_s270_303 g_s136_138) (mem g_s271_304 g_s137_140) (mem g_s272_305 (|-->| (interval e0 e149) g_s138_142)) (mem g_s273_306 g_s138_142) (|<i| g_s273_306 g_s141_145) (mem g_s274_307 g_s138_142) (= g_s274_307 (|-i| g_s273_306 e198)) (mem g_s275_308 g_s138_142) (|<=i| g_s275_308 g_s273_306) (= g_s275_308 e149) (mem g_s276_309 g_s138_142) (mem g_s277_310 g_s138_142) (= g_s277_310 g_s276_309) (= g_s277_310 e149) (mem g_s278_311 (|-->| (interval e0 e197) g_s138_142)) (mem g_s279_312 (|-->| (interval e0 e197) g_s138_142)) (|<=i| (|+i| e313 (|*i| e251 g_s273_306)) g_s244_275) (|<=i| (|+i| e314 (|*i| e197 g_s220_248)) g_s244_275) (|<=i| (|*i| e251 g_s273_306) e315) (|<=i| (|*i| e197 g_s220_248) e316) (mem g_s280_317 (|-->| (interval e0 e149) g_s138_142)) (mem g_s281_319 (|-->| (set_prod (interval e0 e251) (interval e0 e318)) g_s138_142)) (mem g_s282_320 (|-->| (set_prod (interval e0 e251) (interval e0 e149)) g_s137_140)) (mem g_s283_321 g_s138_142) (mem g_s284_322 g_s138_142) (|<=i| g_s284_322 e141) (|<=i| e198 g_s284_322) (mem g_s285_323 g_s136_138) (mem g_s286_324 g_s138_142) (|<=i| g_s286_324 e201) (|<=i| e198 g_s286_324) (mem g_s287_325 g_s138_142) (|<=i| g_s287_325 e251) (= g_s287_325 (|-i| g_s286_324 e198)) (mem g_s288_326 g_s138_142) (mem g_s289_327 (|-->| (interval e0 e198) g_s137_140)) (mem g_s289_327 (|>->| (interval e0 e198) g_s137_140)) (mem g_s290_328 (|-->| (set_prod (interval e0 e198) (interval e0 e197)) g_s138_142)) (mem g_s291_329 (|-->| (interval e0 e149) g_s138_142)) (mem g_s292_330 g_s136_138) (mem g_s293_331 (|-->| (interval e0 e251) g_s136_138)) (mem g_s294_332 (|-->| (interval e0 e251) g_s136_138)) (mem g_s295_333 (|-->| (interval e0 e251) g_s136_138)) (mem g_s296_334 (|-->| (interval e0 e251) g_s136_138)) (mem g_s297_335 (|-->| (interval e0 e251) g_s138_142)) (mem g_s298_336 (|-->| (interval e0 e251) g_s138_142)) (mem g_s299_337 (|-->| (interval e0 e251) g_s138_142)) (mem g_s300_338 (|-->| (set_prod (interval e0 e251) (interval e0 e200)) g_s137_140)) (mem g_s301_339 (|-->| (set_prod (interval e0 e251) (interval e0 e200)) g_s137_140)) (mem g_s302_340 (|-->| (set_prod (interval e0 e251) (interval e0 e200)) g_s138_142)) (mem g_s303_341 (|-->| (set_prod (interval e0 e251) (interval e0 e200)) g_s137_140)) (mem g_s304_342 (|-->| (set_prod (interval e0 e251) (interval e0 e200)) g_s136_138)) (mem g_s305_343 (|-->| (interval e0 e251) g_s137_140)) (mem g_s306_344 (|-->| (set_prod (interval e0 e251) (interval e0 e318)) g_s138_142)) (mem g_s307_345 (|-->| (set_prod (interval e0 e251) (interval e0 e318)) g_s138_142)) (mem g_s308_346 (|-->| (set_prod (interval e0 e251) (interval e0 e318)) g_s138_142)) (mem g_s309_347 (|-->| (set_prod (interval e0 e251) (interval e0 e318)) g_s138_142)) (mem g_s310_348 (|-->| (interval e0 e198) g_s138_142)) (mem g_s310_348 (|-->| (interval e0 e198) (interval e198 e349))) (mem g_s311_350 (|-->| (interval e0 e198) g_s138_142)) (mem g_s311_350 (|-->| (interval e0 e198) (interval e198 e349))) (mem g_s312_351 (|-->| (interval e0 e198) g_s138_142)) (mem g_s313_352 (|-->| (interval e0 e198) g_s138_142)) (mem g_s314_353 g_s138_142) (|<i| g_s314_353 e141) (|<=i| e316 g_s314_353) (mem g_s315_354 g_s138_142) (|<=i| e198 g_s315_354) (mem g_s316_355 g_s138_142) (|<=i| e198 g_s316_355) (mem g_s317_356 g_s138_142) (|<=i| e198 g_s317_356) (mem g_s318_357 g_s138_142) (|<=i| e358 g_s318_357) (mem g_s319_359 g_s138_142) (= g_s319_359 (|-i| g_s318_357 e198)) (|<=i| g_s319_359 e200) (mem g_s320_360 g_s136_138) (mem g_s321_361 g_s136_138) (mem g_s322_362 g_s136_138) (mem g_s323_363 g_s136_138) (mem g_s324_364 g_s136_138) (mem g_s325_365 g_s136_138) (mem g_s326_366 g_s136_138) (mem g_s327_367 g_s136_138) (mem g_s328_368 g_s136_138) (mem g_s329_369 g_s136_138) (mem g_s330_370 g_s136_138) (mem g_s331_371 g_s136_138) (mem g_s332_372 g_s136_138) (mem g_s333_373 g_s137_140) (|<=i| g_s333_373 e374) (mem g_s334_375 g_s136_138) (mem g_s335_376 NATURAL1) (mem g_s336_377 NATURAL1) (mem g_s337_378 NATURAL1) (mem g_s338_379 NATURAL1) (mem g_s339_380 NATURAL1) (mem g_s340_381 NATURAL1) (mem g_s341_382 NATURAL1) (mem g_s342_383 NATURAL1) (|<i| g_s341_382 g_s342_383) (mem g_s343_384 g_s137_140) (mem g_s344_385 g_s136_138) (mem g_s345_386 g_s136_138) (mem g_s346_387 g_s136_138) (= g_s344_385 (|+i| g_s343_384 g_s335_376)) (= g_s345_386 (|+i| g_s343_384 g_s336_377)) (= g_s346_387 (|+i| g_s343_384 g_s337_378)) (mem g_s347_388 g_s136_138) (mem g_s348_389 g_s136_138) (mem g_s349_390 g_s136_138) (mem g_s350_391 g_s136_138) (mem g_s351_392 g_s136_138) (= g_s347_388 (|+i| g_s343_384 g_s338_379)) (= g_s348_389 (|+i| g_s343_384 g_s339_380)) (= g_s349_390 (|+i| g_s343_384 g_s340_381)) (= g_s350_391 (|+i| g_s343_384 g_s342_383)) (= g_s351_392 (|-i| (|+i| g_s343_384 g_s342_383) g_s341_382)) (mem g_s352_393 g_s138_142) (|<i| g_s352_393 e141) (mem g_s353_394 g_s138_142) (|<i| g_s353_394 e141) (mem g_s354_395 g_s138_142) (mem g_s355_396 g_s138_142) (mem g_s356_397 g_s137_140) (mem g_s357_398 g_s137_140) (mem g_s358_399 g_s137_140) (mem g_s359_400 g_s137_140) (mem g_s360_401 g_s137_140) (mem g_s361_402 g_s137_140) (mem g_s362_403 g_s137_140) (mem g_s363_404 g_s138_142) (|<=i| e198 g_s363_404) (mem g_s364_405 g_s138_142) (mem g_s365_406 g_s138_142) (mem g_s366_407 g_s138_142) (mem g_s367_408 g_s138_142) (mem g_s368_409 g_s138_142) (|<=i| g_s364_405 e318) (|<=i| g_s365_406 e318) (|<=i| g_s366_407 e318) (|<=i| g_s367_408 e318) (|<=i| g_s368_409 e318) (not (= g_s364_405 g_s365_406)) (not (= g_s364_405 g_s366_407)) (not (= g_s364_405 g_s367_408)) (not (= g_s364_405 g_s368_409)) (not (= g_s365_406 g_s366_407)) (not (= g_s365_406 g_s367_408)) (not (= g_s365_406 g_s368_409)) (not (= g_s366_407 g_s367_408)) (not (= g_s366_407 g_s368_409)) (not (= g_s367_408 g_s368_409))))
(define-fun |def_seext| () Bool (and (mem g_s369_410 g_s136_138) (mem g_s370_411 g_s136_138) (mem g_s371_412 g_s138_142) (or (= g_s371_412 e198) (= g_s371_412 e149)) (mem g_s372_413 g_s136_138) (mem g_s373_414 g_s136_138) (mem g_s374_415 g_s136_138) (mem g_s375_416 g_s136_138) (mem g_s376_417 g_s136_138) (mem g_s377_418 g_s136_138) (mem g_s378_419 (|-->| (interval e0 g_s149_153) g_s138_142)) (mem g_s379_420 g_s136_138) (mem g_s380_421 g_s136_138) (mem g_s381_422 g_s136_138) (mem g_s382_423 g_s136_138) (mem g_s383_424 g_s136_138) (mem g_s384_425 (|-->| (interval e0 e149) g_s138_142)) (mem g_s385_426 (|-->| (interval e0 e149) g_s138_142)) (mem g_s386_427 g_s137_140) (mem g_s387_428 g_s137_140) (mem g_s388_429 g_s138_142) (mem g_s389_430 g_s136_138) (mem g_s390_431 g_s136_138) (mem g_s391_432 g_s138_142) (mem g_s392_433 (|-->| (interval e0 g_s315_354) (|-->| (interval e0 e318) g_s138_142))) (mem g_s145_150 (|+->| BOOL g_s138_142)) (mem g_s145_150 (|+->| BOOL g_s137_140)) (mem g_s145_150 (|+->| BOOL g_s136_138)) (not (= (apply g_s289_327 e0) (apply g_s289_327 e198))) (= (ran g_s289_327) (SET (mapplet (apply g_s289_327 e198) (apply g_s289_327 e0))))))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s393_434 g_s138_142) (mem g_s393_434 g_s144_148) (mem g_s394_435 g_s138_142) (mem g_s394_435 g_s144_148) (mem g_s395_436 BOOL)))
(define-fun |def_inv| () Bool (and (= g_s394_435 (apply g_s396$1_437 e0)) (= g_s393_434 (apply g_s396$1_437 e198)) (= g_s395_436 (bool (and (= (apply g_s397$1_438 e0) TRUE) (= (apply g_s397$1_438 e198) TRUE) (= (apply g_s398$1_439 e0) TRUE) (= (apply g_s398$1_439 e198) TRUE)))) (|<i| g_s399$1_440 g_s363_404)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (mem g_s396$1_437 (|-->| (interval e0 g_s315_354) g_s138_142)) (mem g_s396$1_437 (|-->| (interval e0 g_s315_354) g_s144_148)) (mem g_s397$1_438 (|-->| (interval e0 g_s315_354) BOOL)) (mem g_s398$1_439 (|-->| (interval e0 g_s315_354) BOOL)) (mem g_s399$1_440 g_s138_142)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem (set_prod (interval e0 g_s315_354) (SET g_s143_147)) (|-->| (interval e0 g_s315_354) g_s138_142)))
(define-fun lh_2 () Bool (mem (set_prod (interval e0 g_s315_354) (SET g_s143_147)) (|-->| (interval e0 g_s315_354) g_s144_148)))
(define-fun lh_3 () Bool (mem (set_prod (interval e0 g_s315_354) (SET FALSE)) (|-->| (interval e0 g_s315_354) BOOL)))
(define-fun lh_4 () Bool (mem e0 g_s138_142))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= FALSE (bool (and (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e0) TRUE) (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e198) TRUE) (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e0) TRUE) (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e198) TRUE)))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s143_147 (apply (set_prod (interval e0 g_s315_354) (SET g_s143_147)) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= g_s143_147 (apply (set_prod (interval e0 g_s315_354) (SET g_s143_147)) e198)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (|<i| e0 g_s363_404))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s403$1_441 g_s138_142))
(define-fun lh_2 () Bool (mem g_s404$1_442 g_s137_140))
(define-fun lh_3 () Bool (mem e0 g_s138_142))
(define-fun lh_4 () Bool (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))
(define-fun lh_5 () Bool (mem (apply g_s310_348 e0) g_s138_142))
(define-fun lh_6 () Bool (and (|>=i| (apply g_s310_348 e0) e198) (|<=i| (apply g_s310_348 e0) (|-i| g_s314_353 e198))))
(define-fun lh_7 () Bool (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e0) FALSE))
(define-fun lh_8 () Bool (mem e198 g_s138_142))
(define-fun lh_9 () Bool (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))
(define-fun lh_10 () Bool (mem (apply g_s310_348 e198) g_s138_142))
(define-fun lh_11 () Bool (and (|>=i| (apply g_s310_348 e198) e198) (|<=i| (apply g_s310_348 e198) (|-i| g_s314_353 e198))))
(define-fun lh_12 () Bool (= (apply (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) e198) FALSE))
(define-fun lh_13 () Bool (mem (apply g_s311_350 e0) g_s138_142))
(define-fun lh_14 () Bool (and (|>=i| (apply g_s311_350 e0) e198) (|<=i| (apply g_s311_350 e0) (|-i| g_s314_353 e198))))
(define-fun lh_15 () Bool (mem (apply g_s311_350 e198) g_s138_142))
(define-fun lh_16 () Bool (and (|>=i| (apply g_s311_350 e198) e198) (|<=i| (apply g_s311_350 e198) (|-i| g_s314_353 e198))))
(define-fun lh_17 () Bool (mem (apply g_s312_351 e0) g_s138_142))
(define-fun lh_18 () Bool (mem (apply g_s312_351 e198) g_s138_142))
(define-fun lh_19 () Bool (mem (apply g_s313_352 e0) g_s138_142))
(define-fun lh_20 () Bool (mem (apply g_s313_352 e198) g_s138_142))
(define-fun lh_21 () Bool (mem g_s405$1_443 g_s137_140))
(define-fun lh_22 () Bool (mem g_s405$2_444 g_s137_140))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s310_348 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (and (|>=i| (apply g_s310_348 e0) e198) (|<=i| (apply g_s310_348 e0) (|-i| g_s314_353 e198))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply (set_prod (interval e0 g_s315_354) (SET FALSE)) e0) FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem e198 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (apply g_s310_348 e198) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (and (|>=i| (apply g_s310_348 e198) e198) (|<=i| (apply g_s310_348 e198) (|-i| g_s314_353 e198))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= (apply (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) e198) FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem (apply g_s311_350 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (and (|>=i| (apply g_s311_350 e0) e198) (|<=i| (apply g_s311_350 e0) (|-i| g_s314_353 e198))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem (apply g_s311_350 e198) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (and (|>=i| (apply g_s311_350 e198) e198) (|<=i| (apply g_s311_350 e198) (|-i| g_s314_353 e198))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16) (mem (apply g_s312_351 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17) (mem (apply g_s312_351 e198) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (apply g_s313_352 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (mem (apply g_s313_352 e198) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (= TRUE (bool (and (= (apply (|<+| (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) (SET (mapplet e198 TRUE))) e0) TRUE) (= (apply (|<+| (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) (SET (mapplet e198 TRUE))) e198) TRUE) (= (apply (|<+| (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) (SET (mapplet e198 TRUE))) e0) TRUE) (= (apply (|<+| (|<+| (set_prod (interval e0 g_s315_354) (SET FALSE)) (SET (mapplet e0 TRUE))) (SET (mapplet e198 TRUE))) e198) TRUE)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s404$1_442 g_s137_140))
(define-fun lh_2 () Bool (mem e0 g_s138_142))
(define-fun lh_3 () Bool (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))
(define-fun lh_4 () Bool (mem g_s405$1_443 g_s137_140))
(define-fun lh_5 () Bool (mem g_s376_417 g_s136_138))
; PO 1 in group 2
(push 1)
(assert (not (=> lh_1 (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> lh_1 (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem e198 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s409$1_445 g_s138_142))
(define-fun lh_2 () Bool (mem g_s410$1_446 g_s138_142))
(define-fun lh_3 () Bool (mem g_s411$1_447 g_s138_142))
(define-fun lh_4 () Bool (mem g_s412$1_448 g_s136_138))
(define-fun lh_5 () Bool (= g_s391_432 g_s142_146))
(define-fun lh_6 () Bool (mem e0 g_s138_142))
(define-fun lh_7 () Bool (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))
(define-fun lh_8 () Bool (|<i| g_s399$1_440 g_s363_404))
(define-fun lh_9 () Bool (or (= g_s399$2_449 e0) (= g_s399$2_449 (|+i| g_s399$1_440 e198))))
(define-fun lh_10 () Bool (= g_s413$1_450 (apply g_s145_150 (bool (|>=i| g_s399$2_449 g_s363_404)))))
(define-fun lh_11 () Bool (mem g_s414$1_451 g_s138_142))
(define-fun lh_12 () Bool (= g_s413$1_450 g_s143_147))
(define-fun lh_13 () Bool (mem e198 g_s138_142))
(define-fun lh_14 () Bool (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))
(define-fun lh_15 () Bool (mem g_s413$1_450 g_s138_142))
(define-fun lh_16 () Bool (|<i| g_s399$2_449 g_s363_404))
(define-fun lh_17 () Bool (or (= g_s399$3_452 e0) (= g_s399$3_452 (|+i| g_s399$2_449 e198))))
(define-fun lh_18 () Bool (= g_s413$2_453 (apply g_s145_150 (bool (|>=i| g_s399$3_452 g_s363_404)))))
(define-fun lh_19 () Bool (mem g_s414$2_454 g_s138_142))
(define-fun lh_20 () Bool (= g_s413$2_453 g_s143_147))
(define-fun lh_21 () Bool (= g_s414$1_451 g_s142_146))
(define-fun lh_22 () Bool (mem g_s376_417 g_s136_138))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem e198 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (mem g_s413$1_450 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (|<i| g_s399$2_449 g_s363_404))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (|<i| g_s399$3_452 g_s363_404))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s395_436 TRUE))
(define-fun lh_2 () Bool (mem e0 g_s138_142))
(define-fun lh_3 () Bool (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))
(define-fun lh_4 () Bool (= (apply g_s397$1_438 e0) TRUE))
(define-fun lh_5 () Bool (= (apply g_s398$1_439 e0) TRUE))
(define-fun lh_6 () Bool (mem g_s396$2_455 (|-->| (interval e0 g_s315_354) g_s144_148)))
(define-fun lh_7 () Bool (mem e198 g_s138_142))
(define-fun lh_8 () Bool (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))
(define-fun lh_9 () Bool (= (apply g_s397$1_438 e198) TRUE))
(define-fun lh_10 () Bool (= (apply g_s398$1_439 e198) TRUE))
(define-fun lh_11 () Bool (mem g_s396$3_456 (|-->| (interval e0 g_s315_354) g_s144_148)))
; PO 1 in group 4
(push 1)
(assert (not (=> lh_1 (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> lh_1 (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> lh_1 (= (apply g_s398$1_439 e0) TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 4
(push 1)
(assert (not (=> lh_1 (= (apply g_s397$1_438 e0) TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem e198 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (apply g_s398$1_439 e198) TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (apply g_s397$1_438 e198) TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem (apply g_s396$3_456 e0) g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem (apply g_s396$3_456 e198) g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s405$1_443 g_s405_457))
(define-fun lh_1 () Bool (mem g_s405_457 g_s138_142))
(define-fun lh_2 () Bool (mem g_s405$1_443 g_s138_142))
(define-fun lh_3 () Bool (mem e0 g_s138_142))
(define-fun lh_4 () Bool (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))
; PO 1 in group 5
(push 1)
(assert (not (=> lh_1 (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> lh_1 (and (|>=i| e0 e0) (|<=i| e0 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 5
(push 1)
(assert (not (=> lh_1 (mem g_s405$1_443 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s396$1_437 e0) g_s394_435))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s405$1_443 g_s405_457))
(define-fun lh_1 () Bool (mem g_s405_457 g_s138_142))
(define-fun lh_2 () Bool (mem g_s405$1_443 g_s138_142))
(define-fun lh_3 () Bool (mem e198 g_s138_142))
(define-fun lh_4 () Bool (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))
; PO 1 in group 6
(push 1)
(assert (not (=> lh_1 (mem e198 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> lh_1 (and (|>=i| e198 e0) (|<=i| e198 g_s315_354)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> lh_1 (mem g_s405$1_443 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s396$1_437 e198) g_s393_434))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (= g_s394_435 (apply g_s396$1_437 e0)))
(define-fun lh_2 () Bool (= g_s393_434 (apply g_s396$1_437 e198)))
(define-fun lh_3 () Bool (= (apply g_s397$1_438 e0) TRUE))
(define-fun lh_4 () Bool (= (apply g_s397$1_438 e198) TRUE))
(define-fun lh_5 () Bool (= (apply g_s398$1_439 e0) TRUE))
; PO 1 in group 7
(push 1)
(assert (not (mem e0 (dom g_s396$1_437))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (mem g_s396$1_437 (|+->| (dom g_s396$1_437) (ran g_s396$1_437)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> lh_1 (mem e198 (dom g_s396$1_437)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 7
(push 1)
(assert (not (=> lh_1 (mem g_s396$1_437 (|+->| (dom g_s396$1_437) (ran g_s396$1_437))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 (dom g_s397$1_438)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s397$1_438 (|+->| (dom g_s397$1_438) (ran g_s397$1_438))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem e198 (dom g_s397$1_438)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s397$1_438 (|+->| (dom g_s397$1_438) (ran g_s397$1_438))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem e0 (dom g_s398$1_439)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s398$1_439 (|+->| (dom g_s398$1_439) (ran g_s398$1_439))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem e198 (dom g_s398$1_439)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s398$1_439 (|+->| (dom g_s398$1_439) (ran g_s398$1_439))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s403$1_441 g_s138_142))
(define-fun lh_2 () Bool (mem g_s404$1_442 g_s137_140))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 (dom g_s311_350)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 (dom g_s310_348)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 (dom g_s313_352)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 (dom g_s312_351)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e198 (dom g_s311_350)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e198 (dom g_s310_348)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e198 (dom g_s313_352)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e198 (dom g_s312_351)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s311_350 (|+->| (dom g_s311_350) (ran g_s311_350))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s310_348 (|+->| (dom g_s310_348) (ran g_s310_348))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s313_352 (|+->| (dom g_s313_352) (ran g_s313_352))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s312_351 (|+->| (dom g_s312_351) (ran g_s312_351))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s409$1_445 g_s138_142))
(define-fun lh_2 () Bool (mem g_s410$1_446 g_s138_142))
(define-fun lh_3 () Bool (mem g_s411$1_447 g_s138_142))
(define-fun lh_4 () Bool (mem g_s412$1_448 g_s136_138))
(define-fun lh_5 () Bool (= g_s391_432 g_s142_146))
(define-fun lh_6 () Bool (or (= g_s399$2_449 e0) (= g_s399$2_449 (|+i| g_s399$1_440 e198))))
(define-fun lh_7 () Bool (= g_s413$1_450 (apply g_s145_150 (bool (|>=i| g_s399$2_449 g_s363_404)))))
(define-fun lh_8 () Bool (mem g_s414$1_451 g_s138_142))
(define-fun lh_9 () Bool (not (= g_s413$1_450 g_s143_147)))
(define-fun lh_10 () Bool (= e0 e198))
(define-fun lh_11 () Bool (or (= g_s399$3_452 e0) (= g_s399$3_452 (|+i| g_s399$2_449 e198))))
(define-fun lh_12 () Bool (= g_s413$2_453 (apply g_s145_150 (bool (|>=i| g_s399$3_452 g_s363_404)))))
(define-fun lh_13 () Bool (mem g_s414$2_454 g_s138_142))
(define-fun lh_14 () Bool (not (= g_s413$2_453 g_s143_147)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s168_173 (|+->| (dom g_s168_173) (ran g_s168_173))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e458 g_s258_291) (dom g_s168_173)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem g_s168_173 (|+->| (dom g_s168_173) (ran g_s168_173))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (mem (mapplet e459 g_s258_291) (dom g_s168_173)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)