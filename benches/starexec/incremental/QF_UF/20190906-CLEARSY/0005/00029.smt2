(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e213 () U)
(declare-fun e137 () U)
(declare-fun e0 () U)
(declare-fun e157 () U)
(declare-fun e149 () U)
(declare-fun e156 () U)
(declare-fun e185 () U)
(declare-fun e159 () U)
(declare-fun e165 () U)
(declare-fun e210 () U)
(declare-fun e160 () U)
(declare-fun e377 () U)
(declare-fun e277 () U)
(declare-fun e184 () U)
(declare-fun e274 () U)
(declare-fun e308 () U)
(declare-fun e275 () U)
(declare-fun e186 () U)
(declare-fun e202 () U)
(declare-fun e204 () U)
(declare-fun e200 () U)
(declare-fun e272 () U)
(declare-fun e216 () U)
(declare-fun e273 () U)
(declare-fun e235 () U)
(declare-fun e182 () U)
(declare-fun e141 () U)
(declare-fun e428 () U)
(declare-fun e236 () U)
(declare-fun e139 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_138 () U)
(declare-fun g_s137_140 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_144 () U)
(declare-fun g_s141_145 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_147 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_150 () U)
(declare-fun g_s146_151 () U)
(declare-fun g_s147_152 () U)
(declare-fun g_s148_153 () U)
(declare-fun g_s149_154 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_155 () U)
(declare-fun g_s151_158 () U)
(declare-fun g_s152_161 () U)
(declare-fun g_s153_162 () U)
(declare-fun g_s154_163 () U)
(declare-fun g_s155_164 () U)
(declare-fun g_s156_166 () U)
(declare-fun g_s157_167 () U)
(declare-fun g_s158_168 () U)
(declare-fun g_s159_169 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_170 () U)
(declare-fun g_s161_171 () U)
(declare-fun g_s162_172 () U)
(declare-fun g_s163_173 () U)
(declare-fun g_s164_174 () U)
(declare-fun g_s165_175 () U)
(declare-fun g_s166_176 () U)
(declare-fun g_s167_177 () U)
(declare-fun g_s168_178 () U)
(declare-fun g_s169_179 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_180 () U)
(declare-fun g_s171_181 () U)
(declare-fun g_s172_183 () U)
(declare-fun g_s173_187 () U)
(declare-fun g_s174_188 () U)
(declare-fun g_s175_189 () U)
(declare-fun g_s176_190 () U)
(declare-fun g_s177_191 () U)
(declare-fun g_s178_192 () U)
(declare-fun g_s179_193 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_194 () U)
(declare-fun g_s181_195 () U)
(declare-fun g_s182_196 () U)
(declare-fun g_s183_197 () U)
(declare-fun g_s184_198 () U)
(declare-fun g_s185_199 () U)
(declare-fun g_s186_201 () U)
(declare-fun g_s187_203 () U)
(declare-fun g_s188_205 () U)
(declare-fun g_s189_206 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_207 () U)
(declare-fun g_s191_208 () U)
(declare-fun g_s192_209 () U)
(declare-fun g_s193_212 () U)
(declare-fun g_s194_211 () U)
(declare-fun g_s195_214 () U)
(declare-fun g_s196_215 () U)
(declare-fun g_s197_217 () U)
(declare-fun g_s198_218 () U)
(declare-fun g_s199_219 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_220 () U)
(declare-fun g_s201_221 () U)
(declare-fun g_s202_222 () U)
(declare-fun g_s203_223 () U)
(declare-fun g_s204_224 () U)
(declare-fun g_s205_225 () U)
(declare-fun g_s206_226 () U)
(declare-fun g_s207_227 () U)
(declare-fun g_s208_228 () U)
(declare-fun g_s209_229 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_230 () U)
(declare-fun g_s211_231 () U)
(declare-fun g_s212_232 () U)
(declare-fun g_s213_233 () U)
(declare-fun g_s214_234 () U)
(declare-fun g_s215_237 () U)
(declare-fun g_s216_238 () U)
(declare-fun g_s217_239 () U)
(declare-fun g_s218_240 () U)
(declare-fun g_s219_241 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_242 () U)
(declare-fun g_s221_243 () U)
(declare-fun g_s222_244 () U)
(declare-fun g_s223_245 () U)
(declare-fun g_s224_246 () U)
(declare-fun g_s225_247 () U)
(declare-fun g_s226_248 () U)
(declare-fun g_s227_249 () U)
(declare-fun g_s228_250 () U)
(declare-fun g_s229_251 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_252 () U)
(declare-fun g_s231_253 () U)
(declare-fun g_s232_254 () U)
(declare-fun g_s233_255 () U)
(declare-fun g_s234_256 () U)
(declare-fun g_s235_257 () U)
(declare-fun g_s236_258 () U)
(declare-fun g_s237_259 () U)
(declare-fun g_s238_260 () U)
(declare-fun g_s239_261 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_262 () U)
(declare-fun g_s241_263 () U)
(declare-fun g_s242_264 () U)
(declare-fun g_s243_265 () U)
(declare-fun g_s244_266 () U)
(declare-fun g_s245_267 () U)
(declare-fun g_s246_268 () U)
(declare-fun g_s247_269 () U)
(declare-fun g_s248_270 () U)
(declare-fun g_s249_271 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_276 () U)
(declare-fun g_s251_278 () U)
(declare-fun g_s252_279 () U)
(declare-fun g_s253_280 () U)
(declare-fun g_s254_281 () U)
(declare-fun g_s255_282 () U)
(declare-fun g_s256_283 () U)
(declare-fun g_s257_284 () U)
(declare-fun g_s258_285 () U)
(declare-fun g_s259_286 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_287 () U)
(declare-fun g_s261_288 () U)
(declare-fun g_s262_289 () U)
(declare-fun g_s263_290 () U)
(declare-fun g_s264_291 () U)
(declare-fun g_s265_292 () U)
(declare-fun g_s266_293 () U)
(declare-fun g_s267_294 () U)
(declare-fun g_s268_295 () U)
(declare-fun g_s269_296 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_297 () U)
(declare-fun g_s271_298 () U)
(declare-fun g_s272_299 () U)
(declare-fun g_s273_300 () U)
(declare-fun g_s274_301 () U)
(declare-fun g_s275_302 () U)
(declare-fun g_s276_303 () U)
(declare-fun g_s277_304 () U)
(declare-fun g_s278_305 () U)
(declare-fun g_s279_306 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_307 () U)
(declare-fun g_s281_309 () U)
(declare-fun g_s282_310 () U)
(declare-fun g_s283_311 () U)
(declare-fun g_s284_312 () U)
(declare-fun g_s285_313 () U)
(declare-fun g_s286_314 () U)
(declare-fun g_s287_315 () U)
(declare-fun g_s288_316 () U)
(declare-fun g_s289_318 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_317 () U)
(declare-fun g_s291_319 () U)
(declare-fun g_s292_320 () U)
(declare-fun g_s293_321 () U)
(declare-fun g_s294_322 () U)
(declare-fun g_s295_323 () U)
(declare-fun g_s296_324 () U)
(declare-fun g_s297_325 () U)
(declare-fun g_s298_326 () U)
(declare-fun g_s299_327 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_328 () U)
(declare-fun g_s301_329 () U)
(declare-fun g_s302_330 () U)
(declare-fun g_s303_331 () U)
(declare-fun g_s304_332 () U)
(declare-fun g_s305_333 () U)
(declare-fun g_s306_334 () U)
(declare-fun g_s307_335 () U)
(declare-fun g_s308_336 () U)
(declare-fun g_s309_337 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_338 () U)
(declare-fun g_s311_339 () U)
(declare-fun g_s312_340 () U)
(declare-fun g_s313_341 () U)
(declare-fun g_s314_342 () U)
(declare-fun g_s315_343 () U)
(declare-fun g_s316_344 () U)
(declare-fun g_s317_345 () U)
(declare-fun g_s318_346 () U)
(declare-fun g_s319_347 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_348 () U)
(declare-fun g_s321_349 () U)
(declare-fun g_s322_350 () U)
(declare-fun g_s323_351 () U)
(declare-fun g_s324_352 () U)
(declare-fun g_s325_353 () U)
(declare-fun g_s326_354 () U)
(declare-fun g_s327_355 () U)
(declare-fun g_s328_356 () U)
(declare-fun g_s329_357 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_358 () U)
(declare-fun g_s331_359 () U)
(declare-fun g_s332_360 () U)
(declare-fun g_s333_361 () U)
(declare-fun g_s334_362 () U)
(declare-fun g_s335_363 () U)
(declare-fun g_s336_364 () U)
(declare-fun g_s337_365 () U)
(declare-fun g_s338_366 () U)
(declare-fun g_s339_367 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_368 () U)
(declare-fun g_s341_369 () U)
(declare-fun g_s342_370 () U)
(declare-fun g_s343_371 () U)
(declare-fun g_s344_372 () U)
(declare-fun g_s345_373 () U)
(declare-fun g_s346_374 () U)
(declare-fun g_s347_375 () U)
(declare-fun g_s348_376 () U)
(declare-fun g_s349_378 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_379 () U)
(declare-fun g_s351_380 () U)
(declare-fun g_s352_381 () U)
(declare-fun g_s353_382 () U)
(declare-fun g_s354_383 () U)
(declare-fun g_s355_384 () U)
(declare-fun g_s356_385 () U)
(declare-fun g_s357_386 () U)
(declare-fun g_s358_387 () U)
(declare-fun g_s359_388 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_389 () U)
(declare-fun g_s361_390 () U)
(declare-fun g_s362_391 () U)
(declare-fun g_s363_392 () U)
(declare-fun g_s364_393 () U)
(declare-fun g_s365_394 () U)
(declare-fun g_s366_395 () U)
(declare-fun g_s367_396 () U)
(declare-fun g_s368_397 () U)
(declare-fun g_s369_398 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s370_399 () U)
(declare-fun g_s370$1_406 () U)
(declare-fun g_s371_400 () U)
(declare-fun g_s371$1_407 () U)
(declare-fun g_s371$2_418 () U)
(declare-fun g_s372_401 () U)
(declare-fun g_s372$1_408 () U)
(declare-fun g_s372$2_419 () U)
(declare-fun g_s373_402 () U)
(declare-fun g_s373$1_409 () U)
(declare-fun g_s373$2_420 () U)
(declare-fun g_s374_403 () U)
(declare-fun g_s374$1_410 () U)
(declare-fun g_s374$2_421 () U)
(declare-fun g_s375_404 () U)
(declare-fun g_s375$1_411 () U)
(declare-fun g_s375$2_422 () U)
(declare-fun g_s376_405 () U)
(declare-fun g_s376$1_412 () U)
(declare-fun g_s376$2_423 () U)
(declare-fun g_s377$1_413 () U)
(declare-fun g_s378$1_414 () U)
(declare-fun g_s379$1_415 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s380$1_416 () U)
(declare-fun g_s381$1_417 () U)
(declare-fun g_s385_424 () U)
(declare-fun g_s386_425 () U)
(declare-fun g_s386$1_426 () U)
(declare-fun g_s387_427 () U)
(declare-fun g_s388_431 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s392_430 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e429 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))))))))))))))))))))))))))))))))))))))))))))))) (= g_s52_53 (SET (mapplet g_s60_61 (mapplet g_s59_60 (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54))))))))) (= g_s61_62 (SET (mapplet g_s88_89 (mapplet g_s87_88 (mapplet g_s86_87 (mapplet g_s85_86 (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 (mapplet g_s81_82 (mapplet g_s80_81 (mapplet g_s79_80 (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 (mapplet g_s75_76 (mapplet g_s74_75 (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 (mapplet g_s69_70 (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 g_s62_63)))))))))))))))))))))))))))) (= g_s89_90 (SET (mapplet g_s91_92 g_s90_91))) (= g_s92_93 (SET (mapplet g_s101_102 (mapplet g_s100_101 (mapplet g_s99_100 (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 (mapplet g_s95_96 (mapplet g_s94_95 g_s93_94)))))))))) (= g_s102_103 (SET (mapplet g_s105_106 (mapplet g_s104_105 g_s103_104)))) (= g_s106_107 (SET (mapplet g_s108_109 g_s107_108))) (= g_s109_110 (SET (mapplet g_s116_117 (mapplet g_s115_116 (mapplet g_s114_115 (mapplet g_s113_114 (mapplet g_s112_113 (mapplet g_s111_112 g_s110_111)))))))) (= g_s117_118 (SET (mapplet g_s126_127 (mapplet g_s125_126 (mapplet g_s124_125 (mapplet g_s123_124 (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 (mapplet g_s119_120 g_s118_119)))))))))) (= g_s127_128 (SET (mapplet g_s131_132 (mapplet g_s130_131 (mapplet g_s129_130 g_s128_129))))) (= g_s132_133 (SET (mapplet g_s135_136 (mapplet g_s134_135 g_s133_134)))) (= g_s136_138 (interval e0 e137)) (= g_s137_140 (interval e0 e139)) (= g_s138_142 (interval e0 e141)) (mem g_s139_143 g_s136_138) (mem g_s140_144 g_s137_140) (mem g_s141_145 g_s138_142) (mem g_s142_146 g_s138_142) (mem g_s143_147 g_s138_142) (= g_s139_143 e137) (= g_s140_144 e139) (= g_s141_145 e141) (and (|>=i| g_s142_146 e0) (|<=i| g_s142_146 g_s141_145)) (and (|>=i| g_s143_147 e0) (|<=i| g_s143_147 g_s141_145)) (not (= g_s142_146 g_s143_147)) (= g_s144_148 (SET (mapplet g_s143_147 g_s142_146))) (|<=i| g_s142_146 e149) (|<=i| g_s143_147 e149) (= g_s145_150 (SET (mapplet (mapplet FALSE g_s143_147) (mapplet TRUE g_s142_146)))) (mem g_s146_151 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (= (apply g_s146_151 (mapplet e0 e0)) e0) (mem g_s147_152 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s148_153 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s149_154 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s150_155 (|-->| (seq1 g_s138_142) g_s137_140)) (= g_s151_158 (|-->| (interval e157 e156) g_s138_142)) (mem g_s152_161 (|-->| (set_prod (interval e0 e160) (interval e0 e159)) g_s138_142)) (mem g_s153_162 (|-->| (set_prod (interval e0 e160) (interval e0 e149)) g_s138_142)) (mem g_s154_163 (|-->| (set_prod (interval e0 e160) (interval e0 e149)) g_s138_142)) (mem g_s155_164 g_s138_142) (|<=i| e165 g_s155_164) (mem g_s156_166 (|-->| (interval e0 e160) g_s137_140)) (mem g_s157_167 (|-->| (interval e0 e160) g_s137_140)) (mem g_s158_168 g_s136_138) (mem g_s159_169 g_s138_142) (mem g_s160_170 g_s138_142) (mem g_s161_171 g_s138_142) (mem g_s162_172 g_s138_142) (mem g_s163_173 g_s138_142) (mem g_s164_174 g_s138_142) (mem g_s165_175 g_s138_142) (mem g_s166_176 g_s138_142) (mem g_s167_177 g_s138_142) (mem g_s168_178 g_s137_140) (not (= g_s167_177 g_s163_173)) (mem g_s169_179 g_s138_142) (mem g_s170_180 g_s138_142) (mem g_s171_181 g_s138_142) (|<=i| g_s171_181 e182) (mem g_s172_183 g_s138_142) (|<=i| (|+i| g_s171_181 e184) g_s170_180) (|<=i| (|+i| g_s172_183 e185) g_s170_180) (|<=i| e186 g_s170_180) (mem g_s173_187 g_s151_158) (= g_s173_187 (set_prod (interval e157 e156) (SET e141))) (mem g_s174_188 g_s138_142) (mem g_s175_189 g_s138_142) (mem g_s176_190 g_s138_142) (mem g_s177_191 g_s138_142) (mem g_s178_192 g_s138_142) (mem g_s179_193 g_s138_142) (mem g_s180_194 g_s138_142) (mem g_s181_195 g_s138_142) (mem g_s182_196 g_s138_142) (mem g_s183_197 g_s136_138) (mem g_s184_198 (|-->| (interval e0 e141) g_s137_140)) (mem g_s185_199 g_s138_142) (|<=i| g_s185_199 e200) (mem g_s186_201 g_s138_142) (|<i| g_s186_201 e202) (mem g_s187_203 g_s138_142) (|<i| g_s187_203 e202) (|<i| (|+i| g_s186_201 g_s187_203) e204) (mem g_s188_205 g_s137_140) (mem g_s189_206 g_s138_142) (mem g_s190_207 g_s138_142) (mem g_s191_208 g_s138_142) (mem g_s192_209 g_s138_142) (|<=i| e210 g_s190_207) (|<=i| g_s190_207 e200) (|<=i| (|+i| g_s193_212 g_s194_211) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204)) (|<=i| e0 (|-i| (|+i| e139 g_s194_211) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204))) (|<=i| (|+i| g_s193_212 g_s194_211) (|*i| g_s185_199 g_s155_164)) (|<=i| (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s186_201)) e204) (|+i| (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|+i| e204 g_s187_203)) e204) e157)) (|<=i| (|*i| g_s155_164 (|-i| e204 g_s187_203)) g_s139_143) (|<=i| (idiv (|*i| g_s185_199 (|*i| g_s155_164 (|-i| e204 g_s187_203))) e204) e139) (|<=i| g_s193_212 (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204)) (|<=i| (|*i| g_s185_199 g_s155_164) e139) (|<=i| e0 (|-i| (|+i| e157 (|*i| g_s185_199 g_s155_164)) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| (|-i| e204 g_s187_203) g_s186_201)) e204))) (|<=i| (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204) (|*i| g_s185_199 g_s155_164)) (|<=i| e0 (|-i| (|+i| e157 (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204)) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| (|-i| e204 g_s187_203) g_s186_201)) e204))) (|<=i| (|*i| g_s185_199 g_s155_164) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|+i| e204 g_s187_203)) e204)) (|<=i| e0 (|-i| (|+i| e157 (|*i| g_s185_199 g_s155_164)) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s186_201)) e204))) (|<=i| e0 (|+i| e157 (|*i| g_s185_199 g_s155_164))) (|<=i| e0 (|-i| (|+i| (|+i| e139 g_s193_212) g_s194_211) (|*i| g_s185_199 g_s155_164))) (|<=i| e0 (|-i| (|-i| e213 g_s182_196) (|*i| g_s185_199 g_s155_164))) (|<=i| e0 (|-i| (|-i| e213 g_s182_196) (idiv (|*i| (|*i| g_s185_199 g_s155_164) (|-i| e204 g_s187_203)) e204))) (|<=i| (|*i| (|*i| e149 g_s185_199) g_s155_164) e137) (|<=i| (|*i| (|*i| e149 g_s185_199) g_s155_164) e213) (|<=i| e0 (|-i| (|-i| e213 g_s182_196) (|*i| (|*i| e149 g_s185_199) g_s155_164))) (mem g_s195_214 g_s138_142) (|<i| g_s195_214 g_s141_145) (mem g_s196_215 g_s138_142) (|<=i| e216 g_s195_214) (= g_s196_215 (|-i| g_s195_214 e157)) (mem g_s197_217 g_s138_142) (mem g_s198_218 g_s138_142) (= g_s197_217 e149) (= g_s198_218 e157) (mem g_s199_219 g_s137_140) (mem g_s200_220 g_s137_140) (mem g_s201_221 g_s137_140) (mem g_s202_222 g_s138_142) (mem g_s203_223 g_s138_142) (mem g_s204_224 g_s138_142) (mem g_s205_225 g_s138_142) (mem g_s206_226 g_s138_142) (mem g_s207_227 g_s138_142) (not (= g_s206_226 g_s207_227)) (mem g_s208_228 g_s138_142) (mem g_s209_229 g_s138_142) (mem g_s210_230 g_s138_142) (not (= g_s208_228 g_s209_229)) (not (= g_s208_228 g_s210_230)) (not (= g_s209_229 g_s210_230)) (mem g_s211_231 g_s136_138) (mem g_s212_232 g_s138_142) (mem g_s213_233 g_s138_142) (mem g_s214_234 g_s137_140) (|<=i| e235 g_s214_234) (|<=i| g_s214_234 e236) (|<=i| g_s170_180 g_s214_234) (mem g_s215_237 (|-->| (interval e0 e141) g_s137_140)) (mem g_s216_238 g_s136_138) (mem g_s217_239 g_s136_138) (mem g_s218_240 g_s137_140) (mem g_s219_241 g_s137_140) (mem g_s220_242 g_s136_138) (mem g_s221_243 g_s136_138) (mem g_s222_244 g_s136_138) (mem g_s223_245 g_s136_138) (mem g_s224_246 g_s136_138) (mem g_s225_247 g_s136_138) (mem g_s226_248 g_s136_138) (mem g_s227_249 g_s136_138) (mem g_s228_250 g_s136_138) (mem g_s229_251 g_s136_138) (mem g_s230_252 g_s136_138) (mem g_s231_253 g_s136_138) (mem g_s232_254 g_s136_138) (mem g_s233_255 g_s136_138) (mem g_s234_256 g_s136_138) (mem g_s235_257 g_s136_138) (mem g_s236_258 g_s136_138) (mem g_s237_259 g_s136_138) (mem g_s238_260 g_s136_138) (mem g_s239_261 g_s136_138) (mem g_s240_262 g_s136_138) (mem g_s241_263 g_s137_140) (mem g_s242_264 (|-->| (interval e0 e149) g_s138_142)) (mem g_s243_265 g_s138_142) (|<i| g_s243_265 g_s141_145) (mem g_s244_266 g_s138_142) (= g_s244_266 (|-i| g_s243_265 e157)) (mem g_s245_267 g_s138_142) (|<=i| g_s245_267 g_s243_265) (= g_s245_267 e149) (mem g_s246_268 g_s138_142) (mem g_s247_269 g_s138_142) (= g_s247_269 g_s246_268) (= g_s247_269 e149) (mem g_s248_270 (|-->| (interval e0 e156) g_s138_142)) (mem g_s249_271 (|-->| (interval e0 e156) g_s138_142)) (|<=i| (|+i| e272 (|*i| e210 g_s243_265)) g_s214_234) (|<=i| (|+i| e273 (|*i| e156 g_s190_207)) g_s214_234) (|<=i| (|*i| e210 g_s243_265) e274) (|<=i| (|*i| e156 g_s190_207) e275) (mem g_s250_276 (|-->| (interval e0 e149) g_s138_142)) (mem g_s251_278 (|-->| (set_prod (interval e0 e210) (interval e0 e277)) g_s138_142)) (mem g_s252_279 (|-->| (set_prod (interval e0 e210) (interval e0 e149)) g_s137_140)) (mem g_s253_280 g_s138_142) (mem g_s254_281 g_s138_142) (|<=i| g_s254_281 e141) (|<=i| e157 g_s254_281) (mem g_s255_282 g_s136_138) (mem g_s256_283 g_s138_142) (|<=i| g_s256_283 e160) (|<=i| e157 g_s256_283) (mem g_s257_284 g_s138_142) (|<=i| g_s257_284 e210) (= g_s257_284 (|-i| g_s256_283 e157)) (mem g_s258_285 g_s138_142) (mem g_s259_286 (|-->| (interval e0 e157) g_s137_140)) (mem g_s259_286 (|>->| (interval e0 e157) g_s137_140)) (mem g_s260_287 (|-->| (set_prod (interval e0 e157) (interval e0 e156)) g_s138_142)) (mem g_s261_288 (|-->| (interval e0 e149) g_s138_142)) (mem g_s262_289 g_s136_138) (mem g_s263_290 (|-->| (interval e0 e210) g_s136_138)) (mem g_s264_291 (|-->| (interval e0 e210) g_s136_138)) (mem g_s265_292 (|-->| (interval e0 e210) g_s136_138)) (mem g_s266_293 (|-->| (interval e0 e210) g_s136_138)) (mem g_s267_294 (|-->| (interval e0 e210) g_s138_142)) (mem g_s268_295 (|-->| (interval e0 e210) g_s138_142)) (mem g_s269_296 (|-->| (interval e0 e210) g_s138_142)) (mem g_s270_297 (|-->| (set_prod (interval e0 e210) (interval e0 e159)) g_s137_140)) (mem g_s271_298 (|-->| (set_prod (interval e0 e210) (interval e0 e159)) g_s137_140)) (mem g_s272_299 (|-->| (set_prod (interval e0 e210) (interval e0 e159)) g_s138_142)) (mem g_s273_300 (|-->| (set_prod (interval e0 e210) (interval e0 e159)) g_s137_140)) (mem g_s274_301 (|-->| (set_prod (interval e0 e210) (interval e0 e159)) g_s136_138)) (mem g_s275_302 (|-->| (interval e0 e210) g_s137_140)) (mem g_s276_303 (|-->| (set_prod (interval e0 e210) (interval e0 e277)) g_s138_142)) (mem g_s277_304 (|-->| (set_prod (interval e0 e210) (interval e0 e277)) g_s138_142)) (mem g_s278_305 (|-->| (set_prod (interval e0 e210) (interval e0 e277)) g_s138_142)) (mem g_s279_306 (|-->| (set_prod (interval e0 e210) (interval e0 e277)) g_s138_142)) (mem g_s280_307 (|-->| (interval e0 e157) g_s138_142)) (mem g_s280_307 (|-->| (interval e0 e157) (interval e157 e308))) (mem g_s281_309 (|-->| (interval e0 e157) g_s138_142)) (mem g_s281_309 (|-->| (interval e0 e157) (interval e157 e308))) (mem g_s282_310 (|-->| (interval e0 e157) g_s138_142)) (mem g_s283_311 (|-->| (interval e0 e157) g_s138_142))))
(define-fun |def_seext| () Bool (and (mem g_s284_312 g_s137_140) (mem g_s285_313 g_s138_142) (mem g_s286_314 g_s136_138) (mem g_s287_315 g_s136_138) (mem g_s288_316 g_s138_142) (mem g_s289_318 (|-->| (interval e0 g_s290_317) (|-->| (interval e0 e277) g_s138_142))) (mem g_s291_319 g_s138_142) (mem g_s292_320 g_s138_142) (mem g_s293_321 g_s138_142) (mem g_s294_322 g_s138_142) (mem g_s295_323 g_s138_142) (mem g_s296_324 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s297_325 g_s138_142) (mem g_s298_326 g_s138_142) (mem g_s299_327 g_s137_140) (mem g_s300_328 (|-->| (interval e0 e149) g_s138_142)) (mem g_s301_329 (|-->| (interval e0 e149) g_s138_142)) (mem g_s302_330 g_s138_142) (mem g_s303_331 g_s138_142) (mem g_s304_332 g_s138_142) (mem g_s305_333 g_s138_142) (mem g_s306_334 (|-->| (interval e0 (|-i| g_s305_333 e157)) g_s138_142)) (mem g_s307_335 g_s137_140) (mem g_s308_336 g_s137_140) (mem g_s309_337 g_s138_142) (mem g_s310_338 g_s138_142) (mem g_s311_339 g_s138_142) (mem g_s312_340 g_s138_142) (mem g_s313_341 (|-->| (interval e0 (|-i| g_s312_340 e157)) g_s138_142)) (mem g_s314_342 (|-->| (interval e0 e149) g_s138_142)) (mem g_s315_343 g_s138_142) (mem g_s316_344 (|-->| (interval e0 e159) g_s138_142)) (mem g_s317_345 (|-->| (interval e0 e149) g_s138_142)) (mem g_s318_346 g_s137_140) (mem g_s319_347 g_s137_140) (mem g_s320_348 g_s138_142) (mem g_s321_349 g_s138_142) (mem g_s322_350 g_s138_142) (mem g_s323_351 g_s138_142) (mem g_s324_352 g_s138_142) (mem g_s325_353 g_s138_142) (mem g_s326_354 g_s138_142) (mem g_s327_355 g_s138_142) (mem g_s328_356 g_s138_142) (mem g_s329_357 g_s138_142) (mem g_s330_358 g_s138_142) (mem g_s331_359 g_s138_142) (mem g_s332_360 g_s136_138) (mem g_s333_361 g_s136_138) (mem g_s334_362 g_s136_138) (mem g_s335_363 g_s136_138) (mem g_s336_364 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s337_365 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s338_366 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s339_367 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s340_368 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s341_369 (|-->| (interval e0 g_s214_234) g_s138_142)) (mem g_s342_370 g_s137_140) (|<=i| g_s342_370 g_s214_234) (mem g_s343_371 g_s137_140) (|<=i| g_s343_371 g_s214_234) (mem g_s344_372 g_s137_140) (|<=i| g_s344_372 g_s214_234) (mem g_s345_373 g_s137_140) (|<=i| g_s345_373 g_s214_234) (mem g_s346_374 g_s137_140) (|<=i| g_s346_374 g_s214_234) (mem g_s347_375 g_s137_140) (|<=i| g_s347_375 g_s214_234) (mem g_s348_376 g_s138_142) (mem g_s349_378 (|-->| (interval e0 e377) g_s138_142)) (mem g_s350_379 g_s138_142) (mem g_s351_380 g_s136_138) (mem g_s352_381 g_s136_138) (mem g_s353_382 g_s136_138) (mem g_s354_383 g_s136_138) (mem g_s355_384 (seq g_s137_140)) (= (size g_s355_384) g_s345_373) (mem g_s356_385 (seq g_s138_142)) (= (size g_s356_385) g_s345_373) (mem g_s357_386 (seq g_s138_142)) (= (size g_s357_386) g_s345_373) (mem g_s358_387 (|-->| (interval e0 e159) g_s138_142)) (mem g_s359_388 g_s137_140) (mem g_s360_389 (|-->| (interval e0 e156) g_s138_142)) (mem g_s361_390 g_s137_140) (mem g_s362_391 g_s137_140) (mem g_s363_392 g_s136_138) (mem g_s364_393 g_s137_140) (mem g_s365_394 g_s138_142) (mem g_s366_395 (|-->| (interval e0 e156) g_s138_142)) (mem g_s367_396 (|-->| g_s138_142 g_s136_138)) (mem g_s368_397 (|-->| (seq1 g_s138_142) g_s136_138)) (mem g_s369_398 (|-->| (set_prod (seq1 g_s138_142) g_s137_140) g_s137_140)) (mem g_s145_150 (|+->| BOOL g_s138_142)) (mem g_s145_150 (|+->| BOOL g_s137_140)) (mem g_s145_150 (|+->| BOOL g_s136_138)) (not (= (apply g_s259_286 e0) (apply g_s259_286 e157))) (= (ran g_s259_286) (SET (mapplet (apply g_s259_286 e157) (apply g_s259_286 e0))))))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s370_399 g_s138_142) (mem g_s371_400 g_s137_140) (mem g_s372_401 (|-->| (interval e0 e156) g_s138_142)) (mem g_s373_402 g_s137_140) (mem g_s374_403 g_s137_140) (mem g_s375_404 g_s138_142) (mem g_s376_405 (|-->| (interval e0 e156) g_s138_142))))
(define-fun |def_inv| () Bool (and (= g_s370_399 g_s370$1_406) (= g_s371_400 g_s371$1_407) (= g_s372_401 g_s372$1_408) (= g_s373_402 g_s373$1_409) (= g_s374_403 g_s374$1_410) (= g_s375_404 g_s375$1_411) (= g_s376_405 g_s376$1_412) (mem g_s377$1_413 g_s138_142) (mem g_s378$1_414 g_s138_142) (mem g_s379$1_415 g_s138_142) (mem g_s380$1_416 g_s136_138) (mem g_s381$1_417 g_s136_138)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s371$2_418 g_s137_140))
(define-fun lh_2 () Bool (mem g_s372$2_419 (|-->| (interval e0 e156) g_s138_142)))
(define-fun lh_3 () Bool (mem g_s373$2_420 g_s137_140))
(define-fun lh_4 () Bool (mem g_s374$2_421 g_s137_140))
(define-fun lh_5 () Bool (mem g_s375$2_422 g_s138_142))
(define-fun lh_6 () Bool (mem g_s376$2_423 (|-->| (interval e0 e156) g_s138_142)))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem e0 g_s136_138))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s385_424 g_s136_138))
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
(define-fun lh_1 () Bool (= g_s350_379 g_s142_146))
(define-fun lh_2 () Bool (= (apply g_s150_155 (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (SEQ g_s365_394)) (composition g_s387_427 g_s366_395))) g_s364_393))
(define-fun lh_3 () Bool (= g_s370$1_406 g_s143_147))
(define-fun lh_4 () Bool (= g_s358_387 e429))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (or (= g_s142_146 g_s370_399) (= g_s142_146 g_s142_146)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s137_140))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 2
(assert (not (mem g_s386$1_426 g_s137_140)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (mem g_s392_430 g_s138_142))
(assert (and (|>=i| g_s392_430 e0) (|<=i| g_s392_430 e156)))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 3
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (mem g_s392_430 g_s138_142))
(assert (and (|>=i| g_s392_430 e0) (|<=i| g_s392_430 e156)))
(assert (= g_s386_425 g_s386$1_426))
(assert (mem g_s386$1_426 g_s138_142))
(assert (mem g_s392_430 g_s138_142))
(assert (and (|>=i| g_s392_430 e0) (|<=i| g_s392_430 e156)))
; PO 1 in group 4
(assert (not (= (apply g_s372_401 g_s392_430) (apply g_s372$1_408 g_s392_430))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 5
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s137_140))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 6
(assert (not (mem g_s386$1_426 g_s137_140)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s137_140))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 7
(assert (not (mem g_s386$1_426 g_s137_140)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 8
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 9
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 10
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (= g_s386_425 g_s386$1_426))
; PO 1 in group 11
(assert (not (mem g_s386$1_426 g_s138_142)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s385_424 g_s136_138))
(assert (mem g_s386_425 g_s138_142))
(define-fun lh_1 () Bool (= g_s350_379 g_s142_146))
(define-fun lh_2 () Bool (= (apply g_s150_155 (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (SEQ g_s365_394)) (composition g_s387_427 g_s366_395))) g_s364_393))
(define-fun lh_3 () Bool (= g_s370$1_406 g_s143_147))
(define-fun lh_4 () Bool (and (|>=i| g_s388_431 e0) (|<=i| g_s388_431 e159)))
; PO 1 in group 12
(push 1)
(assert (not (=> lh_1 (not (= e428 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> lh_1 (not (= (|*i| e428 e428) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 12
(push 1)
(assert (not (=> lh_1 (not (= (|*i| (|*i| e428 e428) e428) e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 12
(push 1)
(assert (not (=> lh_1 (mem g_s150_155 (|+->| (dom g_s150_155) (ran g_s150_155))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 12
(push 1)
(assert (not (=> lh_1 (mem (composition g_s387_427 g_s358_387) (seq (ran (composition g_s387_427 g_s358_387)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 12
(push 1)
(assert (not (=> lh_1 (mem (composition g_s387_427 g_s366_395) (seq (ran (composition g_s387_427 g_s366_395)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 12
(push 1)
(assert (not (=> lh_1 (mem (composition g_s387_427 g_s360_389) (seq (ran (composition g_s387_427 g_s360_389)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (seq (ran (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (seq (ran (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (seq (ran (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (seq (ran (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (seq (ran (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428)))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (SEQ g_s365_394)) (seq (ran (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (SEQ g_s365_394))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 12
(push 1)
(assert (not (=> lh_1 (mem (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s387_427 g_s358_387) (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))) (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))) (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))) (composition g_s387_427 g_s360_389)) (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))) (SEQ g_s365_394)) (composition g_s387_427 g_s366_395)) (dom g_s150_155)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 12
(push 1)
(assert (not (=> lh_1 (mem (SEQ g_s365_394) (seq (ran (SEQ g_s365_394)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 12
(push 1)
(assert (not (=> lh_1 (mem (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428))) (seq (ran (SEQ (mapplet (modulo g_s361_390 e428) (idiv g_s361_390 e428)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 12
(push 1)
(assert (not (=> lh_1 (mem (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428))) (seq (ran (SEQ (mapplet (modulo g_s362_391 e428) (idiv g_s362_391 e428)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 12
(push 1)
(assert (not (=> lh_1 (mem (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428))) (seq (ran (SEQ (mapplet (modulo g_s359_388 e428) (idiv g_s359_388 e428)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 12
(push 1)
(assert (not (=> lh_1 (mem (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428)))))) (seq (ran (SEQ (mapplet (modulo g_s363_392 e428) (mapplet (modulo (idiv g_s363_392 e428) e428) (mapplet (modulo (idiv g_s363_392 (|*i| e428 e428)) e428) (idiv g_s363_392 (|*i| (|*i| e428 e428) e428))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s361_390))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s363_392))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s362_391))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 g_s359_388))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 (idiv g_s363_392 e428)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e0 (idiv g_s363_392 (|*i| e428 e428))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 12
(push 1)
(assert (not (=> lh_1 (|<=i| e157 e428))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s152_161 (|+->| (dom g_s152_161) (ran g_s152_161))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (mapplet e0 g_s388_431) (dom g_s152_161)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s385_424 g_s136_138))
(assert (mem g_s386_425 g_s138_142))
(define-fun lh_1 () Bool (not (= g_s285_313 g_s142_146)))
(define-fun lh_2 () Bool (not (|<=i| g_s220_242 (apply g_s146_151 (mapplet g_s385_424 g_s381$1_417)))))
; PO 1 in group 13
(push 1)
(assert (not (=> lh_1 (mem g_s146_151 (|+->| (dom g_s146_151) (ran g_s146_151))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> lh_1 (mem (mapplet g_s385_424 g_s381$1_417) (dom g_s146_151)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s146_151 (|+->| (dom g_s146_151) (ran g_s146_151))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s385_424 g_s381$1_417) (dom g_s146_151)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s386_425 g_s138_142))
(assert (mem g_s392_430 g_s138_142))
(assert (and (|>=i| g_s392_430 e0) (|<=i| g_s392_430 e156)))
(assert (mem g_s386$1_426 g_s138_142))
(assert (mem g_s392_430 g_s138_142))
(assert (and (|>=i| g_s392_430 e0) (|<=i| g_s392_430 e156)))
; PO 1 in group 14
(push 1)
(assert (not (mem g_s372$1_408 (|+->| (dom g_s372$1_408) (ran g_s372$1_408)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (mem g_s392_430 (dom g_s372$1_408))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)