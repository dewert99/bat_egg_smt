(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e203 () U)
(declare-fun e137 () U)
(declare-fun e0 () U)
(declare-fun e145 () U)
(declare-fun e150 () U)
(declare-fun e144 () U)
(declare-fun e174 () U)
(declare-fun e331 () U)
(declare-fun e330 () U)
(declare-fun e147 () U)
(declare-fun e333 () U)
(declare-fun e334 () U)
(declare-fun e154 () U)
(declare-fun e199 () U)
(declare-fun e148 () U)
(declare-fun e335 () U)
(declare-fun e336 () U)
(declare-fun e337 () U)
(declare-fun e338 () U)
(declare-fun e339 () U)
(declare-fun e340 () U)
(declare-fun e341 () U)
(declare-fun e173 () U)
(declare-fun e342 () U)
(declare-fun e265 () U)
(declare-fun e343 () U)
(declare-fun e344 () U)
(declare-fun e345 () U)
(declare-fun e346 () U)
(declare-fun e349 () U)
(declare-fun e266 () U)
(declare-fun e175 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e189 () U)
(declare-fun e263 () U)
(declare-fun e207 () U)
(declare-fun e264 () U)
(declare-fun e226 () U)
(declare-fun e171 () U)
(declare-fun e141 () U)
(declare-fun e227 () U)
(declare-fun e139 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_138 () U)
(declare-fun g_s137_140 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_146 () U)
(declare-fun g_s141_149 () U)
(declare-fun g_s142_151 () U)
(declare-fun g_s143_152 () U)
(declare-fun g_s144_153 () U)
(declare-fun g_s145_155 () U)
(declare-fun g_s146_156 () U)
(declare-fun g_s147_157 () U)
(declare-fun g_s148_158 () U)
(declare-fun g_s149_159 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_160 () U)
(declare-fun g_s151_161 () U)
(declare-fun g_s152_162 () U)
(declare-fun g_s153_163 () U)
(declare-fun g_s154_164 () U)
(declare-fun g_s155_165 () U)
(declare-fun g_s156_166 () U)
(declare-fun g_s157_167 () U)
(declare-fun g_s158_168 () U)
(declare-fun g_s159_169 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_170 () U)
(declare-fun g_s161_172 () U)
(declare-fun g_s162_176 () U)
(declare-fun g_s163_177 () U)
(declare-fun g_s164_178 () U)
(declare-fun g_s165_179 () U)
(declare-fun g_s166_180 () U)
(declare-fun g_s167_181 () U)
(declare-fun g_s168_182 () U)
(declare-fun g_s169_183 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_184 () U)
(declare-fun g_s171_185 () U)
(declare-fun g_s172_186 () U)
(declare-fun g_s173_187 () U)
(declare-fun g_s174_188 () U)
(declare-fun g_s175_190 () U)
(declare-fun g_s176_192 () U)
(declare-fun g_s177_194 () U)
(declare-fun g_s178_195 () U)
(declare-fun g_s179_196 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_197 () U)
(declare-fun g_s181_198 () U)
(declare-fun g_s182_201 () U)
(declare-fun g_s183_200 () U)
(declare-fun g_s184_202 () U)
(declare-fun g_s185_204 () U)
(declare-fun g_s186_205 () U)
(declare-fun g_s187_206 () U)
(declare-fun g_s188_208 () U)
(declare-fun g_s189_209 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_210 () U)
(declare-fun g_s191_211 () U)
(declare-fun g_s192_212 () U)
(declare-fun g_s193_213 () U)
(declare-fun g_s194_214 () U)
(declare-fun g_s195_215 () U)
(declare-fun g_s196_216 () U)
(declare-fun g_s197_217 () U)
(declare-fun g_s198_218 () U)
(declare-fun g_s199_219 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_220 () U)
(declare-fun g_s201_221 () U)
(declare-fun g_s202_222 () U)
(declare-fun g_s203_223 () U)
(declare-fun g_s204_224 () U)
(declare-fun g_s205_225 () U)
(declare-fun g_s206_228 () U)
(declare-fun g_s207_229 () U)
(declare-fun g_s208_230 () U)
(declare-fun g_s209_231 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_232 () U)
(declare-fun g_s211_233 () U)
(declare-fun g_s212_234 () U)
(declare-fun g_s213_235 () U)
(declare-fun g_s214_236 () U)
(declare-fun g_s215_237 () U)
(declare-fun g_s216_238 () U)
(declare-fun g_s217_239 () U)
(declare-fun g_s218_240 () U)
(declare-fun g_s219_241 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_242 () U)
(declare-fun g_s221_243 () U)
(declare-fun g_s222_244 () U)
(declare-fun g_s223_245 () U)
(declare-fun g_s224_246 () U)
(declare-fun g_s225_247 () U)
(declare-fun g_s226_248 () U)
(declare-fun g_s227_249 () U)
(declare-fun g_s228_250 () U)
(declare-fun g_s229_251 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_252 () U)
(declare-fun g_s231_253 () U)
(declare-fun g_s232_254 () U)
(declare-fun g_s233_255 () U)
(declare-fun g_s234_256 () U)
(declare-fun g_s235_257 () U)
(declare-fun g_s236_258 () U)
(declare-fun g_s237_259 () U)
(declare-fun g_s238_260 () U)
(declare-fun g_s239_261 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_262 () U)
(declare-fun g_s241_267 () U)
(declare-fun g_s242_268 () U)
(declare-fun g_s243_269 () U)
(declare-fun g_s244_270 () U)
(declare-fun g_s245_271 () U)
(declare-fun g_s246_272 () U)
(declare-fun g_s247_273 () U)
(declare-fun g_s248_274 () U)
(declare-fun g_s249_275 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_276 () U)
(declare-fun g_s251_277 () U)
(declare-fun g_s252_278 () U)
(declare-fun g_s253_279 () U)
(declare-fun g_s254_280 () U)
(declare-fun g_s255_281 () U)
(declare-fun g_s256_282 () U)
(declare-fun g_s257_283 () U)
(declare-fun g_s258_284 () U)
(declare-fun g_s259_285 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_286 () U)
(declare-fun g_s261_287 () U)
(declare-fun g_s262_288 () U)
(declare-fun g_s263_289 () U)
(declare-fun g_s264_290 () U)
(declare-fun g_s265_291 () U)
(declare-fun g_s266_292 () U)
(declare-fun g_s267_293 () U)
(declare-fun g_s268_294 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s271_310 () U)
(declare-fun g_s274_311 () U)
(declare-fun g_s275_312 () U)
(declare-fun g_s276_313 () U)
(declare-fun g_s277_314 () U)
(declare-fun g_s278_315 () U)
(declare-fun g_s279_316 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_317 () U)
(declare-fun g_s281_318 () U)
(declare-fun g_s282_319 () U)
(declare-fun g_s283_320 () U)
(declare-fun g_s284_321 () U)
(declare-fun g_s285_322 () U)
(declare-fun g_s286_323 () U)
(declare-fun g_s287_324 () U)
(declare-fun g_s288_325 () U)
(declare-fun g_s289_326 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_327 () U)
(declare-fun g_s291$1_328 () U)
(declare-fun g_s292_329 () U)
(declare-fun g_s297_332 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s317_347 () U)
(declare-fun g_s317$1_348 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e301 () U)
(declare-fun e302 () U)
(declare-fun e303 () U)
(declare-fun e295 () U)
(declare-fun e298 () U)
(declare-fun e296 () U)
(declare-fun e299 () U)
(declare-fun e297 () U)
(declare-fun e300 () U)
(declare-fun e304 () U)
(declare-fun e305 () U)
(declare-fun e306 () U)
(declare-fun e307 () U)
(declare-fun e308 () U)
(declare-fun e309 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))))))))))))))))))))))))))))))))))))))))))) (= g_s49_50 (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s51_52 g_s50_51))))))))) (= g_s58_59 (SET (mapplet g_s85_86 (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 (mapplet g_s81_82 (mapplet g_s80_81 (mapplet g_s79_80 (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 (mapplet g_s75_76 (mapplet g_s74_75 (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 (mapplet g_s69_70 (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 (mapplet g_s61_62 (mapplet g_s60_61 g_s59_60)))))))))))))))))))))))))))) (= g_s86_87 (SET (mapplet g_s88_89 g_s87_88))) (= g_s89_90 (SET (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 (mapplet g_s95_96 (mapplet g_s94_95 (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 g_s90_91)))))))))) (= g_s99_100 (SET (mapplet g_s102_103 (mapplet g_s101_102 g_s100_101)))) (= g_s103_104 (SET (mapplet g_s105_106 g_s104_105))) (= g_s106_107 (SET (mapplet g_s113_114 (mapplet g_s112_113 (mapplet g_s111_112 (mapplet g_s110_111 (mapplet g_s109_110 (mapplet g_s108_109 g_s107_108)))))))) (= g_s114_115 (SET (mapplet g_s123_124 (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 (mapplet g_s119_120 (mapplet g_s118_119 (mapplet g_s117_118 (mapplet g_s116_117 g_s115_116)))))))))) (= g_s124_125 (SET (mapplet g_s128_129 (mapplet g_s127_128 (mapplet g_s126_127 g_s125_126))))) (= g_s129_130 (SET (mapplet g_s132_133 (mapplet g_s131_132 g_s130_131)))) (= g_s133_134 (SET (mapplet g_s135_136 g_s134_135))) (= g_s136_138 (interval e0 e137)) (= g_s137_140 (interval e0 e139)) (= g_s138_142 (interval e0 e141)) (mem g_s139_143 (|-->| (seq1 g_s138_142) g_s137_140)) (= g_s140_146 (|-->| (interval e145 e144) g_s138_142)) (mem g_s141_149 (|-->| (set_prod (interval e0 e148) (interval e0 e147)) g_s138_142)) (mem g_s142_151 (|-->| (set_prod (interval e0 e148) (interval e0 e150)) g_s138_142)) (mem g_s143_152 (|-->| (set_prod (interval e0 e148) (interval e0 e150)) g_s138_142)) (mem g_s144_153 g_s138_142) (|<=i| e154 g_s144_153) (mem g_s145_155 (|-->| (interval e0 e148) g_s137_140)) (mem g_s146_156 (|-->| (interval e0 e148) g_s137_140)) (mem g_s147_157 g_s136_138) (mem g_s148_158 g_s138_142) (mem g_s149_159 g_s138_142) (mem g_s150_160 g_s138_142) (mem g_s151_161 g_s138_142) (mem g_s152_162 g_s138_142) (mem g_s153_163 g_s138_142) (mem g_s154_164 g_s138_142) (mem g_s155_165 g_s138_142) (mem g_s156_166 g_s138_142) (mem g_s157_167 g_s137_140) (not (= g_s156_166 g_s152_162)) (mem g_s158_168 g_s138_142) (mem g_s159_169 g_s138_142) (mem g_s160_170 g_s138_142) (|<=i| g_s160_170 e171) (mem g_s161_172 g_s138_142) (|<=i| (|+i| g_s160_170 e173) g_s159_169) (|<=i| (|+i| g_s161_172 e174) g_s159_169) (|<=i| e175 g_s159_169) (mem g_s162_176 g_s140_146) (= g_s162_176 (set_prod (interval e145 e144) (SET e141))) (mem g_s163_177 g_s138_142) (mem g_s164_178 g_s138_142) (mem g_s165_179 g_s138_142) (mem g_s166_180 g_s138_142) (mem g_s167_181 g_s138_142) (mem g_s168_182 g_s138_142) (mem g_s169_183 g_s138_142) (mem g_s170_184 g_s138_142) (mem g_s171_185 g_s138_142) (mem g_s172_186 g_s136_138) (mem g_s173_187 (|-->| (interval e0 e141) g_s137_140)) (mem g_s174_188 g_s138_142) (|<=i| g_s174_188 e189) (mem g_s175_190 g_s138_142) (|<i| g_s175_190 e191) (mem g_s176_192 g_s138_142) (|<i| g_s176_192 e191) (|<i| (|+i| g_s175_190 g_s176_192) e193) (mem g_s177_194 g_s137_140) (mem g_s178_195 g_s138_142) (mem g_s179_196 g_s138_142) (mem g_s180_197 g_s138_142) (mem g_s181_198 g_s138_142) (|<=i| e199 g_s179_196) (|<=i| g_s179_196 e189) (|<=i| (|+i| g_s182_201 g_s183_200) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193)) (|<=i| e0 (|-i| (|+i| e139 g_s183_200) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193))) (|<=i| (|+i| g_s182_201 g_s183_200) (|*i| g_s174_188 g_s144_153)) (|<=i| (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s175_190)) e193) (|+i| (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|+i| e193 g_s176_192)) e193) e145)) (|<=i| (|*i| g_s144_153 (|-i| e193 g_s176_192)) g_s184_202) (|<=i| (idiv (|*i| g_s174_188 (|*i| g_s144_153 (|-i| e193 g_s176_192))) e193) e139) (|<=i| g_s182_201 (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193)) (|<=i| (|*i| g_s174_188 g_s144_153) e139) (|<=i| e0 (|-i| (|+i| e145 (|*i| g_s174_188 g_s144_153)) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| (|-i| e193 g_s176_192) g_s175_190)) e193))) (|<=i| (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193) (|*i| g_s174_188 g_s144_153)) (|<=i| e0 (|-i| (|+i| e145 (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193)) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| (|-i| e193 g_s176_192) g_s175_190)) e193))) (|<=i| (|*i| g_s174_188 g_s144_153) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|+i| e193 g_s176_192)) e193)) (|<=i| e0 (|-i| (|+i| e145 (|*i| g_s174_188 g_s144_153)) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s175_190)) e193))) (|<=i| e0 (|+i| e145 (|*i| g_s174_188 g_s144_153))) (|<=i| e0 (|-i| (|+i| (|+i| e139 g_s182_201) g_s183_200) (|*i| g_s174_188 g_s144_153))) (|<=i| e0 (|-i| (|-i| e203 g_s171_185) (|*i| g_s174_188 g_s144_153))) (|<=i| e0 (|-i| (|-i| e203 g_s171_185) (idiv (|*i| (|*i| g_s174_188 g_s144_153) (|-i| e193 g_s176_192)) e193))) (|<=i| (|*i| (|*i| e150 g_s174_188) g_s144_153) e137) (|<=i| (|*i| (|*i| e150 g_s174_188) g_s144_153) e203) (|<=i| e0 (|-i| (|-i| e203 g_s171_185) (|*i| (|*i| e150 g_s174_188) g_s144_153))) (mem g_s185_204 g_s138_142) (|<i| g_s185_204 g_s186_205) (mem g_s187_206 g_s138_142) (|<=i| e207 g_s185_204) (= g_s187_206 (|-i| g_s185_204 e145)) (mem g_s188_208 g_s138_142) (mem g_s189_209 g_s138_142) (= g_s188_208 e150) (= g_s189_209 e145) (mem g_s190_210 g_s137_140) (mem g_s191_211 g_s137_140) (mem g_s192_212 g_s137_140) (mem g_s193_213 g_s138_142) (mem g_s194_214 g_s138_142) (mem g_s195_215 g_s138_142) (mem g_s196_216 g_s138_142) (mem g_s197_217 g_s138_142) (mem g_s198_218 g_s138_142) (not (= g_s197_217 g_s198_218)) (mem g_s199_219 g_s138_142) (mem g_s200_220 g_s138_142) (mem g_s201_221 g_s138_142) (not (= g_s199_219 g_s200_220)) (not (= g_s199_219 g_s201_221)) (not (= g_s200_220 g_s201_221)) (mem g_s202_222 g_s136_138) (mem g_s203_223 g_s138_142) (mem g_s204_224 g_s138_142) (mem g_s205_225 g_s137_140) (|<=i| e226 g_s205_225) (|<=i| g_s205_225 e227) (|<=i| g_s159_169 g_s205_225) (mem g_s206_228 (|-->| (interval e0 e141) g_s137_140)) (mem g_s207_229 g_s136_138) (mem g_s208_230 g_s136_138) (mem g_s209_231 g_s137_140) (mem g_s210_232 g_s137_140) (mem g_s211_233 g_s136_138) (mem g_s212_234 g_s136_138) (mem g_s213_235 g_s136_138) (mem g_s214_236 g_s136_138) (mem g_s215_237 g_s136_138) (mem g_s216_238 g_s136_138) (mem g_s217_239 g_s136_138) (mem g_s218_240 g_s136_138) (mem g_s219_241 g_s136_138) (mem g_s220_242 g_s136_138) (mem g_s221_243 g_s136_138) (mem g_s222_244 g_s136_138) (mem g_s223_245 g_s136_138) (mem g_s224_246 g_s136_138) (mem g_s225_247 g_s136_138) (mem g_s226_248 g_s136_138) (mem g_s227_249 g_s136_138) (mem g_s228_250 g_s136_138) (mem g_s229_251 g_s136_138) (mem g_s230_252 g_s136_138) (mem g_s231_253 g_s136_138) (mem g_s232_254 g_s137_140) (mem g_s233_255 (|-->| (interval e0 e150) g_s138_142)) (mem g_s234_256 g_s138_142) (|<i| g_s234_256 g_s186_205) (mem g_s235_257 g_s138_142) (= g_s235_257 (|-i| g_s234_256 e145)) (mem g_s236_258 g_s138_142) (|<=i| g_s236_258 g_s234_256) (= g_s236_258 e150) (mem g_s237_259 g_s138_142) (mem g_s238_260 g_s138_142) (= g_s238_260 g_s237_259) (= g_s238_260 e150) (mem g_s239_261 (|-->| (interval e0 e144) g_s138_142)) (mem g_s240_262 (|-->| (interval e0 e144) g_s138_142)) (|<=i| (|+i| e263 (|*i| e199 g_s234_256)) g_s205_225) (|<=i| (|+i| e264 (|*i| e144 g_s179_196)) g_s205_225) (|<=i| (|*i| e199 g_s234_256) e265) (|<=i| (|*i| e144 g_s179_196) e266) (mem g_s241_267 (|-->| (interval e0 e150) g_s138_142)) (mem g_s242_268 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s243_269 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s244_270 (|-->| g_s136_138 g_s136_138)) (mem g_s245_271 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s246_272 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s247_273 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s248_274 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s249_275 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s250_276 (|-->| g_s137_140 g_s137_140)) (mem g_s251_277 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s252_278 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s253_279 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s254_280 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s255_281 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s256_282 (|-->| g_s138_142 g_s138_142)) (mem g_s257_283 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s258_284 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s259_285 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s260_286 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s261_287 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s262_288 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s263_289 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s264_290 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s265_291 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s266_292 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s267_293 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s268_294 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (= g_s242_268 e295) (= g_s248_274 e296) (= g_s254_280 e297) (= g_s243_269 e298) (= g_s249_275 e299) (= g_s255_281 e300) (= g_s260_286 e301) (= g_s261_287 e302) (= g_s262_288 e303) (= g_s263_289 e304) (= g_s264_290 e305) (= g_s265_291 e306) (= g_s266_292 e307) (= g_s267_293 e308) (= g_s268_294 e309) (mem g_s184_202 g_s136_138) (mem g_s271_310 g_s137_140) (mem g_s186_205 g_s138_142) (mem g_s274_311 g_s138_142) (mem g_s275_312 g_s138_142) (= g_s184_202 e137) (= g_s271_310 e139) (= g_s186_205 e141) (and (|>=i| g_s274_311 e0) (|<=i| g_s274_311 g_s186_205)) (and (|>=i| g_s275_312 e0) (|<=i| g_s275_312 g_s186_205)) (not (= g_s274_311 g_s275_312)) (= g_s276_313 (SET (mapplet g_s275_312 g_s274_311))) (|<=i| g_s274_311 e150) (|<=i| g_s275_312 e150) (= g_s277_314 (SET (mapplet (mapplet FALSE g_s275_312) (mapplet TRUE g_s274_311))))))
(define-fun |def_seext| () Bool (and (mem g_s278_315 (|-->| (seq1 g_s138_142) g_s136_138)) (mem g_s279_316 (|-->| (set_prod (seq1 g_s138_142) g_s137_140) g_s137_140)) (mem g_s280_317 (|-->| (interval e0 e147) g_s138_142)) (mem g_s281_318 g_s137_140) (mem g_s282_319 (|-->| (interval e0 e144) g_s138_142)) (mem g_s283_320 g_s137_140) (mem g_s284_321 g_s137_140) (mem g_s285_322 g_s136_138) (mem g_s286_323 g_s137_140) (mem g_s287_324 g_s138_142) (mem g_s288_325 (|-->| (interval e0 e144) g_s138_142)) (mem g_s289_326 (|-->| g_s138_142 g_s136_138)) (mem g_s277_314 (|+->| BOOL g_s138_142)) (mem g_s277_314 (|+->| BOOL g_s137_140)) (mem g_s277_314 (|+->| BOOL g_s136_138))))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s290_327 (seq g_s138_142)) (|<=i| (size g_s290_327) g_s185_204)))
(define-fun |def_inv| () Bool (and (mem g_s291$1_328 (|-->| (interval e0 g_s187_206) g_s138_142)) (= g_s290_327 (restriction_head (composition g_s292_329 g_s291$1_328) (size g_s290_327)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem (set_prod (interval e0 g_s187_206) (SET e0)) (|-->| (interval e0 g_s187_206) g_s138_142))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (= empty (restriction_head (composition g_s292_329 (set_prod (interval e0 g_s187_206) (SET e0))) (size empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 1
(push 1)
(assert (not (mem (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| g_s291$1_328 (SET (mapplet e0 (apply g_s280_317 e0)))) (SET (mapplet e145 (apply g_s280_317 e145)))) (SET (mapplet e150 (apply g_s280_317 e150)))) (SET (mapplet e144 (apply g_s280_317 e144)))) (SET (mapplet e174 (apply g_s280_317 e174)))) (SET (mapplet e331 (apply g_s280_317 e331)))) (SET (mapplet e330 (apply g_s280_317 e330)))) (SET (mapplet e147 (apply g_s280_317 e147)))) (|-->| (interval e0 g_s187_206) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (= (composition g_s292_329 g_s280_317) (restriction_head (composition g_s292_329 (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| (|<+| g_s291$1_328 (SET (mapplet e0 (apply g_s280_317 e0)))) (SET (mapplet e145 (apply g_s280_317 e145)))) (SET (mapplet e150 (apply g_s280_317 e150)))) (SET (mapplet e144 (apply g_s280_317 e144)))) (SET (mapplet e174 (apply g_s280_317 e174)))) (SET (mapplet e331 (apply g_s280_317 e331)))) (SET (mapplet e330 (apply g_s280_317 e330)))) (SET (mapplet e147 (apply g_s280_317 e147))))) (size (composition g_s292_329 g_s280_317))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e333))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e333 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e333 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e334))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e334 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e334 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e154))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e154 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e154 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e199))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e199 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e199 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e148))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e148 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e148 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e335))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e335 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e335 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e336))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e336 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e336 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e337))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e337 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e337 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e338))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e338 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e338 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e339))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e339 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e339 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e340))
; PO 1 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e340 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e340 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e341))
; PO 1 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e341 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e341 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e173))
; PO 1 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e173 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e173 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e342))
; PO 1 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e342 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e342 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= (size g_s290_327) e265))
; PO 1 in group 16
(push 1)
(assert (not (=> lh_1 (mem (|<+| g_s291$1_328 (SET (mapplet e265 g_s287_324))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (=> lh_1 (= (concatenate g_s290_327 (SEQ g_s287_324)) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e265 g_s287_324)))) (size (concatenate g_s290_327 (SEQ g_s287_324))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e343))
; PO 1 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e343 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e343 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e344))
; PO 1 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e344 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e344 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 19 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e345))
; PO 1 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e345 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e345 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 20 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s297_332 g_s138_142))
(define-fun lh_2 () Bool (= (size g_s290_327) e346))
; PO 1 in group 20
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s291$1_328 (SET (mapplet e346 g_s297_332))) (|-->| (interval e0 g_s187_206) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 20
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<-| g_s290_327 g_s297_332) (restriction_head (composition g_s292_329 (|<+| g_s291$1_328 (SET (mapplet e346 g_s297_332)))) (size (|<-| g_s290_327 g_s297_332)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 21 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s317$1_348 g_s317_347))
(define-fun lh_1 () Bool (mem g_s317_347 g_s137_140))
(define-fun lh_2 () Bool (= (size g_s290_327) e349))
(define-fun lh_3 () Bool (mem g_s291$1_328 (|-->| (interval e0 g_s187_206) g_s138_142)))
(define-fun lh_4 () Bool (mem e0 g_s138_142))
(define-fun lh_5 () Bool (mem e349 g_s138_142))
(define-fun lh_6 () Bool (|<=i| e349 g_s185_204))
(define-fun lh_7 () Bool (|<i| e0 e349))
(define-fun lh_8 () Bool (|<=i| e145 e349))
(define-fun lh_9 () Bool (mem g_s317$1_348 g_s137_140))
; PO 1 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e349 g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s317$1_348 g_s137_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<i| e0 e349))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e145 e349))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e349 g_s185_204))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 21
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= (apply g_s139_143 (restriction_tail (restriction_head (composition g_s292_329 g_s291$1_328) e349) e0)) (apply g_s139_143 g_s290_327)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 22 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(define-fun lh_1 () Bool (mem g_s291$1_328 (|-->| (interval e0 g_s187_206) g_s138_142)))
; PO 1 in group 22
(push 1)
(assert (not (=> lh_1 (mem g_s290_327 (seq (ran g_s290_327))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 22
(push 1)
(assert (not (=> lh_1 (and (|>=i| (size g_s290_327) e0) (|<=i| (size g_s290_327) (size (composition g_s292_329 g_s291$1_328)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 23 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 23
(push 1)
(assert (not (mem e0 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 23
(push 1)
(assert (not (mem e145 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 23
(push 1)
(assert (not (mem e150 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 23
(push 1)
(assert (not (mem e144 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 23
(push 1)
(assert (not (mem e174 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 23
(push 1)
(assert (not (mem e331 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 23
(push 1)
(assert (not (mem e330 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 23
(push 1)
(assert (not (mem e147 (dom g_s280_317))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 23
(push 1)
(assert (not (mem g_s280_317 (|+->| (dom g_s280_317) (ran g_s280_317)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)