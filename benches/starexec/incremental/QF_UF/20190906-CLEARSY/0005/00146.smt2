(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e1 () U)
(declare-fun e0 () U)
(declare-fun e10 () U)
(declare-fun e16 () U)
(declare-fun e14 () U)
(declare-fun e67 () U)
(declare-fun e8 () U)
(declare-fun e5 () U)
(declare-fun e31 () U)
(declare-fun e3 () U)
(declare-fun g_s0_2 () U)
(declare-fun g_s1_4 () U)
(declare-fun g_s10_18 () U)
(declare-fun g_s11_19 () U)
(declare-fun g_s12_20 () U)
(declare-fun g_s13_21 () U)
(declare-fun g_s14_22 () U)
(declare-fun g_s15_23 () U)
(declare-fun g_s16_24 () U)
(declare-fun g_s17_25 () U)
(declare-fun g_s18_26 () U)
(declare-fun g_s19_27 () U)
(declare-fun g_s2_6 () U)
(declare-fun g_s20_28 () U)
(declare-fun g_s21_29 () U)
(declare-fun g_s22_30 () U)
(declare-fun g_s23_32 () U)
(declare-fun g_s24_33 () U)
(declare-fun g_s25_34 () U)
(declare-fun g_s26_35 () U)
(declare-fun g_s27_36 () U)
(declare-fun g_s28_37 () U)
(declare-fun g_s29_38 () U)
(declare-fun g_s3_7 () U)
(declare-fun g_s30_39 () U)
(declare-fun g_s31_40 () U)
(declare-fun g_s32_41 () U)
(declare-fun g_s33_42 () U)
(declare-fun g_s34_43 () U)
(declare-fun g_s35_44 () U)
(declare-fun g_s36_45 () U)
(declare-fun g_s37_46 () U)
(declare-fun g_s38_47 () U)
(declare-fun g_s39_48 () U)
(declare-fun g_s4_9 () U)
(declare-fun g_s40_49 () U)
(declare-fun g_s41_50 () U)
(declare-fun g_s42_51 () U)
(declare-fun g_s43_52 () U)
(declare-fun g_s44_53 () U)
(declare-fun g_s45_54 () U)
(declare-fun g_s46_55 () U)
(declare-fun g_s47_56 () U)
(declare-fun g_s48_57 () U)
(declare-fun g_s49_58 () U)
(declare-fun g_s5_11 () U)
(declare-fun g_s50_59 () U)
(declare-fun g_s51_60 () U)
(declare-fun g_s52_61 () U)
(declare-fun g_s53_62 () U)
(declare-fun g_s54_63 () U)
(declare-fun g_s55_64 () U)
(declare-fun g_s56_65 () U)
(declare-fun g_s57_66 () U)
(declare-fun g_s58_68 () U)
(declare-fun g_s59_69 () U)
(declare-fun g_s6_12 () U)
(declare-fun g_s60_70 () U)
(declare-fun g_s61_71 () U)
(declare-fun g_s62_72 () U)
(declare-fun g_s63_73 () U)
(declare-fun g_s65_74 () U)
(declare-fun g_s66_75 () U)
(declare-fun g_s7_13 () U)
(declare-fun g_s8_15 () U)
(declare-fun g_s9_17 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_2 (interval e0 e1)) (= g_s1_4 (interval e0 e3)) (= g_s2_6 (interval e0 e5)) (mem g_s3_7 g_s2_6) (|<i| g_s3_7 e5) (|<=i| e8 g_s3_7) (mem g_s4_9 g_s2_6) (|<=i| e10 g_s4_9) (mem g_s5_11 g_s2_6) (|<=i| e10 g_s5_11) (mem g_s6_12 g_s2_6) (|<=i| e10 g_s6_12) (mem g_s7_13 g_s2_6) (|<=i| e14 g_s7_13) (mem g_s8_15 g_s2_6) (= g_s8_15 (|-i| g_s7_13 e10)) (|<=i| g_s8_15 e16) (mem g_s9_17 g_s0_2) (mem g_s10_18 g_s0_2) (mem g_s11_19 g_s0_2) (mem g_s12_20 g_s0_2) (mem g_s13_21 g_s0_2) (mem g_s14_22 g_s0_2) (mem g_s15_23 g_s0_2) (mem g_s16_24 g_s0_2) (mem g_s17_25 g_s0_2) (mem g_s18_26 g_s0_2) (mem g_s19_27 g_s0_2) (mem g_s20_28 g_s0_2) (mem g_s21_29 g_s0_2) (mem g_s22_30 g_s1_4) (|<=i| g_s22_30 e31) (mem g_s23_32 g_s0_2) (mem g_s24_33 NATURAL1) (mem g_s25_34 NATURAL1) (mem g_s26_35 NATURAL1) (mem g_s27_36 NATURAL1) (mem g_s28_37 NATURAL1) (mem g_s29_38 NATURAL1) (mem g_s30_39 NATURAL1) (mem g_s31_40 NATURAL1) (|<i| g_s30_39 g_s31_40) (mem g_s32_41 g_s1_4) (mem g_s33_42 g_s0_2) (mem g_s34_43 g_s0_2) (mem g_s35_44 g_s0_2) (= g_s33_42 (|+i| g_s32_41 g_s24_33)) (= g_s34_43 (|+i| g_s32_41 g_s25_34)) (= g_s35_44 (|+i| g_s32_41 g_s26_35)) (mem g_s36_45 g_s0_2) (mem g_s37_46 g_s0_2) (mem g_s38_47 g_s0_2) (mem g_s39_48 g_s0_2) (mem g_s40_49 g_s0_2) (= g_s36_45 (|+i| g_s32_41 g_s27_36)) (= g_s37_46 (|+i| g_s32_41 g_s28_37)) (= g_s38_47 (|+i| g_s32_41 g_s29_38)) (= g_s39_48 (|+i| g_s32_41 g_s31_40)) (= g_s40_49 (|-i| (|+i| g_s32_41 g_s31_40) g_s30_39)) (mem g_s41_50 g_s2_6) (|<i| g_s41_50 e5) (mem g_s42_51 g_s2_6) (|<i| g_s42_51 e5) (mem g_s43_52 g_s2_6) (mem g_s44_53 g_s2_6) (mem g_s45_54 g_s1_4) (mem g_s46_55 g_s1_4) (mem g_s47_56 g_s1_4) (mem g_s48_57 g_s1_4) (mem g_s49_58 g_s1_4) (mem g_s50_59 g_s1_4) (mem g_s51_60 g_s1_4) (mem g_s52_61 g_s2_6) (|<=i| e10 g_s52_61) (mem g_s53_62 g_s2_6) (mem g_s54_63 g_s2_6) (mem g_s55_64 g_s2_6) (mem g_s56_65 g_s2_6) (mem g_s57_66 g_s2_6) (|<=i| g_s53_62 e67) (|<=i| g_s54_63 e67) (|<=i| g_s55_64 e67) (|<=i| g_s56_65 e67) (|<=i| g_s57_66 e67) (not (= g_s53_62 g_s54_63)) (not (= g_s53_62 g_s55_64)) (not (= g_s53_62 g_s56_65)) (not (= g_s53_62 g_s57_66)) (not (= g_s54_63 g_s55_64)) (not (= g_s54_63 g_s56_65)) (not (= g_s54_63 g_s57_66)) (not (= g_s55_64 g_s56_65)) (not (= g_s55_64 g_s57_66)) (not (= g_s56_65 g_s57_66))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s58_68 g_s1_4) (mem g_s59_69 g_s2_6) (mem g_s60_70 g_s0_2) (mem g_s61_71 g_s0_2) (mem g_s62_72 g_s2_6) (mem g_s63_73 (|-->| (set_prod (interval e0 g_s4_9) (interval e0 e67)) g_s2_6))))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s65_74 g_s2_6))
(assert (and (|>=i| g_s65_74 e0) (|<=i| g_s65_74 g_s4_9)))
(assert (mem g_s66_75 g_s2_6))
(assert (and (|>=i| g_s66_75 e0) (|<=i| g_s66_75 e67)))
; PO 1 in group 0
(push 1)
(assert (not (mem g_s63_73 (|+->| (dom g_s63_73) (ran g_s63_73)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (mapplet g_s65_74 g_s66_75) (dom g_s63_73))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)