(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e258 () U)
(declare-fun e143 () U)
(declare-fun e0 () U)
(declare-fun e176 () U)
(declare-fun e155 () U)
(declare-fun e202 () U)
(declare-fun e230 () U)
(declare-fun e204 () U)
(declare-fun e210 () U)
(declare-fun e255 () U)
(declare-fun e205 () U)
(declare-fun e405 () U)
(declare-fun e229 () U)
(declare-fun e319 () U)
(declare-fun e320 () U)
(declare-fun e328 () U)
(declare-fun e327 () U)
(declare-fun e231 () U)
(declare-fun e247 () U)
(declare-fun e249 () U)
(declare-fun e245 () U)
(declare-fun e317 () U)
(declare-fun e261 () U)
(declare-fun e318 () U)
(declare-fun e280 () U)
(declare-fun e227 () U)
(declare-fun e147 () U)
(declare-fun e326 () U)
(declare-fun e171 () U)
(declare-fun e281 () U)
(declare-fun e145 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_137 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_139 () U)
(declare-fun g_s139_140 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_141 () U)
(declare-fun g_s141_142 () U)
(declare-fun g_s142_144 () U)
(declare-fun g_s143_146 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_149 () U)
(declare-fun g_s146_150 () U)
(declare-fun g_s147_151 () U)
(declare-fun g_s148_152 () U)
(declare-fun g_s149_153 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_154 () U)
(declare-fun g_s151_156 () U)
(declare-fun g_s152_157 () U)
(declare-fun g_s153_158 () U)
(declare-fun g_s154_159 () U)
(declare-fun g_s155_160 () U)
(declare-fun g_s156_161 () U)
(declare-fun g_s157_162 () U)
(declare-fun g_s158_163 () U)
(declare-fun g_s159_164 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_165 () U)
(declare-fun g_s161_166 () U)
(declare-fun g_s162_167 () U)
(declare-fun g_s163_168 () U)
(declare-fun g_s164_169 () U)
(declare-fun g_s165_170 () U)
(declare-fun g_s166_172 () U)
(declare-fun g_s167_173 () U)
(declare-fun g_s168_174 () U)
(declare-fun g_s169_175 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_177 () U)
(declare-fun g_s171_178 () U)
(declare-fun g_s172_179 () U)
(declare-fun g_s173_180 () U)
(declare-fun g_s174_181 () U)
(declare-fun g_s175_182 () U)
(declare-fun g_s176_183 () U)
(declare-fun g_s177_184 () U)
(declare-fun g_s178_185 () U)
(declare-fun g_s179_186 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_187 () U)
(declare-fun g_s181_188 () U)
(declare-fun g_s182_189 () U)
(declare-fun g_s183_190 () U)
(declare-fun g_s184_191 () U)
(declare-fun g_s185_192 () U)
(declare-fun g_s186_193 () U)
(declare-fun g_s187_194 () U)
(declare-fun g_s188_195 () U)
(declare-fun g_s189_196 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_197 () U)
(declare-fun g_s191_198 () U)
(declare-fun g_s192_199 () U)
(declare-fun g_s193_200 () U)
(declare-fun g_s194_201 () U)
(declare-fun g_s195_203 () U)
(declare-fun g_s196_206 () U)
(declare-fun g_s197_207 () U)
(declare-fun g_s198_208 () U)
(declare-fun g_s199_209 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_211 () U)
(declare-fun g_s201_212 () U)
(declare-fun g_s202_213 () U)
(declare-fun g_s203_214 () U)
(declare-fun g_s204_215 () U)
(declare-fun g_s205_216 () U)
(declare-fun g_s206_217 () U)
(declare-fun g_s207_218 () U)
(declare-fun g_s208_219 () U)
(declare-fun g_s209_220 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_221 () U)
(declare-fun g_s211_222 () U)
(declare-fun g_s212_223 () U)
(declare-fun g_s213_224 () U)
(declare-fun g_s214_225 () U)
(declare-fun g_s215_226 () U)
(declare-fun g_s216_228 () U)
(declare-fun g_s217_232 () U)
(declare-fun g_s218_233 () U)
(declare-fun g_s219_234 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_235 () U)
(declare-fun g_s221_236 () U)
(declare-fun g_s222_237 () U)
(declare-fun g_s223_238 () U)
(declare-fun g_s224_239 () U)
(declare-fun g_s225_240 () U)
(declare-fun g_s226_241 () U)
(declare-fun g_s227_242 () U)
(declare-fun g_s228_243 () U)
(declare-fun g_s229_244 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_246 () U)
(declare-fun g_s231_248 () U)
(declare-fun g_s232_250 () U)
(declare-fun g_s233_251 () U)
(declare-fun g_s234_252 () U)
(declare-fun g_s235_253 () U)
(declare-fun g_s236_254 () U)
(declare-fun g_s237_257 () U)
(declare-fun g_s238_256 () U)
(declare-fun g_s239_259 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_260 () U)
(declare-fun g_s241_262 () U)
(declare-fun g_s242_263 () U)
(declare-fun g_s243_264 () U)
(declare-fun g_s244_265 () U)
(declare-fun g_s245_266 () U)
(declare-fun g_s246_267 () U)
(declare-fun g_s247_268 () U)
(declare-fun g_s248_269 () U)
(declare-fun g_s249_270 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_271 () U)
(declare-fun g_s251_272 () U)
(declare-fun g_s252_273 () U)
(declare-fun g_s253_274 () U)
(declare-fun g_s254_275 () U)
(declare-fun g_s255_276 () U)
(declare-fun g_s256_277 () U)
(declare-fun g_s257_278 () U)
(declare-fun g_s258_279 () U)
(declare-fun g_s259_282 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_283 () U)
(declare-fun g_s261_284 () U)
(declare-fun g_s262_285 () U)
(declare-fun g_s263_286 () U)
(declare-fun g_s264_287 () U)
(declare-fun g_s265_288 () U)
(declare-fun g_s266_289 () U)
(declare-fun g_s267_290 () U)
(declare-fun g_s268_291 () U)
(declare-fun g_s269_292 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_293 () U)
(declare-fun g_s271_294 () U)
(declare-fun g_s272_295 () U)
(declare-fun g_s273_296 () U)
(declare-fun g_s274_297 () U)
(declare-fun g_s275_298 () U)
(declare-fun g_s276_299 () U)
(declare-fun g_s277_300 () U)
(declare-fun g_s278_301 () U)
(declare-fun g_s279_302 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_303 () U)
(declare-fun g_s281_304 () U)
(declare-fun g_s282_305 () U)
(declare-fun g_s283_306 () U)
(declare-fun g_s284_307 () U)
(declare-fun g_s285_308 () U)
(declare-fun g_s286_309 () U)
(declare-fun g_s287_310 () U)
(declare-fun g_s288_311 () U)
(declare-fun g_s289_312 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_313 () U)
(declare-fun g_s291_314 () U)
(declare-fun g_s292_315 () U)
(declare-fun g_s293_316 () U)
(declare-fun g_s294_321 () U)
(declare-fun g_s295_322 () U)
(declare-fun g_s296_323 () U)
(declare-fun g_s297_324 () U)
(declare-fun g_s298_325 () U)
(declare-fun g_s299_329 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_330 () U)
(declare-fun g_s301_331 () U)
(declare-fun g_s302_332 () U)
(declare-fun g_s303_333 () U)
(declare-fun g_s304_334 () U)
(declare-fun g_s305_335 () U)
(declare-fun g_s306_336 () U)
(declare-fun g_s307_337 () U)
(declare-fun g_s308_338 () U)
(declare-fun g_s309_339 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_340 () U)
(declare-fun g_s311_341 () U)
(declare-fun g_s312_342 () U)
(declare-fun g_s313_343 () U)
(declare-fun g_s314_344 () U)
(declare-fun g_s315_345 () U)
(declare-fun g_s316_346 () U)
(declare-fun g_s317_347 () U)
(declare-fun g_s318_348 () U)
(declare-fun g_s319_349 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_350 () U)
(declare-fun g_s321_351 () U)
(declare-fun g_s322_352 () U)
(declare-fun g_s323_353 () U)
(declare-fun g_s324_354 () U)
(declare-fun g_s325_355 () U)
(declare-fun g_s326_356 () U)
(declare-fun g_s327_357 () U)
(declare-fun g_s328_358 () U)
(declare-fun g_s329_359 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_360 () U)
(declare-fun g_s331_361 () U)
(declare-fun g_s332_362 () U)
(declare-fun g_s333_363 () U)
(declare-fun g_s334_364 () U)
(declare-fun g_s335_365 () U)
(declare-fun g_s336_366 () U)
(declare-fun g_s337_367 () U)
(declare-fun g_s338_368 () U)
(declare-fun g_s339_369 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_370 () U)
(declare-fun g_s341_371 () U)
(declare-fun g_s342_372 () U)
(declare-fun g_s343_373 () U)
(declare-fun g_s344_374 () U)
(declare-fun g_s345_375 () U)
(declare-fun g_s346_376 () U)
(declare-fun g_s347_377 () U)
(declare-fun g_s348_378 () U)
(declare-fun g_s349_379 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_380 () U)
(declare-fun g_s351_381 () U)
(declare-fun g_s352_382 () U)
(declare-fun g_s353_383 () U)
(declare-fun g_s354_384 () U)
(declare-fun g_s355_385 () U)
(declare-fun g_s356_386 () U)
(declare-fun g_s357_387 () U)
(declare-fun g_s358_388 () U)
(declare-fun g_s359_389 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_390 () U)
(declare-fun g_s361_391 () U)
(declare-fun g_s362_392 () U)
(declare-fun g_s363_393 () U)
(declare-fun g_s364_394 () U)
(declare-fun g_s365_395 () U)
(declare-fun g_s366_396 () U)
(declare-fun g_s367_397 () U)
(declare-fun g_s368_398 () U)
(declare-fun g_s369_399 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s370_400 () U)
(declare-fun g_s371_401 () U)
(declare-fun g_s372_402 () U)
(declare-fun g_s373_403 () U)
(declare-fun g_s374_404 () U)
(declare-fun g_s375_406 () U)
(declare-fun g_s376_407 () U)
(declare-fun g_s377_408 () U)
(declare-fun g_s378_409 () U)
(declare-fun g_s379_410 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s380_411 () U)
(declare-fun g_s381_412 () U)
(declare-fun g_s382_413 () U)
(declare-fun g_s383_414 () U)
(declare-fun g_s384_415 () U)
(declare-fun g_s384$1_427 () U)
(declare-fun g_s385_416 () U)
(declare-fun g_s385$1_425 () U)
(declare-fun g_s386_417 () U)
(declare-fun g_s386$1_426 () U)
(declare-fun g_s387_418 () U)
(declare-fun g_s387$1_433 () U)
(declare-fun g_s388_419 () U)
(declare-fun g_s389_420 () U)
(declare-fun g_s389$1_428 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s390_421 () U)
(declare-fun g_s390$1_430 () U)
(declare-fun g_s391_422 () U)
(declare-fun g_s391$1_429 () U)
(declare-fun g_s392_423 () U)
(declare-fun g_s392$1_435 () U)
(declare-fun g_s393_424 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s401_431 () U)
(declare-fun g_s402_432 () U)
(declare-fun g_s409_434 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s411_436 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5)))))) (= g_s9_10 (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 g_s10_11))))))))))))))))))))))))))))))))))))))))))))))))) (= g_s58_59 (SET (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 (mapplet g_s62_63 (mapplet g_s61_62 (mapplet g_s60_61 g_s59_60))))))))) (= g_s67_68 (SET (mapplet g_s94_95 (mapplet g_s93_94 (mapplet g_s92_93 (mapplet g_s91_92 (mapplet g_s90_91 (mapplet g_s89_90 (mapplet g_s88_89 (mapplet g_s87_88 (mapplet g_s86_87 (mapplet g_s85_86 (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 (mapplet g_s81_82 (mapplet g_s80_81 (mapplet g_s79_80 (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 (mapplet g_s75_76 (mapplet g_s74_75 (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 (mapplet g_s69_70 g_s68_69)))))))))))))))))))))))))))) (= g_s95_96 (SET (mapplet g_s97_98 g_s96_97))) (= g_s98_99 (SET (mapplet g_s107_108 (mapplet g_s106_107 (mapplet g_s105_106 (mapplet g_s104_105 (mapplet g_s103_104 (mapplet g_s102_103 (mapplet g_s101_102 (mapplet g_s100_101 g_s99_100)))))))))) (= g_s108_109 (SET (mapplet g_s111_112 (mapplet g_s110_111 g_s109_110)))) (= g_s112_113 (SET (mapplet g_s114_115 g_s113_114))) (= g_s115_116 (SET (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 (mapplet g_s119_120 (mapplet g_s118_119 (mapplet g_s117_118 g_s116_117)))))))) (= g_s123_124 (SET (mapplet g_s132_133 (mapplet g_s131_132 (mapplet g_s130_131 (mapplet g_s129_130 (mapplet g_s128_129 (mapplet g_s127_128 (mapplet g_s126_127 (mapplet g_s125_126 g_s124_125)))))))))) (= g_s133_134 (SET (mapplet g_s137_138 (mapplet g_s136_137 (mapplet g_s135_136 g_s134_135))))) (= g_s138_139 (SET (mapplet g_s141_142 (mapplet g_s140_141 g_s139_140)))) (= g_s142_144 (interval e0 e143)) (= g_s143_146 (interval e0 e145)) (= g_s144_148 (interval e0 e147)) (mem g_s145_149 g_s142_144) (mem g_s146_150 g_s143_146) (mem g_s147_151 g_s144_148) (mem g_s148_152 g_s144_148) (mem g_s149_153 g_s144_148) (= g_s145_149 e143) (= g_s146_150 e145) (= g_s147_151 e147) (and (|>=i| g_s148_152 e0) (|<=i| g_s148_152 g_s147_151)) (and (|>=i| g_s149_153 e0) (|<=i| g_s149_153 g_s147_151)) (not (= g_s148_152 g_s149_153)) (= g_s150_154 (SET (mapplet g_s149_153 g_s148_152))) (|<=i| g_s148_152 e155) (|<=i| g_s149_153 e155) (= g_s151_156 (SET (mapplet (mapplet FALSE g_s149_153) (mapplet TRUE g_s148_152)))) (mem g_s152_157 g_s142_144) (mem g_s153_158 g_s142_144) (not (= g_s152_157 g_s153_158)) (mem g_s154_159 NAT1) (mem g_s155_160 g_s142_144) (|<i| g_s155_160 (|-i| g_s145_149 g_s146_150)) (mem g_s156_161 g_s142_144) (= g_s156_161 (|+i| g_s155_160 g_s154_159)) (mem g_s157_162 g_s142_144) (mem g_s158_163 g_s142_144) (mem g_s159_164 NAT1) (mem g_s160_165 NAT1) (mem g_s154_159 NAT1) (mem g_s161_166 g_s142_144) (mem g_s162_167 g_s142_144) (mem g_s163_168 g_s142_144) (= g_s162_167 (|+i| g_s161_166 g_s159_164)) (= g_s163_168 (|+i| g_s161_166 g_s160_165)) (mem g_s164_169 g_s143_146) (mem g_s165_170 g_s142_144) (|<=i| g_s165_170 e171) (mem g_s166_172 NAT1) (mem g_s167_173 g_s142_144) (|<i| g_s167_173 (|-i| g_s145_149 g_s146_150)) (mem g_s168_174 g_s142_144) (= g_s168_174 (|+i| g_s167_173 g_s166_172)) (mem g_s169_175 g_s142_144) (|<=i| e176 g_s169_175) (mem g_s170_177 g_s142_144) (mem g_s171_178 g_s142_144) (mem g_s172_179 g_s142_144) (|<i| g_s172_179 (|-i| g_s145_149 g_s146_150)) (mem g_s173_180 g_s142_144) (mem g_s174_181 NAT1) (= g_s173_180 (|+i| g_s172_179 g_s174_181)) (mem g_s175_182 NATURAL1) (mem g_s176_183 g_s142_144) (= g_s176_183 (|+i| g_s172_179 g_s175_182)) (mem g_s177_184 g_s142_144) (mem g_s178_185 g_s142_144) (mem g_s179_186 g_s142_144) (mem g_s180_187 g_s142_144) (mem g_s181_188 g_s143_146) (|<i| (|*i| e155 g_s181_188) g_s146_150) (mem g_s182_189 NAT1) (mem g_s183_190 g_s143_146) (mem g_s184_191 g_s143_146) (= g_s184_191 (|+i| g_s183_190 g_s182_189)) (mem g_s185_192 g_s142_144) (mem g_s186_193 g_s142_144) (mem g_s187_194 g_s142_144) (mem g_s188_195 g_s142_144) (mem g_s189_196 g_s142_144) (mem g_s190_197 g_s142_144) (mem g_s191_198 g_s142_144) (mem g_s192_199 g_s142_144) (mem g_s193_200 g_s142_144) (mem g_s194_201 g_s142_144) (= g_s195_203 (|-->| (interval e176 e202) g_s144_148)) (mem g_s196_206 (|-->| (set_prod (interval e0 e205) (interval e0 e204)) g_s144_148)) (mem g_s197_207 (|-->| (set_prod (interval e0 e205) (interval e0 e155)) g_s144_148)) (mem g_s198_208 (|-->| (set_prod (interval e0 e205) (interval e0 e155)) g_s144_148)) (mem g_s199_209 g_s144_148) (|<=i| e210 g_s199_209) (mem g_s200_211 (|-->| (interval e0 e205) g_s143_146)) (mem g_s201_212 (|-->| (interval e0 e205) g_s143_146)) (mem g_s202_213 g_s142_144) (mem g_s203_214 g_s144_148) (mem g_s204_215 g_s144_148) (mem g_s205_216 g_s144_148) (mem g_s206_217 g_s144_148) (mem g_s207_218 g_s144_148) (mem g_s208_219 g_s144_148) (mem g_s209_220 g_s144_148) (mem g_s210_221 g_s144_148) (mem g_s211_222 g_s144_148) (mem g_s212_223 g_s143_146) (not (= g_s211_222 g_s207_218)) (mem g_s213_224 g_s144_148) (mem g_s214_225 g_s144_148) (mem g_s215_226 g_s144_148) (|<=i| g_s215_226 e227) (mem g_s216_228 g_s144_148) (|<=i| (|+i| g_s215_226 e229) g_s214_225) (|<=i| (|+i| g_s216_228 e230) g_s214_225) (|<=i| e231 g_s214_225) (mem g_s217_232 g_s195_203) (= g_s217_232 (set_prod (interval e176 e202) (SET e147))) (mem g_s218_233 g_s144_148) (mem g_s219_234 g_s144_148) (mem g_s220_235 g_s144_148) (mem g_s221_236 g_s144_148) (mem g_s222_237 g_s144_148) (mem g_s223_238 g_s144_148) (mem g_s224_239 g_s144_148) (mem g_s225_240 g_s144_148) (mem g_s226_241 g_s144_148) (mem g_s227_242 g_s142_144) (mem g_s228_243 (|-->| (interval e0 e147) g_s143_146)) (mem g_s229_244 g_s144_148) (|<=i| g_s229_244 e245) (mem g_s230_246 g_s144_148) (|<i| g_s230_246 e247) (mem g_s231_248 g_s144_148) (|<i| g_s231_248 e247) (|<i| (|+i| g_s230_246 g_s231_248) e249) (mem g_s232_250 g_s143_146) (mem g_s233_251 g_s144_148) (mem g_s234_252 g_s144_148) (mem g_s235_253 g_s144_148) (mem g_s236_254 g_s144_148) (|<=i| e255 g_s234_252) (|<=i| g_s234_252 e245) (|<=i| (|+i| g_s237_257 g_s238_256) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249)) (|<=i| e0 (|-i| (|+i| e145 g_s238_256) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249))) (|<=i| (|+i| g_s237_257 g_s238_256) (|*i| g_s229_244 g_s199_209)) (|<=i| (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s230_246)) e249) (|+i| (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|+i| e249 g_s231_248)) e249) e176)) (|<=i| (|*i| g_s199_209 (|-i| e249 g_s231_248)) g_s145_149) (|<=i| (idiv (|*i| g_s229_244 (|*i| g_s199_209 (|-i| e249 g_s231_248))) e249) e145) (|<=i| g_s237_257 (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249)) (|<=i| (|*i| g_s229_244 g_s199_209) e145) (|<=i| e0 (|-i| (|+i| e176 (|*i| g_s229_244 g_s199_209)) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| (|-i| e249 g_s231_248) g_s230_246)) e249))) (|<=i| (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249) (|*i| g_s229_244 g_s199_209)) (|<=i| e0 (|-i| (|+i| e176 (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249)) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| (|-i| e249 g_s231_248) g_s230_246)) e249))) (|<=i| (|*i| g_s229_244 g_s199_209) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|+i| e249 g_s231_248)) e249)) (|<=i| e0 (|-i| (|+i| e176 (|*i| g_s229_244 g_s199_209)) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s230_246)) e249))) (|<=i| e0 (|+i| e176 (|*i| g_s229_244 g_s199_209))) (|<=i| e0 (|-i| (|+i| (|+i| e145 g_s237_257) g_s238_256) (|*i| g_s229_244 g_s199_209))) (|<=i| e0 (|-i| (|-i| e258 g_s226_241) (|*i| g_s229_244 g_s199_209))) (|<=i| e0 (|-i| (|-i| e258 g_s226_241) (idiv (|*i| (|*i| g_s229_244 g_s199_209) (|-i| e249 g_s231_248)) e249))) (|<=i| (|*i| (|*i| e155 g_s229_244) g_s199_209) e143) (|<=i| (|*i| (|*i| e155 g_s229_244) g_s199_209) e258) (|<=i| e0 (|-i| (|-i| e258 g_s226_241) (|*i| (|*i| e155 g_s229_244) g_s199_209))) (mem g_s239_259 g_s144_148) (|<i| g_s239_259 g_s147_151) (mem g_s240_260 g_s144_148) (|<=i| e261 g_s239_259) (= g_s240_260 (|-i| g_s239_259 e176)) (mem g_s241_262 g_s144_148) (mem g_s242_263 g_s144_148) (= g_s241_262 e155) (= g_s242_263 e176) (mem g_s243_264 g_s143_146) (mem g_s244_265 g_s143_146) (mem g_s245_266 g_s143_146) (mem g_s246_267 g_s144_148) (mem g_s247_268 g_s144_148) (mem g_s248_269 g_s144_148) (mem g_s249_270 g_s144_148) (mem g_s250_271 g_s144_148) (mem g_s251_272 g_s144_148) (not (= g_s250_271 g_s251_272)) (mem g_s252_273 g_s144_148) (mem g_s253_274 g_s144_148) (mem g_s254_275 g_s144_148) (not (= g_s252_273 g_s253_274)) (not (= g_s252_273 g_s254_275)) (not (= g_s253_274 g_s254_275)) (mem g_s255_276 g_s142_144) (mem g_s256_277 g_s144_148) (mem g_s257_278 g_s144_148) (mem g_s258_279 g_s143_146) (|<=i| e280 g_s258_279) (|<=i| g_s258_279 e281) (|<=i| g_s214_225 g_s258_279) (mem g_s259_282 (|-->| (interval e0 e147) g_s143_146)) (mem g_s260_283 g_s142_144) (mem g_s261_284 g_s142_144) (mem g_s262_285 g_s143_146) (mem g_s263_286 g_s143_146) (mem g_s264_287 g_s142_144) (mem g_s265_288 g_s142_144) (mem g_s266_289 g_s142_144) (mem g_s267_290 g_s142_144) (mem g_s268_291 g_s142_144) (mem g_s269_292 g_s142_144) (mem g_s270_293 g_s142_144) (mem g_s271_294 g_s142_144) (mem g_s272_295 g_s142_144) (mem g_s273_296 g_s142_144) (mem g_s274_297 g_s142_144) (mem g_s275_298 g_s142_144) (mem g_s276_299 g_s142_144) (mem g_s277_300 g_s142_144) (mem g_s278_301 g_s142_144) (mem g_s279_302 g_s142_144) (mem g_s280_303 g_s142_144) (mem g_s281_304 g_s142_144) (mem g_s282_305 g_s142_144) (mem g_s283_306 g_s142_144) (mem g_s284_307 g_s142_144) (mem g_s285_308 g_s143_146) (mem g_s286_309 (|-->| (interval e0 e155) g_s144_148)) (mem g_s287_310 g_s144_148) (|<i| g_s287_310 g_s147_151) (mem g_s288_311 g_s144_148) (= g_s288_311 (|-i| g_s287_310 e176)) (mem g_s289_312 g_s144_148) (|<=i| g_s289_312 g_s287_310) (= g_s289_312 e155) (mem g_s290_313 g_s144_148) (mem g_s291_314 g_s144_148) (= g_s291_314 g_s290_313) (= g_s291_314 e155) (mem g_s292_315 (|-->| (interval e0 e202) g_s144_148)) (mem g_s293_316 (|-->| (interval e0 e202) g_s144_148)) (|<=i| (|+i| e317 (|*i| e255 g_s287_310)) g_s258_279) (|<=i| (|+i| e318 (|*i| e202 g_s234_252)) g_s258_279) (|<=i| (|*i| e255 g_s287_310) e319) (|<=i| (|*i| e202 g_s234_252) e320) (mem g_s294_321 (|-->| (interval e0 e155) g_s144_148)) (mem g_s295_322 g_s142_144) (|<i| g_s295_322 g_s145_149) (mem g_s296_323 g_s142_144) (= g_s296_323 (|-i| g_s295_322 e176)) (mem g_s297_324 g_s142_144) (mem g_s298_325 g_s142_144) (|<i| g_s297_324 g_s145_149) (= g_s298_325 (|-i| g_s297_324 e176)) (mem g_s237_257 g_s143_146) (|<=i| g_s237_257 e326) (mem g_s238_256 g_s143_146) (|<=i| (|+i| g_s237_257 g_s238_256) e327) (|<=i| e328 g_s298_325) (|<=i| e327 g_s295_322)))
(define-fun |def_seext| () Bool (and (mem g_s299_329 g_s142_144) (mem g_s300_330 g_s142_144) (mem g_s301_331 g_s144_148) (or (= g_s301_331 e176) (= g_s301_331 e155)) (mem g_s302_332 g_s142_144) (mem g_s303_333 g_s142_144) (mem g_s304_334 g_s142_144) (mem g_s305_335 g_s142_144) (mem g_s306_336 g_s142_144) (mem g_s307_337 g_s142_144) (mem g_s308_338 (|-->| (interval e0 g_s296_323) g_s144_148)) (mem g_s309_339 g_s142_144) (mem g_s310_340 g_s142_144) (mem g_s311_341 g_s142_144) (mem g_s312_342 g_s142_144) (mem g_s313_343 g_s142_144) (mem g_s314_344 (|-->| (interval e0 e155) g_s144_148)) (mem g_s315_345 (|-->| (interval e0 e155) g_s144_148)) (mem g_s316_346 g_s143_146) (mem g_s317_347 g_s144_148) (mem g_s318_348 g_s144_148) (mem g_s319_349 g_s144_148) (mem g_s320_350 g_s144_148) (mem g_s321_351 g_s144_148) (mem g_s322_352 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s323_353 g_s144_148) (mem g_s324_354 g_s144_148) (mem g_s325_355 g_s143_146) (mem g_s326_356 (|-->| (interval e0 e155) g_s144_148)) (mem g_s327_357 (|-->| (interval e0 e155) g_s144_148)) (mem g_s328_358 g_s144_148) (mem g_s329_359 g_s144_148) (mem g_s330_360 g_s144_148) (mem g_s331_361 g_s144_148) (mem g_s332_362 (|-->| (interval e0 (|-i| g_s331_361 e176)) g_s144_148)) (mem g_s333_363 g_s143_146) (mem g_s334_364 g_s143_146) (mem g_s335_365 g_s144_148) (mem g_s336_366 g_s144_148) (mem g_s337_367 g_s144_148) (mem g_s338_368 g_s144_148) (mem g_s339_369 (|-->| (interval e0 (|-i| g_s338_368 e176)) g_s144_148)) (mem g_s340_370 (|-->| (interval e0 e155) g_s144_148)) (mem g_s341_371 g_s144_148) (mem g_s342_372 (|-->| (interval e0 e204) g_s144_148)) (mem g_s343_373 (|-->| (interval e0 e155) g_s144_148)) (mem g_s344_374 g_s143_146) (mem g_s345_375 g_s143_146) (mem g_s346_376 g_s144_148) (mem g_s347_377 g_s144_148) (mem g_s348_378 g_s144_148) (mem g_s349_379 g_s144_148) (mem g_s350_380 g_s144_148) (mem g_s351_381 g_s144_148) (mem g_s352_382 g_s144_148) (mem g_s353_383 g_s144_148) (mem g_s354_384 g_s144_148) (mem g_s355_385 g_s144_148) (mem g_s356_386 g_s144_148) (mem g_s357_387 g_s144_148) (mem g_s358_388 g_s142_144) (mem g_s359_389 g_s142_144) (mem g_s360_390 g_s142_144) (mem g_s361_391 g_s142_144) (mem g_s362_392 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s363_393 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s364_394 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s365_395 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s366_396 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s367_397 (|-->| (interval e0 g_s258_279) g_s144_148)) (mem g_s368_398 g_s143_146) (|<=i| g_s368_398 g_s258_279) (mem g_s369_399 g_s143_146) (|<=i| g_s369_399 g_s258_279) (mem g_s370_400 g_s143_146) (|<=i| g_s370_400 g_s258_279) (mem g_s371_401 g_s143_146) (|<=i| g_s371_401 g_s258_279) (mem g_s372_402 g_s143_146) (|<=i| g_s372_402 g_s258_279) (mem g_s373_403 g_s143_146) (|<=i| g_s373_403 g_s258_279) (mem g_s374_404 g_s144_148) (mem g_s375_406 (|-->| (interval e0 e405) g_s144_148)) (mem g_s376_407 g_s144_148) (mem g_s377_408 g_s142_144) (mem g_s378_409 g_s142_144) (mem g_s379_410 g_s142_144) (mem g_s380_411 g_s142_144) (mem g_s381_412 (seq g_s143_146)) (= (size g_s381_412) g_s371_401) (mem g_s382_413 (seq g_s144_148)) (= (size g_s382_413) g_s371_401) (mem g_s383_414 (seq g_s144_148)) (= (size g_s383_414) g_s371_401) (mem g_s151_156 (|+->| BOOL g_s144_148)) (mem g_s151_156 (|+->| BOOL g_s143_146)) (mem g_s151_156 (|+->| BOOL g_s142_144))))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s384_415 NATURAL) (mem g_s385_416 NATURAL) (mem g_s386_417 BOOL) (mem g_s387_418 (FIN NATURAL1)) (mem g_s388_419 g_s144_148) (mem g_s388_419 g_s150_154) (mem g_s389_420 g_s9_10) (mem g_s390_421 g_s144_148) (mem g_s391_422 g_s144_148) (mem g_s391_422 g_s150_154) (mem g_s390_421 g_s150_154) (mem g_s392_423 g_s144_148) (mem g_s393_424 BOOL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s385$1_425 NATURAL))
(define-fun lh_2 () Bool (mem g_s386$1_426 BOOL))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem empty (FIN NATURAL1)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s149_153 g_s150_154))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (|<=i| e0 g_s303_333))
(assert (|<=i| g_s303_333 g_s181_188))
(define-fun lh_1 () Bool (mem g_s384$1_427 NATURAL1))
(define-fun lh_2 () Bool (|>=i| g_s384$1_427 g_s384_415))
(define-fun lh_3 () Bool (mem g_s386$1_426 BOOL))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s384$1_427 NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (|<=i| e176 g_s384_415))
(assert (= g_s388_419 g_s149_153))
(assert (= g_s392_423 g_s148_152))
(define-fun lh_1 () Bool (mem g_s389$1_428 g_s9_10))
(define-fun lh_2 () Bool (mem g_s391$1_429 g_s150_154))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2) (mem g_s391$1_429 g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (|<=i| e176 g_s384_415))
(assert (= g_s388_419 g_s148_152))
(assert (= g_s392_423 g_s148_152))
(assert (= g_s390_421 g_s149_153))
(assert (= g_s391_422 g_s148_152))
(define-fun lh_1 () Bool (mem g_s391$1_429 g_s150_154))
(define-fun lh_2 () Bool (mem g_s390$1_430 g_s150_154))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s390$1_430 g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s391$1_429 g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (|<=i| e176 g_s384_415))
(assert (= g_s391_422 g_s149_153))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s149_153 g_s150_154)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s148_152 g_s150_154)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s401_431 g_s144_148))
(assert (mem g_s402_432 g_s142_144))
(assert (|<=i| e176 g_s384_415))
(assert (not (= g_s388_419 g_s149_153)))
(assert (not (= g_s387_418 empty)))
(assert (= g_s390_421 g_s148_152))
(assert (= g_s392_423 g_s148_152))
(define-fun lh_1 () Bool (mem g_s386$1_426 BOOL))
(define-fun lh_2 () Bool (mem g_s387$1_433 (FIN1 NATURAL1)))
(define-fun lh_3 () Bool (mem g_s385$1_425 NATURAL))
; PO 1 in group 5
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s387$1_433 (FIN NATURAL1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s392_423 g_s148_152))
(assert (mem g_s402_432 g_s142_144))
(assert (|<=i| e176 g_s384_415))
(assert (not (= g_s387_418 empty)))
(define-fun lh_1 () Bool (mem g_s387$1_433 (FIN1 NATURAL1)))
(define-fun lh_2 () Bool (mem g_s386$1_426 BOOL))
(define-fun lh_3 () Bool (mem g_s385$1_425 NATURAL))
; PO 1 in group 6
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s387$1_433 (FIN NATURAL1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s389_420 g_s33_34))
; PO 1 in group 7
(assert (not (mem g_s148_152 g_s150_154)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 8
(assert (not (mem g_s149_153 g_s150_154)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s402_432 g_s142_144))
(assert (|<=i| e176 g_s384_415))
(define-fun lh_1 () Bool (mem g_s386$1_426 BOOL))
(define-fun lh_2 () Bool (mem g_s387$1_433 (FIN1 NATURAL1)))
; PO 1 in group 9
(assert (not (=> (and lh_1 lh_2) (mem g_s387$1_433 (FIN NATURAL1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (|<=i| e176 g_s384_415))
(define-fun lh_1 () Bool (mem g_s387$1_433 (FIN1 NATURAL1)))
(define-fun lh_2 () Bool (mem g_s386$1_426 BOOL))
; PO 1 in group 10
(assert (not (=> (and lh_1 lh_2) (mem g_s387$1_433 (FIN NATURAL1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s402_432 g_s142_144))
(assert (mem g_s409_434 g_s143_146))
(assert (=> (|>i| g_s402_432 e0) (= g_s393_424 TRUE)))
(define-fun lh_1 () Bool (or (= g_s392$1_435 g_s392_423) (= g_s392$1_435 g_s148_152)))
; PO 1 in group 11
(assert (not (=> lh_1 (mem g_s392$1_435 g_s144_148))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s411_436 g_s144_148))
; PO 1 in group 12
(push 1)
(assert (not (mem g_s151_156 (|+->| (dom g_s151_156) (ran g_s151_156)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (mem g_s386_417 (dom g_s151_156))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)