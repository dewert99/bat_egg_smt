(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e259 () U)
(declare-fun e137 () U)
(declare-fun e0 () U)
(declare-fun e203 () U)
(declare-fun e149 () U)
(declare-fun e202 () U)
(declare-fun e231 () U)
(declare-fun e504 () U)
(declare-fun e505 () U)
(declare-fun e205 () U)
(declare-fun e489 () U)
(declare-fun e521 () U)
(declare-fun e211 () U)
(declare-fun e256 () U)
(declare-fun e206 () U)
(declare-fun e522 () U)
(declare-fun e441 () U)
(declare-fun e323 () U)
(declare-fun e523 () U)
(declare-fun e524 () U)
(declare-fun e492 () U)
(declare-fun e526 () U)
(declare-fun e230 () U)
(declare-fun e527 () U)
(declare-fun e320 () U)
(declare-fun e493 () U)
(declare-fun e525 () U)
(declare-fun e528 () U)
(declare-fun e529 () U)
(declare-fun e503 () U)
(declare-fun e354 () U)
(declare-fun e321 () U)
(declare-fun e232 () U)
(declare-fun e248 () U)
(declare-fun e250 () U)
(declare-fun e246 () U)
(declare-fun e318 () U)
(declare-fun e262 () U)
(declare-fun e319 () U)
(declare-fun e281 () U)
(declare-fun e228 () U)
(declare-fun e141 () U)
(declare-fun e490 () U)
(declare-fun e282 () U)
(declare-fun e139 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s114_115 () U)
(declare-fun g_s115_116 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_118 () U)
(declare-fun g_s118_119 () U)
(declare-fun g_s119_120 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_121 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_123 () U)
(declare-fun g_s123_124 () U)
(declare-fun g_s124_125 () U)
(declare-fun g_s125_126 () U)
(declare-fun g_s126_127 () U)
(declare-fun g_s127_128 () U)
(declare-fun g_s128_129 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_131 () U)
(declare-fun g_s131_132 () U)
(declare-fun g_s132_133 () U)
(declare-fun g_s133_134 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_136 () U)
(declare-fun g_s136_138 () U)
(declare-fun g_s137_140 () U)
(declare-fun g_s138_142 () U)
(declare-fun g_s139_143 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_144 () U)
(declare-fun g_s141_145 () U)
(declare-fun g_s142_146 () U)
(declare-fun g_s143_147 () U)
(declare-fun g_s144_148 () U)
(declare-fun g_s145_150 () U)
(declare-fun g_s146_151 () U)
(declare-fun g_s147_152 () U)
(declare-fun g_s148_153 () U)
(declare-fun g_s149_154 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_155 () U)
(declare-fun g_s151_156 () U)
(declare-fun g_s152_157 () U)
(declare-fun g_s153_158 () U)
(declare-fun g_s154_159 () U)
(declare-fun g_s155_160 () U)
(declare-fun g_s156_161 () U)
(declare-fun g_s157_162 () U)
(declare-fun g_s158_163 () U)
(declare-fun g_s159_164 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_165 () U)
(declare-fun g_s161_166 () U)
(declare-fun g_s162_167 () U)
(declare-fun g_s163_168 () U)
(declare-fun g_s164_169 () U)
(declare-fun g_s165_170 () U)
(declare-fun g_s166_171 () U)
(declare-fun g_s167_172 () U)
(declare-fun g_s168_173 () U)
(declare-fun g_s169_174 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_175 () U)
(declare-fun g_s171_176 () U)
(declare-fun g_s172_177 () U)
(declare-fun g_s173_178 () U)
(declare-fun g_s174_179 () U)
(declare-fun g_s175_180 () U)
(declare-fun g_s176_181 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s181_198 () U)
(declare-fun g_s182_197 () U)
(declare-fun g_s183_200 () U)
(declare-fun g_s184_199 () U)
(declare-fun g_s185_201 () U)
(declare-fun g_s186_204 () U)
(declare-fun g_s187_207 () U)
(declare-fun g_s188_208 () U)
(declare-fun g_s189_209 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_210 () U)
(declare-fun g_s191_212 () U)
(declare-fun g_s192_213 () U)
(declare-fun g_s193_214 () U)
(declare-fun g_s194_215 () U)
(declare-fun g_s195_216 () U)
(declare-fun g_s196_217 () U)
(declare-fun g_s197_218 () U)
(declare-fun g_s198_219 () U)
(declare-fun g_s199_220 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_221 () U)
(declare-fun g_s201_222 () U)
(declare-fun g_s202_223 () U)
(declare-fun g_s203_224 () U)
(declare-fun g_s204_225 () U)
(declare-fun g_s205_226 () U)
(declare-fun g_s206_227 () U)
(declare-fun g_s207_229 () U)
(declare-fun g_s208_233 () U)
(declare-fun g_s209_234 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_235 () U)
(declare-fun g_s211_236 () U)
(declare-fun g_s212_237 () U)
(declare-fun g_s213_238 () U)
(declare-fun g_s214_239 () U)
(declare-fun g_s215_240 () U)
(declare-fun g_s216_241 () U)
(declare-fun g_s217_242 () U)
(declare-fun g_s218_243 () U)
(declare-fun g_s219_244 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_245 () U)
(declare-fun g_s221_247 () U)
(declare-fun g_s222_249 () U)
(declare-fun g_s223_251 () U)
(declare-fun g_s224_252 () U)
(declare-fun g_s225_253 () U)
(declare-fun g_s226_254 () U)
(declare-fun g_s227_255 () U)
(declare-fun g_s228_258 () U)
(declare-fun g_s229_257 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_260 () U)
(declare-fun g_s231_261 () U)
(declare-fun g_s232_263 () U)
(declare-fun g_s233_264 () U)
(declare-fun g_s234_265 () U)
(declare-fun g_s235_266 () U)
(declare-fun g_s236_267 () U)
(declare-fun g_s237_268 () U)
(declare-fun g_s238_269 () U)
(declare-fun g_s239_270 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_271 () U)
(declare-fun g_s241_272 () U)
(declare-fun g_s242_273 () U)
(declare-fun g_s243_274 () U)
(declare-fun g_s244_275 () U)
(declare-fun g_s245_276 () U)
(declare-fun g_s246_277 () U)
(declare-fun g_s247_278 () U)
(declare-fun g_s248_279 () U)
(declare-fun g_s249_280 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_283 () U)
(declare-fun g_s251_284 () U)
(declare-fun g_s252_285 () U)
(declare-fun g_s253_286 () U)
(declare-fun g_s254_287 () U)
(declare-fun g_s255_288 () U)
(declare-fun g_s256_289 () U)
(declare-fun g_s257_290 () U)
(declare-fun g_s258_291 () U)
(declare-fun g_s259_292 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_293 () U)
(declare-fun g_s261_294 () U)
(declare-fun g_s262_295 () U)
(declare-fun g_s263_296 () U)
(declare-fun g_s264_297 () U)
(declare-fun g_s265_298 () U)
(declare-fun g_s266_299 () U)
(declare-fun g_s267_300 () U)
(declare-fun g_s268_301 () U)
(declare-fun g_s269_302 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_303 () U)
(declare-fun g_s271_304 () U)
(declare-fun g_s272_305 () U)
(declare-fun g_s273_306 () U)
(declare-fun g_s274_307 () U)
(declare-fun g_s275_308 () U)
(declare-fun g_s276_309 () U)
(declare-fun g_s277_310 () U)
(declare-fun g_s278_311 () U)
(declare-fun g_s279_312 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_313 () U)
(declare-fun g_s281_314 () U)
(declare-fun g_s282_315 () U)
(declare-fun g_s283_316 () U)
(declare-fun g_s284_317 () U)
(declare-fun g_s285_322 () U)
(declare-fun g_s286_324 () U)
(declare-fun g_s287_325 () U)
(declare-fun g_s288_326 () U)
(declare-fun g_s289_327 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_328 () U)
(declare-fun g_s291_329 () U)
(declare-fun g_s292_330 () U)
(declare-fun g_s293_331 () U)
(declare-fun g_s294_332 () U)
(declare-fun g_s295_333 () U)
(declare-fun g_s296_334 () U)
(declare-fun g_s297_335 () U)
(declare-fun g_s298_336 () U)
(declare-fun g_s299_337 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_338 () U)
(declare-fun g_s301_339 () U)
(declare-fun g_s302_340 () U)
(declare-fun g_s303_341 () U)
(declare-fun g_s304_342 () U)
(declare-fun g_s305_343 () U)
(declare-fun g_s306_344 () U)
(declare-fun g_s307_345 () U)
(declare-fun g_s308_346 () U)
(declare-fun g_s309_347 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_348 () U)
(declare-fun g_s311_349 () U)
(declare-fun g_s312_350 () U)
(declare-fun g_s313_351 () U)
(declare-fun g_s314_352 () U)
(declare-fun g_s315_353 () U)
(declare-fun g_s316_355 () U)
(declare-fun g_s317_356 () U)
(declare-fun g_s318_357 () U)
(declare-fun g_s319_358 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_359 () U)
(declare-fun g_s321_360 () U)
(declare-fun g_s322_361 () U)
(declare-fun g_s323_362 () U)
(declare-fun g_s324_363 () U)
(declare-fun g_s325_364 () U)
(declare-fun g_s326_365 () U)
(declare-fun g_s327_366 () U)
(declare-fun g_s328_367 () U)
(declare-fun g_s329_368 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_369 () U)
(declare-fun g_s331_370 () U)
(declare-fun g_s332_371 () U)
(declare-fun g_s333_372 () U)
(declare-fun g_s334_373 () U)
(declare-fun g_s335_374 () U)
(declare-fun g_s336_375 () U)
(declare-fun g_s337_376 () U)
(declare-fun g_s338_377 () U)
(declare-fun g_s339_378 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_379 () U)
(declare-fun g_s341_380 () U)
(declare-fun g_s342_382 () U)
(declare-fun g_s343_381 () U)
(declare-fun g_s344_383 () U)
(declare-fun g_s345_384 () U)
(declare-fun g_s346_385 () U)
(declare-fun g_s347_386 () U)
(declare-fun g_s348_387 () U)
(declare-fun g_s349_388 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_389 () U)
(declare-fun g_s351_390 () U)
(declare-fun g_s352_391 () U)
(declare-fun g_s353_392 () U)
(declare-fun g_s354_393 () U)
(declare-fun g_s355_394 () U)
(declare-fun g_s356_395 () U)
(declare-fun g_s357_396 () U)
(declare-fun g_s358_397 () U)
(declare-fun g_s359_398 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_399 () U)
(declare-fun g_s361_400 () U)
(declare-fun g_s362_401 () U)
(declare-fun g_s363_402 () U)
(declare-fun g_s364_403 () U)
(declare-fun g_s365_404 () U)
(declare-fun g_s366_405 () U)
(declare-fun g_s367_406 () U)
(declare-fun g_s368_407 () U)
(declare-fun g_s369_408 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s370_409 () U)
(declare-fun g_s371_410 () U)
(declare-fun g_s372_411 () U)
(declare-fun g_s373_412 () U)
(declare-fun g_s374_413 () U)
(declare-fun g_s375_414 () U)
(declare-fun g_s376_415 () U)
(declare-fun g_s377_416 () U)
(declare-fun g_s378_417 () U)
(declare-fun g_s379_418 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s380_419 () U)
(declare-fun g_s381_420 () U)
(declare-fun g_s382_421 () U)
(declare-fun g_s383_422 () U)
(declare-fun g_s384_423 () U)
(declare-fun g_s385_424 () U)
(declare-fun g_s386_425 () U)
(declare-fun g_s387_426 () U)
(declare-fun g_s388_427 () U)
(declare-fun g_s389_428 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s390_429 () U)
(declare-fun g_s391_430 () U)
(declare-fun g_s392_431 () U)
(declare-fun g_s393_432 () U)
(declare-fun g_s394_433 () U)
(declare-fun g_s395_434 () U)
(declare-fun g_s396_435 () U)
(declare-fun g_s397_436 () U)
(declare-fun g_s398_437 () U)
(declare-fun g_s399_438 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s400_439 () U)
(declare-fun g_s401_440 () U)
(declare-fun g_s402_442 () U)
(declare-fun g_s403_443 () U)
(declare-fun g_s404_444 () U)
(declare-fun g_s405_445 () U)
(declare-fun g_s406_446 () U)
(declare-fun g_s407_447 () U)
(declare-fun g_s408_448 () U)
(declare-fun g_s409_449 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s410_450 () U)
(declare-fun g_s411_451 () U)
(declare-fun g_s412_452 () U)
(declare-fun g_s413_453 () U)
(declare-fun g_s414_454 () U)
(declare-fun g_s415_455 () U)
(declare-fun g_s416_456 () U)
(declare-fun g_s417_457 () U)
(declare-fun g_s418_458 () U)
(declare-fun g_s419_459 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s420_460 () U)
(declare-fun g_s421_461 () U)
(declare-fun g_s422_462 () U)
(declare-fun g_s423_463 () U)
(declare-fun g_s424_464 () U)
(declare-fun g_s425_465 () U)
(declare-fun g_s426_466 () U)
(declare-fun g_s427_467 () U)
(declare-fun g_s428_468 () U)
(declare-fun g_s429_469 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s430_470 () U)
(declare-fun g_s431_471 () U)
(declare-fun g_s432_472 () U)
(declare-fun g_s433_473 () U)
(declare-fun g_s434_474 () U)
(declare-fun g_s435_508 () U)
(declare-fun g_s435$1_475 () U)
(declare-fun g_s436_509 () U)
(declare-fun g_s436$1_476 () U)
(declare-fun g_s437_510 () U)
(declare-fun g_s437$1_477 () U)
(declare-fun g_s438_511 () U)
(declare-fun g_s438$1_478 () U)
(declare-fun g_s439_512 () U)
(declare-fun g_s439$1_479 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s440_518 () U)
(declare-fun g_s440$1_480 () U)
(declare-fun g_s441_513 () U)
(declare-fun g_s441$1_481 () U)
(declare-fun g_s442_514 () U)
(declare-fun g_s442$1_482 () U)
(declare-fun g_s443_515 () U)
(declare-fun g_s443$1_483 () U)
(declare-fun g_s444_516 () U)
(declare-fun g_s444$1_484 () U)
(declare-fun g_s445_517 () U)
(declare-fun g_s445$1_485 () U)
(declare-fun g_s446_519 () U)
(declare-fun g_s446$1_486 () U)
(declare-fun g_s447_488 () U)
(declare-fun g_s447$1_487 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s455_491 () U)
(declare-fun g_s459_494 () U)
(declare-fun g_s459$1_495 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s460_496 () U)
(declare-fun g_s461$1_497 () U)
(declare-fun g_s462$1_498 () U)
(declare-fun g_s463$1_499 () U)
(declare-fun g_s464$1_500 () U)
(declare-fun g_s465$1_501 () U)
(declare-fun g_s466$1_502 () U)
(declare-fun g_s467_530 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s472_507 () U)
(declare-fun g_s477$1_520 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e506 () U)
(declare-fun e188 () U)
(declare-fun e189 () U)
(declare-fun e190 () U)
(declare-fun e182 () U)
(declare-fun e185 () U)
(declare-fun e183 () U)
(declare-fun e186 () U)
(declare-fun e184 () U)
(declare-fun e187 () U)
(declare-fun e191 () U)
(declare-fun e192 () U)
(declare-fun e193 () U)
(declare-fun e194 () U)
(declare-fun e195 () U)
(declare-fun e196 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 (mapplet g_s18_19 (mapplet g_s17_18 (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 (mapplet g_s10_11 (mapplet g_s9_10 (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5))))))))))))))))))))))))))))))))))))))))))))))))) (= g_s52_53 (SET (mapplet g_s60_61 (mapplet g_s59_60 (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 g_s53_54))))))))) (= g_s61_62 (SET (mapplet g_s88_89 (mapplet g_s87_88 (mapplet g_s86_87 (mapplet g_s85_86 (mapplet g_s84_85 (mapplet g_s83_84 (mapplet g_s82_83 (mapplet g_s81_82 (mapplet g_s80_81 (mapplet g_s79_80 (mapplet g_s78_79 (mapplet g_s77_78 (mapplet g_s76_77 (mapplet g_s75_76 (mapplet g_s74_75 (mapplet g_s73_74 (mapplet g_s72_73 (mapplet g_s71_72 (mapplet g_s70_71 (mapplet g_s69_70 (mapplet g_s68_69 (mapplet g_s67_68 (mapplet g_s66_67 (mapplet g_s65_66 (mapplet g_s64_65 (mapplet g_s63_64 g_s62_63)))))))))))))))))))))))))))) (= g_s89_90 (SET (mapplet g_s91_92 g_s90_91))) (= g_s92_93 (SET (mapplet g_s101_102 (mapplet g_s100_101 (mapplet g_s99_100 (mapplet g_s98_99 (mapplet g_s97_98 (mapplet g_s96_97 (mapplet g_s95_96 (mapplet g_s94_95 g_s93_94)))))))))) (= g_s102_103 (SET (mapplet g_s105_106 (mapplet g_s104_105 g_s103_104)))) (= g_s106_107 (SET (mapplet g_s108_109 g_s107_108))) (= g_s109_110 (SET (mapplet g_s116_117 (mapplet g_s115_116 (mapplet g_s114_115 (mapplet g_s113_114 (mapplet g_s112_113 (mapplet g_s111_112 g_s110_111)))))))) (= g_s117_118 (SET (mapplet g_s126_127 (mapplet g_s125_126 (mapplet g_s124_125 (mapplet g_s123_124 (mapplet g_s122_123 (mapplet g_s121_122 (mapplet g_s120_121 (mapplet g_s119_120 g_s118_119)))))))))) (= g_s127_128 (SET (mapplet g_s131_132 (mapplet g_s130_131 (mapplet g_s129_130 g_s128_129))))) (= g_s132_133 (SET (mapplet g_s135_136 (mapplet g_s134_135 g_s133_134)))) (= g_s136_138 (interval e0 e137)) (= g_s137_140 (interval e0 e139)) (= g_s138_142 (interval e0 e141)) (mem g_s139_143 g_s136_138) (mem g_s140_144 g_s137_140) (mem g_s141_145 g_s138_142) (mem g_s142_146 g_s138_142) (mem g_s143_147 g_s138_142) (= g_s139_143 e137) (= g_s140_144 e139) (= g_s141_145 e141) (and (|>=i| g_s142_146 e0) (|<=i| g_s142_146 g_s141_145)) (and (|>=i| g_s143_147 e0) (|<=i| g_s143_147 g_s141_145)) (not (= g_s142_146 g_s143_147)) (= g_s144_148 (SET (mapplet g_s143_147 g_s142_146))) (|<=i| g_s142_146 e149) (|<=i| g_s143_147 e149) (= g_s145_150 (SET (mapplet (mapplet FALSE g_s143_147) (mapplet TRUE g_s142_146)))) (mem g_s146_151 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (= (apply g_s146_151 (mapplet e0 e0)) e0) (mem g_s147_152 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s148_153 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s149_154 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s150_155 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s151_156 (|-->| (set_prod g_s136_138 g_s138_142) g_s136_138)) (mem g_s152_157 (|-->| g_s136_138 g_s136_138)) (mem g_s153_158 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s154_159 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s155_160 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s156_161 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s157_162 (|-->| (set_prod g_s137_140 g_s138_142) g_s137_140)) (mem g_s158_163 (|-->| g_s137_140 g_s137_140)) (mem g_s159_164 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s160_165 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s161_166 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s162_167 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s163_168 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s164_169 (|-->| g_s138_142 g_s138_142)) (mem g_s165_170 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s166_171 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s167_172 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s168_173 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s169_174 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s170_175 (|-->| (set_prod g_s136_138 g_s136_138) g_s136_138)) (mem g_s171_176 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s172_177 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s173_178 (|-->| (set_prod g_s137_140 g_s137_140) g_s137_140)) (mem g_s174_179 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s175_180 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (mem g_s176_181 (|-->| (set_prod g_s138_142 g_s138_142) g_s138_142)) (= g_s150_155 e182) (= g_s156_161 e183) (= g_s162_167 e184) (= g_s151_156 e185) (= g_s157_162 e186) (= g_s163_168 e187) (= g_s168_173 e188) (= g_s169_174 e189) (= g_s170_175 e190) (= g_s171_176 e191) (= g_s172_177 e192) (= g_s173_178 e193) (= g_s174_179 e194) (= g_s175_180 e195) (= g_s176_181 e196) (mem g_s181_198 (|-->| (set_prod (set_prod (set_prod g_s136_138 (|-->| (interval e0 g_s182_197) g_s136_138)) g_s138_142) g_s136_138) g_s137_140)) (mem g_s183_200 (|-->| (set_prod (set_prod (set_prod g_s136_138 (|-->| (interval e0 g_s184_199) g_s136_138)) g_s138_142) g_s136_138) g_s137_140)) (mem g_s185_201 (|-->| (seq1 g_s138_142) g_s137_140)) (= g_s186_204 (|-->| (interval e203 e202) g_s138_142)) (mem g_s187_207 (|-->| (set_prod (interval e0 e206) (interval e0 e205)) g_s138_142)) (mem g_s188_208 (|-->| (set_prod (interval e0 e206) (interval e0 e149)) g_s138_142)) (mem g_s189_209 (|-->| (set_prod (interval e0 e206) (interval e0 e149)) g_s138_142)) (mem g_s190_210 g_s138_142) (|<=i| e211 g_s190_210) (mem g_s191_212 (|-->| (interval e0 e206) g_s137_140)) (mem g_s192_213 (|-->| (interval e0 e206) g_s137_140)) (mem g_s193_214 g_s136_138) (mem g_s194_215 g_s138_142) (mem g_s195_216 g_s138_142) (mem g_s196_217 g_s138_142) (mem g_s197_218 g_s138_142) (mem g_s198_219 g_s138_142) (mem g_s199_220 g_s138_142) (mem g_s200_221 g_s138_142) (mem g_s201_222 g_s138_142) (mem g_s202_223 g_s138_142) (mem g_s203_224 g_s137_140) (not (= g_s202_223 g_s198_219)) (mem g_s204_225 g_s138_142) (mem g_s205_226 g_s138_142) (mem g_s206_227 g_s138_142) (|<=i| g_s206_227 e228) (mem g_s207_229 g_s138_142) (|<=i| (|+i| g_s206_227 e230) g_s205_226) (|<=i| (|+i| g_s207_229 e231) g_s205_226) (|<=i| e232 g_s205_226) (mem g_s208_233 g_s186_204) (= g_s208_233 (set_prod (interval e203 e202) (SET e141))) (mem g_s209_234 g_s138_142) (mem g_s210_235 g_s138_142) (mem g_s211_236 g_s138_142) (mem g_s212_237 g_s138_142) (mem g_s213_238 g_s138_142) (mem g_s214_239 g_s138_142) (mem g_s215_240 g_s138_142) (mem g_s216_241 g_s138_142) (mem g_s217_242 g_s138_142) (mem g_s218_243 g_s136_138) (mem g_s219_244 (|-->| (interval e0 e141) g_s137_140)) (mem g_s220_245 g_s138_142) (|<=i| g_s220_245 e246) (mem g_s221_247 g_s138_142) (|<i| g_s221_247 e248) (mem g_s222_249 g_s138_142) (|<i| g_s222_249 e248) (|<i| (|+i| g_s221_247 g_s222_249) e250) (mem g_s223_251 g_s137_140) (mem g_s224_252 g_s138_142) (mem g_s225_253 g_s138_142) (mem g_s226_254 g_s138_142) (mem g_s227_255 g_s138_142) (|<=i| e256 g_s225_253) (|<=i| g_s225_253 e246) (|<=i| (|+i| g_s228_258 g_s229_257) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250)) (|<=i| e0 (|-i| (|+i| e139 g_s229_257) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250))) (|<=i| (|+i| g_s228_258 g_s229_257) (|*i| g_s220_245 g_s190_210)) (|<=i| (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s221_247)) e250) (|+i| (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|+i| e250 g_s222_249)) e250) e203)) (|<=i| (|*i| g_s190_210 (|-i| e250 g_s222_249)) g_s139_143) (|<=i| (idiv (|*i| g_s220_245 (|*i| g_s190_210 (|-i| e250 g_s222_249))) e250) e139) (|<=i| g_s228_258 (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250)) (|<=i| (|*i| g_s220_245 g_s190_210) e139) (|<=i| e0 (|-i| (|+i| e203 (|*i| g_s220_245 g_s190_210)) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| (|-i| e250 g_s222_249) g_s221_247)) e250))) (|<=i| (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250) (|*i| g_s220_245 g_s190_210)) (|<=i| e0 (|-i| (|+i| e203 (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250)) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| (|-i| e250 g_s222_249) g_s221_247)) e250))) (|<=i| (|*i| g_s220_245 g_s190_210) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|+i| e250 g_s222_249)) e250)) (|<=i| e0 (|-i| (|+i| e203 (|*i| g_s220_245 g_s190_210)) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s221_247)) e250))) (|<=i| e0 (|+i| e203 (|*i| g_s220_245 g_s190_210))) (|<=i| e0 (|-i| (|+i| (|+i| e139 g_s228_258) g_s229_257) (|*i| g_s220_245 g_s190_210))) (|<=i| e0 (|-i| (|-i| e259 g_s217_242) (|*i| g_s220_245 g_s190_210))) (|<=i| e0 (|-i| (|-i| e259 g_s217_242) (idiv (|*i| (|*i| g_s220_245 g_s190_210) (|-i| e250 g_s222_249)) e250))) (|<=i| (|*i| (|*i| e149 g_s220_245) g_s190_210) e137) (|<=i| (|*i| (|*i| e149 g_s220_245) g_s190_210) e259) (|<=i| e0 (|-i| (|-i| e259 g_s217_242) (|*i| (|*i| e149 g_s220_245) g_s190_210))) (mem g_s230_260 g_s138_142) (|<i| g_s230_260 g_s141_145) (mem g_s231_261 g_s138_142) (|<=i| e262 g_s230_260) (= g_s231_261 (|-i| g_s230_260 e203)) (mem g_s232_263 g_s138_142) (mem g_s233_264 g_s138_142) (= g_s232_263 e149) (= g_s233_264 e203) (mem g_s234_265 g_s137_140) (mem g_s235_266 g_s137_140) (mem g_s236_267 g_s137_140) (mem g_s237_268 g_s138_142) (mem g_s238_269 g_s138_142) (mem g_s239_270 g_s138_142) (mem g_s240_271 g_s138_142) (mem g_s241_272 g_s138_142) (mem g_s242_273 g_s138_142) (not (= g_s241_272 g_s242_273)) (mem g_s243_274 g_s138_142) (mem g_s244_275 g_s138_142) (mem g_s245_276 g_s138_142) (not (= g_s243_274 g_s244_275)) (not (= g_s243_274 g_s245_276)) (not (= g_s244_275 g_s245_276)) (mem g_s246_277 g_s136_138) (mem g_s247_278 g_s138_142) (mem g_s248_279 g_s138_142) (mem g_s249_280 g_s137_140) (|<=i| e281 g_s249_280) (|<=i| g_s249_280 e282) (|<=i| g_s205_226 g_s249_280) (mem g_s250_283 (|-->| (interval e0 e141) g_s137_140)) (mem g_s251_284 g_s136_138) (mem g_s252_285 g_s136_138) (mem g_s253_286 g_s137_140) (mem g_s254_287 g_s137_140) (mem g_s255_288 g_s136_138) (mem g_s256_289 g_s136_138) (mem g_s257_290 g_s136_138) (mem g_s258_291 g_s136_138) (mem g_s259_292 g_s136_138) (mem g_s260_293 g_s136_138) (mem g_s261_294 g_s136_138) (mem g_s262_295 g_s136_138) (mem g_s263_296 g_s136_138) (mem g_s264_297 g_s136_138) (mem g_s265_298 g_s136_138) (mem g_s266_299 g_s136_138) (mem g_s267_300 g_s136_138) (mem g_s268_301 g_s136_138) (mem g_s269_302 g_s136_138) (mem g_s270_303 g_s136_138) (mem g_s271_304 g_s136_138) (mem g_s272_305 g_s136_138) (mem g_s273_306 g_s136_138) (mem g_s274_307 g_s136_138) (mem g_s275_308 g_s136_138) (mem g_s276_309 g_s137_140) (mem g_s277_310 (|-->| (interval e0 e149) g_s138_142)) (mem g_s278_311 g_s138_142) (|<i| g_s278_311 g_s141_145) (mem g_s279_312 g_s138_142) (= g_s279_312 (|-i| g_s278_311 e203)) (mem g_s280_313 g_s138_142) (|<=i| g_s280_313 g_s278_311) (= g_s280_313 e149) (mem g_s281_314 g_s138_142) (mem g_s282_315 g_s138_142) (= g_s282_315 g_s281_314) (= g_s282_315 e149) (mem g_s283_316 (|-->| (interval e0 e202) g_s138_142)) (mem g_s284_317 (|-->| (interval e0 e202) g_s138_142)) (|<=i| (|+i| e318 (|*i| e256 g_s278_311)) g_s249_280) (|<=i| (|+i| e319 (|*i| e202 g_s225_253)) g_s249_280) (|<=i| (|*i| e256 g_s278_311) e320) (|<=i| (|*i| e202 g_s225_253) e321) (mem g_s285_322 (|-->| (interval e0 e149) g_s138_142)) (mem g_s286_324 (|-->| (set_prod (interval e0 e256) (interval e0 e323)) g_s138_142)) (mem g_s287_325 (|-->| (set_prod (interval e0 e256) (interval e0 e149)) g_s137_140)) (mem g_s288_326 g_s138_142) (mem g_s289_327 g_s138_142) (|<=i| g_s289_327 e141) (|<=i| e203 g_s289_327) (mem g_s290_328 g_s136_138) (mem g_s291_329 g_s138_142) (|<=i| g_s291_329 e206) (|<=i| e203 g_s291_329) (mem g_s292_330 g_s138_142) (|<=i| g_s292_330 e256) (= g_s292_330 (|-i| g_s291_329 e203)) (mem g_s293_331 g_s138_142) (mem g_s294_332 (|-->| (interval e0 e203) g_s137_140)) (mem g_s294_332 (|>->| (interval e0 e203) g_s137_140)) (mem g_s295_333 (|-->| (set_prod (interval e0 e203) (interval e0 e202)) g_s138_142)) (mem g_s296_334 (|-->| (interval e0 e149) g_s138_142)) (mem g_s297_335 g_s136_138) (mem g_s298_336 (|-->| (interval e0 e256) g_s136_138)) (mem g_s299_337 (|-->| (interval e0 e256) g_s136_138)) (mem g_s300_338 (|-->| (interval e0 e256) g_s136_138)) (mem g_s301_339 (|-->| (interval e0 e256) g_s136_138)) (mem g_s302_340 (|-->| (interval e0 e256) g_s138_142)) (mem g_s303_341 (|-->| (interval e0 e256) g_s138_142)) (mem g_s304_342 (|-->| (interval e0 e256) g_s138_142)) (mem g_s305_343 (|-->| (set_prod (interval e0 e256) (interval e0 e205)) g_s137_140)) (mem g_s306_344 (|-->| (set_prod (interval e0 e256) (interval e0 e205)) g_s137_140)) (mem g_s307_345 (|-->| (set_prod (interval e0 e256) (interval e0 e205)) g_s138_142)) (mem g_s308_346 (|-->| (set_prod (interval e0 e256) (interval e0 e205)) g_s137_140)) (mem g_s309_347 (|-->| (set_prod (interval e0 e256) (interval e0 e205)) g_s136_138)) (mem g_s310_348 (|-->| (interval e0 e256) g_s137_140)) (mem g_s311_349 (|-->| (set_prod (interval e0 e256) (interval e0 e323)) g_s138_142)) (mem g_s312_350 (|-->| (set_prod (interval e0 e256) (interval e0 e323)) g_s138_142)) (mem g_s313_351 (|-->| (set_prod (interval e0 e256) (interval e0 e323)) g_s138_142)) (mem g_s314_352 (|-->| (set_prod (interval e0 e256) (interval e0 e323)) g_s138_142)) (mem g_s315_353 (|-->| (interval e0 e203) g_s138_142)) (mem g_s315_353 (|-->| (interval e0 e203) (interval e203 e354))) (mem g_s316_355 (|-->| (interval e0 e203) g_s138_142)) (mem g_s316_355 (|-->| (interval e0 e203) (interval e203 e354))) (mem g_s317_356 (|-->| (interval e0 e203) g_s138_142)) (mem g_s318_357 (|-->| (interval e0 e203) g_s138_142))))
(define-fun |def_seext| () Bool (and (mem g_s319_358 g_s136_138) (mem g_s320_359 g_s136_138) (mem g_s321_360 g_s138_142) (or (= g_s321_360 e203) (= g_s321_360 e149)) (mem g_s322_361 g_s136_138) (mem g_s323_362 g_s136_138) (mem g_s324_363 g_s136_138) (mem g_s325_364 g_s136_138) (mem g_s326_365 g_s136_138) (mem g_s327_366 g_s136_138) (mem g_s328_367 (|-->| (interval e0 g_s184_199) g_s138_142)) (mem g_s329_368 g_s136_138) (mem g_s330_369 g_s136_138) (mem g_s331_370 g_s136_138) (mem g_s332_371 g_s136_138) (mem g_s333_372 g_s136_138) (mem g_s334_373 (|-->| (interval e0 e149) g_s138_142)) (mem g_s335_374 (|-->| (interval e0 e149) g_s138_142)) (mem g_s336_375 g_s137_140) (mem g_s337_376 g_s137_140) (mem g_s338_377 g_s138_142) (mem g_s339_378 g_s136_138) (mem g_s340_379 g_s136_138) (mem g_s341_380 g_s138_142) (mem g_s342_382 (|-->| (interval e0 g_s343_381) (|-->| (interval e0 e323) g_s138_142))) (mem g_s344_383 g_s138_142) (mem g_s345_384 g_s138_142) (mem g_s346_385 g_s138_142) (mem g_s347_386 g_s138_142) (mem g_s348_387 g_s138_142) (mem g_s349_388 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s350_389 g_s138_142) (mem g_s351_390 g_s138_142) (mem g_s352_391 g_s137_140) (mem g_s353_392 (|-->| (interval e0 e149) g_s138_142)) (mem g_s354_393 (|-->| (interval e0 e149) g_s138_142)) (mem g_s355_394 g_s138_142) (mem g_s356_395 g_s138_142) (mem g_s357_396 g_s138_142) (mem g_s358_397 g_s138_142) (mem g_s359_398 (|-->| (interval e0 (|-i| g_s358_397 e203)) g_s138_142)) (mem g_s360_399 g_s137_140) (mem g_s361_400 g_s137_140) (mem g_s362_401 g_s138_142) (mem g_s363_402 g_s138_142) (mem g_s364_403 g_s138_142) (mem g_s365_404 g_s138_142) (mem g_s366_405 (|-->| (interval e0 (|-i| g_s365_404 e203)) g_s138_142)) (mem g_s367_406 (|-->| (interval e0 e149) g_s138_142)) (mem g_s368_407 g_s138_142) (mem g_s369_408 (|-->| (interval e0 e205) g_s138_142)) (mem g_s370_409 (|-->| (interval e0 e149) g_s138_142)) (mem g_s371_410 g_s137_140) (mem g_s372_411 g_s137_140) (mem g_s373_412 g_s138_142) (mem g_s374_413 g_s138_142) (mem g_s375_414 g_s138_142) (mem g_s376_415 g_s138_142) (mem g_s377_416 g_s138_142) (mem g_s378_417 g_s138_142) (mem g_s379_418 g_s138_142) (mem g_s380_419 g_s138_142) (mem g_s381_420 g_s138_142) (mem g_s382_421 g_s138_142) (mem g_s383_422 g_s138_142) (mem g_s384_423 g_s138_142) (mem g_s385_424 g_s136_138) (mem g_s386_425 g_s136_138) (mem g_s387_426 g_s136_138) (mem g_s388_427 g_s136_138) (mem g_s389_428 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s390_429 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s391_430 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s392_431 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s393_432 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s394_433 (|-->| (interval e0 g_s249_280) g_s138_142)) (mem g_s395_434 g_s137_140) (|<=i| g_s395_434 g_s249_280) (mem g_s396_435 g_s137_140) (|<=i| g_s396_435 g_s249_280) (mem g_s397_436 g_s137_140) (|<=i| g_s397_436 g_s249_280) (mem g_s398_437 g_s137_140) (|<=i| g_s398_437 g_s249_280) (mem g_s399_438 g_s137_140) (|<=i| g_s399_438 g_s249_280) (mem g_s400_439 g_s137_140) (|<=i| g_s400_439 g_s249_280) (mem g_s401_440 g_s138_142) (mem g_s402_442 (|-->| (interval e0 e441) g_s138_142)) (mem g_s403_443 g_s138_142) (mem g_s404_444 g_s136_138) (mem g_s405_445 g_s136_138) (mem g_s406_446 g_s136_138) (mem g_s407_447 g_s136_138) (mem g_s408_448 (seq g_s137_140)) (= (size g_s408_448) g_s398_437) (mem g_s409_449 (seq g_s138_142)) (= (size g_s409_449) g_s398_437) (mem g_s410_450 (seq g_s138_142)) (= (size g_s410_450) g_s398_437) (mem g_s411_451 (|-->| (interval e0 e205) g_s138_142)) (mem g_s412_452 g_s137_140) (mem g_s413_453 (|-->| (interval e0 e202) g_s138_142)) (mem g_s414_454 g_s137_140) (mem g_s415_455 g_s137_140) (mem g_s416_456 g_s136_138) (mem g_s417_457 g_s137_140) (mem g_s418_458 g_s138_142) (mem g_s419_459 (|-->| (interval e0 e202) g_s138_142)) (mem g_s420_460 (|-->| g_s138_142 g_s136_138)) (mem g_s421_461 (|-->| (seq1 g_s138_142) g_s136_138)) (mem g_s422_462 (|-->| (set_prod (seq1 g_s138_142) g_s137_140) g_s137_140)) (mem g_s145_150 (|+->| BOOL g_s138_142)) (mem g_s145_150 (|+->| BOOL g_s137_140)) (mem g_s145_150 (|+->| BOOL g_s136_138)) (not (= (apply g_s294_332 e0) (apply g_s294_332 e203))) (= (ran g_s294_332) (SET (mapplet (apply g_s294_332 e203) (apply g_s294_332 e0))))))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s423_463 g_s138_142) (mem g_s424_464 g_s138_142) (mem g_s425_465 g_s138_142) (mem g_s426_466 g_s136_138) (mem g_s427_467 g_s136_138) (mem g_s428_468 g_s138_142) (mem g_s429_469 g_s137_140) (mem g_s430_470 (|-->| (interval e0 e202) g_s138_142)) (mem g_s431_471 g_s137_140) (mem g_s432_472 g_s137_140) (mem g_s433_473 g_s138_142) (mem g_s434_474 (|-->| (interval e0 e202) g_s138_142))))
(define-fun |def_inv| () Bool (and (mem g_s435$1_475 g_s138_142) (mem g_s436$1_476 g_s138_142) (mem g_s437$1_477 g_s138_142) (mem g_s438$1_478 g_s136_138) (mem g_s439$1_479 g_s136_138) (mem g_s440$1_480 g_s138_142) (mem g_s441$1_481 g_s137_140) (mem g_s442$1_482 (|-->| (interval e0 e202) g_s138_142)) (mem g_s443$1_483 g_s137_140) (mem g_s444$1_484 g_s137_140) (mem g_s445$1_485 g_s138_142) (mem g_s446$1_486 (|-->| (interval e0 e202) g_s138_142)) (= g_s423_463 g_s435$1_475) (= g_s424_464 g_s436$1_476) (= g_s425_465 g_s437$1_477) (= g_s426_466 g_s438$1_478) (= g_s427_467 g_s439$1_479) (= g_s429_469 g_s441$1_481) (= g_s430_470 g_s442$1_482) (= g_s431_471 g_s443$1_483) (= g_s432_472 g_s444$1_484) (= g_s433_473 g_s445$1_485) (= g_s428_468 g_s440$1_480) (= g_s434_474 g_s446$1_486)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (mem g_s447$1_487 (seq g_s138_142)) (|<=i| (size g_s447$1_487) g_s230_260)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem empty (seq g_s138_142)))
(define-fun lh_2 () Bool (|<=i| (size empty) g_s230_260))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 g_s137_140))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e0 g_s136_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e203 g_s137_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem e149 g_s137_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (set_prod (interval e0 e202) (SET e0)) (|-->| (interval e0 e202) g_s138_142)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e489))
; PO 1 in group 1
(push 1)
(assert (not (mem (concatenate g_s447_488 (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490))))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e211))
; PO 1 in group 2
(push 1)
(assert (not (mem (concatenate g_s447_488 (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490))))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e206))
; PO 1 in group 3
(push 1)
(assert (not (mem (concatenate g_s447_488 (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490))))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e441))
; PO 1 in group 4
(push 1)
(assert (not (mem (concatenate g_s447_488 (composition g_s455_491 g_s413_453)) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (composition g_s455_491 g_s413_453))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e492))
; PO 1 in group 5
(push 1)
(assert (not (mem (concatenate g_s447_488 (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490)))))))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e493))
; PO 1 in group 6
(push 1)
(assert (not (mem (concatenate g_s447_488 (composition g_s455_491 g_s419_459)) (seq g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (|<=i| (size (concatenate g_s447_488 (composition g_s455_491 g_s419_459))) g_s230_260)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s460_496 g_s136_138))
(define-fun lh_2 () Bool (mem g_s459_494 g_s138_142))
(define-fun lh_3 () Bool (mem g_s461$1_497 g_s136_138))
(define-fun lh_4 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_5 () Bool (mem g_s463$1_499 g_s138_142))
(define-fun lh_6 () Bool (mem g_s464$1_500 g_s138_142))
(define-fun lh_7 () Bool (mem g_s465$1_501 BOOL))
(define-fun lh_8 () Bool (mem g_s466$1_502 BOOL))
(define-fun lh_9 () Bool (= g_s403_443 g_s142_146))
(define-fun lh_10 () Bool (= (size (composition g_s455_491 g_s411_451)) e489))
(define-fun lh_11 () Bool (= (size (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490))))) e211))
(define-fun lh_12 () Bool (= (size (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490))))) e206))
(define-fun lh_13 () Bool (= (size (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490))))) e441))
(define-fun lh_14 () Bool (= (size (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453))) e492))
(define-fun lh_15 () Bool (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490)))))))) e320))
(define-fun lh_16 () Bool (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458))) e493))
(define-fun lh_17 () Bool (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458)) (composition g_s455_491 g_s419_459))) e503))
(define-fun lh_18 () Bool (= (apply g_s185_201 (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458)) (composition g_s455_491 g_s419_459))) g_s417_457))
(define-fun lh_19 () Bool (= g_s440$1_480 g_s143_147))
(define-fun lh_20 () Bool (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (= (apply g_s187_207 (mapplet e0 e0)) (apply g_s411_451 e0))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e203)) (apply g_s411_451 e203))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e149)) (apply g_s411_451 e149))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e202)) (apply g_s411_451 e202))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e231)) (apply g_s411_451 e231))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e504)) (apply g_s411_451 e504))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e505)) (apply g_s411_451 e505))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e205)) (apply g_s411_451 e205))) TRUE))) FALSE))
(define-fun lh_21 () Bool (not (= g_s411_451 e506)))
(define-fun lh_22 () Bool (= g_s428_468 g_s143_147))
(define-fun lh_23 () Bool (= g_s411_451 e506))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= (size (composition g_s455_491 g_s411_451)) e489))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (= (size (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490))))) e211))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (= (size (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490))))) e206))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12) (= (size (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490))))) e441))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13) (= (size (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453))) e492))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14) (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490)))))))) e320))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15) (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458))) e493))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16) (= (size (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458)) (composition g_s455_491 g_s419_459))) e503))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20) (not (= g_s411_451 e506)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s142_146 g_s143_147))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s142_146 g_s440$1_480))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s419_459 g_s446$1_486))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s414_454 g_s443$1_483))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s413_453 g_s442$1_482))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s415_455 g_s444$1_484))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s418_458 g_s445$1_485))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s412_452 g_s441$1_481))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23) (= g_s460_496 g_s438$1_478))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s137_140))
; PO 1 in group 8
(assert (not (=> lh_1 (= g_s443$1_483 g_s431_471))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s138_142))
(define-fun lh_2 () Bool (mem g_s472_507 g_s138_142))
(define-fun lh_3 () Bool (and (|>=i| g_s472_507 e0) (|<=i| g_s472_507 e202)))
; PO 1 in group 9
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s442$1_482 g_s472_507) (apply g_s430_470 g_s472_507)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s138_142))
; PO 1 in group 10
(assert (not (=> lh_1 (= g_s445$1_485 g_s433_473))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s137_140))
; PO 1 in group 11
(assert (not (=> lh_1 (= g_s444$1_484 g_s432_472))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s137_140))
; PO 1 in group 12
(assert (not (=> lh_1 (= g_s441$1_481 g_s429_469))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s459$1_495 g_s459_494))
(define-fun lh_1 () Bool (mem g_s459_494 g_s138_142))
; PO 1 in group 13
(assert (not (=> lh_1 (= g_s440$1_480 g_s428_468))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e489))
(define-fun lh_2 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_3 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_4 () Bool (= (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) (idiv g_s412_452 e490)))
(define-fun lh_5 () Bool (mem (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) g_s138_142))
(define-fun lh_6 () Bool (= (size g_s447$1_487) e489))
(define-fun lh_7 () Bool (mem (modulo g_s412_452 e490) g_s138_142))
(define-fun lh_8 () Bool (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490))) e521))
; PO 1 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) (idiv g_s412_452 e490)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (size g_s447$1_487) e489))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s412_452 e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s412_452 e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490))) e521))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (concatenate g_s447_488 (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (|<-| (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490)) (modulo g_s412_452 e490))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e211))
(define-fun lh_2 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_3 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_4 () Bool (= (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) (idiv g_s414_454 e490)))
(define-fun lh_5 () Bool (mem (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) g_s138_142))
(define-fun lh_6 () Bool (= (size g_s447$1_487) e211))
(define-fun lh_7 () Bool (mem (modulo g_s414_454 e490) g_s138_142))
(define-fun lh_8 () Bool (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490))) e256))
; PO 1 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) (idiv g_s414_454 e490)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (size g_s447$1_487) e211))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s414_454 e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s414_454 e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490))) e256))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (concatenate g_s447_488 (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (|<-| (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490)) (modulo g_s414_454 e490))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e206))
(define-fun lh_2 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_3 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_4 () Bool (= (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) (idiv g_s415_455 e490)))
(define-fun lh_5 () Bool (mem (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) g_s138_142))
(define-fun lh_6 () Bool (= (size g_s447$1_487) e206))
(define-fun lh_7 () Bool (mem (modulo g_s415_455 e490) g_s138_142))
(define-fun lh_8 () Bool (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490))) e522))
; PO 1 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) (idiv g_s415_455 e490)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (size g_s447$1_487) e206))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s415_455 e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (modulo g_s415_455 e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (size (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490))) e522))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (concatenate g_s447_488 (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (|<-| (|<-| g_s447$1_487 (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490)) (modulo g_s415_455 e490))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e441))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_3 () Bool (mem (apply g_s413_453 e0) g_s138_142))
(define-fun lh_4 () Bool (= (size g_s447$1_487) e441))
(define-fun lh_5 () Bool (mem (apply g_s413_453 e203) g_s138_142))
(define-fun lh_6 () Bool (= (size (|<-| g_s447$1_487 (apply g_s413_453 e0))) e323))
(define-fun lh_7 () Bool (mem (apply g_s413_453 e149) g_s138_142))
(define-fun lh_8 () Bool (= (size (|<-| (|<-| g_s447$1_487 (apply g_s413_453 e0)) (apply g_s413_453 e203))) e523))
(define-fun lh_9 () Bool (mem (apply g_s413_453 e202) g_s138_142))
(define-fun lh_10 () Bool (= (size (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s413_453 e0)) (apply g_s413_453 e203)) (apply g_s413_453 e149))) e524))
; PO 1 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s413_453 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (size g_s447$1_487) e441))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s413_453 e203) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (size (|<-| g_s447$1_487 (apply g_s413_453 e0))) e323))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (apply g_s413_453 e149) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (size (|<-| (|<-| g_s447$1_487 (apply g_s413_453 e0)) (apply g_s413_453 e203))) e523))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (apply g_s413_453 e202) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (size (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s413_453 e0)) (apply g_s413_453 e203)) (apply g_s413_453 e149))) e524))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (= (concatenate g_s447_488 (composition g_s455_491 g_s413_453)) (|<-| (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s413_453 e0)) (apply g_s413_453 e203)) (apply g_s413_453 e149)) (apply g_s413_453 e202))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e492))
(define-fun lh_2 () Bool (mem g_s461$1_497 g_s136_138))
(define-fun lh_3 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_4 () Bool (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490) g_s138_142))
(define-fun lh_5 () Bool (= (size g_s447$1_487) e492))
(define-fun lh_6 () Bool (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490) g_s138_142))
(define-fun lh_7 () Bool (= (size (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490))) e526))
(define-fun lh_8 () Bool (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490) g_s138_142))
(define-fun lh_9 () Bool (= (size (|<-| (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490))) e230))
(define-fun lh_10 () Bool (mem (modulo g_s416_456 e490) g_s138_142))
(define-fun lh_11 () Bool (= (size (|<-| (|<-| (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490))) e527))
; PO 1 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (size g_s447$1_487) e492))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (= (size (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490))) e526))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (= (size (|<-| (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490))) e230))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (modulo g_s416_456 e490) INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (modulo g_s416_456 e490) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (= (size (|<-| (|<-| (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490))) e527))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (= (concatenate g_s447_488 (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (|<-| (|<-| (|<-| (|<-| g_s447$1_487 (modulo (apply g_s151_156 (mapplet g_s416_456 e525)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e523)) e490)) (modulo (apply g_s151_156 (mapplet g_s416_456 e489)) e490)) (modulo g_s416_456 e490))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 19 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_ass|)
(assert (= g_s447_488 g_s447$1_487))
(assert (= g_s435_508 g_s435$1_475))
(assert (= g_s436_509 g_s436$1_476))
(assert (= g_s437_510 g_s437$1_477))
(assert (= g_s438_511 g_s438$1_478))
(assert (= g_s439_512 g_s439$1_479))
(assert (= g_s441_513 g_s441$1_481))
(assert (= g_s442_514 g_s442$1_482))
(assert (= g_s443_515 g_s443$1_483))
(assert (= g_s444_516 g_s444$1_484))
(assert (= g_s445_517 g_s445$1_485))
(assert (= g_s440_518 g_s440$1_480))
(assert (= g_s446_519 g_s446$1_486))
(define-fun lh_1 () Bool (= (size g_s447_488) e493))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_3 () Bool (mem (apply g_s419_459 e0) g_s138_142))
(define-fun lh_4 () Bool (= (size g_s447$1_487) e493))
(define-fun lh_5 () Bool (mem (apply g_s419_459 e203) g_s138_142))
(define-fun lh_6 () Bool (= (size (|<-| g_s447$1_487 (apply g_s419_459 e0))) e525))
(define-fun lh_7 () Bool (mem (apply g_s419_459 e149) g_s138_142))
(define-fun lh_8 () Bool (= (size (|<-| (|<-| g_s447$1_487 (apply g_s419_459 e0)) (apply g_s419_459 e203))) e528))
(define-fun lh_9 () Bool (mem (apply g_s419_459 e202) g_s138_142))
(define-fun lh_10 () Bool (= (size (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s419_459 e0)) (apply g_s419_459 e203)) (apply g_s419_459 e149))) e529))
; PO 1 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s419_459 e0) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (size g_s447$1_487) e493))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s419_459 e203) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (size (|<-| g_s447$1_487 (apply g_s419_459 e0))) e525))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (apply g_s419_459 e149) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= (size (|<-| (|<-| g_s447$1_487 (apply g_s419_459 e0)) (apply g_s419_459 e203))) e528))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (apply g_s419_459 e202) g_s138_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (size (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s419_459 e0)) (apply g_s419_459 e203)) (apply g_s419_459 e149))) e529))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (= (concatenate g_s447_488 (composition g_s455_491 g_s419_459)) (|<-| (|<-| (|<-| (|<-| g_s447$1_487 (apply g_s419_459 e0)) (apply g_s419_459 e203)) (apply g_s419_459 e149)) (apply g_s419_459 e202))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 20 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 20
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 21 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e489))
; PO 1 in group 21
(push 1)
(assert (not (not (= e490 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 21
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 21
(push 1)
(assert (not (mem (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490))) (seq (ran (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 21
(push 1)
(assert (not (|<=i| e0 g_s412_452)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 21
(push 1)
(assert (not (|<=i| e203 e490)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 22 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 22
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 23 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e211))
; PO 1 in group 23
(push 1)
(assert (not (not (= e490 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 23
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 23
(push 1)
(assert (not (mem (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490))) (seq (ran (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 23
(push 1)
(assert (not (|<=i| e0 g_s414_454)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 23
(push 1)
(assert (not (|<=i| e203 e490)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 24 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 24
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 25 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e206))
; PO 1 in group 25
(push 1)
(assert (not (not (= e490 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 25
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 25
(push 1)
(assert (not (mem (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490))) (seq (ran (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 25
(push 1)
(assert (not (|<=i| e0 g_s415_455)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 25
(push 1)
(assert (not (|<=i| e203 e490)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 26 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 26
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 27 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e441))
; PO 1 in group 27
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 27
(push 1)
(assert (not (mem (composition g_s455_491 g_s413_453) (seq (ran (composition g_s455_491 g_s413_453))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 28 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 28
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 29 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e492))
; PO 1 in group 29
(push 1)
(assert (not (not (= e490 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 29
(push 1)
(assert (not (not (= (|*i| e490 e490) e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 29
(push 1)
(assert (not (not (= (|*i| (|*i| e490 e490) e490) e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 29
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 29
(push 1)
(assert (not (mem (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490)))))) (seq (ran (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 29
(push 1)
(assert (not (|<=i| e0 g_s416_456)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 29
(push 1)
(assert (not (|<=i| e0 (idiv g_s416_456 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 29
(push 1)
(assert (not (|<=i| e0 (idiv g_s416_456 (|*i| e490 e490)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 29
(push 1)
(assert (not (|<=i| e203 e490)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 30 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
; PO 1 in group 30
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 31 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_seext|)
(assert (mem g_s447_488 (seq g_s138_142)))
(assert (|<=i| (size g_s447_488) g_s230_260))
(assert (= (size g_s447_488) e493))
; PO 1 in group 31
(push 1)
(assert (not (mem g_s447_488 (seq (ran g_s447_488)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 31
(push 1)
(assert (not (mem (composition g_s455_491 g_s419_459) (seq (ran (composition g_s455_491 g_s419_459))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 32 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_3 () Bool (= (modulo (apply g_s157_162 (mapplet g_s412_452 e489)) e490) (idiv g_s412_452 e490)))
; PO 1 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (= e490 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s157_162 (|+->| (dom g_s157_162) (ran g_s157_162))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s412_452 e489) (dom g_s157_162)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s157_162 (mapplet g_s412_452 e489))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e0 g_s412_452))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 32
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 33 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_3 () Bool (= (modulo (apply g_s157_162 (mapplet g_s414_454 e489)) e490) (idiv g_s414_454 e490)))
; PO 1 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (= e490 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s157_162 (|+->| (dom g_s157_162) (ran g_s157_162))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s414_454 e489) (dom g_s157_162)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s157_162 (mapplet g_s414_454 e489))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e0 g_s414_454))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 33
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 34 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
(define-fun lh_3 () Bool (= (modulo (apply g_s157_162 (mapplet g_s415_455 e489)) e490) (idiv g_s415_455 e490)))
; PO 1 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2) (not (= e490 e0)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s157_162 (|+->| (dom g_s157_162) (ran g_s157_162))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s415_455 e489) (dom g_s157_162)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s157_162 (mapplet g_s415_455 e489))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e0 g_s415_455))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 34
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 35 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s477$1_520 g_s138_142))
; PO 1 in group 35
(push 1)
(assert (not (=> lh_1 (mem e0 (dom g_s413_453)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 35
(push 1)
(assert (not (=> lh_1 (mem e203 (dom g_s413_453)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 35
(push 1)
(assert (not (=> lh_1 (mem e149 (dom g_s413_453)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 35
(push 1)
(assert (not (=> lh_1 (mem e202 (dom g_s413_453)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 35
(push 1)
(assert (not (=> lh_1 (mem g_s413_453 (|+->| (dom g_s413_453) (ran g_s413_453))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 36 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s477$1_520 g_s138_142))
; PO 1 in group 36
(push 1)
(assert (not (=> lh_1 (mem e0 (dom g_s419_459)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 36
(push 1)
(assert (not (=> lh_1 (mem e203 (dom g_s419_459)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 36
(push 1)
(assert (not (=> lh_1 (mem e149 (dom g_s419_459)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 36
(push 1)
(assert (not (=> lh_1 (mem e202 (dom g_s419_459)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 36
(push 1)
(assert (not (=> lh_1 (mem g_s419_459 (|+->| (dom g_s419_459) (ran g_s419_459))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 37 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s461$1_497 g_s136_138))
(define-fun lh_2 () Bool (mem g_s477$1_520 g_s138_142))
; PO 1 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s151_156 (|+->| (dom g_s151_156) (ran g_s151_156))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s416_456 e489) (dom g_s151_156)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s416_456 e523) (dom g_s151_156)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (mapplet g_s416_456 e525) (dom g_s151_156)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 g_s416_456))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s151_156 (mapplet g_s416_456 e489))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s151_156 (mapplet g_s416_456 e523))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e0 (apply g_s151_156 (mapplet g_s416_456 e525))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 37
(push 1)
(assert (not (=> (and lh_1 lh_2) (|<=i| e203 e490))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 38 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s460_496 g_s136_138))
(assert (mem g_s459_494 g_s138_142))
(define-fun lh_1 () Bool (mem g_s461$1_497 g_s136_138))
(define-fun lh_2 () Bool (mem g_s462$1_498 g_s137_140))
(define-fun lh_3 () Bool (mem g_s463$1_499 g_s138_142))
(define-fun lh_4 () Bool (mem g_s464$1_500 g_s138_142))
(define-fun lh_5 () Bool (mem g_s465$1_501 BOOL))
(define-fun lh_6 () Bool (mem g_s466$1_502 BOOL))
(define-fun lh_7 () Bool (= g_s403_443 g_s142_146))
(define-fun lh_8 () Bool (= (apply g_s185_201 (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (concatenate (composition g_s455_491 g_s411_451) (SEQ (mapplet (modulo g_s412_452 e490) (idiv g_s412_452 e490)))) (SEQ (mapplet (modulo g_s414_454 e490) (idiv g_s414_454 e490)))) (SEQ (mapplet (modulo g_s415_455 e490) (idiv g_s415_455 e490)))) (composition g_s455_491 g_s413_453)) (SEQ (mapplet (modulo g_s416_456 e490) (mapplet (modulo (idiv g_s416_456 e490) e490) (mapplet (modulo (idiv g_s416_456 (|*i| e490 e490)) e490) (idiv g_s416_456 (|*i| (|*i| e490 e490) e490))))))) (SEQ g_s418_458)) (composition g_s455_491 g_s419_459))) g_s417_457))
(define-fun lh_9 () Bool (= g_s440$1_480 g_s143_147))
(define-fun lh_10 () Bool (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (and (= (bool (= (apply g_s187_207 (mapplet e0 e0)) (apply g_s411_451 e0))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e203)) (apply g_s411_451 e203))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e149)) (apply g_s411_451 e149))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e202)) (apply g_s411_451 e202))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e231)) (apply g_s411_451 e231))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e504)) (apply g_s411_451 e504))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e505)) (apply g_s411_451 e505))) TRUE))) TRUE) (= (bool (= (apply g_s187_207 (mapplet e0 e205)) (apply g_s411_451 e205))) TRUE))) FALSE))
(define-fun lh_11 () Bool (and (|>=i| g_s467_530 e0) (|<=i| g_s467_530 e205)))
; PO 1 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e0 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e203 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e149 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e202 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e231 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e504 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e505 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem e205 (dom g_s411_451)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s187_207 (|+->| (dom g_s187_207) (ran g_s187_207))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem g_s411_451 (|+->| (dom g_s411_451) (ran g_s411_451))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e0) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e203) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e149) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e202) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e231) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e504) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e505) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9) (mem (mapplet e0 e205) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem g_s187_207 (|+->| (dom g_s187_207) (ran g_s187_207))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 38
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem (mapplet e0 g_s467_530) (dom g_s187_207)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 39 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s459_494 g_s138_142))
(assert (mem g_s472_507 g_s138_142))
(assert (and (|>=i| g_s472_507 e0) (|<=i| g_s472_507 e202)))
(assert (mem g_s459_494 g_s138_142))
(assert (mem g_s472_507 g_s138_142))
(assert (and (|>=i| g_s472_507 e0) (|<=i| g_s472_507 e202)))
; PO 1 in group 39
(push 1)
(assert (not (mem g_s472_507 (dom g_s442$1_482))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 39
(push 1)
(assert (not (mem g_s442$1_482 (|+->| (dom g_s442$1_482) (ran g_s442$1_482)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)