(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e73 () U)
(declare-fun e178 () U)
(declare-fun e82 () U)
(declare-fun e188 () U)
(declare-fun e126 () U)
(declare-fun e123 () U)
(declare-fun e124 () U)
(declare-fun e163 () U)
(declare-fun e127 () U)
(declare-fun e131 () U)
(declare-fun e125 () U)
(declare-fun e122 () U)
(declare-fun e135 () U)
(declare-fun e165 () U)
(declare-fun e170 () U)
(declare-fun e65 () U)
(declare-fun e167 () U)
(declare-fun e120 () U)
(declare-fun e89 () U)
(declare-fun e121 () U)
(declare-fun e128 () U)
(declare-fun e129 () U)
(declare-fun e130 () U)
(declare-fun e137 () U)
(declare-fun e67 () U)
(declare-fun e141 () U)
(declare-fun e139 () U)
(declare-fun e69 () U)
(declare-fun e133 () U)
(declare-fun e71 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_110 () U)
(declare-fun g_s101_111 () U)
(declare-fun g_s102_112 () U)
(declare-fun g_s103_113 () U)
(declare-fun g_s104_114 () U)
(declare-fun g_s105_115 () U)
(declare-fun g_s106_116 () U)
(declare-fun g_s107_117 () U)
(declare-fun g_s108_118 () U)
(declare-fun g_s109_119 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_132 () U)
(declare-fun g_s111_134 () U)
(declare-fun g_s112_136 () U)
(declare-fun g_s113_138 () U)
(declare-fun g_s114_140 () U)
(declare-fun g_s115_142 () U)
(declare-fun g_s116_143 () U)
(declare-fun g_s117_144 () U)
(declare-fun g_s118_145 () U)
(declare-fun g_s119_146 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_147 () U)
(declare-fun g_s121_148 () U)
(declare-fun g_s122_149 () U)
(declare-fun g_s123_150 () U)
(declare-fun g_s124_151 () U)
(declare-fun g_s125_152 () U)
(declare-fun g_s126_153 () U)
(declare-fun g_s127_154 () U)
(declare-fun g_s128_155 () U)
(declare-fun g_s129_156 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_157 () U)
(declare-fun g_s131_158 () U)
(declare-fun g_s132_159 () U)
(declare-fun g_s133_160 () U)
(declare-fun g_s134_161 () U)
(declare-fun g_s135_162 () U)
(declare-fun g_s136_164 () U)
(declare-fun g_s137_166 () U)
(declare-fun g_s138_168 () U)
(declare-fun g_s139_169 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_171 () U)
(declare-fun g_s141_172 () U)
(declare-fun g_s142_173 () U)
(declare-fun g_s143_174 () U)
(declare-fun g_s144_175 () U)
(declare-fun g_s145_176 () U)
(declare-fun g_s146_177 () U)
(declare-fun g_s147_179 () U)
(declare-fun g_s148_180 () U)
(declare-fun g_s149_181 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_182 () U)
(declare-fun g_s151_183 () U)
(declare-fun g_s152_184 () U)
(declare-fun g_s153_185 () U)
(declare-fun g_s154_186 () U)
(declare-fun g_s155_187 () U)
(declare-fun g_s156_189 () U)
(declare-fun g_s157_190 () U)
(declare-fun g_s158_191 () U)
(declare-fun g_s159_192 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_193 () U)
(declare-fun g_s161_194 () U)
(declare-fun g_s162_195 () U)
(declare-fun g_s163_196 () U)
(declare-fun g_s164_197 () U)
(declare-fun g_s165_198 () U)
(declare-fun g_s166_199 () U)
(declare-fun g_s167_200 () U)
(declare-fun g_s168_201 () U)
(declare-fun g_s169_202 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_203 () U)
(declare-fun g_s171_204 () U)
(declare-fun g_s172_205 () U)
(declare-fun g_s173_206 () U)
(declare-fun g_s174_207 () U)
(declare-fun g_s175_208 () U)
(declare-fun g_s176_209 () U)
(declare-fun g_s177_210 () U)
(declare-fun g_s178_211 () U)
(declare-fun g_s179_212 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_213 () U)
(declare-fun g_s181_214 () U)
(declare-fun g_s182_215 () U)
(declare-fun g_s183_216 () U)
(declare-fun g_s184_217 () U)
(declare-fun g_s185_218 () U)
(declare-fun g_s186_219 () U)
(declare-fun g_s187_220 () U)
(declare-fun g_s188_221 () U)
(declare-fun g_s189_222 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_223 () U)
(declare-fun g_s191_224 () U)
(declare-fun g_s192_225 () U)
(declare-fun g_s193_226 () U)
(declare-fun g_s194_227 () U)
(declare-fun g_s195_228 () U)
(declare-fun g_s196_229 () U)
(declare-fun g_s197_230 () U)
(declare-fun g_s198_231 () U)
(declare-fun g_s199_232 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_233 () U)
(declare-fun g_s201_234 () U)
(declare-fun g_s202_235 () U)
(declare-fun g_s203_236 () U)
(declare-fun g_s204_237 () U)
(declare-fun g_s205_238 () U)
(declare-fun g_s206_239 () U)
(declare-fun g_s207_240 () U)
(declare-fun g_s208_241 () U)
(declare-fun g_s209_242 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_243 () U)
(declare-fun g_s211_244 () U)
(declare-fun g_s212_245 () U)
(declare-fun g_s213_246 () U)
(declare-fun g_s214_247 () U)
(declare-fun g_s215_248 () U)
(declare-fun g_s216_250 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s221_251 () U)
(declare-fun g_s222_253 () U)
(declare-fun g_s223_254 () U)
(declare-fun g_s224_255 () U)
(declare-fun g_s225_256 () U)
(declare-fun g_s226_257 () U)
(declare-fun g_s227_258 () U)
(declare-fun g_s228_259 () U)
(declare-fun g_s229_260 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_261 () U)
(declare-fun g_s231_262 () U)
(declare-fun g_s232_263 () U)
(declare-fun g_s233_264 () U)
(declare-fun g_s234_265 () U)
(declare-fun g_s235_266 () U)
(declare-fun g_s236_267 () U)
(declare-fun g_s237_268 () U)
(declare-fun g_s238_269 () U)
(declare-fun g_s239_270 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_271 () U)
(declare-fun g_s241_272 () U)
(declare-fun g_s242_273 () U)
(declare-fun g_s243_274 () U)
(declare-fun g_s244_275 () U)
(declare-fun g_s245_276 () U)
(declare-fun g_s246_277 () U)
(declare-fun g_s247_278 () U)
(declare-fun g_s248_279 () U)
(declare-fun g_s249_280 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_281 () U)
(declare-fun g_s251_282 () U)
(declare-fun g_s252_283 () U)
(declare-fun g_s253_284 () U)
(declare-fun g_s254_285 () U)
(declare-fun g_s255_286 () U)
(declare-fun g_s256_287 () U)
(declare-fun g_s257_288 () U)
(declare-fun g_s258_289 () U)
(declare-fun g_s259_290 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_291 () U)
(declare-fun g_s261_292 () U)
(declare-fun g_s262_293 () U)
(declare-fun g_s263_294 () U)
(declare-fun g_s264_295 () U)
(declare-fun g_s265_296 () U)
(declare-fun g_s266_297 () U)
(declare-fun g_s267_298 () U)
(declare-fun g_s268_299 () U)
(declare-fun g_s269_300 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_301 () U)
(declare-fun g_s271_302 () U)
(declare-fun g_s272_303 () U)
(declare-fun g_s273_304 () U)
(declare-fun g_s274_305 () U)
(declare-fun g_s275_306 () U)
(declare-fun g_s276_307 () U)
(declare-fun g_s277_308 () U)
(declare-fun g_s278_309 () U)
(declare-fun g_s279_310 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_311 () U)
(declare-fun g_s281_312 () U)
(declare-fun g_s282_313 () U)
(declare-fun g_s283_314 () U)
(declare-fun g_s284_315 () U)
(declare-fun g_s285_316 () U)
(declare-fun g_s286_317 () U)
(declare-fun g_s287_318 () U)
(declare-fun g_s288_319 () U)
(declare-fun g_s289_320 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_321 () U)
(declare-fun g_s291_322 () U)
(declare-fun g_s292_323 () U)
(declare-fun g_s293_324 () U)
(declare-fun g_s294_325 () U)
(declare-fun g_s295_326 () U)
(declare-fun g_s296_327 () U)
(declare-fun g_s297_328 () U)
(declare-fun g_s298_329 () U)
(declare-fun g_s299_330 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_331 () U)
(declare-fun g_s301_332 () U)
(declare-fun g_s302_333 () U)
(declare-fun g_s303_334 () U)
(declare-fun g_s304_335 () U)
(declare-fun g_s305_336 () U)
(declare-fun g_s306_337 () U)
(declare-fun g_s307_338 () U)
(declare-fun g_s308_339 () U)
(declare-fun g_s309_340 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_341 () U)
(declare-fun g_s311_342 () U)
(declare-fun g_s312_343 () U)
(declare-fun g_s313_344 () U)
(declare-fun g_s314_345 () U)
(declare-fun g_s315_346 () U)
(declare-fun g_s316_347 () U)
(declare-fun g_s317_348 () U)
(declare-fun g_s318_349 () U)
(declare-fun g_s319_350 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_351 () U)
(declare-fun g_s321_352 () U)
(declare-fun g_s322_353 () U)
(declare-fun g_s323_354 () U)
(declare-fun g_s324_355 () U)
(declare-fun g_s325_356 () U)
(declare-fun g_s326_357 () U)
(declare-fun g_s327_358 () U)
(declare-fun g_s328_359 () U)
(declare-fun g_s329_360 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_361 () U)
(declare-fun g_s331_362 () U)
(declare-fun g_s332_363 () U)
(declare-fun g_s333_364 () U)
(declare-fun g_s334_365 () U)
(declare-fun g_s335_366 () U)
(declare-fun g_s336_367 () U)
(declare-fun g_s337_368 () U)
(declare-fun g_s338_369 () U)
(declare-fun g_s339_370 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_371 () U)
(declare-fun g_s341_372 () U)
(declare-fun g_s342_373 () U)
(declare-fun g_s343_374 () U)
(declare-fun g_s344_375 () U)
(declare-fun g_s345_376 () U)
(declare-fun g_s346_377 () U)
(declare-fun g_s347_378 () U)
(declare-fun g_s348_379 () U)
(declare-fun g_s349_380 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s353_381 () U)
(declare-fun g_s354_382 () U)
(declare-fun g_s355_383 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_70 () U)
(declare-fun g_s67_72 () U)
(declare-fun g_s68_74 () U)
(declare-fun g_s69_75 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_76 () U)
(declare-fun g_s71_77 () U)
(declare-fun g_s72_78 () U)
(declare-fun g_s73_79 () U)
(declare-fun g_s74_80 () U)
(declare-fun g_s75_81 () U)
(declare-fun g_s76_83 () U)
(declare-fun g_s77_84 () U)
(declare-fun g_s78_85 () U)
(declare-fun g_s79_86 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_87 () U)
(declare-fun g_s81_88 () U)
(declare-fun g_s82_90 () U)
(declare-fun g_s83_91 () U)
(declare-fun g_s86_93 () U)
(declare-fun g_s87_95 () U)
(declare-fun g_s88_97 () U)
(declare-fun g_s89_99 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_100 () U)
(declare-fun g_s91_101 () U)
(declare-fun g_s92_102 () U)
(declare-fun g_s93_103 () U)
(declare-fun g_s94_104 () U)
(declare-fun g_s95_105 () U)
(declare-fun g_s96_106 () U)
(declare-fun g_s97_107 () U)
(declare-fun g_s98_108 () U)
(declare-fun g_s99_109 () U)
(declare-fun e98 () U)
(declare-fun e94 () U)
(declare-fun e92 () U)
(declare-fun e96 () U)
(declare-fun e249 () U)
(declare-fun e252 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (= g_s1_2 (SET (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 g_s2_3)))))) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (not (= g_s12_13 empty)) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (not (= g_s15_16 empty)) (not (= g_s16_17 empty)) (= g_s17_18 (SET (mapplet g_s33_34 (mapplet g_s32_33 (mapplet g_s31_32 (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 (mapplet g_s27_28 (mapplet g_s26_27 (mapplet g_s25_26 (mapplet g_s24_25 (mapplet g_s23_24 (mapplet g_s22_23 (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 g_s18_19))))))))))))))))) (= g_s34_35 (SET (mapplet g_s37_38 (mapplet g_s36_37 g_s35_36)))) (= g_s38_39 (SET (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 (mapplet g_s54_55 (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 (mapplet g_s40_41 g_s39_40)))))))))))))))))))) (= g_s58_59 (SET (mapplet g_s60_61 g_s59_60))) (= g_s61_62 (SET (mapplet g_s63_64 g_s62_63))) (= g_s64_66 (interval e0 e65)) (= g_s65_68 (interval e0 e67)) (= g_s66_70 (interval e0 e69)) (= g_s67_72 (interval e0 e71)) (= g_s68_74 (interval e73 e65)) (= g_s69_75 (interval e73 e67)) (= g_s70_76 (interval e73 e69)) (= g_s71_77 (interval e73 e71)) (= g_s72_78 g_s66_70) (subset g_s73_79 g_s0_1) (mem g_s74_80 g_s0_1) (= g_s73_79 (set_diff g_s0_1 (SET g_s74_80))) (= g_s75_81 g_s66_70) (= g_s76_83 (interval e0 e82)) (= g_s77_84 (interval e0 e82)) (= g_s78_85 (|-->| g_s76_83 g_s65_68)) (= g_s79_86 (|-->| g_s77_84 g_s65_68)) (= g_s80_87 g_s64_66) (= g_s81_88 g_s65_68) (= g_s82_90 (interval e0 e89)) (mem g_s83_91 (|-->| (set_prod g_s67_72 g_s67_72) g_s67_72)) (= g_s83_91 e92) (mem g_s86_93 (|-->| (set_prod g_s67_72 g_s67_72) g_s67_72)) (= g_s86_93 e94) (mem g_s87_95 (|-->| (set_prod g_s67_72 g_s67_72) g_s67_72)) (= g_s87_95 e96) (mem g_s88_97 (|-->| (set_prod g_s67_72 g_s67_72) g_s67_72)) (= g_s88_97 e98) (mem g_s89_99 g_s67_72) (mem g_s90_100 g_s67_72) (mem g_s91_101 g_s67_72) (mem g_s92_102 g_s65_68) (mem g_s93_103 g_s65_68) (mem g_s94_104 g_s64_66) (mem g_s95_105 g_s64_66) (mem g_s96_106 g_s64_66) (mem g_s97_107 g_s64_66) (mem g_s98_108 g_s64_66) (mem g_s99_109 g_s65_68) (mem g_s100_110 g_s65_68) (mem g_s101_111 g_s65_68) (mem g_s102_112 g_s65_68) (mem g_s103_113 g_s67_72) (mem g_s104_114 g_s67_72) (mem g_s105_115 g_s67_72) (mem g_s106_116 g_s65_68) (mem g_s107_117 g_s65_68) (mem g_s108_118 g_s65_68) (mem g_s109_119 g_s65_68) (= g_s89_99 e120) (= g_s91_101 e121) (= g_s90_100 e122) (= g_s92_102 e0) (= g_s93_103 e0) (= g_s94_104 e65) (= g_s105_115 e123) (= g_s95_105 e124) (= g_s96_106 e125) (= g_s97_107 e126) (= g_s100_110 e89) (= g_s98_108 e126) (= g_s99_109 e127) (= g_s101_111 e67) (= g_s102_112 e128) (= g_s107_117 e129) (= g_s108_118 e67) (= g_s103_113 e130) (= g_s104_114 e130) (mem g_s106_116 g_s65_68) (= g_s106_116 e89) (= g_s109_119 e131) (mem g_s110_132 g_s67_72) (= g_s110_132 e133) (mem g_s111_134 g_s64_66) (= g_s111_134 e135) (mem g_s112_136 g_s67_72) (= g_s112_136 e137) (mem g_s113_138 g_s67_72) (= g_s113_138 e139) (mem g_s114_140 g_s67_72) (= g_s114_140 e141) (subset g_s115_142 g_s14_15) (mem g_s116_143 g_s14_15) (= g_s115_142 (set_diff g_s14_15 (SET g_s116_143))) (subset g_s117_144 g_s7_8) (mem g_s118_145 g_s7_8) (not (mem g_s118_145 g_s117_144)) (subset g_s119_146 g_s8_9) (mem g_s120_147 g_s8_9) (= g_s119_146 (set_diff g_s8_9 (SET g_s120_147))) (subset g_s121_148 g_s9_10) (mem g_s122_149 g_s9_10) (= g_s121_148 (set_diff g_s9_10 (SET g_s122_149))) (subset g_s123_150 g_s10_11) (mem g_s124_151 g_s10_11) (= g_s123_150 (set_diff g_s10_11 (SET g_s124_151))) (subset g_s125_152 g_s15_16) (mem g_s126_153 g_s15_16) (= g_s125_152 (set_diff g_s15_16 (SET g_s126_153))) (subset g_s127_154 g_s16_17) (mem g_s128_155 g_s16_17) (= g_s127_154 (set_diff g_s16_17 (SET g_s128_155))) (= g_s129_156 (interval e0 g_s91_101)) (= g_s130_157 (interval e0 g_s110_132)) (= g_s131_158 (interval e0 (idiv g_s110_132 g_s114_140))) (= g_s132_159 g_s67_72) (= g_s133_160 g_s67_72) (= g_s134_161 g_s67_72) (= g_s135_162 (interval e0 e124)) (= g_s136_164 (interval e0 e163)) (= g_s137_166 (interval e0 e165)) (= g_s138_168 (interval e0 e167)) (= g_s139_169 (interval e73 e165)) (= g_s140_171 (interval e0 e170)) (= g_s141_172 (interval e0 e89)) (= g_s142_173 (interval e0 g_s101_111)) (= g_s143_174 (interval e0 g_s99_109)) (= g_s144_175 (interval e0 g_s100_110)) (= g_s145_176 (interval e0 g_s95_105)) (= g_s146_177 (interval e0 g_s96_106)) (= g_s147_179 (interval e73 e178)) (subset g_s148_180 g_s12_13) (mem g_s149_181 g_s12_13) (= g_s148_180 (set_diff g_s12_13 (SET g_s149_181))) (subset g_s150_182 g_s11_12) (mem g_s151_183 g_s11_12) (= g_s150_182 (set_diff g_s11_12 (SET g_s151_183))) (mem g_s152_184 g_s64_66) (= g_s152_184 e124) (= g_s153_185 (interval e73 g_s152_184)) (subset g_s154_186 g_s13_14) (mem g_s155_187 g_s13_14) (= g_s154_186 (set_diff g_s13_14 (SET g_s155_187))) (= g_s156_189 (interval e73 e188)) (mem g_s157_190 g_s64_66) (= g_s157_190 e0) (= g_s158_191 (interval e73 g_s101_111)) (= g_s159_192 (interval e73 g_s99_109)) (= g_s160_193 (interval e73 e89)) (= g_s161_194 (interval e0 e89)) (= g_s162_195 (interval e0 g_s94_104)) (= g_s163_196 g_s65_68) (= g_s164_197 (interval e73 g_s97_107)) (= g_s165_198 (interval e73 g_s98_108)) (= g_s166_199 (|-->| g_s156_189 BOOL)) (= g_s167_200 (|-->| g_s158_191 BOOL)) (= g_s168_201 (|-->| g_s158_191 g_s162_195)) (= g_s169_202 (|+->| g_s158_191 g_s162_195)) (= g_s170_203 (|+->| g_s158_191 g_s10_11)) (= g_s171_204 (|+->| g_s158_191 g_s131_158)) (= g_s172_205 (|+->| g_s158_191 g_s135_162)) (= g_s173_206 (|+->| g_s158_191 g_s136_164)) (= g_s174_207 (|-->| g_s135_162 g_s10_11)) (= g_s175_208 (|>->| g_s136_164 g_s10_11)) (= g_s176_209 (|-->| g_s135_162 g_s131_158)) (= g_s177_210 (|-->| g_s136_164 g_s131_158)) (= g_s178_211 (|+->| g_s158_191 g_s176_209)) (= g_s179_212 (|+->| g_s158_191 g_s177_210)) (= g_s180_213 (|+->| g_s158_191 g_s174_207)) (= g_s181_214 (|+->| g_s158_191 g_s175_208)) (= g_s182_215 (|-->| g_s154_186 g_s73_79)) (= g_s183_216 (|-->| g_s148_180 g_s73_79)) (= g_s184_217 (|-->| g_s154_186 g_s0_1)) (= g_s185_218 (|-->| g_s154_186 g_s14_15)) (= g_s186_219 (|-->| g_s148_180 g_s14_15)) (= g_s187_220 (|-->| g_s164_197 g_s73_79)) (= g_s188_221 (|-->| g_s165_198 g_s73_79)) (= g_s189_222 (|-->| g_s147_179 g_s14_15)) (= g_s190_223 (|-->| g_s154_186 g_s189_222)) (= g_s191_224 (|-->| g_s148_180 g_s189_222)) (= g_s192_225 (|-->| g_s153_185 g_s14_15)) (= g_s193_226 (|-->| g_s153_185 BOOL)) (= g_s194_227 (|-->| g_s159_192 BOOL)) (= g_s195_228 (|-->| g_s159_192 g_s162_195)) (= g_s196_229 (|-->| g_s159_192 g_s10_11)) (= g_s197_230 (|-->| g_s159_192 g_s131_158)) (= g_s198_231 (|-->| g_s159_192 g_s135_162)) (= g_s199_232 (|-->| g_s159_192 g_s136_164)) (= g_s200_233 (|-->| g_s159_192 g_s174_207)) (= g_s201_234 (|+->| g_s158_191 g_s140_171)) (= g_s202_235 (|-->| g_s140_171 g_s10_11)) (= g_s203_236 (|-->| g_s140_171 g_s131_158)) (= g_s204_237 (|+->| g_s158_191 g_s202_235)) (= g_s205_238 (|+->| g_s158_191 g_s203_236)) (= g_s206_239 (|-->| g_s139_169 g_s162_195)) (= g_s207_240 (|-->| g_s139_169 g_s166_199)) (= g_s208_241 (|-->| g_s139_169 g_s131_158)) (= g_s209_242 (|-->| g_s139_169 BOOL)) (= g_s210_243 (|-->| g_s140_171 g_s11_12)) (= g_s211_244 (|-->| g_s140_171 g_s130_157)) (= g_s212_245 (|-->| g_s140_171 g_s61_62)) (= g_s213_246 (|-->| g_s138_168 g_s11_12)) (= g_s214_247 (|-->| g_s138_168 g_s130_157)) (= g_s215_248 (|-->| g_s138_168 g_s61_62)) (= g_s216_250 e249) (mem g_s221_251 g_s216_250) (= g_s221_251 e252) (= g_s222_253 (|-->| g_s123_150 g_s216_250)) (mem g_s223_254 g_s16_17) (mem g_s224_255 NAT) (mem g_s225_256 NAT) (mem g_s226_257 NAT) (mem g_s227_258 NAT) (= g_s224_255 e89) (= g_s225_256 e170) (= g_s226_257 e170) (= g_s227_258 e165) (= (card g_s154_186) g_s95_105) (= (card g_s148_180) g_s96_106) (= (card g_s158_191) g_s101_111) (= (card g_s159_192) g_s99_109) (mem g_s228_259 (iseq g_s148_180)) (mem g_s228_259 (|>->>| (interval e73 g_s96_106) g_s148_180)) (mem g_s229_260 (iseq g_s154_186)) (mem g_s229_260 (|>->>| (interval e73 g_s95_105) g_s154_186)) (= g_s230_261 (interval e0 g_s107_117)) (= g_s231_262 (interval e0 g_s108_118)) (= g_s232_263 (|-->| g_s158_191 g_s166_199)) (= g_s233_264 (|+->| g_s158_191 g_s166_199)) (= g_s234_265 (interval e0 e82)) (= g_s235_266 (|-->| g_s234_265 g_s231_262)) (= g_s236_267 (interval e0 e170)) (= g_s237_268 (|-->| g_s236_267 g_s15_16)) (mem g_s238_269 g_s166_199) (mem g_s239_270 g_s237_268) (= g_s240_271 (|-->| g_s160_193 g_s140_171)) (= g_s241_272 (|-->| g_s160_193 g_s142_173)) (= g_s242_273 (|-->| g_s160_193 g_s162_195)) (= g_s243_274 (|-->| g_s160_193 BOOL)) (= g_s244_275 (|-->| g_s160_193 g_s166_199)) (= g_s245_276 (|-->| g_s160_193 g_s202_235)) (= g_s246_277 (|-->| g_s160_193 g_s203_236)) (= g_s246_277 (|-->| g_s160_193 g_s203_236))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool (and (mem g_s247_278 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s248_279 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s249_280 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s250_281 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s251_282 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s252_283 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s253_284 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s254_285 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s255_286 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s256_287 (|-->| (set_prod (interval e0 e69) (interval e0 e69)) BOOL)) (mem g_s257_288 (set_diff g_s14_15 (SET g_s116_143))) (mem g_s258_289 (set_diff g_s14_15 (SET g_s116_143)))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s259_290 g_s0_1) (mem g_s260_291 g_s0_1) (mem g_s261_292 g_s14_15) (mem g_s262_293 g_s14_15) (mem g_s263_294 g_s192_225) (mem g_s264_295 g_s14_15) (mem g_s265_296 g_s14_15) (mem g_s266_297 g_s14_15) (mem g_s267_298 g_s14_15) (mem g_s268_299 g_s14_15) (and (|>=i| g_s269_300 e0) (|<=i| g_s269_300 e71)) (and (|>=i| g_s270_301 e0) (|<=i| g_s270_301 e69)) (and (|>=i| g_s271_302 e0) (|<=i| g_s271_302 e69)) (mem g_s272_303 g_s0_1) (mem g_s273_304 g_s0_1) (and (|>=i| g_s274_305 e0) (|<=i| g_s274_305 e71)) (and (|>=i| g_s275_306 e0) (|<=i| g_s275_306 e69)) (and (|>=i| g_s276_307 e0) (|<=i| g_s276_307 e69)) (mem g_s277_308 g_s0_1) (mem g_s278_309 g_s0_1) (and (|>=i| g_s279_310 e0) (|<=i| g_s279_310 e71)) (and (|>=i| g_s280_311 e0) (|<=i| g_s280_311 e69)) (and (|>=i| g_s281_312 e0) (|<=i| g_s281_312 e69)) (mem g_s282_313 g_s0_1) (mem g_s283_314 g_s0_1) (mem g_s284_315 BOOL) (mem g_s285_316 g_s10_11) (mem g_s286_317 g_s131_158) (and (|>=i| g_s287_318 e0) (|<=i| g_s287_318 e65)) (and (|>=i| g_s288_319 e0) (|<=i| g_s288_319 e124)) (mem g_s289_320 (|-->| (interval e0 e124) g_s10_11)) (mem g_s290_321 g_s10_11) (mem g_s291_322 g_s131_158) (mem g_s292_323 g_s0_1) (mem g_s293_324 g_s0_1) (and (|>=i| g_s294_325 e0) (|<=i| g_s294_325 e69)) (and (|>=i| g_s295_326 e0) (|<=i| g_s295_326 e69)) (mem g_s296_327 g_s0_1) (mem g_s297_328 g_s0_1) (mem g_s298_329 g_s0_1) (mem g_s299_330 g_s0_1) (and (|>=i| g_s300_331 e0) (|<=i| g_s300_331 e69)) (and (|>=i| g_s301_332 e0) (|<=i| g_s301_332 e69)) (mem g_s302_333 g_s0_1) (mem g_s303_334 g_s0_1) (mem g_s304_335 g_s0_1) (mem g_s305_336 g_s0_1) (and (|>=i| g_s306_337 e0) (|<=i| g_s306_337 e69)) (and (|>=i| g_s307_338 e0) (|<=i| g_s307_338 e69)) (mem g_s308_339 g_s0_1) (mem g_s309_340 g_s0_1) (mem g_s310_341 g_s0_1) (mem g_s311_342 g_s0_1) (and (|>=i| g_s312_343 e0) (|<=i| g_s312_343 e69)) (and (|>=i| g_s313_344 e0) (|<=i| g_s313_344 e69)) (mem g_s314_345 g_s0_1) (mem g_s315_346 g_s0_1) (mem g_s316_347 BOOL) (mem g_s317_348 g_s0_1) (mem g_s318_349 g_s0_1) (mem g_s319_350 g_s0_1) (mem g_s320_351 BOOL) (mem g_s321_352 g_s0_1) (mem g_s322_353 g_s0_1) (mem g_s323_354 BOOL) (and (|>=i| g_s324_355 e0) (|<=i| g_s324_355 e65)) (mem g_s325_356 g_s166_199) (mem g_s326_357 g_s234_265) (mem g_s327_358 g_s235_266) (mem g_s328_359 g_s235_266) (mem g_s329_360 g_s236_267) (mem g_s330_361 g_s237_268) (mem g_s331_362 g_s0_1) (mem g_s332_363 BOOL) (and (|>=i| g_s333_364 e0) (|<=i| g_s333_364 e67)) (and (|>=i| g_s334_365 e0) (|<=i| g_s334_365 e65)) (mem g_s335_366 g_s166_199) (mem g_s336_367 g_s0_1) (mem g_s337_368 g_s0_1) (mem g_s338_369 g_s16_17) (and (|>=i| g_s339_370 e0) (|<=i| g_s339_370 e71)) (and (|>=i| g_s340_371 e0) (|<=i| g_s340_371 e69)) (and (|>=i| g_s341_372 e0) (|<=i| g_s341_372 e69)) (mem g_s342_373 g_s0_1) (mem g_s343_374 g_s0_1) (and (|>=i| g_s344_375 e0) (|<=i| g_s344_375 e69)) (and (|>=i| g_s345_376 e0) (|<=i| g_s345_376 e69)) (mem g_s346_377 g_s0_1) (mem g_s347_378 g_s0_1) (and (|>=i| g_s348_379 e0) (|<=i| g_s348_379 e69)) (and (|>=i| g_s349_380 e0) (|<=i| g_s349_380 e69))))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 g_s131_158)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem e0 g_s234_265)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem e0 g_s236_267)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 e124))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 e65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 e67))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 e69))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 e71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem (set_prod g_s234_265 (SET e0)) g_s235_266)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (mem (set_prod g_s153_185 (SET g_s116_143)) g_s192_225)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (mem (set_prod (interval e0 e124) (SET g_s124_151)) (|-->| (interval e0 e124) g_s10_11))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s247_278 (|+->| (dom g_s247_278) (ran g_s247_278)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s247_278))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s255_286 (|+->| (dom g_s255_286) (ran g_s255_286)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s255_286))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s256_287 (|+->| (dom g_s256_287) (ran g_s256_287)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s256_287))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s248_279 (|+->| (dom g_s248_279) (ran g_s248_279)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s248_279))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s249_280 (|+->| (dom g_s249_280) (ran g_s249_280)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s249_280))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 6
(push 1)
(assert (not (mem g_s250_281 (|+->| (dom g_s250_281) (ran g_s250_281)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s250_281))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 7
(push 1)
(assert (not (mem g_s251_282 (|+->| (dom g_s251_282) (ran g_s251_282)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s251_282))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 8
(push 1)
(assert (not (mem g_s252_283 (|+->| (dom g_s252_283) (ran g_s252_283)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s252_283))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 9
(push 1)
(assert (not (mem g_s253_284 (|+->| (dom g_s253_284) (ran g_s253_284)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s253_284))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s353_381 e0) (|<=i| g_s353_381 e69)))
(assert (and (|>=i| g_s354_382 e0) (|<=i| g_s354_382 e69)))
(assert (mem g_s355_383 BOOL))
; PO 1 in group 10
(push 1)
(assert (not (mem g_s254_285 (|+->| (dom g_s254_285) (ran g_s254_285)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (mem (mapplet g_s353_381 g_s354_382) (dom g_s254_285))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)