(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e16 () U)
(declare-fun e25 () U)
(declare-fun e69 () U)
(declare-fun e66 () U)
(declare-fun e67 () U)
(declare-fun e70 () U)
(declare-fun e74 () U)
(declare-fun e68 () U)
(declare-fun e65 () U)
(declare-fun e8 () U)
(declare-fun e63 () U)
(declare-fun e32 () U)
(declare-fun e64 () U)
(declare-fun e71 () U)
(declare-fun e72 () U)
(declare-fun e73 () U)
(declare-fun e10 () U)
(declare-fun e12 () U)
(declare-fun e14 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_15 () U)
(declare-fun g_s11_17 () U)
(declare-fun g_s12_18 () U)
(declare-fun g_s13_19 () U)
(declare-fun g_s14_20 () U)
(declare-fun g_s15_21 () U)
(declare-fun g_s16_22 () U)
(declare-fun g_s17_23 () U)
(declare-fun g_s18_24 () U)
(declare-fun g_s19_26 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_27 () U)
(declare-fun g_s21_28 () U)
(declare-fun g_s22_29 () U)
(declare-fun g_s23_30 () U)
(declare-fun g_s24_31 () U)
(declare-fun g_s25_33 () U)
(declare-fun g_s26_34 () U)
(declare-fun g_s29_36 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_38 () U)
(declare-fun g_s31_40 () U)
(declare-fun g_s32_42 () U)
(declare-fun g_s33_43 () U)
(declare-fun g_s34_44 () U)
(declare-fun g_s35_45 () U)
(declare-fun g_s36_46 () U)
(declare-fun g_s37_47 () U)
(declare-fun g_s38_48 () U)
(declare-fun g_s39_49 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_50 () U)
(declare-fun g_s41_51 () U)
(declare-fun g_s42_52 () U)
(declare-fun g_s43_53 () U)
(declare-fun g_s44_54 () U)
(declare-fun g_s45_55 () U)
(declare-fun g_s46_56 () U)
(declare-fun g_s47_57 () U)
(declare-fun g_s48_58 () U)
(declare-fun g_s49_59 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_60 () U)
(declare-fun g_s51_61 () U)
(declare-fun g_s52_62 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s8_11 () U)
(declare-fun g_s9_13 () U)
(declare-fun e41 () U)
(declare-fun e37 () U)
(declare-fun e35 () U)
(declare-fun e39 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (= g_s1_2 (SET (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 g_s2_3)))))) (= g_s7_9 (interval e0 e8)) (= g_s8_11 (interval e0 e10)) (= g_s9_13 (interval e0 e12)) (= g_s10_15 (interval e0 e14)) (= g_s11_17 (interval e16 e8)) (= g_s12_18 (interval e16 e10)) (= g_s13_19 (interval e16 e12)) (= g_s14_20 (interval e16 e14)) (= g_s15_21 g_s9_13) (subset g_s16_22 g_s0_1) (mem g_s17_23 g_s0_1) (= g_s16_22 (set_diff g_s0_1 (SET g_s17_23))) (= g_s18_24 g_s9_13) (= g_s19_26 (interval e0 e25)) (= g_s20_27 (interval e0 e25)) (= g_s21_28 (|-->| g_s19_26 g_s8_11)) (= g_s22_29 (|-->| g_s20_27 g_s8_11)) (= g_s23_30 g_s7_9) (= g_s24_31 g_s8_11) (= g_s25_33 (interval e0 e32)) (mem g_s26_34 (|-->| (set_prod g_s10_15 g_s10_15) g_s10_15)) (= g_s26_34 e35) (mem g_s29_36 (|-->| (set_prod g_s10_15 g_s10_15) g_s10_15)) (= g_s29_36 e37) (mem g_s30_38 (|-->| (set_prod g_s10_15 g_s10_15) g_s10_15)) (= g_s30_38 e39) (mem g_s31_40 (|-->| (set_prod g_s10_15 g_s10_15) g_s10_15)) (= g_s31_40 e41)))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (mem g_s32_42 g_s10_15) (mem g_s33_43 g_s10_15) (mem g_s34_44 g_s10_15) (mem g_s35_45 g_s8_11) (mem g_s36_46 g_s8_11) (mem g_s37_47 g_s7_9) (mem g_s38_48 g_s7_9) (mem g_s39_49 g_s7_9) (mem g_s40_50 g_s7_9) (mem g_s41_51 g_s7_9) (mem g_s42_52 g_s8_11) (mem g_s43_53 g_s8_11) (mem g_s44_54 g_s8_11) (mem g_s45_55 g_s8_11) (mem g_s46_56 g_s10_15) (mem g_s47_57 g_s10_15) (mem g_s48_58 g_s10_15) (mem g_s49_59 g_s8_11) (mem g_s50_60 g_s8_11) (mem g_s51_61 g_s8_11) (mem g_s52_62 g_s8_11) (= g_s32_42 e63) (= g_s34_44 e64) (= g_s33_43 e65) (= g_s35_45 e0) (= g_s36_46 e0) (= g_s37_47 e8) (= g_s48_58 e66) (= g_s38_48 e67) (= g_s39_49 e68) (= g_s40_50 e69) (= g_s43_53 e32) (= g_s41_51 e69) (= g_s42_52 e70) (= g_s44_54 e10) (= g_s45_55 e71) (= g_s50_60 e72) (= g_s51_61 e10) (= g_s46_56 e73) (= g_s47_57 e73) (mem g_s49_59 g_s8_11) (= g_s49_59 e32) (= g_s52_62 e74)))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s32_42 e63) (= g_s34_44 e64) (= g_s33_43 e65) (= g_s35_45 e0) (= g_s38_48 e67) (= g_s39_49 e68) (= g_s40_50 e69) (= g_s41_51 e69) (= g_s42_52 e70) (= g_s43_53 e32) (= g_s44_54 e10) (= g_s45_55 e71) (= g_s37_47 e8) (= g_s46_56 e73) (= g_s47_57 e73) (= g_s48_58 e66) (= g_s36_46 e0) (= g_s49_59 e32) (= g_s52_62 e74) (= g_s50_60 e72) (= g_s51_61 e10)))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (mem e0 g_s8_11)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem e69 g_s7_9)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem e66 g_s10_15)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem e67 g_s7_9)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem e70 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (mem e74 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem e68 g_s7_9)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (mem e65 g_s10_15)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem e8 g_s7_9)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (mem e63 g_s10_15)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (mem e32 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (mem e64 g_s10_15)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (mem e71 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (mem e72 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (mem e73 g_s10_15)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (mem e10 g_s8_11)))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)