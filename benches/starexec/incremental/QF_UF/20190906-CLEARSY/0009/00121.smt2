(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e10 () U)
(declare-fun e12 () U)
(declare-fun e14 () U)
(declare-fun e16 () U)
(declare-fun e18 () U)
(declare-fun e20 () U)
(declare-fun e22 () U)
(declare-fun e24 () U)
(declare-fun e26 () U)
(declare-fun e28 () U)
(declare-fun e30 () U)
(declare-fun e32 () U)
(declare-fun e34 () U)
(declare-fun e36 () U)
(declare-fun e38 () U)
(declare-fun e40 () U)
(declare-fun e42 () U)
(declare-fun e44 () U)
(declare-fun e46 () U)
(declare-fun e48 () U)
(declare-fun e50 () U)
(declare-fun e52 () U)
(declare-fun e54 () U)
(declare-fun e56 () U)
(declare-fun e58 () U)
(declare-fun e60 () U)
(declare-fun e62 () U)
(declare-fun e64 () U)
(declare-fun e66 () U)
(declare-fun e68 () U)
(declare-fun e70 () U)
(declare-fun e72 () U)
(declare-fun e74 () U)
(declare-fun e76 () U)
(declare-fun e78 () U)
(declare-fun e80 () U)
(declare-fun e82 () U)
(declare-fun e84 () U)
(declare-fun e86 () U)
(declare-fun e88 () U)
(declare-fun e90 () U)
(declare-fun e92 () U)
(declare-fun e94 () U)
(declare-fun e96 () U)
(declare-fun e98 () U)
(declare-fun e100 () U)
(declare-fun e102 () U)
(declare-fun e104 () U)
(declare-fun e106 () U)
(declare-fun e108 () U)
(declare-fun e110 () U)
(declare-fun e112 () U)
(declare-fun e114 () U)
(declare-fun e116 () U)
(declare-fun e118 () U)
(declare-fun e120 () U)
(declare-fun e122 () U)
(declare-fun e124 () U)
(declare-fun e126 () U)
(declare-fun g_s0_2 () U)
(declare-fun g_s1_1 () U)
(declare-fun g_s10_13 () U)
(declare-fun g_s100$1_160 () U)
(declare-fun g_s101_159 () U)
(declare-fun g_s11_15 () U)
(declare-fun g_s12_17 () U)
(declare-fun g_s13_19 () U)
(declare-fun g_s14_21 () U)
(declare-fun g_s15_23 () U)
(declare-fun g_s16_25 () U)
(declare-fun g_s17_27 () U)
(declare-fun g_s18_29 () U)
(declare-fun g_s19_31 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_33 () U)
(declare-fun g_s21_35 () U)
(declare-fun g_s22_37 () U)
(declare-fun g_s23_39 () U)
(declare-fun g_s24_41 () U)
(declare-fun g_s25_43 () U)
(declare-fun g_s26_45 () U)
(declare-fun g_s27_47 () U)
(declare-fun g_s28_49 () U)
(declare-fun g_s29_51 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_53 () U)
(declare-fun g_s31_55 () U)
(declare-fun g_s32_57 () U)
(declare-fun g_s33_59 () U)
(declare-fun g_s34_61 () U)
(declare-fun g_s35_63 () U)
(declare-fun g_s36_65 () U)
(declare-fun g_s37_67 () U)
(declare-fun g_s38_69 () U)
(declare-fun g_s39_71 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_73 () U)
(declare-fun g_s41_75 () U)
(declare-fun g_s42_77 () U)
(declare-fun g_s43_79 () U)
(declare-fun g_s44_81 () U)
(declare-fun g_s45_83 () U)
(declare-fun g_s46_85 () U)
(declare-fun g_s47_87 () U)
(declare-fun g_s48_89 () U)
(declare-fun g_s49_91 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_93 () U)
(declare-fun g_s51_95 () U)
(declare-fun g_s52_97 () U)
(declare-fun g_s53_99 () U)
(declare-fun g_s54_101 () U)
(declare-fun g_s55_103 () U)
(declare-fun g_s56_105 () U)
(declare-fun g_s57_107 () U)
(declare-fun g_s58_109 () U)
(declare-fun g_s59_111 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_113 () U)
(declare-fun g_s61_115 () U)
(declare-fun g_s62_117 () U)
(declare-fun g_s63_119 () U)
(declare-fun g_s64_121 () U)
(declare-fun g_s65_123 () U)
(declare-fun g_s66_125 () U)
(declare-fun g_s67_127 () U)
(declare-fun g_s68_128 () U)
(declare-fun g_s69_129 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_130 () U)
(declare-fun g_s71_131 () U)
(declare-fun g_s72_133 () U)
(declare-fun g_s73_132 () U)
(declare-fun g_s74_135 () U)
(declare-fun g_s75_134 () U)
(declare-fun g_s76_136 () U)
(declare-fun g_s77_137 () U)
(declare-fun g_s78_140 () U)
(declare-fun g_s79_139 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_138 () U)
(declare-fun g_s81_142 () U)
(declare-fun g_s82_141 () U)
(declare-fun g_s83_144 () U)
(declare-fun g_s84_143 () U)
(declare-fun g_s85_145 () U)
(declare-fun g_s86_146 () U)
(declare-fun g_s87_147 () U)
(declare-fun g_s88_148 () U)
(declare-fun g_s89_149 () U)
(declare-fun g_s9_11 () U)
(declare-fun g_s90_150 () U)
(declare-fun g_s91_152 () U)
(declare-fun g_s92_151 () U)
(declare-fun g_s93_153 () U)
(declare-fun g_s93$1_155 () U)
(declare-fun g_s94_154 () U)
(declare-fun g_s94$1_156 () U)
(declare-fun g_s99_157 () U)
(declare-fun g_s99$1_158 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (mem g_s0_2 g_s1_1) (mem g_s2_3 g_s1_1) (mem g_s3_4 NAT) (mem g_s4_5 NAT) (mem g_s5_6 NAT)))
(define-fun |def_seext| () Bool (and (= g_s6_7 TRUE) (= g_s7_8 FALSE) (= g_s8_9 e0) (= g_s9_11 e10) (= g_s10_13 e12) (= g_s11_15 e14) (= g_s12_17 e16) (= g_s13_19 e18) (= g_s14_21 e20) (= g_s15_23 e22) (= g_s16_25 e24) (= g_s17_27 e26) (= g_s18_29 e28) (= g_s19_31 e30) (= g_s20_33 e32) (= g_s21_35 e34) (= g_s22_37 e36) (= g_s23_39 e38) (= g_s24_41 e40) (= g_s25_43 e42) (= g_s26_45 e44) (= g_s27_47 e46) (= g_s28_49 e48) (= g_s29_51 e50) (= g_s30_53 e52) (= g_s31_55 e54) (= g_s32_57 e56) (= g_s33_59 e58) (= g_s34_61 e60) (= g_s35_63 e62) (= g_s36_65 e64) (= g_s37_67 e66) (= g_s38_69 e68) (= g_s39_71 e70) (= g_s40_73 e72) (= g_s41_75 e74) (= g_s42_77 e76) (= g_s43_79 e78) (= g_s44_81 e80) (= g_s45_83 e82) (= g_s46_85 e84) (= g_s47_87 e86) (= g_s48_89 e88) (= g_s49_91 e90) (= g_s50_93 e92) (= g_s51_95 e94) (= g_s52_97 e96) (= g_s53_99 e98) (= g_s54_101 e100) (= g_s55_103 e102) (= g_s56_105 e104) (= g_s57_107 e106) (= g_s58_109 e108) (= g_s59_111 e110) (= g_s60_113 e112) (= g_s61_115 e114) (= g_s62_117 e116) (= g_s63_119 e118) (= g_s64_121 e120) (= g_s65_123 e122) (= g_s66_125 e124) (= g_s67_127 e126) (mem g_s68_128 BOOL) (mem g_s69_129 BOOL) (mem g_s70_130 BOOL) (mem g_s71_131 BOOL) (mem g_s72_133 g_s73_132) (mem g_s74_135 g_s75_134) (mem g_s76_136 g_s73_132) (mem g_s77_137 g_s73_132) (mem g_s78_140 (|+->| g_s79_139 g_s80_138)) (mem g_s81_142 g_s82_141) (mem g_s83_144 g_s84_143) (mem g_s85_145 BOOL) (mem g_s86_146 BOOL) (mem g_s87_147 BOOL) (subset g_s88_148 g_s1_1) (mem g_s89_149 BOOL) (subset g_s90_150 g_s1_1) (subset g_s91_152 g_s92_151)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s93_153 BOOL) (mem g_s94_154 BOOL) (=> (= g_s93_153 TRUE) (= g_s94_154 FALSE))))
(define-fun |def_inv| () Bool (and (= g_s93_153 g_s93$1_155) (= g_s94_154 g_s94$1_156) (mem g_s93$1_155 BOOL) (mem g_s94$1_156 BOOL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s94$1_156 FALSE))
(define-fun lh_2 () Bool (= g_s89_149 TRUE))
(define-fun lh_3 () Bool (mem g_s0_2 g_s88_148))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (and (= g_s68_128 TRUE) (= g_s69_129 TRUE) (or (= g_s70_130 TRUE) (= g_s85_145 TRUE)) (or (= g_s71_131 TRUE) (= g_s86_146 TRUE)))) (bool (and (= (bool (and (= (bool (and (= g_s68_128 TRUE) (= g_s69_129 TRUE))) TRUE) (= (bool (or (= g_s70_130 TRUE) (= g_s85_145 TRUE))) TRUE))) TRUE) (= (bool (or (= g_s71_131 TRUE) (= g_s86_146 TRUE))) TRUE)))))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (not (and (= g_s94$1_156 FALSE) (= g_s89_149 TRUE) (mem g_s0_2 g_s88_148))))
(define-fun lh_2 () Bool (not (and (= g_s89_149 TRUE) (mem g_s0_2 g_s88_148))))
(define-fun lh_3 () Bool (= g_s93$1_155 TRUE))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= TRUE g_s6_7))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= FALSE g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s99$1_158 g_s99_157))
(define-fun lh_1 () Bool (not (and (= g_s94$1_156 FALSE) (= g_s89_149 TRUE) (mem g_s0_2 g_s88_148))))
(define-fun lh_2 () Bool (mem g_s100$1_160 g_s101_159))
(define-fun lh_3 () Bool (= g_s100$1_160 g_s0_2))
(define-fun lh_4 () Bool (mem g_s100$1_160 g_s1_1))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s100$1_160 g_s1_1))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (and (= (bool (= (bool (and (= g_s89_149 TRUE) (= (bool (mem g_s100$1_160 g_s88_148)) TRUE))) FALSE)) TRUE) (= g_s93$1_155 TRUE))) (bool (and (not (and (= g_s89_149 TRUE) (mem g_s0_2 g_s88_148))) (= g_s93$1_155 TRUE)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s99$1_158 g_s99_157))
(define-fun lh_1 () Bool (mem g_s100$1_160 g_s101_159))
(define-fun lh_2 () Bool (= g_s100$1_160 g_s0_2))
(define-fun lh_3 () Bool (mem g_s100$1_160 g_s1_1))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s100$1_160 g_s1_1))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (and (= (bool (and (= g_s89_149 TRUE) (= (bool (mem g_s100$1_160 g_s88_148)) TRUE))) TRUE) (= (bool (= g_s94$1_156 FALSE)) TRUE))) (bool (and (= g_s94$1_156 FALSE) (= g_s89_149 TRUE) (mem g_s0_2 g_s88_148)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)