(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e89 () U)
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_93 () U)
(declare-fun g_s100$1_94 () U)
(declare-fun g_s102_95 () U)
(declare-fun g_s102$1_96 () U)
(declare-fun g_s104_97 () U)
(declare-fun g_s104$1_98 () U)
(declare-fun g_s105_99 () U)
(declare-fun g_s105$1_100 () U)
(declare-fun g_s107_101 () U)
(declare-fun g_s107$1_102 () U)
(declare-fun g_s108_103 () U)
(declare-fun g_s108$1_104 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s75_75 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_79 () U)
(declare-fun g_s78_78 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84$1_85 () U)
(declare-fun g_s85$1_86 () U)
(declare-fun g_s86$1_87 () U)
(declare-fun g_s87$1_88 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s91_90 () U)
(declare-fun g_s93_91 () U)
(declare-fun g_s96_92 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (mem g_s1_2 NAT1) (mem g_s2_3 NAT1) (mem g_s3_4 NAT1) (mem g_s4_5 NAT1) (mem g_s5_6 NAT1) (mem g_s6_7 NAT1) (mem g_s7_8 NAT1) (mem g_s8_9 NAT1) (mem g_s9_10 NAT1) (mem g_s10_11 NAT1) (mem g_s11_12 NAT1) (mem g_s12_13 NAT1) (mem g_s13_14 NAT1) (mem g_s14_15 NAT1) (mem g_s15_16 NAT1) (mem g_s16_17 NAT1) (mem g_s17_18 NAT1) (mem g_s18_19 NAT1) (mem g_s19_20 NAT1) (mem g_s20_21 NAT1) (mem g_s21_22 NAT1) (mem g_s22_23 NAT1) (mem g_s23_24 NAT1) (mem g_s24_25 NAT1) (mem g_s25_26 NAT1) (mem g_s26_27 NAT1) (mem g_s27_28 NAT1) (mem g_s28_29 NAT1) (mem g_s29_30 NAT1) (mem g_s30_31 NAT1) (mem g_s31_32 NAT1) (mem g_s32_33 NAT1) (mem g_s33_34 NAT) (mem g_s34_35 NAT) (mem g_s35_36 NAT) (mem g_s36_37 NAT) (mem g_s37_38 NAT) (mem g_s38_39 NAT) (mem g_s39_40 NAT) (mem g_s40_41 NAT) (mem g_s41_42 NAT) (mem g_s42_43 NAT) (mem g_s43_44 NAT) (mem g_s44_45 NAT) (mem g_s45_46 NAT) (mem g_s46_47 NAT) (mem g_s47_48 NAT) (mem g_s48_49 NAT) (mem g_s49_50 NAT) (mem g_s50_51 NAT) (mem g_s51_52 NAT) (mem g_s52_53 NAT) (mem g_s53_54 NAT) (mem g_s54_55 NAT) (mem g_s55_56 NAT) (mem g_s56_57 NAT) (mem g_s57_58 NAT) (mem g_s58_59 NAT) (mem g_s59_60 NAT) (mem g_s60_61 NAT) (mem g_s61_62 NAT) (mem g_s62_63 NAT) (mem g_s63_64 INT) (mem g_s64_65 NAT) (|<=i| g_s15_16 g_s14_15) (|<=i| g_s18_19 g_s17_18) (|<=i| g_s21_22 g_s20_21) (|<=i| g_s24_25 g_s23_24) (|<=i| g_s29_30 g_s65_66) (|<=i| g_s30_31 g_s66_67) (|<=i| g_s31_32 g_s67_68) (|<=i| g_s25_26 g_s68_69) (|<=i| g_s26_27 g_s25_26) (= g_s33_34 e0) (= g_s34_35 e0) (= g_s35_36 e0) (= g_s36_37 e0) (= g_s37_38 e0) (= g_s38_39 e0) (= g_s39_40 e0) (= g_s40_41 e0) (= g_s41_42 e0) (= g_s42_43 e0) (= g_s43_44 e0) (= g_s44_45 e0) (= g_s45_46 e0) (= g_s46_47 e0) (= g_s47_48 e0) (= g_s48_49 e0) (= g_s49_50 e0) (= g_s50_51 e0) (= g_s51_52 e0) (= g_s52_53 e0) (= g_s53_54 e0) (= g_s54_55 e0) (= g_s55_56 e0) (= g_s56_57 e0) (= g_s57_58 e0) (= g_s58_59 e0) (= g_s59_60 e0) (= g_s60_61 e0) (= g_s61_62 e0) (= g_s62_63 e0) (= g_s63_64 g_s69_70) (= g_s64_65 g_s70_71) (subset g_s71_72 g_s0_1) (mem g_s72_73 g_s0_1) (not (mem g_s72_73 g_s71_72)) (mem g_s73_74 (|+->| NAT g_s0_1)) (mem g_s73_74 (perm g_s71_72)) (mem g_s74_76 (|>->>| g_s71_72 g_s75_75)) (mem g_s76_77 (|>+>| g_s75_75 g_s71_72)) (mem g_s77_79 (|>->>| g_s71_72 g_s78_78)) (mem g_s79_80 (|>+>| g_s78_78 g_s71_72)) (= g_s76_77 (inverse g_s74_76)) (= g_s79_80 (inverse g_s77_79))))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s80_81 (|-->| g_s71_72 NATURAL)) (mem g_s81_82 (|-->| g_s71_72 NATURAL)) (mem g_s82_83 (|+->| (interval e0 g_s26_27) g_s71_72)) (mem g_s83_84 (|+->| (interval e0 g_s26_27) NATURAL))))
(define-fun |def_inv| () Bool (and (mem g_s84$1_85 (|-->| g_s0_1 NATURAL)) (mem g_s85$1_86 (|-->| g_s0_1 NATURAL)) (mem g_s86$1_87 (|-->| (interval e0 g_s26_27) g_s0_1)) (mem g_s87$1_88 (|-->| (interval e0 g_s26_27) INTEGER)) (= g_s80_81 (range_restriction (domain_restriction g_s71_72 g_s84$1_85) NATURAL)) (= g_s81_82 (range_restriction (domain_restriction g_s71_72 g_s85$1_86) NATURAL)) (= g_s82_83 (range_restriction (domain_restriction (interval e0 g_s26_27) g_s86$1_87) g_s71_72)) (= g_s83_84 (range_restriction (domain_restriction (interval e0 g_s26_27) g_s87$1_88) NATURAL))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem (set_prod g_s0_1 (SET e0)) (|-->| g_s0_1 NATURAL))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (set_prod (interval e0 g_s26_27) (SET e89)) (|-->| (interval e0 g_s26_27) INTEGER))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem (set_prod (interval e0 g_s26_27) (SET g_s72_73)) (|-->| (interval e0 g_s26_27) g_s0_1))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (= empty (range_restriction (domain_restriction (interval e0 g_s26_27) (set_prod (interval e0 g_s26_27) (SET e89))) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (= empty (range_restriction (domain_restriction (interval e0 g_s26_27) (set_prod (interval e0 g_s26_27) (SET g_s72_73))) g_s71_72))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (= (set_prod g_s71_72 (SET e0)) (range_restriction (domain_restriction g_s71_72 (set_prod g_s0_1 (SET e0))) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_1 (mem (|<+| g_s86$1_87 (SET (mapplet g_s91_90 g_s72_73))) (|-->| (interval e0 g_s26_27) g_s0_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (= (domain_subtraction (SET g_s91_90) g_s82_83) (range_restriction (domain_restriction (interval e0 g_s26_27) (|<+| g_s86$1_87 (SET (mapplet g_s91_90 g_s72_73)))) g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
(define-fun lh_2 () Bool (mem g_s93_91 g_s0_1))
(define-fun lh_3 () Bool (mem g_s93_91 g_s71_72))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (|<+| g_s86$1_87 (SET (mapplet g_s91_90 g_s93_91))) (|-->| (interval e0 g_s26_27) g_s0_1)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (|<+| g_s82_83 (SET (mapplet g_s91_90 g_s93_91))) (range_restriction (domain_restriction (interval e0 g_s26_27) (|<+| g_s86$1_87 (SET (mapplet g_s91_90 g_s93_91)))) g_s71_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
; PO 1 in group 3
(push 1)
(assert (not (=> lh_1 (mem (|<+| g_s87$1_88 (SET (mapplet g_s91_90 e89))) (|-->| (interval e0 g_s26_27) INTEGER)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> lh_1 (= (domain_subtraction (SET g_s91_90) g_s83_84) (range_restriction (domain_restriction (interval e0 g_s26_27) (|<+| g_s87$1_88 (SET (mapplet g_s91_90 e89)))) NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
(define-fun lh_2 () Bool (mem g_s96_92 NATURAL))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (|<+| g_s87$1_88 (SET (mapplet g_s91_90 g_s96_92))) (|-->| (interval e0 g_s26_27) INTEGER)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (|<+| g_s83_84 (SET (mapplet g_s91_90 g_s96_92))) (range_restriction (domain_restriction (interval e0 g_s26_27) (|<+| g_s87$1_88 (SET (mapplet g_s91_90 g_s96_92)))) NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s93_91 g_s0_1))
(define-fun lh_2 () Bool (mem g_s93_91 g_s71_72))
(define-fun lh_3 () Bool (mem g_s91_90 NATURAL))
; PO 1 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (|<+| g_s84$1_85 (SET (mapplet g_s93_91 g_s91_90))) (|-->| g_s0_1 NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (|<+| g_s80_81 (SET (mapplet g_s93_91 g_s91_90))) (range_restriction (domain_restriction g_s71_72 (|<+| g_s84$1_85 (SET (mapplet g_s93_91 g_s91_90)))) NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s93_91 g_s0_1))
(define-fun lh_2 () Bool (mem g_s93_91 g_s71_72))
(define-fun lh_3 () Bool (mem g_s96_92 NATURAL))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (|<+| g_s85$1_86 (SET (mapplet g_s93_91 g_s96_92))) (|-->| g_s0_1 NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (|<+| g_s81_82 (SET (mapplet g_s93_91 g_s96_92))) (range_restriction (domain_restriction g_s71_72 (|<+| g_s85$1_86 (SET (mapplet g_s93_91 g_s96_92)))) NATURAL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s100$1_94 g_s100_93))
(define-fun lh_1 () Bool (mem g_s93_91 g_s0_1))
(define-fun lh_2 () Bool (mem g_s93_91 g_s71_72))
; PO 1 in group 7
(assert (not (=> (and lh_1 lh_2) (= (apply g_s84$1_85 g_s93_91) (apply g_s80_81 g_s93_91)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s102$1_96 g_s102_95))
(define-fun lh_1 () Bool (mem g_s93_91 g_s0_1))
(define-fun lh_2 () Bool (mem g_s93_91 g_s71_72))
; PO 1 in group 8
(assert (not (=> (and lh_1 lh_2) (= (apply g_s85$1_86 g_s93_91) (apply g_s81_82 g_s93_91)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s104$1_98 g_s104_97))
(assert (= g_s105$1_100 g_s105_99))
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
(define-fun lh_2 () Bool (mem (apply g_s86$1_87 g_s91_90) g_s0_1))
(define-fun lh_3 () Bool (mem g_s91_90 (dom g_s82_83)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s86$1_87 g_s91_90) g_s71_72)) (bool (mem g_s91_90 (dom g_s82_83)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s86$1_87 g_s91_90) (apply g_s82_83 g_s91_90)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s107$1_102 g_s107_101))
(assert (= g_s108$1_104 g_s108_103))
(define-fun lh_1 () Bool (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
(define-fun lh_2 () Bool (mem g_s91_90 (dom g_s83_84)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (bool (|>=i| (apply g_s87$1_88 g_s91_90) e0)) (bool (mem g_s91_90 (dom g_s83_84)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply g_s87$1_88 g_s91_90) (apply g_s83_84 g_s91_90)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s93_91 g_s0_1))
(assert (mem g_s93_91 g_s71_72))
; PO 1 in group 11
(push 1)
(assert (not (mem g_s84$1_85 (|+->| (dom g_s84$1_85) (ran g_s84$1_85)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (mem g_s93_91 (dom g_s84$1_85))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s93_91 g_s0_1))
(assert (mem g_s93_91 g_s71_72))
; PO 1 in group 12
(push 1)
(assert (not (mem g_s85$1_86 (|+->| (dom g_s85$1_86) (ran g_s85$1_86)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (mem g_s93_91 (dom g_s85$1_86))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
; PO 1 in group 13
(push 1)
(assert (not (mem g_s86$1_87 (|+->| (dom g_s86$1_87) (ran g_s86$1_87)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 13
(push 1)
(assert (not (mem g_s91_90 (dom g_s86$1_87))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (and (|>=i| g_s91_90 e0) (|<=i| g_s91_90 g_s26_27)))
; PO 1 in group 14
(push 1)
(assert (not (mem g_s87$1_88 (|+->| (dom g_s87$1_88) (ran g_s87$1_88)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (mem g_s91_90 (dom g_s87$1_88))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)