(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16$1_17 () U)
(declare-fun g_s16$2_58 () U)
(declare-fun g_s17$1_18 () U)
(declare-fun g_s17$2_57 () U)
(declare-fun g_s18$1_20 () U)
(declare-fun g_s19_19 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21$1_23 () U)
(declare-fun g_s22_22 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24$1_26 () U)
(declare-fun g_s25_25 () U)
(declare-fun g_s26$1_28 () U)
(declare-fun g_s27_27 () U)
(declare-fun g_s28$1_29 () U)
(declare-fun g_s28$2_67 () U)
(declare-fun g_s29$1_30 () U)
(declare-fun g_s29$2_68 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30$1_31 () U)
(declare-fun g_s30$2_69 () U)
(declare-fun g_s31$1_32 () U)
(declare-fun g_s31$2_70 () U)
(declare-fun g_s32$1_33 () U)
(declare-fun g_s32$2_71 () U)
(declare-fun g_s33$1_34 () U)
(declare-fun g_s33$2_72 () U)
(declare-fun g_s34$1_35 () U)
(declare-fun g_s34$2_73 () U)
(declare-fun g_s35$1_36 () U)
(declare-fun g_s35$2_74 () U)
(declare-fun g_s36$1_37 () U)
(declare-fun g_s36$2_75 () U)
(declare-fun g_s37$1_38 () U)
(declare-fun g_s37$2_76 () U)
(declare-fun g_s38$1_39 () U)
(declare-fun g_s38$2_77 () U)
(declare-fun g_s39$1_40 () U)
(declare-fun g_s39$2_78 () U)
(declare-fun g_s4_6 () U)
(declare-fun g_s40$1_41 () U)
(declare-fun g_s40$2_79 () U)
(declare-fun g_s41$1_42 () U)
(declare-fun g_s41$2_80 () U)
(declare-fun g_s42$1_43 () U)
(declare-fun g_s42$2_81 () U)
(declare-fun g_s43$1_44 () U)
(declare-fun g_s43$2_82 () U)
(declare-fun g_s44$1_46 () U)
(declare-fun g_s45$1_45 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47$1_48 () U)
(declare-fun g_s48$1_49 () U)
(declare-fun g_s49$1_50 () U)
(declare-fun g_s5_5 () U)
(declare-fun g_s50$1_51 () U)
(declare-fun g_s51$1_52 () U)
(declare-fun g_s52$1_53 () U)
(declare-fun g_s53$1_54 () U)
(declare-fun g_s54$1_55 () U)
(declare-fun g_s55$1_56 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58$1_60 () U)
(declare-fun g_s59$1_61 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60$1_62 () U)
(declare-fun g_s61$1_63 () U)
(declare-fun g_s62$1_64 () U)
(declare-fun g_s63$1_66 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65$1_84 () U)
(declare-fun g_s66_83 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s8_8 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (subset g_s1_2 g_s0_1) (mem g_s2_3 g_s0_1) (not (mem g_s2_3 g_s1_2)) (mem g_s3_4 (|+->| NAT g_s0_1)) (mem g_s3_4 (perm g_s1_2)) (mem g_s4_6 (|>->>| g_s1_2 g_s5_5)) (mem g_s6_7 (|>+>| g_s5_5 g_s1_2)) (mem g_s7_9 (|>->>| g_s1_2 g_s8_8)) (mem g_s9_10 (|>+>| g_s8_8 g_s1_2)) (= g_s6_7 (inverse g_s4_6)) (= g_s9_10 (inverse g_s7_9)) (= g_s10_11 NAT) (= g_s11_12 NAT1) (subset g_s11_12 g_s10_11) (mem g_s12_13 g_s10_11) (not (mem g_s12_13 g_s11_12)) (= g_s13_14 NAT) (= g_s14_15 NAT1) (subset g_s14_15 g_s13_14) (mem g_s15_16 g_s13_14) (not (mem g_s15_16 g_s14_15))))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s16$1_17 g_s0_1) (mem g_s17$1_18 BOOL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (mem g_s18$1_20 g_s19_19) (mem g_s18$1_20 g_s20_21) (mem g_s21$1_23 g_s22_22) (mem g_s21$1_23 g_s23_24) (mem g_s24$1_26 g_s25_25) (mem g_s24$1_26 NAT) (mem g_s26$1_28 g_s27_27) (mem g_s26$1_28 NAT) (mem g_s28$1_29 g_s19_19) (mem g_s29$1_30 g_s22_22) (mem g_s30$1_31 (|+->| g_s8_8 g_s20_21)) (mem g_s31$1_32 (|+->| g_s8_8 g_s23_24)) (mem g_s32$1_33 (|+->| g_s8_8 g_s20_21)) (mem g_s33$1_34 (|+->| g_s8_8 g_s23_24)) (subset g_s34$1_35 g_s8_8) (subset g_s35$1_36 g_s8_8) (= (dom g_s30$1_31) (dom g_s31$1_32)) (= (dom g_s32$1_33) (dom g_s33$1_34)) (= (dom g_s30$1_31) g_s35$1_36) (= (dom g_s31$1_32) g_s35$1_36) (mem g_s36$1_37 (|+->| g_s8_8 g_s20_21)) (mem g_s37$1_38 (|+->| g_s8_8 g_s23_24)) (mem g_s38$1_39 (|+->| g_s8_8 g_s20_21)) (mem g_s39$1_40 (|+->| g_s8_8 g_s23_24)) (mem g_s40$1_41 (|+->| g_s8_8 g_s25_25)) (mem g_s41$1_42 (|+->| g_s8_8 g_s27_27)) (mem g_s42$1_43 (|+->| g_s8_8 g_s20_21)) (mem g_s43$1_44 (|+->| g_s8_8 g_s23_24)) (= (dom g_s36$1_37) (dom g_s37$1_38)) (= (dom g_s38$1_39) (dom g_s39$1_40)) (= (dom g_s40$1_41) (dom g_s41$1_42)) (= (dom g_s42$1_43) (dom g_s43$1_44)) (= (dom g_s36$1_37) (dom g_s38$1_39)) (= (dom g_s37$1_38) (dom g_s39$1_40)) (= (dom g_s42$1_43) (dom g_s40$1_41)) (= (dom g_s43$1_44) (dom g_s41$1_42)) (= (dom g_s44$1_46) g_s45$1_45) (mem g_s44$1_46 (|+->| g_s46_47 g_s20_21)) (mem g_s47$1_48 (|+->| g_s46_47 g_s20_21)) (subset g_s48$1_49 g_s46_47) (subset g_s45$1_45 g_s46_47) (mem g_s49$1_50 (|+->| g_s46_47 g_s20_21)) (mem g_s50$1_51 (|+->| g_s46_47 g_s20_21)) (mem g_s51$1_52 (|+->| g_s46_47 g_s25_25)) (mem g_s52$1_53 (|+->| g_s46_47 g_s20_21)) (subset g_s53$1_54 g_s46_47) (= (dom g_s49$1_50) (dom g_s50$1_51)) (= (dom g_s52$1_53) (dom g_s51$1_52)) (subset g_s54$1_55 g_s1_2) (subset g_s55$1_56 g_s1_2) (= (binary_inter g_s55$1_56 g_s54$1_55) empty)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s17$2_57 BOOL))
(define-fun lh_2 () Bool (mem g_s16$2_58 g_s0_1))
(define-fun lh_3 () Bool (subset g_s1_2 g_s1_2))
(define-fun lh_4 () Bool (subset empty g_s1_2))
(define-fun lh_5 () Bool (= (binary_union empty g_s1_2) g_s1_2))
(define-fun lh_6 () Bool (= (binary_inter empty g_s1_2) empty))
(define-fun lh_7 () Bool (= g_s17$2_57 (bool (not (= g_s1_2 empty)))))
(define-fun lh_8 () Bool (= g_s17$2_57 TRUE))
(define-fun lh_9 () Bool (not (= g_s1_2 empty)))
(define-fun lh_10 () Bool (mem g_s57_59 g_s0_1))
(define-fun lh_11 () Bool (mem g_s57_59 g_s1_2))
(define-fun lh_12 () Bool (mem g_s58$1_60 g_s19_19))
(define-fun lh_13 () Bool (mem g_s59$1_61 g_s22_22))
(define-fun lh_14 () Bool (mem g_s60$1_62 g_s19_19))
(define-fun lh_15 () Bool (mem g_s61$1_63 g_s22_22))
(define-fun lh_16 () Bool (mem g_s62$1_64 BOOL))
(define-fun lh_17 () Bool (mem g_s63$1_66 g_s64_65))
(define-fun lh_18 () Bool (mem g_s63$1_66 g_s8_8))
(define-fun lh_19 () Bool (= g_s63$1_66 (apply g_s7_9 g_s57_59)))
(define-fun lh_20 () Bool (mem g_s28$2_67 g_s19_19))
(define-fun lh_21 () Bool (mem g_s29$2_68 g_s22_22))
(define-fun lh_22 () Bool (mem g_s30$2_69 (|+->| g_s8_8 g_s20_21)))
(define-fun lh_23 () Bool (mem g_s31$2_70 (|+->| g_s8_8 g_s23_24)))
(define-fun lh_24 () Bool (mem g_s32$2_71 (|+->| g_s8_8 g_s20_21)))
(define-fun lh_25 () Bool (mem g_s33$2_72 (|+->| g_s8_8 g_s23_24)))
(define-fun lh_26 () Bool (subset g_s34$2_73 g_s8_8))
(define-fun lh_27 () Bool (subset g_s35$2_74 g_s8_8))
(define-fun lh_28 () Bool (= (dom g_s30$2_69) (dom g_s31$2_70)))
(define-fun lh_29 () Bool (= (dom g_s32$2_71) (dom g_s33$2_72)))
(define-fun lh_30 () Bool (= (dom g_s30$2_69) g_s35$2_74))
(define-fun lh_31 () Bool (= (dom g_s31$2_70) g_s35$2_74))
(define-fun lh_32 () Bool (mem g_s36$2_75 (|+->| g_s8_8 g_s20_21)))
(define-fun lh_33 () Bool (mem g_s37$2_76 (|+->| g_s8_8 g_s23_24)))
(define-fun lh_34 () Bool (mem g_s38$2_77 (|+->| g_s8_8 g_s20_21)))
(define-fun lh_35 () Bool (mem g_s39$2_78 (|+->| g_s8_8 g_s23_24)))
(define-fun lh_36 () Bool (mem g_s40$2_79 (|+->| g_s8_8 g_s25_25)))
(define-fun lh_37 () Bool (mem g_s41$2_80 (|+->| g_s8_8 g_s27_27)))
(define-fun lh_38 () Bool (mem g_s42$2_81 (|+->| g_s8_8 g_s20_21)))
(define-fun lh_39 () Bool (mem g_s43$2_82 (|+->| g_s8_8 g_s23_24)))
(define-fun lh_40 () Bool (= (dom g_s36$2_75) (dom g_s37$2_76)))
(define-fun lh_41 () Bool (= (dom g_s38$2_77) (dom g_s39$2_78)))
(define-fun lh_42 () Bool (= (dom g_s40$2_79) (dom g_s41$2_80)))
(define-fun lh_43 () Bool (= (dom g_s42$2_81) (dom g_s43$2_82)))
(define-fun lh_44 () Bool (= (dom g_s36$2_75) (dom g_s38$2_77)))
(define-fun lh_45 () Bool (= (dom g_s37$2_76) (dom g_s39$2_78)))
(define-fun lh_46 () Bool (= (dom g_s42$2_81) (dom g_s40$2_79)))
(define-fun lh_47 () Bool (= (dom g_s43$2_82) (dom g_s41$2_80)))
(define-fun lh_48 () Bool (mem g_s65$1_84 g_s66_83))
(define-fun lh_49 () Bool (mem g_s65$1_84 g_s5_5))
(define-fun lh_50 () Bool (= g_s65$1_84 (apply g_s4_6 g_s57_59)))
; PO 1 in group 0
(push 1)
(assert (not (subset empty g_s1_2)))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (subset g_s1_2 g_s1_2)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (= (binary_inter empty g_s1_2) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (= (binary_union empty g_s1_2) g_s1_2)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (|<=i| e0 (card g_s1_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (not (= g_s1_2 empty)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (subset (set_diff g_s1_2 (SET g_s57_59)) g_s1_2))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (subset (binary_union empty (SET g_s57_59)) g_s1_2))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (= (bool (not (= g_s1_2 (SET g_s57_59)))) (bool (not (= (set_diff g_s1_2 (SET g_s57_59)) empty)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (= (binary_inter (binary_union empty (SET g_s57_59)) (set_diff g_s1_2 (SET g_s57_59))) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (= (binary_union (binary_union empty (SET g_s57_59)) (set_diff g_s1_2 (SET g_s57_59))) g_s1_2))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_37 lh_38 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45 lh_46 lh_47 lh_48 lh_49 lh_50) (|<i| (card (set_diff g_s1_2 (SET g_s57_59))) (card g_s1_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s17$2_57 BOOL))
(define-fun lh_2 () Bool (mem g_s16$2_58 g_s0_1))
(define-fun lh_3 () Bool (subset g_s1_2 g_s1_2))
(define-fun lh_4 () Bool (subset empty g_s1_2))
(define-fun lh_5 () Bool (= (binary_union empty g_s1_2) g_s1_2))
(define-fun lh_6 () Bool (= (binary_inter empty g_s1_2) empty))
(define-fun lh_7 () Bool (= g_s17$2_57 (bool (not (= g_s1_2 empty)))))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7) (mem g_s1_2 (FIN g_s1_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)