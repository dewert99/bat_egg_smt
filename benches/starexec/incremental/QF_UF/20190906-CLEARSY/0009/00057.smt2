(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e90 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_109 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_112 () U)
(declare-fun g_s111_113 () U)
(declare-fun g_s112_114 () U)
(declare-fun g_s113_115 () U)
(declare-fun g_s114_116 () U)
(declare-fun g_s115_117 () U)
(declare-fun g_s116_118 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s118_120 () U)
(declare-fun g_s119_121 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_122 () U)
(declare-fun g_s121_123 () U)
(declare-fun g_s122_124 () U)
(declare-fun g_s123_125 () U)
(declare-fun g_s124_126 () U)
(declare-fun g_s124$1_135 () U)
(declare-fun g_s125_127 () U)
(declare-fun g_s125$1_136 () U)
(declare-fun g_s126_128 () U)
(declare-fun g_s126$1_137 () U)
(declare-fun g_s127_129 () U)
(declare-fun g_s127$1_138 () U)
(declare-fun g_s128_130 () U)
(declare-fun g_s128$1_139 () U)
(declare-fun g_s129_131 () U)
(declare-fun g_s129$1_140 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_132 () U)
(declare-fun g_s130$1_141 () U)
(declare-fun g_s131_133 () U)
(declare-fun g_s131$1_142 () U)
(declare-fun g_s132_134 () U)
(declare-fun g_s132$1_143 () U)
(declare-fun g_s134_144 () U)
(declare-fun g_s135$1_145 () U)
(declare-fun g_s136$1_146 () U)
(declare-fun g_s137$1_147 () U)
(declare-fun g_s138$1_148 () U)
(declare-fun g_s139$1_149 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140$1_150 () U)
(declare-fun g_s144_151 () U)
(declare-fun g_s146_152 () U)
(declare-fun g_s146$1_153 () U)
(declare-fun g_s147_154 () U)
(declare-fun g_s147$1_155 () U)
(declare-fun g_s147$2_157 () U)
(declare-fun g_s148_156 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_45 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_48 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s71_71 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s73_73 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_91 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_92 () U)
(declare-fun g_s91_93 () U)
(declare-fun g_s92_94 () U)
(declare-fun g_s93_95 () U)
(declare-fun g_s94_96 () U)
(declare-fun g_s95_98 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_100 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_102 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (= g_s3_4 INT) (= g_s4_5 NAT) (= g_s5_6 NAT1) (subset g_s5_6 g_s4_5) (subset g_s4_5 g_s3_4) (= g_s6_7 INT) (= g_s7_8 NAT) (subset g_s7_8 g_s6_7) (mem g_s8_9 g_s3_4) (mem g_s8_9 g_s4_5) (not (mem g_s8_9 g_s5_6)) (mem g_s9_10 g_s3_4) (not (mem g_s9_10 g_s4_5)) (mem g_s10_11 g_s6_7) (mem g_s10_11 g_s7_8) (mem g_s11_12 g_s6_7) (not (mem g_s11_12 g_s7_8)) (= g_s12_13 INT) (= g_s13_14 INT) (= g_s14_15 NATURAL) (= g_s15_16 NATURAL) (mem g_s16_17 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (set_prod g_s12_13 g_s13_14))) (mem g_s17_18 (|+->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) g_s13_14) (set_prod g_s4_5 g_s7_8))) (mem g_s18_19 (|+->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s19_20 (|+->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s20_21 (|+->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (POW (set_prod g_s4_5 g_s7_8)))) (mem g_s21_22 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (POW (set_prod g_s4_5 g_s7_8)))) (mem g_s22_23 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (POW (set_prod g_s4_5 g_s7_8)))) (mem g_s23_24 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (POW (set_prod g_s4_5 g_s7_8)))) (mem g_s24_25 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (POW (set_prod g_s4_5 g_s7_8)))) (mem g_s25_26 (|<->| (set_prod g_s4_5 g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s26_27 (|<->| (set_prod g_s4_5 g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s27_28 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s28_29 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s29_30 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s30_31 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s31_32 (|<->| (set_prod g_s4_5 g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s32_33 (|<->| (set_prod g_s4_5 g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s33_34 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s34_35 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s35_36 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s36_37 (|<->| (set_prod (set_prod g_s4_5 g_s7_8) g_s12_13) (set_prod g_s4_5 g_s7_8))) (mem g_s37_38 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s38_39 (|-->| (set_prod (set_prod (set_prod g_s4_5 g_s7_8) g_s4_5) g_s7_8) (set_prod g_s4_5 g_s7_8))) (mem g_s39_40 (|-->| (set_prod (set_prod (set_prod g_s3_4 g_s6_7) g_s3_4) g_s6_7) (set_prod g_s3_4 g_s6_7))) (mem g_s40_41 (|-->| (set_prod (set_prod (set_prod g_s3_4 g_s6_7) g_s3_4) g_s6_7) (set_prod g_s3_4 g_s6_7))) (= (dom g_s18_19) (set_prod (set_prod g_s4_5 g_s7_8) NAT)) (= (dom g_s17_18) (set_prod (set_prod (set_prod g_s4_5 g_s7_8) NAT) NAT)) (subset (dom g_s19_20) (set_prod (set_prod g_s4_5 g_s7_8) NAT)) (= (dom g_s20_21) (set_prod (set_prod g_s4_5 g_s7_8) NAT)) (subset g_s41_42 g_s0_1) (mem g_s42_43 g_s0_1) (not (mem g_s42_43 g_s41_42)) (mem g_s43_44 (|+->| NAT g_s0_1)) (mem g_s43_44 (perm g_s41_42)) (mem g_s44_46 (|>->>| g_s41_42 g_s45_45)) (mem g_s46_47 (|>+>| g_s45_45 g_s41_42)) (mem g_s47_49 (|>->>| g_s41_42 g_s48_48)) (mem g_s49_50 (|>+>| g_s48_48 g_s41_42)) (= g_s46_47 (inverse g_s44_46)) (= g_s49_50 (inverse g_s47_49)) (subset g_s50_51 g_s1_2) (mem g_s51_52 g_s1_2) (not (mem g_s51_52 g_s50_51)) (mem g_s52_53 (|+->| NAT g_s1_2)) (mem g_s52_53 (perm g_s50_51)) (subset g_s53_54 g_s2_3) (mem g_s54_55 g_s2_3) (not (mem g_s54_55 g_s53_54)) (mem g_s55_56 (|+->| NAT g_s2_3)) (mem g_s55_56 (perm g_s53_54)) (subset g_s56_57 g_s2_3) (mem g_s57_58 g_s2_3) (not (mem g_s57_58 g_s56_57)) (mem g_s58_59 (|+->| NAT g_s2_3)) (mem g_s58_59 (perm g_s56_57)) (= g_s59_60 NAT) (= g_s60_61 NAT1) (subset g_s60_61 g_s59_60) (mem g_s61_62 g_s59_60) (not (mem g_s61_62 g_s60_61)) (= g_s62_63 NAT) (= g_s63_64 NAT1) (subset g_s63_64 g_s62_63) (mem g_s64_65 g_s62_63) (not (mem g_s64_65 g_s63_64)) (mem g_s65_66 g_s0_1) (mem g_s66_67 g_s0_1) (mem g_s67_68 g_s0_1) (mem g_s68_69 g_s60_61) (mem g_s69_70 g_s63_64) (mem g_s70_72 g_s71_71) (mem g_s72_74 g_s73_73) (mem g_s74_75 g_s71_71) (mem g_s75_76 g_s71_71) (mem g_s76_77 g_s15_16) (mem g_s77_78 g_s15_16) (mem g_s78_79 g_s14_15) (mem g_s79_80 g_s14_15) (mem g_s80_81 g_s14_15) (mem g_s81_82 g_s14_15) (mem g_s82_83 g_s14_15) (mem g_s83_84 g_s12_13) (mem g_s84_85 g_s12_13) (mem g_s85_86 g_s12_13) (= g_s76_77 g_s86_87) (= g_s77_78 g_s87_88) (|>i| g_s81_82 g_s82_83) (|>=i| g_s83_84 e0) (= g_s83_84 g_s88_89) (|>i| g_s84_85 e0) (|>=i| g_s85_86 e90) (= g_s85_86 g_s89_91) (= g_s85_86 g_s90_92)))
(define-fun |def_seext| () Bool (and (mem g_s91_93 g_s3_4) (mem g_s91_93 g_s4_5) (mem g_s92_94 g_s6_7) (mem g_s92_94 g_s7_8) (mem g_s93_95 g_s12_13) (mem g_s93_95 NAT) (mem g_s94_96 g_s13_14) (mem g_s94_96 NAT) (mem g_s95_98 g_s96_97) (mem g_s97_100 g_s98_99) (mem g_s99_102 g_s100_101) (mem g_s101_103 g_s59_60) (mem g_s102_104 g_s62_63) (mem g_s103_105 g_s59_60) (mem g_s104_106 g_s59_60) (mem g_s105_108 (|+->| g_s106_107 g_s60_61)) (mem g_s107_109 (|+->| g_s106_107 g_s63_64)) (mem g_s108_110 (|+->| g_s50_51 g_s63_64)) (mem g_s109_111 (|+->| g_s53_54 g_s63_64)) (mem g_s110_112 BOOL) (mem g_s111_113 g_s59_60) (mem g_s112_114 g_s62_63) (mem g_s113_115 g_s59_60) (mem g_s114_116 g_s59_60) (mem g_s115_117 (|+->| g_s53_54 g_s63_64)) (mem g_s116_118 g_s96_97) (mem g_s117_119 g_s96_97) (mem g_s118_120 g_s3_4) (mem g_s119_121 g_s6_7) (mem g_s120_122 g_s3_4) (mem g_s121_123 g_s6_7) (mem g_s122_124 BOOL) (mem g_s123_125 BOOL)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s124_126 g_s59_60) (mem g_s125_127 g_s62_63) (mem g_s126_128 g_s59_60) (mem g_s127_129 g_s59_60) (mem g_s128_130 (|+->| g_s53_54 g_s63_64)) (mem g_s129_131 g_s3_4) (mem g_s130_132 g_s6_7) (mem g_s131_133 BOOL) (mem g_s132_134 BOOL) (mem g_s124_126 g_s59_60) (mem g_s125_127 g_s62_63) (mem g_s126_128 g_s59_60) (mem g_s127_129 g_s59_60) (mem g_s128_130 (|+->| g_s53_54 g_s63_64)) (mem g_s129_131 g_s3_4) (mem g_s130_132 g_s6_7) (mem g_s131_133 BOOL) (mem g_s132_134 BOOL)))
(define-fun |def_inv| () Bool (and (= g_s124_126 g_s124$1_135) (= g_s125_127 g_s125$1_136) (= g_s126_128 g_s126$1_137) (= g_s127_129 g_s127$1_138) (= g_s128_130 g_s128$1_139) (= g_s129_131 g_s129$1_140) (= g_s130_132 g_s130$1_141) (= g_s131_133 g_s131$1_142) (= g_s132_134 g_s132$1_143) (mem g_s129$1_140 g_s3_4) (mem g_s130$1_141 g_s6_7) (mem g_s131$1_142 BOOL) (mem g_s132$1_143 BOOL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (mem g_s124$1_135 g_s59_60) (mem g_s125$1_136 g_s62_63) (mem g_s126$1_137 g_s59_60) (mem g_s127$1_138 g_s59_60) (mem g_s128$1_139 (|+->| g_s53_54 g_s63_64))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s134_144 g_s0_1))
(define-fun lh_2 () Bool (mem g_s134_144 g_s41_42))
(define-fun lh_3 () Bool (= g_s134_144 g_s67_68))
(define-fun lh_4 () Bool (mem g_s120_122 g_s3_4))
(define-fun lh_5 () Bool (mem g_s121_123 g_s6_7))
(define-fun lh_6 () Bool (mem g_s129$1_140 g_s3_4))
(define-fun lh_7 () Bool (mem g_s130$1_141 g_s6_7))
(define-fun lh_8 () Bool (mem g_s135$1_145 g_s3_4))
(define-fun lh_9 () Bool (= g_s135$1_145 g_s91_93))
(define-fun lh_10 () Bool (mem g_s136$1_146 g_s6_7))
(define-fun lh_11 () Bool (= g_s136$1_146 g_s92_94))
(define-fun lh_12 () Bool (mem g_s137$1_147 g_s12_13))
(define-fun lh_13 () Bool (= g_s137$1_147 g_s93_95))
(define-fun lh_14 () Bool (mem g_s138$1_148 g_s13_14))
(define-fun lh_15 () Bool (= g_s138$1_148 g_s94_96))
(define-fun lh_16 () Bool (= g_s131$1_142 TRUE))
(define-fun lh_17 () Bool (= g_s132$1_143 TRUE))
(define-fun lh_18 () Bool (= (bool (mem g_s129$1_140 g_s4_5)) TRUE))
(define-fun lh_19 () Bool (= (bool (mem g_s130$1_141 g_s7_8)) TRUE))
(define-fun lh_20 () Bool (mem g_s129$1_140 g_s4_5))
(define-fun lh_21 () Bool (mem g_s130$1_141 g_s7_8))
(define-fun lh_22 () Bool (|>=i| g_s137$1_147 e0))
(define-fun lh_23 () Bool (|>=i| g_s138$1_148 e0))
(define-fun lh_24 () Bool (mem g_s139$1_149 g_s3_4))
(define-fun lh_25 () Bool (mem g_s139$1_149 g_s4_5))
(define-fun lh_26 () Bool (mem g_s140$1_150 g_s6_7))
(define-fun lh_27 () Bool (mem g_s140$1_150 g_s7_8))
(define-fun lh_28 () Bool (= (mapplet g_s139$1_149 g_s140$1_150) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s137$1_147) g_s138$1_148))))
(define-fun lh_29 () Bool (not (and (mem g_s129$1_140 g_s4_5) (mem g_s130$1_141 g_s7_8))))
(define-fun lh_30 () Bool (not (and (= g_s131$1_142 TRUE) (= g_s132$1_143 TRUE))))
(define-fun lh_31 () Bool (= g_s123_125 TRUE))
(define-fun lh_32 () Bool (mem g_s120_122 g_s4_5))
(define-fun lh_33 () Bool (mem g_s121_123 g_s7_8))
(define-fun lh_34 () Bool (mem (mapplet g_s120_122 g_s121_123) (apply g_s20_21 (mapplet (mapplet g_s91_93 g_s92_94) g_s84_85))))
(define-fun lh_35 () Bool (not (and (mem g_s120_122 g_s4_5) (mem g_s121_123 g_s7_8))))
(define-fun lh_36 () Bool (not (mem (mapplet g_s129$1_140 g_s130$1_141) (apply g_s20_21 (mapplet (mapplet g_s91_93 g_s92_94) g_s84_85)))))
(define-fun lh_37 () Bool (not (and (mem g_s129$1_140 g_s4_5) (mem g_s130$1_141 g_s7_8) (not (mem (mapplet g_s129$1_140 g_s130$1_141) (apply g_s20_21 (mapplet (mapplet g_s91_93 g_s92_94) g_s84_85)))))))
(define-fun lh_38 () Bool (not (and (= (bool (mem g_s129$1_140 g_s4_5)) TRUE) (= (bool (mem g_s130$1_141 g_s7_8)) TRUE))))
(define-fun lh_39 () Bool (= (bool (mem g_s120_122 g_s4_5)) TRUE))
(define-fun lh_40 () Bool (= (bool (mem g_s121_123 g_s7_8)) TRUE))
(define-fun lh_41 () Bool (mem g_s135$1_145 g_s4_5))
(define-fun lh_42 () Bool (mem g_s136$1_146 g_s7_8))
(define-fun lh_43 () Bool (mem g_s84_85 g_s12_13))
(define-fun lh_44 () Bool (|>=i| g_s84_85 e0))
(define-fun lh_45 () Bool (= (bool (mem (mapplet g_s120_122 g_s121_123) (apply g_s20_21 (mapplet (mapplet g_s135$1_145 g_s136$1_146) g_s84_85)))) TRUE))
(define-fun lh_46 () Bool (not (and (= (bool (mem g_s120_122 g_s4_5)) TRUE) (= (bool (mem g_s121_123 g_s7_8)) TRUE))))
(define-fun lh_47 () Bool (= (bool (mem (mapplet g_s129$1_140 g_s130$1_141) (apply g_s20_21 (mapplet (mapplet g_s135$1_145 g_s136$1_146) g_s84_85)))) FALSE))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_39 lh_40) (mem g_s136$1_146 g_s7_8))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_39 lh_40) (mem g_s135$1_145 g_s4_5))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (mem g_s130$1_141 g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (mem g_s129$1_140 g_s4_5))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_39 lh_40) (|>=i| g_s84_85 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (|>=i| g_s137$1_147 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (|>=i| g_s138$1_148 e0))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_38) (= (mapplet g_s129$1_140 g_s130$1_141) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s93_95) g_s94_96))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s121_123 g_s130$1_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s120_122 g_s129$1_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s112_114 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s115_117 g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s111_113 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s113_115 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38 lh_46) (= g_s114_116 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= empty g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s9_10 g_s129$1_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s11_12 g_s130$1_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s64_65 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s61_62 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s61_62 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38 lh_46) (= g_s61_62 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s121_123 g_s130$1_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s120_122 g_s129$1_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s112_114 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s115_117 g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s111_113 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s113_115 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_30 lh_31 lh_32 lh_33 lh_34 lh_38) (= g_s114_116 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_38 lh_46) (= (mapplet g_s129$1_140 g_s130$1_141) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s93_95) g_s94_96))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= empty g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s9_10 g_s129$1_140))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s11_12 g_s130$1_141))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s64_65 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s61_62 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s61_62 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_38) (= g_s61_62 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28) (= (mapplet g_s139$1_149 g_s140$1_150) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s93_95) g_s94_96))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s130$1_141 g_s121_123))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29) (= g_s130$1_141 g_s140$1_150))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s129$1_140 g_s120_122))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_29) (= g_s129$1_140 g_s139$1_149))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s125$1_136 g_s112_114))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s128$1_139 g_s115_117))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s124$1_135 g_s111_113))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s126$1_137 g_s113_115))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 47 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_37 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s127$1_138 g_s114_116))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 48 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s130$1_141 g_s11_12))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 49 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s130$1_141 g_s121_123))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 50 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s129$1_140 g_s9_10))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 51 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s129$1_140 g_s120_122))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 52 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s125$1_136 g_s64_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 53 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s125$1_136 g_s112_114))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 54 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s128$1_139 empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 55 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s128$1_139 g_s115_117))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 56 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s124$1_135 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 57 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s124$1_135 g_s111_113))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 58 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s126$1_137 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 59 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s126$1_137 g_s113_115))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 60 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_37 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s127$1_138 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 61 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_29 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s127$1_138 g_s114_116))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 62 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (mem g_s9_10 g_s4_5))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 63 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (mem g_s11_12 g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 64 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= empty g_s115_117))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 65 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s9_10 g_s120_122))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 66 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s11_12 g_s121_123))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 67 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s64_65 g_s112_114))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 68 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s61_62 g_s111_113))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 69 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s61_62 g_s113_115))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 70 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s61_62 g_s114_116))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 71 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s125$1_136 g_s64_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 72 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s125$1_136 g_s112_114))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 73 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s128$1_139 empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 74 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s128$1_139 g_s115_117))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 75 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s124$1_135 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 76 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s124$1_135 g_s111_113))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 77 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s126$1_137 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 78 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s126$1_137 g_s113_115))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 79 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s127$1_138 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 80 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= g_s127$1_138 g_s114_116))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 81 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= (mapplet g_s9_10 g_s11_12) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s93_95) g_s94_96))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 82 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_39 lh_40 lh_41 lh_42 lh_43 lh_44 lh_45) (= (mapplet g_s120_122 g_s121_123) (apply g_s17_18 (mapplet (mapplet (mapplet g_s129$1_140 g_s130$1_141) g_s93_95) g_s94_96))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 83 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= empty g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 84 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s9_10 g_s139$1_149))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 85 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s11_12 g_s140$1_150))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 86 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s64_65 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 87 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s61_62 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 88 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s61_62 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 89 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_36) (= g_s61_62 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 90 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s121_123 g_s11_12))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 91 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s120_122 g_s9_10))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 92 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s112_114 g_s64_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 93 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s115_117 empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 94 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s111_113 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 95 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s113_115 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 96 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_18 lh_19 lh_20 lh_21 lh_30 lh_31 lh_32 lh_33 lh_34 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s114_116 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 97 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s130$1_141 g_s11_12))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 98 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_37) (= g_s130$1_141 g_s140$1_150))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 99 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s129$1_140 g_s9_10))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 100 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_35 lh_37) (= g_s129$1_140 g_s139$1_149))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 101 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s125$1_136 g_s64_65))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 102 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s128$1_139 empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 103 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s124$1_135 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 104 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s126$1_137 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 105 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_29 lh_30 lh_31 lh_35 lh_36 lh_41 lh_42 lh_43 lh_44 lh_46 lh_47) (= g_s127$1_138 g_s61_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 106 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s121_123 g_s140$1_150))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 107 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s120_122 g_s139$1_149))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 108 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s112_114 g_s125$1_136))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 109 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s115_117 g_s128$1_139))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 110 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s111_113 g_s124$1_135))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 111 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s113_115 g_s126$1_137))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 112 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24 lh_25 lh_26 lh_27 lh_28 lh_30 lh_31 lh_32 lh_33 lh_34) (= g_s114_116 g_s127$1_138))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s144_151 g_s59_60))
(define-fun lh_2 () Bool (mem g_s144_151 g_s60_61))
(define-fun lh_3 () Bool (= g_s131$1_142 TRUE))
(define-fun lh_4 () Bool (= g_s132$1_143 TRUE))
(define-fun lh_5 () Bool (not (and (= g_s131$1_142 TRUE) (= g_s132$1_143 TRUE))))
(define-fun lh_6 () Bool (or (mem g_s101_103 g_s60_61) (mem g_s102_104 g_s63_64)))
(define-fun lh_7 () Bool (mem g_s101_103 g_s59_60))
(define-fun lh_8 () Bool (mem g_s102_104 g_s62_63))
(define-fun lh_9 () Bool (or (= (bool (mem g_s101_103 g_s60_61)) TRUE) (= (bool (mem g_s102_104 g_s63_64)) TRUE)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= FALSE g_s132$1_143))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (= FALSE g_s131$1_142))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_7 lh_8 lh_9) (= g_s132$1_143 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_7 lh_8 lh_9) (= g_s131$1_142 FALSE))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s146$1_153 g_s146_152))
(assert (= g_s147$1_155 g_s147_154))
(define-fun lh_1 () Bool (mem g_s148_156 g_s2_3))
(define-fun lh_2 () Bool (mem g_s148_156 g_s53_54))
(define-fun lh_3 () Bool (mem g_s148_156 (dom g_s128$1_139)))
(define-fun lh_4 () Bool (mem g_s147$2_157 g_s62_63))
(define-fun lh_5 () Bool (= g_s147$2_157 (apply g_s128$1_139 g_s148_156)))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (apply g_s128$1_139 g_s148_156) g_s62_63))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s134_144 g_s0_1))
(assert (mem g_s134_144 g_s41_42))
(assert (= g_s134_144 g_s67_68))
(assert (mem g_s134_144 g_s0_1))
(assert (mem g_s134_144 g_s41_42))
(assert (= g_s134_144 g_s67_68))
(define-fun lh_1 () Bool (mem g_s135$1_145 g_s3_4))
(define-fun lh_2 () Bool (= g_s135$1_145 g_s91_93))
(define-fun lh_3 () Bool (mem g_s136$1_146 g_s6_7))
(define-fun lh_4 () Bool (= g_s136$1_146 g_s92_94))
(define-fun lh_5 () Bool (mem g_s137$1_147 g_s12_13))
(define-fun lh_6 () Bool (= g_s137$1_147 g_s93_95))
(define-fun lh_7 () Bool (mem g_s138$1_148 g_s13_14))
(define-fun lh_8 () Bool (= g_s138$1_148 g_s94_96))
(define-fun lh_9 () Bool (not (and (= g_s131$1_142 TRUE) (= g_s132$1_143 TRUE))))
(define-fun lh_10 () Bool (= g_s123_125 TRUE))
(define-fun lh_11 () Bool (= (bool (mem g_s120_122 g_s4_5)) TRUE))
(define-fun lh_12 () Bool (= (bool (mem g_s121_123 g_s7_8)) TRUE))
(define-fun lh_13 () Bool (= (bool (mem (mapplet g_s120_122 g_s121_123) (apply g_s20_21 (mapplet (mapplet g_s135$1_145 g_s136$1_146) g_s84_85)))) TRUE))
(define-fun lh_14 () Bool (mem g_s120_122 g_s4_5))
(define-fun lh_15 () Bool (mem g_s121_123 g_s7_8))
(define-fun lh_16 () Bool (not (and (= (bool (mem g_s120_122 g_s4_5)) TRUE) (= (bool (mem g_s121_123 g_s7_8)) TRUE))))
(define-fun lh_17 () Bool (= (bool (mem g_s129$1_140 g_s4_5)) TRUE))
(define-fun lh_18 () Bool (= (bool (mem g_s130$1_141 g_s7_8)) TRUE))
(define-fun lh_19 () Bool (= (bool (mem (mapplet g_s129$1_140 g_s130$1_141) (apply g_s20_21 (mapplet (mapplet g_s135$1_145 g_s136$1_146) g_s84_85)))) FALSE))
(define-fun lh_20 () Bool (not (and (mem g_s120_122 g_s4_5) (mem g_s121_123 g_s7_8))))
(define-fun lh_21 () Bool (mem g_s129$1_140 g_s4_5))
(define-fun lh_22 () Bool (mem g_s130$1_141 g_s7_8))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15) (mem g_s20_21 (|+->| (dom g_s20_21) (ran g_s20_21))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15) (mem (mapplet (mapplet g_s91_93 g_s92_94) g_s84_85) (dom g_s20_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (mem g_s20_21 (|+->| (dom g_s20_21) (ran g_s20_21))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22) (mem (mapplet (mapplet g_s91_93 g_s92_94) g_s84_85) (dom g_s20_21)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s148_156 g_s2_3))
(assert (mem g_s148_156 g_s53_54))
(assert (mem g_s148_156 g_s2_3))
(assert (mem g_s148_156 g_s53_54))
(assert (mem g_s148_156 g_s2_3))
(assert (mem g_s148_156 g_s53_54))
(define-fun lh_1 () Bool (mem g_s148_156 (dom g_s128$1_139)))
(define-fun lh_2 () Bool (mem g_s147$2_157 g_s62_63))
; PO 1 in group 4
(assert (not (=> (and lh_1 lh_2) (mem g_s128$1_139 (|+->| (dom g_s128$1_139) (ran g_s128$1_139))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)