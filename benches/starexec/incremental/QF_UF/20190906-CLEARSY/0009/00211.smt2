(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s54$1_63 () U)
(declare-fun g_s54$2_71 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s55$1_64 () U)
(declare-fun g_s55$2_72 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s56$1_65 () U)
(declare-fun g_s56$2_73 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s57$1_66 () U)
(declare-fun g_s57$2_74 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s58$1_67 () U)
(declare-fun g_s58$2_75 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s59$1_68 () U)
(declare-fun g_s59$2_76 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s60$1_69 () U)
(declare-fun g_s60$2_77 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s61$1_70 () U)
(declare-fun g_s61$2_78 () U)
(declare-fun g_s65_79 () U)
(declare-fun g_s65$1_80 () U)
(declare-fun g_s66_81 () U)
(declare-fun g_s66$1_82 () U)
(declare-fun g_s66$2_84 () U)
(declare-fun g_s67_83 () U)
(declare-fun g_s69_85 () U)
(declare-fun g_s69$1_86 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_87 () U)
(declare-fun g_s70$1_88 () U)
(declare-fun g_s70$2_89 () U)
(declare-fun g_s72_90 () U)
(declare-fun g_s72$1_91 () U)
(declare-fun g_s73_92 () U)
(declare-fun g_s73$1_93 () U)
(declare-fun g_s73$2_94 () U)
(declare-fun g_s75_95 () U)
(declare-fun g_s75$1_96 () U)
(declare-fun g_s76_97 () U)
(declare-fun g_s76$1_98 () U)
(declare-fun g_s76$2_99 () U)
(declare-fun g_s78_100 () U)
(declare-fun g_s79_101 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_102 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (subset g_s2_3 g_s0_1) (mem g_s3_4 g_s0_1) (not (mem g_s3_4 g_s2_3)) (mem g_s4_5 (|+->| NAT g_s0_1)) (mem g_s4_5 (perm g_s2_3)) (mem g_s5_6 (|>->| g_s2_3 NAT)) (= g_s5_6 (inverse g_s4_5)) (= (card g_s2_3) g_s6_7) (subset g_s7_8 g_s1_2) (mem g_s8_9 g_s1_2) (not (mem g_s8_9 g_s7_8)) (mem g_s9_10 (|+->| NAT g_s1_2)) (mem g_s9_10 (perm g_s7_8)) (mem g_s10_11 (|>->| g_s7_8 NAT)) (= g_s10_11 (inverse g_s9_10)) (= (card g_s7_8) g_s11_12) (= g_s12_13 INT) (= g_s13_14 NAT) (= g_s14_15 NAT1) (subset g_s14_15 g_s13_14) (subset g_s13_14 g_s12_13) (= g_s15_16 INT) (= g_s16_17 NAT) (subset g_s16_17 g_s15_16) (mem g_s17_18 g_s12_13) (mem g_s17_18 g_s13_14) (not (mem g_s17_18 g_s14_15)) (mem g_s18_19 g_s12_13) (not (mem g_s18_19 g_s13_14)) (mem g_s19_20 g_s15_16) (mem g_s19_20 g_s16_17) (mem g_s20_21 g_s15_16) (not (mem g_s20_21 g_s16_17)) (= g_s21_22 INT) (= g_s22_23 INT) (= g_s23_24 NATURAL) (= g_s24_25 NATURAL) (mem g_s25_26 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s21_22 g_s22_23))) (mem g_s26_27 (|+->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) g_s22_23) (set_prod g_s13_14 g_s16_17))) (mem g_s27_28 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s28_29 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s29_30 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s30_31 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s31_32 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s32_33 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s33_34 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s34_35 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s35_36 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s36_37 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s37_38 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s38_39 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s39_40 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s40_41 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s41_42 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s42_43 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s43_44 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s44_45 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s45_46 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s46_47 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s47_48 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s48_49 (|-->| (set_prod (set_prod (set_prod g_s12_13 g_s15_16) g_s12_13) g_s15_16) (set_prod g_s12_13 g_s15_16))) (mem g_s49_50 (|-->| (set_prod (set_prod (set_prod g_s12_13 g_s15_16) g_s12_13) g_s15_16) (set_prod g_s12_13 g_s15_16))) (= (dom g_s27_28) (set_prod (set_prod g_s13_14 g_s16_17) NAT)) (= (dom g_s26_27) (set_prod (set_prod (set_prod g_s13_14 g_s16_17) NAT) NAT)) (subset (dom g_s28_29) (set_prod (set_prod g_s13_14 g_s16_17) NAT)) (= (dom g_s29_30) (set_prod (set_prod g_s13_14 g_s16_17) NAT))))
(define-fun |def_seext| () Bool (and (mem g_s50_51 g_s12_13) (mem g_s50_51 g_s13_14) (mem g_s51_52 g_s15_16) (mem g_s51_52 g_s16_17) (mem g_s52_53 g_s21_22) (mem g_s52_53 NAT) (mem g_s53_54 g_s22_23) (mem g_s53_54 NAT)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s54_55 (|+->| g_s7_8 g_s13_14)) (mem g_s55_56 (|+->| g_s7_8 g_s16_17)) (mem g_s56_57 (|+->| g_s7_8 g_s13_14)) (mem g_s57_58 (|+->| g_s7_8 g_s16_17)) (mem g_s58_59 (|+->| g_s7_8 g_s21_22)) (mem g_s59_60 (|+->| g_s7_8 g_s22_23)) (mem g_s60_61 (|+->| g_s7_8 g_s13_14)) (mem g_s61_62 (|+->| g_s7_8 g_s16_17)) (= (dom g_s54_55) (dom g_s55_56)) (= (dom g_s56_57) (dom g_s57_58)) (= (dom g_s58_59) (dom g_s59_60)) (= (dom g_s60_61) (dom g_s61_62)) (= (dom g_s54_55) (dom g_s56_57)) (= (dom g_s55_56) (dom g_s57_58)) (= (dom g_s60_61) (dom g_s58_59)) (= (dom g_s61_62) (dom g_s59_60))))
(define-fun |def_inv| () Bool (and (= g_s54_55 g_s54$1_63) (= g_s55_56 g_s55$1_64) (= g_s56_57 g_s56$1_65) (= g_s57_58 g_s57$1_66) (= g_s58_59 g_s58$1_67) (= g_s59_60 g_s59$1_68) (= g_s60_61 g_s60$1_69) (= g_s61_62 g_s61$1_70)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (mem g_s54$1_63 (|+->| g_s7_8 g_s13_14)) (mem g_s55$1_64 (|+->| g_s7_8 g_s16_17)) (mem g_s56$1_65 (|+->| g_s7_8 g_s13_14)) (mem g_s57$1_66 (|+->| g_s7_8 g_s16_17)) (mem g_s58$1_67 (|+->| g_s7_8 g_s21_22)) (mem g_s59$1_68 (|+->| g_s7_8 g_s22_23)) (mem g_s60$1_69 (|+->| g_s7_8 g_s13_14)) (mem g_s61$1_70 (|+->| g_s7_8 g_s16_17)) (= (dom g_s54$1_63) (dom g_s55$1_64)) (= (dom g_s56$1_65) (dom g_s57$1_66)) (= (dom g_s58$1_67) (dom g_s59$1_68)) (= (dom g_s60$1_69) (dom g_s61$1_70)) (= (dom g_s54$1_63) (dom g_s56$1_65)) (= (dom g_s55$1_64) (dom g_s57$1_66)) (= (dom g_s60$1_69) (dom g_s58$1_67)) (= (dom g_s61$1_70) (dom g_s59$1_68))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (= g_s54$2_71 empty))
(define-fun lh_2 () Bool (= g_s55$2_72 empty))
(define-fun lh_3 () Bool (= g_s56$2_73 empty))
(define-fun lh_4 () Bool (= g_s57$2_74 empty))
(define-fun lh_5 () Bool (= g_s58$2_75 empty))
(define-fun lh_6 () Bool (= g_s59$2_76 empty))
(define-fun lh_7 () Bool (= g_s60$2_77 empty))
(define-fun lh_8 () Bool (= g_s61$2_78 empty))
(define-fun lh_9 () Bool (mem g_s54$2_71 (|+->| g_s7_8 g_s13_14)))
(define-fun lh_10 () Bool (mem g_s55$2_72 (|+->| g_s7_8 g_s16_17)))
(define-fun lh_11 () Bool (mem g_s56$2_73 (|+->| g_s7_8 g_s13_14)))
(define-fun lh_12 () Bool (mem g_s57$2_74 (|+->| g_s7_8 g_s16_17)))
(define-fun lh_13 () Bool (mem g_s58$2_75 (|+->| g_s7_8 g_s21_22)))
(define-fun lh_14 () Bool (mem g_s59$2_76 (|+->| g_s7_8 g_s22_23)))
(define-fun lh_15 () Bool (mem g_s60$2_77 (|+->| g_s7_8 g_s13_14)))
(define-fun lh_16 () Bool (mem g_s61$2_78 (|+->| g_s7_8 g_s16_17)))
(define-fun lh_17 () Bool (= (dom g_s54$2_71) (dom g_s55$2_72)))
(define-fun lh_18 () Bool (= (dom g_s56$2_73) (dom g_s57$2_74)))
(define-fun lh_19 () Bool (= (dom g_s58$2_75) (dom g_s59$2_76)))
(define-fun lh_20 () Bool (= (dom g_s60$2_77) (dom g_s61$2_78)))
(define-fun lh_21 () Bool (= (dom g_s54$2_71) (dom g_s56$2_73)))
(define-fun lh_22 () Bool (= (dom g_s55$2_72) (dom g_s57$2_74)))
(define-fun lh_23 () Bool (= (dom g_s60$2_77) (dom g_s58$2_75)))
(define-fun lh_24 () Bool (= (dom g_s61$2_78) (dom g_s59$2_76)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (mem empty (|+->| g_s7_8 g_s21_22)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (mem empty (|+->| g_s7_8 g_s22_23)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (mem empty (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (mem empty (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s55$2_72))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s54$2_71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s59$2_76))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s58$2_75))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s57$2_74))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s56$2_73))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s61$2_78))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19 lh_20 lh_21 lh_22 lh_23 lh_24) (= empty g_s60$2_77))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s65$1_80 g_s65_79))
(assert (= g_s66$1_82 g_s66_81))
(define-fun lh_1 () Bool (mem g_s67_83 g_s1_2))
(define-fun lh_2 () Bool (mem g_s67_83 g_s7_8))
(define-fun lh_3 () Bool (mem g_s67_83 (dom g_s54$1_63)))
(define-fun lh_4 () Bool (mem g_s66$2_84 g_s12_13))
(define-fun lh_5 () Bool (= g_s66$2_84 (apply g_s54$1_63 g_s67_83)))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (apply g_s54$1_63 g_s67_83) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s69$1_86 g_s69_85))
(assert (= g_s70$1_88 g_s70_87))
(define-fun lh_1 () Bool (mem g_s67_83 g_s1_2))
(define-fun lh_2 () Bool (mem g_s67_83 g_s7_8))
(define-fun lh_3 () Bool (mem g_s67_83 (dom g_s55$1_64)))
(define-fun lh_4 () Bool (mem g_s70$2_89 g_s15_16))
(define-fun lh_5 () Bool (= g_s70$2_89 (apply g_s55$1_64 g_s67_83)))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (apply g_s55$1_64 g_s67_83) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s72$1_91 g_s72_90))
(assert (= g_s73$1_93 g_s73_92))
(define-fun lh_1 () Bool (mem g_s67_83 g_s1_2))
(define-fun lh_2 () Bool (mem g_s67_83 g_s7_8))
(define-fun lh_3 () Bool (mem g_s67_83 (dom g_s56$1_65)))
(define-fun lh_4 () Bool (mem g_s73$2_94 g_s12_13))
(define-fun lh_5 () Bool (= g_s73$2_94 (apply g_s56$1_65 g_s67_83)))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (apply g_s56$1_65 g_s67_83) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s75$1_96 g_s75_95))
(assert (= g_s76$1_98 g_s76_97))
(define-fun lh_1 () Bool (mem g_s67_83 g_s1_2))
(define-fun lh_2 () Bool (mem g_s67_83 g_s7_8))
(define-fun lh_3 () Bool (mem g_s67_83 (dom g_s57$1_66)))
(define-fun lh_4 () Bool (mem g_s76$2_99 g_s15_16))
(define-fun lh_5 () Bool (= g_s76$2_99 (apply g_s57$1_66 g_s67_83)))
; PO 1 in group 4
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem (apply g_s57$1_66 g_s67_83) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s78_100 g_s12_13))
(assert (mem g_s78_100 g_s13_14))
(assert (mem g_s79_101 g_s15_16))
(assert (mem g_s79_101 g_s16_17))
(assert (mem g_s80_102 g_s21_22))
(assert (|>=i| g_s80_102 e0))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s78_100 g_s12_13))
(assert (mem g_s78_100 g_s13_14))
(assert (mem g_s79_101 g_s15_16))
(assert (mem g_s79_101 g_s16_17))
(assert (mem g_s80_102 g_s21_22))
(assert (|>=i| g_s80_102 e0))
; PO 1 in group 5
(push 1)
(assert (not (mem g_s29_30 (|+->| (dom g_s29_30) (ran g_s29_30)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 5
(push 1)
(assert (not (mem (mapplet (mapplet g_s50_51 g_s51_52) g_s80_102) (dom g_s29_30))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s78_100 g_s12_13))
(assert (mem g_s78_100 g_s13_14))
(assert (mem g_s79_101 g_s15_16))
(assert (mem g_s79_101 g_s16_17))
(assert (mem g_s80_102 g_s21_22))
(assert (|>=i| g_s80_102 e0))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s78_100 g_s12_13))
(assert (mem g_s78_100 g_s13_14))
(assert (mem g_s79_101 g_s15_16))
(assert (mem g_s79_101 g_s16_17))
(assert (mem g_s80_102 g_s21_22))
(assert (|>=i| g_s80_102 e0))
; PO 1 in group 6
(push 1)
(assert (not (mem g_s29_30 (|+->| (dom g_s29_30) (ran g_s29_30)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (mem (mapplet (mapplet g_s50_51 g_s51_52) g_s80_102) (dom g_s29_30))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(define-fun lh_1 () Bool (mem g_s67_83 (dom g_s55$1_64)))
(define-fun lh_2 () Bool (mem g_s70$2_89 g_s15_16))
; PO 1 in group 7
(assert (not (=> (and lh_1 lh_2) (mem g_s55$1_64 (|+->| (dom g_s55$1_64) (ran g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(define-fun lh_1 () Bool (mem g_s67_83 (dom g_s54$1_63)))
(define-fun lh_2 () Bool (mem g_s66$2_84 g_s12_13))
; PO 1 in group 8
(assert (not (=> (and lh_1 lh_2) (mem g_s54$1_63 (|+->| (dom g_s54$1_63) (ran g_s54$1_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(define-fun lh_1 () Bool (mem g_s67_83 (dom g_s57$1_66)))
(define-fun lh_2 () Bool (mem g_s76$2_99 g_s15_16))
; PO 1 in group 9
(assert (not (=> (and lh_1 lh_2) (mem g_s57$1_66 (|+->| (dom g_s57$1_66) (ran g_s57$1_66))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(assert (mem g_s67_83 g_s1_2))
(assert (mem g_s67_83 g_s7_8))
(define-fun lh_1 () Bool (mem g_s67_83 (dom g_s56$1_65)))
(define-fun lh_2 () Bool (mem g_s73$2_94 g_s12_13))
; PO 1 in group 10
(assert (not (=> (and lh_1 lh_2) (mem g_s56$1_65 (|+->| (dom g_s56$1_65) (ran g_s56$1_65))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)