(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s50$1_59 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s51$1_60 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s52$1_61 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s53$1_62 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s54$1_63 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s55$1_64 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s56$1_65 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s61_66 () U)
(declare-fun g_s62_67 () U)
(declare-fun g_s62$1_88 () U)
(declare-fun g_s62$2_89 () U)
(declare-fun g_s63_68 () U)
(declare-fun g_s63$1_86 () U)
(declare-fun g_s63$2_87 () U)
(declare-fun g_s64_69 () U)
(declare-fun g_s64$1_84 () U)
(declare-fun g_s64$2_85 () U)
(declare-fun g_s65_70 () U)
(declare-fun g_s65$1_82 () U)
(declare-fun g_s65$2_83 () U)
(declare-fun g_s66_71 () U)
(declare-fun g_s66$1_90 () U)
(declare-fun g_s68_73 () U)
(declare-fun g_s68$1_72 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_75 () U)
(declare-fun g_s70$1_74 () U)
(declare-fun g_s72_77 () U)
(declare-fun g_s72$1_76 () U)
(declare-fun g_s74_79 () U)
(declare-fun g_s74$1_78 () U)
(declare-fun g_s76_81 () U)
(declare-fun g_s76$1_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (subset g_s2_3 g_s0_1) (mem g_s3_4 g_s0_1) (not (mem g_s3_4 g_s2_3)) (mem g_s4_5 (|+->| NAT g_s0_1)) (mem g_s4_5 (perm g_s2_3)) (mem g_s5_6 (|>->| g_s2_3 NAT)) (= g_s5_6 (inverse g_s4_5)) (= (card g_s2_3) g_s6_7) (subset g_s7_8 g_s1_2) (mem g_s8_9 g_s1_2) (not (mem g_s8_9 g_s7_8)) (mem g_s9_10 (|+->| NAT g_s1_2)) (mem g_s9_10 (perm g_s7_8)) (mem g_s10_11 (|>->| g_s7_8 NAT)) (= g_s10_11 (inverse g_s9_10)) (= (card g_s7_8) g_s11_12) (= g_s12_13 INT) (= g_s13_14 NAT) (= g_s14_15 NAT1) (subset g_s14_15 g_s13_14) (subset g_s13_14 g_s12_13) (= g_s15_16 INT) (= g_s16_17 NAT) (subset g_s16_17 g_s15_16) (mem g_s17_18 g_s12_13) (mem g_s17_18 g_s13_14) (not (mem g_s17_18 g_s14_15)) (mem g_s18_19 g_s12_13) (not (mem g_s18_19 g_s13_14)) (mem g_s19_20 g_s15_16) (mem g_s19_20 g_s16_17) (mem g_s20_21 g_s15_16) (not (mem g_s20_21 g_s16_17)) (= g_s21_22 INT) (= g_s22_23 INT) (= g_s23_24 NATURAL) (= g_s24_25 NATURAL) (mem g_s25_26 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s21_22 g_s22_23))) (mem g_s26_27 (|+->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) g_s22_23) (set_prod g_s13_14 g_s16_17))) (mem g_s27_28 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s28_29 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s29_30 (|+->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s30_31 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s31_32 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s32_33 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s33_34 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (POW (set_prod g_s13_14 g_s16_17)))) (mem g_s34_35 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s35_36 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s36_37 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s37_38 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s38_39 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s39_40 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s40_41 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s41_42 (|<->| (set_prod g_s13_14 g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s42_43 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s43_44 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s44_45 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s45_46 (|<->| (set_prod (set_prod g_s13_14 g_s16_17) g_s21_22) (set_prod g_s13_14 g_s16_17))) (mem g_s46_47 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s47_48 (|-->| (set_prod (set_prod (set_prod g_s13_14 g_s16_17) g_s13_14) g_s16_17) (set_prod g_s13_14 g_s16_17))) (mem g_s48_49 (|-->| (set_prod (set_prod (set_prod g_s12_13 g_s15_16) g_s12_13) g_s15_16) (set_prod g_s12_13 g_s15_16))) (mem g_s49_50 (|-->| (set_prod (set_prod (set_prod g_s12_13 g_s15_16) g_s12_13) g_s15_16) (set_prod g_s12_13 g_s15_16))) (= (dom g_s27_28) (set_prod (set_prod g_s13_14 g_s16_17) NAT)) (= (dom g_s26_27) (set_prod (set_prod (set_prod g_s13_14 g_s16_17) NAT) NAT)) (subset (dom g_s28_29) (set_prod (set_prod g_s13_14 g_s16_17) NAT)) (= (dom g_s29_30) (set_prod (set_prod g_s13_14 g_s16_17) NAT))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s50_51 g_s12_13) (mem g_s51_52 g_s15_16) (mem g_s52_53 (|+->| g_s7_8 g_s13_14)) (mem g_s53_54 (|+->| g_s7_8 g_s16_17)) (mem g_s54_55 (|+->| g_s7_8 g_s13_14)) (mem g_s55_56 (|+->| g_s7_8 g_s16_17)) (subset g_s56_57 g_s7_8) (subset g_s57_58 g_s7_8) (= (dom g_s52_53) (dom g_s53_54)) (= (dom g_s54_55) (dom g_s55_56)) (= (dom g_s52_53) g_s57_58) (= (dom g_s53_54) g_s57_58)))
(define-fun |def_inv| () Bool (and (= g_s50_51 g_s50$1_59) (= g_s51_52 g_s51$1_60) (= g_s52_53 g_s52$1_61) (= g_s53_54 g_s53$1_62) (= g_s54_55 g_s54$1_63) (= g_s55_56 g_s55$1_64) (= g_s56_57 g_s56$1_65) (mem g_s50$1_59 g_s12_13) (mem g_s51$1_60 g_s15_16) (mem g_s52$1_61 (|+->| g_s7_8 g_s13_14)) (mem g_s53$1_62 (|+->| g_s7_8 g_s16_17)) (mem g_s54$1_63 (|+->| g_s7_8 g_s13_14)) (mem g_s55$1_64 (|+->| g_s7_8 g_s16_17)) (subset g_s56$1_65 g_s7_8) (= g_s57_58 (dom g_s52$1_61))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s7_8 g_s13_14))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem empty (|+->| g_s7_8 g_s16_17))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (subset empty g_s7_8)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (= empty (dom empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (= (dom empty) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s62_67 g_s12_13))
(assert (mem g_s63_68 g_s15_16))
(assert (mem g_s64_69 g_s12_13))
(assert (mem g_s65_70 g_s15_16))
(assert (mem g_s66_71 BOOL))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s62_67 g_s12_13))
(assert (mem g_s63_68 g_s15_16))
(assert (mem g_s64_69 g_s12_13))
(assert (mem g_s65_70 g_s15_16))
(assert (mem g_s66_71 BOOL))
(define-fun lh_1 () Bool (mem g_s62_67 g_s13_14))
(define-fun lh_2 () Bool (mem g_s63_68 g_s16_17))
(define-fun lh_3 () Bool (mem g_s50$1_59 g_s13_14))
(define-fun lh_4 () Bool (mem g_s51$1_60 g_s16_17))
(define-fun lh_5 () Bool (mem (mapplet (mapplet g_s62_67 g_s63_68) (mapplet g_s50$1_59 g_s51$1_60)) g_s40_41))
(define-fun lh_6 () Bool (mem g_s64_69 g_s13_14))
(define-fun lh_7 () Bool (mem g_s65_70 g_s16_17))
(define-fun lh_8 () Bool (= g_s66_71 TRUE))
(define-fun lh_9 () Bool (not (and (mem g_s64_69 g_s13_14) (mem g_s65_70 g_s16_17))))
(define-fun lh_10 () Bool (not (and (mem g_s50$1_59 g_s13_14) (mem g_s51$1_60 g_s16_17))))
(define-fun lh_11 () Bool (not (and (mem g_s62_67 g_s13_14) (mem g_s63_68 g_s16_17))))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s55$1_64) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s54$1_63) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s53$1_62) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s52$1_61) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (subset (dom (domain_subtraction (SET g_s61_66) g_s52$1_61)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (= (dom (domain_subtraction (SET g_s61_66) g_s54$1_63)) (dom (domain_subtraction (SET g_s61_66) g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (= (dom (domain_subtraction (SET g_s61_66) g_s53$1_62)) (dom (domain_subtraction (SET g_s61_66) g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_8 lh_9 lh_11) (= (dom (domain_subtraction (SET g_s61_66) g_s52$1_61)) (dom (domain_subtraction (SET g_s61_66) g_s53$1_62))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (mem (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (mem (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s53$1_62) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (mem (domain_subtraction (SET g_s61_66) g_s52$1_61) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (subset (dom (domain_subtraction (SET g_s61_66) g_s52$1_61)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (= (dom (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69)))) (dom (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (= (dom (domain_subtraction (SET g_s61_66) g_s53$1_62)) (dom (domain_subtraction (SET g_s61_66) g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 1
(push 1)
(assert (not (=> (and lh_6 lh_7 lh_8 lh_11) (= (dom (domain_subtraction (SET g_s61_66) g_s52$1_61)) (dom (domain_subtraction (SET g_s61_66) g_s53$1_62))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (mem (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (mem (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (mem (domain_subtraction (SET g_s61_66) g_s55$1_64) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (mem (domain_subtraction (SET g_s61_66) g_s54$1_63) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (subset (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (= (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68)))) (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (= (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_8 lh_9 lh_10) (= (dom (domain_subtraction (SET g_s61_66) g_s54$1_63)) (dom (domain_subtraction (SET g_s61_66) g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (mem (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (mem (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (mem (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (mem (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (subset (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (= (dom (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69)))) (dom (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (= (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68)))) (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_6 lh_7 lh_8 lh_10) (= (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (mem (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (mem (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (mem (domain_subtraction (SET g_s61_66) g_s55$1_64) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (mem (domain_subtraction (SET g_s61_66) g_s54$1_63) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (subset (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (= (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68)))) (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (= (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 45 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_8 lh_9) (= (dom (domain_subtraction (SET g_s61_66) g_s54$1_63)) (dom (domain_subtraction (SET g_s61_66) g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 46 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 47 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 48 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))) (|+->| g_s7_8 g_s16_17)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 49 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (mem (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))) (|+->| g_s7_8 g_s13_14)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 50 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (subset (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 51 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (subset (binary_union g_s56$1_65 (SET g_s61_66)) g_s7_8))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 52 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (dom (|<+| g_s54$1_63 (SET (mapplet g_s61_66 g_s64_69)))) (dom (|<+| g_s55$1_64 (SET (mapplet g_s61_66 g_s65_70))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 53 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68)))) (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 54 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8) (= (dom (|<+| g_s52$1_61 (SET (mapplet g_s61_66 g_s62_67)))) (dom (|<+| g_s53$1_62 (SET (mapplet g_s61_66 g_s63_68))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s68_73 g_s68$1_72))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 2
(assert (not (= (bool (mem g_s61_66 g_s57_58)) (bool (mem g_s61_66 (dom g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s70_75 g_s70$1_74))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 3
(assert (not (= (bool (mem g_s61_66 (dom g_s55_56))) (bool (mem g_s61_66 (dom g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s72_77 g_s72$1_76))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 4
(assert (not (= (bool (mem g_s61_66 (dom g_s54_55))) (bool (mem g_s61_66 (dom g_s54$1_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s74_79 g_s74$1_78))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 5
(assert (not (= (bool (mem g_s61_66 (dom g_s53_54))) (bool (mem g_s61_66 (dom g_s53$1_62))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s76_81 g_s76$1_80))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 6
(assert (not (= (bool (mem g_s61_66 (dom g_s52_53))) (bool (mem g_s61_66 (dom g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s55_56)))
(assert (= g_s65_70 g_s65$1_82))
; PO 1 in group 7
(assert (not (mem g_s61_66 (dom g_s55$1_64))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s55_56)))
(assert (= g_s65_70 g_s65$1_82))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s55$1_64)))
(define-fun lh_1 () Bool (mem g_s65$2_83 g_s15_16))
(define-fun lh_2 () Bool (= g_s65$2_83 (apply g_s55$1_64 g_s61_66)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s55_56 g_s61_66) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply g_s55_56 g_s61_66) g_s65$2_83))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s54_55)))
(assert (= g_s64_69 g_s64$1_84))
; PO 1 in group 9
(assert (not (mem g_s61_66 (dom g_s54$1_63))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s54_55)))
(assert (= g_s64_69 g_s64$1_84))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s54$1_63)))
(define-fun lh_1 () Bool (mem g_s64$2_85 g_s12_13))
(define-fun lh_2 () Bool (= g_s64$2_85 (apply g_s54$1_63 g_s61_66)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s54_55 g_s61_66) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply g_s54_55 g_s61_66) g_s64$2_85))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s53_54)))
(assert (= g_s63_68 g_s63$1_86))
; PO 1 in group 11
(assert (not (mem g_s61_66 (dom g_s53$1_62))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s53_54)))
(assert (= g_s63_68 g_s63$1_86))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s53$1_62)))
(define-fun lh_1 () Bool (mem g_s63$2_87 g_s15_16))
(define-fun lh_2 () Bool (= g_s63$2_87 (apply g_s53$1_62 g_s61_66)))
; PO 1 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s53_54 g_s61_66) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 12
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply g_s53_54 g_s61_66) g_s63$2_87))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s52_53)))
(assert (= g_s62_67 g_s62$1_88))
; PO 1 in group 13
(assert (not (mem g_s61_66 (dom g_s52$1_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s52_53)))
(assert (= g_s62_67 g_s62$1_88))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s52$1_61)))
(define-fun lh_1 () Bool (mem g_s62$2_89 g_s12_13))
(define-fun lh_2 () Bool (= g_s62$2_89 (apply g_s52$1_61 g_s61_66)))
; PO 1 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s52_53 g_s61_66) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2) (= (apply g_s52_53 g_s61_66) g_s62$2_89))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s66_71 g_s66$1_90))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
; PO 1 in group 15
(assert (not (= (bool (mem g_s61_66 g_s56_57)) (bool (mem g_s61_66 g_s56$1_65)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s70_75 g_s70$1_74))
(assert (= g_s65_70 g_s65$1_82))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s55$1_64)))
(define-fun lh_2 () Bool (mem g_s65$2_83 g_s15_16))
(define-fun lh_3 () Bool (= g_s65$2_83 (apply g_s55$1_64 g_s61_66)))
(define-fun lh_4 () Bool (mem g_s61_66 (dom g_s55_56)))
; PO 1 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s55_56 g_s61_66) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem g_s61_66 (dom g_s55_56))) (bool (mem g_s61_66 (dom g_s55$1_64)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s55_56 g_s61_66) g_s65$2_83))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s72_77 g_s72$1_76))
(assert (= g_s64_69 g_s64$1_84))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s54$1_63)))
(define-fun lh_2 () Bool (mem g_s64$2_85 g_s12_13))
(define-fun lh_3 () Bool (= g_s64$2_85 (apply g_s54$1_63 g_s61_66)))
(define-fun lh_4 () Bool (mem g_s61_66 (dom g_s54_55)))
; PO 1 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s54_55 g_s61_66) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem g_s61_66 (dom g_s54_55))) (bool (mem g_s61_66 (dom g_s54$1_63)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s54_55 g_s61_66) g_s64$2_85))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s74_79 g_s74$1_78))
(assert (= g_s63_68 g_s63$1_86))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s53$1_62)))
(define-fun lh_2 () Bool (mem g_s63$2_87 g_s15_16))
(define-fun lh_3 () Bool (= g_s63$2_87 (apply g_s53$1_62 g_s61_66)))
(define-fun lh_4 () Bool (mem g_s61_66 (dom g_s53_54)))
; PO 1 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s53_54 g_s61_66) g_s15_16))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem g_s61_66 (dom g_s53_54))) (bool (mem g_s61_66 (dom g_s53$1_62)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s53_54 g_s61_66) g_s63$2_87))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 19 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (= g_s76_81 g_s76$1_80))
(assert (= g_s62_67 g_s62$1_88))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s52$1_61)))
(define-fun lh_2 () Bool (mem g_s62$2_89 g_s12_13))
(define-fun lh_3 () Bool (= g_s62$2_89 (apply g_s52$1_61 g_s61_66)))
(define-fun lh_4 () Bool (mem g_s61_66 (dom g_s52_53)))
; PO 1 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s52_53 g_s61_66) g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem g_s61_66 (dom g_s52_53))) (bool (mem g_s61_66 (dom g_s52$1_61)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s52_53 g_s61_66) g_s62$2_89))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 20 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s55_56)))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s55$1_64)))
(define-fun lh_1 () Bool (mem g_s65$2_83 g_s15_16))
; PO 1 in group 20
(assert (not (=> lh_1 (mem g_s55$1_64 (|+->| (dom g_s55$1_64) (ran g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 21 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s54_55)))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s54$1_63)))
(define-fun lh_1 () Bool (mem g_s64$2_85 g_s12_13))
; PO 1 in group 21
(assert (not (=> lh_1 (mem g_s54$1_63 (|+->| (dom g_s54$1_63) (ran g_s54$1_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 22 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s53_54)))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s53$1_62)))
(define-fun lh_1 () Bool (mem g_s63$2_87 g_s15_16))
; PO 1 in group 22
(assert (not (=> lh_1 (mem g_s53$1_62 (|+->| (dom g_s53$1_62) (ran g_s53$1_62))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 23 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s52_53)))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 (dom g_s52$1_61)))
(define-fun lh_1 () Bool (mem g_s62$2_89 g_s12_13))
; PO 1 in group 23
(assert (not (=> lh_1 (mem g_s52$1_61 (|+->| (dom g_s52$1_61) (ran g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 24 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s55$1_64)))
(define-fun lh_2 () Bool (mem g_s65$2_83 g_s15_16))
; PO 1 in group 24
(assert (not (=> (and lh_1 lh_2) (mem g_s55$1_64 (|+->| (dom g_s55$1_64) (ran g_s55$1_64))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 25 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s54$1_63)))
(define-fun lh_2 () Bool (mem g_s64$2_85 g_s12_13))
; PO 1 in group 25
(assert (not (=> (and lh_1 lh_2) (mem g_s54$1_63 (|+->| (dom g_s54$1_63) (ran g_s54$1_63))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 26 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s53$1_62)))
(define-fun lh_2 () Bool (mem g_s63$2_87 g_s15_16))
; PO 1 in group 26
(assert (not (=> (and lh_1 lh_2) (mem g_s53$1_62 (|+->| (dom g_s53$1_62) (ran g_s53$1_62))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 27 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(assert (mem g_s61_66 g_s1_2))
(assert (mem g_s61_66 g_s7_8))
(define-fun lh_1 () Bool (mem g_s61_66 (dom g_s52$1_61)))
(define-fun lh_2 () Bool (mem g_s62$2_89 g_s12_13))
; PO 1 in group 27
(assert (not (=> (and lh_1 lh_2) (mem g_s52$1_61 (|+->| (dom g_s52$1_61) (ran g_s52$1_61))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)