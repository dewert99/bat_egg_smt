(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e4 () U)
(declare-fun e0 () U)
(declare-fun e24 () U)
(declare-fun e16 () U)
(declare-fun e41 () U)
(declare-fun e23 () U)
(declare-fun e8 () U)
(declare-fun e6 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_14 () U)
(declare-fun g_s11_15 () U)
(declare-fun g_s12_17 () U)
(declare-fun g_s13_18 () U)
(declare-fun g_s14_19 () U)
(declare-fun g_s15_20 () U)
(declare-fun g_s16_21 () U)
(declare-fun g_s17_22 () U)
(declare-fun g_s18_26 () U)
(declare-fun g_s19_25 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_28 () U)
(declare-fun g_s21_27 () U)
(declare-fun g_s22_29 () U)
(declare-fun g_s23_30 () U)
(declare-fun g_s24_31 () U)
(declare-fun g_s25_32 () U)
(declare-fun g_s26_33 () U)
(declare-fun g_s27_34 () U)
(declare-fun g_s28_35 () U)
(declare-fun g_s29_36 () U)
(declare-fun g_s3_5 () U)
(declare-fun g_s30_37 () U)
(declare-fun g_s31_38 () U)
(declare-fun g_s32_39 () U)
(declare-fun g_s33_40 () U)
(declare-fun g_s33$1_46 () U)
(declare-fun g_s34_42 () U)
(declare-fun g_s34$1_47 () U)
(declare-fun g_s35_43 () U)
(declare-fun g_s35$1_48 () U)
(declare-fun g_s37_44 () U)
(declare-fun g_s38_45 () U)
(declare-fun g_s38$1_49 () U)
(declare-fun g_s4_7 () U)
(declare-fun g_s41_50 () U)
(declare-fun g_s5_9 () U)
(declare-fun g_s6_10 () U)
(declare-fun g_s7_11 () U)
(declare-fun g_s8_12 () U)
(declare-fun g_s9_13 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_5 (interval e0 e4)) (= g_s4_7 (interval e0 e6)) (= g_s5_9 (interval e0 e8)) (mem g_s6_10 g_s3_5) (mem g_s7_11 g_s4_7) (mem g_s8_12 g_s5_9) (mem g_s9_13 g_s5_9) (mem g_s10_14 g_s5_9) (= g_s6_10 e4) (= g_s7_11 e6) (= g_s8_12 e8) (and (|>=i| g_s9_13 e0) (|<=i| g_s9_13 g_s8_12)) (and (|>=i| g_s10_14 e0) (|<=i| g_s10_14 g_s8_12)) (not (= g_s9_13 g_s10_14)) (= g_s11_15 (SET (mapplet g_s10_14 g_s9_13))) (|<=i| g_s9_13 e16) (|<=i| g_s10_14 e16) (= g_s12_17 (SET (mapplet (mapplet FALSE g_s10_14) (mapplet TRUE g_s9_13))))))
(define-fun |def_seext| () Bool (and (mem g_s13_18 g_s4_7) (mem g_s14_19 g_s5_9) (mem g_s15_20 g_s3_5) (mem g_s16_21 g_s3_5) (mem g_s17_22 g_s5_9) (mem g_s18_26 (|-->| (interval e0 (|-i| g_s19_25 e24)) (|-->| (interval e0 e23) g_s5_9))) (mem g_s20_28 (|-->| (interval e0 g_s21_27) g_s5_9)) (mem g_s22_29 (|-->| (interval e0 g_s21_27) g_s3_5)) (mem g_s23_30 (|-->| (interval e0 g_s21_27) g_s5_9)) (mem g_s24_31 (|-->| (interval e0 g_s21_27) g_s3_5)) (mem g_s25_32 (|-->| (interval e0 g_s21_27) g_s5_9)) (mem g_s26_33 (|-->| (interval e0 g_s21_27) g_s5_9)) (mem g_s27_34 g_s5_9) (mem g_s28_35 (|-->| (interval e0 g_s21_27) g_s4_7)) (mem g_s29_36 g_s5_9) (mem g_s30_37 g_s3_5) (mem g_s31_38 g_s5_9) (mem g_s32_39 g_s3_5) (mem g_s12_17 (|+->| BOOL g_s5_9)) (mem g_s12_17 (|+->| BOOL g_s4_7)) (mem g_s12_17 (|+->| BOOL g_s3_5))))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s33_40 g_s5_9) (mem g_s34_42 (|-->| (interval e0 e41) g_s5_9)) (mem g_s35_43 g_s4_7)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s37_44 g_s3_5))
(assert (mem g_s38_45 g_s5_9))
(define-fun lh_1 () Bool (or (= g_s33$1_46 g_s33_40) (= g_s33$1_46 g_s9_13)))
(define-fun lh_2 () Bool (mem g_s34$1_47 (|-->| (interval e0 e41) g_s5_9)))
(define-fun lh_3 () Bool (mem g_s35$1_48 g_s4_7))
(define-fun lh_4 () Bool (mem g_s38$1_49 g_s5_9))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem g_s33$1_46 g_s5_9))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s38_45 g_s5_9))
(assert (mem g_s41_50 g_s5_9))
(assert (and (|>=i| g_s41_50 e0) (|<=i| g_s41_50 e41)))
(assert (= g_s33_40 g_s9_13))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s34_42 (|+->| (dom g_s34_42) (ran g_s34_42)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem g_s41_50 (dom g_s34_42))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)