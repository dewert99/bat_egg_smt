(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e240 () U)
(declare-fun e0 () U)
(declare-fun e15 () U)
(declare-fun e98 () U)
(declare-fun e100 () U)
(declare-fun e102 () U)
(declare-fun e104 () U)
(declare-fun e106 () U)
(declare-fun e108 () U)
(declare-fun e110 () U)
(declare-fun e112 () U)
(declare-fun e114 () U)
(declare-fun e116 () U)
(declare-fun e118 () U)
(declare-fun e120 () U)
(declare-fun e122 () U)
(declare-fun e124 () U)
(declare-fun e126 () U)
(declare-fun e128 () U)
(declare-fun e130 () U)
(declare-fun e132 () U)
(declare-fun e134 () U)
(declare-fun e136 () U)
(declare-fun e138 () U)
(declare-fun e140 () U)
(declare-fun e142 () U)
(declare-fun e144 () U)
(declare-fun e146 () U)
(declare-fun e148 () U)
(declare-fun e150 () U)
(declare-fun e152 () U)
(declare-fun e154 () U)
(declare-fun e156 () U)
(declare-fun e158 () U)
(declare-fun e160 () U)
(declare-fun e162 () U)
(declare-fun e164 () U)
(declare-fun e166 () U)
(declare-fun e168 () U)
(declare-fun e170 () U)
(declare-fun e172 () U)
(declare-fun e174 () U)
(declare-fun e176 () U)
(declare-fun e178 () U)
(declare-fun e180 () U)
(declare-fun e182 () U)
(declare-fun e184 () U)
(declare-fun e186 () U)
(declare-fun e188 () U)
(declare-fun e190 () U)
(declare-fun e192 () U)
(declare-fun e34 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e241 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_109 () U)
(declare-fun g_s101_111 () U)
(declare-fun g_s102_113 () U)
(declare-fun g_s103_115 () U)
(declare-fun g_s104_117 () U)
(declare-fun g_s105_119 () U)
(declare-fun g_s106_121 () U)
(declare-fun g_s107_123 () U)
(declare-fun g_s108_125 () U)
(declare-fun g_s109_127 () U)
(declare-fun g_s110_129 () U)
(declare-fun g_s111_131 () U)
(declare-fun g_s112_133 () U)
(declare-fun g_s113_135 () U)
(declare-fun g_s114_137 () U)
(declare-fun g_s115_139 () U)
(declare-fun g_s116_141 () U)
(declare-fun g_s117_143 () U)
(declare-fun g_s118_145 () U)
(declare-fun g_s119_147 () U)
(declare-fun g_s120_149 () U)
(declare-fun g_s121_151 () U)
(declare-fun g_s122_153 () U)
(declare-fun g_s123_155 () U)
(declare-fun g_s124_157 () U)
(declare-fun g_s125_159 () U)
(declare-fun g_s126_161 () U)
(declare-fun g_s127_163 () U)
(declare-fun g_s128_165 () U)
(declare-fun g_s129_167 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_169 () U)
(declare-fun g_s131_171 () U)
(declare-fun g_s132_173 () U)
(declare-fun g_s133_175 () U)
(declare-fun g_s134_177 () U)
(declare-fun g_s135_179 () U)
(declare-fun g_s136_181 () U)
(declare-fun g_s137_183 () U)
(declare-fun g_s138_185 () U)
(declare-fun g_s139_187 () U)
(declare-fun g_s14_17 () U)
(declare-fun g_s140_189 () U)
(declare-fun g_s141_191 () U)
(declare-fun g_s142_193 () U)
(declare-fun g_s143_194 () U)
(declare-fun g_s144_196 () U)
(declare-fun g_s145_198 () U)
(declare-fun g_s146_200 () U)
(declare-fun g_s147_202 () U)
(declare-fun g_s148_204 () U)
(declare-fun g_s149_206 () U)
(declare-fun g_s150_208 () U)
(declare-fun g_s151_210 () U)
(declare-fun g_s152_212 () U)
(declare-fun g_s153_213 () U)
(declare-fun g_s154_214 () U)
(declare-fun g_s155_215 () U)
(declare-fun g_s156_216 () U)
(declare-fun g_s157_217 () U)
(declare-fun g_s158_218 () U)
(declare-fun g_s159_219 () U)
(declare-fun g_s16_19 () U)
(declare-fun g_s160_220 () U)
(declare-fun g_s161_221 () U)
(declare-fun g_s162_222 () U)
(declare-fun g_s163_223 () U)
(declare-fun g_s164_224 () U)
(declare-fun g_s165_225 () U)
(declare-fun g_s166_226 () U)
(declare-fun g_s167_227 () U)
(declare-fun g_s168_228 () U)
(declare-fun g_s169_229 () U)
(declare-fun g_s170_230 () U)
(declare-fun g_s171_231 () U)
(declare-fun g_s172_232 () U)
(declare-fun g_s173_233 () U)
(declare-fun g_s174_234 () U)
(declare-fun g_s175$1_235 () U)
(declare-fun g_s176$1_236 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s182_248 () U)
(declare-fun g_s182_245 () U)
(declare-fun g_s182$1_249 () U)
(declare-fun g_s182$1_246 () U)
(declare-fun g_s183_247 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s192_250 () U)
(declare-fun g_s192$1_251 () U)
(declare-fun g_s193_252 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_24 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_26 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_28 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_31 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_36 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_37 () U)
(declare-fun g_s35_38 () U)
(declare-fun g_s36_39 () U)
(declare-fun g_s37_40 () U)
(declare-fun g_s38_41 () U)
(declare-fun g_s39_42 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_43 () U)
(declare-fun g_s41_44 () U)
(declare-fun g_s42_45 () U)
(declare-fun g_s43_46 () U)
(declare-fun g_s44_47 () U)
(declare-fun g_s45_48 () U)
(declare-fun g_s46_49 () U)
(declare-fun g_s47_50 () U)
(declare-fun g_s48_51 () U)
(declare-fun g_s49_52 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_53 () U)
(declare-fun g_s51_54 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s53_56 () U)
(declare-fun g_s54_57 () U)
(declare-fun g_s55_58 () U)
(declare-fun g_s56_59 () U)
(declare-fun g_s57_60 () U)
(declare-fun g_s58_61 () U)
(declare-fun g_s59_62 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_63 () U)
(declare-fun g_s61_64 () U)
(declare-fun g_s62_65 () U)
(declare-fun g_s63_66 () U)
(declare-fun g_s64_67 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_69 () U)
(declare-fun g_s67_70 () U)
(declare-fun g_s68_71 () U)
(declare-fun g_s69_72 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_73 () U)
(declare-fun g_s71_74 () U)
(declare-fun g_s72_75 () U)
(declare-fun g_s73_76 () U)
(declare-fun g_s74_77 () U)
(declare-fun g_s75_78 () U)
(declare-fun g_s76_79 () U)
(declare-fun g_s77_80 () U)
(declare-fun g_s78_81 () U)
(declare-fun g_s79_82 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_83 () U)
(declare-fun g_s81_84 () U)
(declare-fun g_s82_85 () U)
(declare-fun g_s83_86 () U)
(declare-fun g_s84_87 () U)
(declare-fun g_s85_88 () U)
(declare-fun g_s86_89 () U)
(declare-fun g_s87_90 () U)
(declare-fun g_s88_91 () U)
(declare-fun g_s89_92 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_93 () U)
(declare-fun g_s91_94 () U)
(declare-fun g_s92_95 () U)
(declare-fun g_s93_96 () U)
(declare-fun g_s94_97 () U)
(declare-fun g_s95_99 () U)
(declare-fun g_s96_101 () U)
(declare-fun g_s97_103 () U)
(declare-fun g_s98_105 () U)
(declare-fun g_s99_107 () U)
(declare-fun e16 () U)
(declare-fun e18 () U)
(declare-fun e237 () U)
(declare-fun e244 () U)
(declare-fun e243 () U)
(declare-fun e239 () U)
(declare-fun e242 () U)
(declare-fun e238 () U)
(declare-fun e13 () U)
(declare-fun e12 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (mem g_s10_11 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s10_11 (binary_union e13 e12)) (mem g_s13_14 (|-->| BOOL NAT)) (= g_s13_14 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e15)))) (= g_s14_17 e16) (= g_s16_19 e18) (|<i| g_s18_20 MaxInt) (|<i| g_s19_21 MaxInt) (|<i| g_s20_22 MaxInt) (|<=i| g_s21_24 g_s22_23) (|<=i| g_s23_26 g_s24_25) (|<=i| g_s25_28 g_s26_27) (|<=i| g_s27_29 g_s26_27) (|<i| g_s28_31 g_s29_30) (not (mem g_s30_32 (interval g_s28_31 g_s29_30))) (= g_s31_33 MaxInt) (= g_s32_36 (|*i| g_s33_35 e34)) (mem g_s18_20 NAT) (mem g_s19_21 NAT) (mem g_s20_22 NAT) (mem g_s34_37 NAT) (mem g_s35_38 NAT) (mem g_s36_39 NAT) (mem g_s37_40 NAT) (mem g_s38_41 NAT) (mem g_s39_42 NAT) (mem g_s40_43 NAT) (mem g_s41_44 NAT) (mem g_s42_45 NAT) (mem g_s43_46 NAT) (mem g_s44_47 NAT) (mem g_s24_25 NAT) (mem g_s45_48 NAT) (mem g_s46_49 NAT) (mem g_s47_50 NAT) (mem g_s48_51 NAT) (mem g_s49_52 NAT) (mem g_s50_53 NAT) (mem g_s51_54 NAT) (mem g_s52_55 NAT1) (mem g_s53_56 NAT) (mem g_s23_26 NAT) (mem g_s54_57 NAT) (mem g_s55_58 NAT) (mem g_s56_59 NAT) (mem g_s57_60 NAT) (mem g_s58_61 NAT) (mem g_s59_62 NAT) (mem g_s60_63 NAT) (mem g_s61_64 NAT) (mem g_s62_65 NAT) (mem g_s63_66 NAT) (mem g_s64_67 NAT) (mem g_s65_68 NAT) (mem g_s22_23 NAT) (mem g_s21_24 NAT) (mem g_s66_69 NAT) (mem g_s67_70 NAT) (mem g_s68_71 NAT) (mem g_s69_72 NAT) (mem g_s70_73 NAT) (mem g_s71_74 NAT) (mem g_s72_75 NAT) (mem g_s73_76 NAT) (mem g_s74_77 NAT) (mem g_s75_78 NAT) (mem g_s76_79 NAT) (mem g_s77_80 NAT) (mem g_s78_81 NAT) (mem g_s79_82 NAT) (mem g_s80_83 NAT) (mem g_s81_84 NAT) (mem g_s82_85 NAT1) (mem g_s83_86 NAT) (mem g_s84_87 NAT) (mem g_s85_88 NAT) (mem g_s86_89 NAT) (mem g_s87_90 NAT) (mem g_s26_27 NAT) (mem g_s25_28 NAT) (mem g_s27_29 NAT) (mem g_s32_36 NAT) (mem g_s33_35 NAT) (mem g_s88_91 NAT) (mem g_s31_33 NAT) (mem g_s89_92 NAT) (mem g_s90_93 NAT) (mem g_s28_31 INT) (mem g_s29_30 NAT) (mem g_s30_32 INT)))
(define-fun |def_seext| () Bool (and (= g_s91_94 TRUE) (= g_s92_95 FALSE) (= g_s93_96 e0) (= g_s94_97 e15) (= g_s95_99 e98) (= g_s96_101 e100) (= g_s97_103 e102) (= g_s98_105 e104) (= g_s99_107 e106) (= g_s100_109 e108) (= g_s101_111 e110) (= g_s102_113 e112) (= g_s103_115 e114) (= g_s104_117 e116) (= g_s105_119 e118) (= g_s106_121 e120) (= g_s107_123 e122) (= g_s108_125 e124) (= g_s109_127 e126) (= g_s110_129 e128) (= g_s111_131 e130) (= g_s112_133 e132) (= g_s113_135 e134) (= g_s114_137 e136) (= g_s115_139 e138) (= g_s116_141 e140) (= g_s117_143 e142) (= g_s118_145 e144) (= g_s119_147 e146) (= g_s120_149 e148) (= g_s121_151 e150) (= g_s122_153 e152) (= g_s123_155 e154) (= g_s124_157 e156) (= g_s125_159 e158) (= g_s126_161 e160) (= g_s127_163 e162) (= g_s128_165 e164) (= g_s129_167 e166) (= g_s130_169 e168) (= g_s131_171 e170) (= g_s132_173 e172) (= g_s133_175 e174) (= g_s134_177 e176) (= g_s135_179 e178) (= g_s136_181 e180) (= g_s137_183 e182) (= g_s138_185 e184) (= g_s139_187 e186) (= g_s140_189 e188) (= g_s141_191 e190) (= g_s142_193 e192) (= g_s143_194 e34) (= g_s144_196 e195) (= g_s145_198 e197) (= g_s146_200 e199) (= g_s147_202 e201) (= g_s148_204 e203) (= g_s149_206 e205) (= g_s150_208 e207) (= g_s151_210 e209) (= g_s152_212 e211) (mem g_s153_213 g_s8_9)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (subset g_s154_214 INT) (subset g_s155_215 NAT) (subset g_s155_215 g_s154_214) (mem g_s156_216 g_s154_214) (not (mem g_s156_216 g_s155_215)) (= g_s157_217 INTEGER) (subset g_s158_218 INTEGER) (subset g_s158_218 g_s157_217) (mem g_s159_219 g_s157_217) (not (mem g_s159_219 g_s158_218)) (subset g_s160_220 INT) (subset g_s161_221 NAT) (mem e0 g_s161_221) (subset g_s161_221 g_s160_220) (mem g_s162_222 g_s160_220) (not (mem g_s162_222 g_s161_221)) (= g_s163_223 INTEGER) (= g_s164_224 NATURAL) (subset g_s164_224 g_s163_223) (mem g_s165_225 g_s164_224) (mem g_s166_226 g_s164_224) (mem g_s167_227 g_s163_223) (not (mem g_s167_227 g_s164_224)) (|<=i| g_s165_225 g_s166_226) (= g_s168_228 INTEGER) (= g_s169_229 NATURAL) (subset g_s169_229 g_s168_228) (mem g_s170_230 g_s169_229) (mem g_s171_231 g_s169_229) (mem g_s172_232 g_s168_228) (not (mem g_s172_232 g_s169_229)) (|<=i| g_s170_230 g_s171_231) (mem g_s173_233 (|-->| g_s160_220 g_s154_214)) (= (apply g_s173_233 g_s162_222) g_s156_216) (subset (image g_s173_233 g_s161_221) g_s155_215) (subset (image g_s173_233 (set_diff g_s160_220 g_s161_221)) (set_diff g_s154_214 g_s155_215)) (mem g_s174_234 (|-->| g_s168_228 g_s163_223)) (= (apply g_s174_234 g_s172_232) g_s167_227) (subset (image g_s174_234 g_s169_229) g_s164_224) (subset (image g_s174_234 (set_diff g_s168_228 g_s169_229)) (set_diff g_s163_223 g_s164_224))))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s175$1_235 g_s154_214) (mem g_s176$1_236 g_s163_223)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s155_215 (interval e0 g_s32_36)) (= g_s158_218 (set_diff INTEGER (SET g_s159_219))) (= g_s161_221 (interval e0 g_s33_35)) (= g_s173_233 (binary_union (SET (mapplet g_s162_222 g_s156_216)) e237)) (= g_s174_234 (binary_union e239 e238)) (= g_s154_214 (interval e240 g_s32_36)) (= g_s156_216 e240) (= g_s157_217 INTEGER) (= g_s159_219 e241) (= g_s160_220 (interval e240 g_s33_35)) (= g_s162_222 e240) (= g_s163_223 INTEGER) (= g_s164_224 NATURAL) (= g_s167_227 e240) (= g_s165_225 e0) (= g_s166_226 (|*i| e98 g_s32_36)) (= g_s168_228 INTEGER) (= g_s169_229 NATURAL) (= g_s172_232 e240) (= g_s170_230 e0) (= g_s171_231 (|*i| e98 g_s33_35))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (not (mem e241 (set_diff INTEGER (SET e241))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (not (mem e240 NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (not (mem e240 (interval e0 g_s32_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (not (mem e240 (interval e0 g_s33_35)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (and (|>=i| e240 e240) (|<=i| e240 g_s32_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (and (|>=i| e240 e240) (|<=i| e240 g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem e0 NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (mem (binary_union e243 e242) (|-->| INTEGER INTEGER))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (mem (binary_union (SET (mapplet e240 e240)) e237) (|-->| (interval e240 g_s33_35) (interval e240 g_s32_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (mem (|*i| e98 g_s32_36) NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (mem (|*i| e98 g_s33_35) NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 0
(push 1)
(assert (not (subset NATURAL INTEGER)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 0
(push 1)
(assert (not (subset (set_diff INTEGER (SET e241)) INTEGER)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 0
(push 1)
(assert (not (subset (interval e240 g_s32_36) INT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 0
(push 1)
(assert (not (subset (interval e240 g_s33_35) INT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 0
(push 1)
(assert (not (subset (interval e0 g_s32_36) NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 0
(push 1)
(assert (not (subset (interval e0 g_s32_36) (interval e240 g_s32_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 0
(push 1)
(assert (not (subset (interval e0 g_s33_35) NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 0
(push 1)
(assert (not (subset (interval e0 g_s33_35) (interval e240 g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 0
(push 1)
(assert (not (subset (image (binary_union e243 e242) NATURAL) NATURAL)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 0
(push 1)
(assert (not (subset (image (binary_union e243 e242) (set_diff INTEGER NATURAL)) (set_diff INTEGER NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 0
(push 1)
(assert (not (subset (image (binary_union (SET (mapplet e240 e240)) e237) (set_diff (interval e240 g_s33_35) (interval e0 g_s33_35))) (set_diff (interval e240 g_s32_36) (interval e0 g_s32_36)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 0
(push 1)
(assert (not (subset (image (binary_union (SET (mapplet e240 e240)) e237) (interval e0 g_s33_35)) (interval e0 g_s32_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 0
(push 1)
(assert (not (= (binary_union (SET (mapplet e240 e240)) e237) (binary_union (SET (mapplet e240 e240)) e244))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 0
(push 1)
(assert (not (= (apply (binary_union e243 e242) e240) e240)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 0
(push 1)
(assert (not (= (apply (binary_union (SET (mapplet e240 e240)) e237) e240) e240)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 0
(push 1)
(assert (not (|<=i| e0 (|*i| e98 g_s32_36))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 0
(push 1)
(assert (not (|<=i| e0 (|*i| e98 g_s33_35))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_246 g_s182_245))
(define-fun lh_1 () Bool (mem g_s183_247 g_s154_214))
(define-fun lh_2 () Bool (mem g_s183_247 INTEGER))
(define-fun lh_3 () Bool (mem g_s93_96 INTEGER))
(define-fun lh_4 () Bool (mem g_s32_36 INTEGER))
; PO 1 in group 1
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (and (|>=i| g_s183_247 g_s93_96) (|<=i| g_s183_247 g_s32_36))) (bool (mem g_s183_247 g_s155_215))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_246 g_s182_245))
(define-fun lh_1 () Bool (mem g_s183_247 g_s157_217))
; PO 1 in group 2
(assert (not (=> lh_1 (= (bool (not (= g_s183_247 g_s159_219))) (bool (mem g_s183_247 g_s158_218))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_246 g_s182_245))
(define-fun lh_1 () Bool (mem g_s183_247 g_s160_220))
(define-fun lh_2 () Bool (mem g_s183_247 INTEGER))
(define-fun lh_3 () Bool (mem g_s93_96 INTEGER))
(define-fun lh_4 () Bool (mem g_s33_35 INTEGER))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (and (|>=i| g_s183_247 g_s93_96) (|<=i| g_s183_247 g_s33_35))) (bool (mem g_s183_247 g_s161_221))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_246 g_s182_245))
(define-fun lh_1 () Bool (mem g_s183_247 g_s163_223))
; PO 1 in group 4
(assert (not (=> lh_1 (= (bool (|>=i| g_s183_247 e0)) (bool (mem g_s183_247 g_s164_224))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_246 g_s182_245))
(define-fun lh_1 () Bool (mem g_s183_247 g_s168_228))
; PO 1 in group 5
(assert (not (=> lh_1 (= (bool (|>=i| g_s183_247 e0)) (bool (mem g_s183_247 g_s169_229))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_249 g_s182_248))
(define-fun lh_1 () Bool (mem g_s183_247 g_s160_220))
(define-fun lh_2 () Bool (= g_s183_247 g_s162_222))
(define-fun lh_3 () Bool (mem g_s183_247 g_s161_221))
(define-fun lh_4 () Bool (not (mem g_s183_247 g_s161_221)))
; PO 1 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s173_233 g_s183_247) g_s154_214))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s156_216 (apply g_s173_233 g_s183_247)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (not (mem (apply g_s173_233 g_s183_247) g_s155_215)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 6
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s173_233 g_s183_247) g_s155_215))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_249 g_s182_248))
(define-fun lh_1 () Bool (mem g_s183_247 g_s154_214))
(define-fun lh_2 () Bool (= (bool (= g_s183_247 g_s156_216)) TRUE))
(define-fun lh_3 () Bool (mem g_s183_247 g_s155_215))
; PO 1 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem g_s162_222 g_s154_214))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s162_222 g_s161_221))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 7
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s162_222 (idiv g_s183_247 e34)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s192$1_251 g_s192_250))
(define-fun lh_1 () Bool (mem g_s193_252 g_s154_214))
; PO 1 in group 8
(assert (not (=> lh_1 (mem g_s193_252 INT))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s182$1_249 g_s182_248))
(define-fun lh_1 () Bool (mem g_s183_247 g_s168_228))
(define-fun lh_2 () Bool (|<i| g_s183_247 e0))
(define-fun lh_3 () Bool (mem g_s183_247 g_s169_229))
(define-fun lh_4 () Bool (not (mem g_s183_247 g_s169_229)))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s174_234 g_s183_247) g_s163_223))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s167_227 (apply g_s174_234 g_s183_247)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (not (mem (apply g_s174_234 g_s183_247) g_s164_224)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s174_234 g_s183_247) g_s164_224))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)