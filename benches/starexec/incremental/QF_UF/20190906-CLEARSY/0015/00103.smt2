(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_102 () U)
(declare-fun g_s101$1_103 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_67 () U)
(declare-fun g_s66_66 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s69_69 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s87$1_94 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s88$1_95 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s89$1_96 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s90$1_97 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s91$1_98 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s92$1_99 () U)
(declare-fun g_s96_100 () U)
(declare-fun g_s98_101 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (= g_s2_3 (SET (mapplet g_s5_6 (mapplet g_s4_5 g_s3_4)))) (= g_s6_7 (SET (mapplet g_s9_10 (mapplet g_s8_9 g_s7_8)))) (= g_s10_11 (SET (mapplet g_s13_14 (mapplet g_s12_13 g_s11_12)))) (= g_s14_15 (SET (mapplet g_s16_17 g_s15_16))) (= g_s17_18 (SET (mapplet g_s19_20 g_s18_19))) (= g_s20_21 (SET (mapplet g_s23_24 (mapplet g_s22_23 g_s21_22)))) (= g_s24_25 (SET (mapplet g_s26_27 g_s25_26))) (= g_s27_28 (SET (mapplet g_s30_31 (mapplet g_s29_30 g_s28_29)))) (not (= g_s31_32 empty)) (= g_s32_33 (SET (mapplet g_s35_36 (mapplet g_s34_35 g_s33_34)))) (not (= g_s36_37 empty)) (not (= g_s37_38 empty)) (not (= g_s38_39 empty)) (not (= g_s39_40 empty)) (= g_s40_41 (SET (mapplet g_s43_44 (mapplet g_s42_43 g_s41_42)))) (= g_s44_45 INT) (= g_s45_46 NAT) (= g_s46_47 NAT1) (subset g_s46_47 g_s45_46) (subset g_s45_46 g_s44_45) (mem g_s47_48 g_s44_45) (mem g_s47_48 g_s45_46) (not (mem g_s47_48 g_s46_47)) (mem g_s48_49 g_s44_45) (not (mem g_s48_49 g_s45_46)) (= g_s49_50 INT) (subset g_s50_51 g_s0_1) (mem g_s51_52 g_s0_1) (mem g_s51_52 g_s50_51) (mem g_s52_53 g_s0_1) (not (mem g_s52_53 g_s50_51)) (mem g_s53_54 (|+->| NAT g_s0_1)) (mem g_s53_54 (perm g_s50_51)) (= (card g_s50_51) g_s54_55) (subset g_s55_56 g_s1_2) (mem g_s56_57 g_s1_2) (mem g_s56_57 g_s55_56) (mem g_s57_58 g_s1_2) (not (mem g_s57_58 g_s55_56)) (mem g_s58_59 (|+->| NAT g_s1_2)) (mem g_s58_59 (perm g_s55_56)) (= (card g_s55_56) g_s59_60) (subset g_s60_61 g_s31_32) (mem g_s61_62 g_s31_32) (not (mem g_s61_62 g_s60_61)) (mem g_s62_63 (|+->| NAT g_s31_32)) (mem g_s62_63 (perm g_s60_61)) (subset g_s63_64 g_s2_3) (not (mem g_s3_4 g_s63_64)) (= g_s63_64 (SET (mapplet g_s5_6 g_s4_5))) (mem g_s64_65 (|>->>| g_s63_64 g_s63_64)) (= (binary_inter g_s64_65 (id g_s63_64)) empty) (mem g_s65_67 (|>->>| g_s66_66 g_s2_3)) (not (mem (apply g_s65_67 g_s67_68) g_s63_64)) (mem g_s68_70 (|>->>| g_s69_69 g_s2_3)) (mem g_s70_71 (|>->>| g_s2_3 g_s69_69)) (= g_s68_70 (inverse g_s70_71)) (not (mem (apply g_s68_70 g_s71_72) g_s63_64)) (subset g_s72_73 g_s36_37) (mem g_s73_74 g_s36_37) (not (mem g_s73_74 g_s72_73)) (mem g_s74_75 (|+->| NAT g_s36_37)) (mem g_s74_75 (perm g_s72_73)) (subset g_s75_76 g_s36_37) (subset g_s76_77 g_s75_76) (subset g_s76_77 g_s36_37) (subset g_s76_77 g_s72_73) (mem g_s73_74 g_s75_76) (not (mem g_s73_74 g_s76_77)) (mem g_s77_78 (|+->| NAT g_s75_76)) (mem g_s77_78 (perm g_s76_77)) (subset g_s78_79 g_s37_38) (mem g_s79_80 g_s37_38) (not (mem g_s79_80 g_s78_79)) (mem g_s80_81 (|+->| NAT g_s37_38)) (mem g_s80_81 (perm g_s78_79)) (subset g_s81_82 g_s38_39) (mem g_s82_83 g_s38_39) (not (mem g_s82_83 g_s81_82)) (mem g_s83_84 (|+->| NAT g_s38_39)) (mem g_s83_84 (perm g_s81_82)) (subset g_s84_85 g_s39_40) (mem g_s85_86 g_s39_40) (not (mem g_s85_86 g_s84_85)) (mem g_s86_87 (|+->| NAT g_s39_40)) (mem g_s86_87 (perm g_s84_85))))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (subset g_s87_88 g_s72_73) (mem g_s88_89 (|-->| g_s84_85 g_s40_41)) (subset g_s89_90 (set_prod g_s60_61 g_s63_64)) (subset g_s90_91 (set_prod g_s60_61 g_s63_64)) (subset g_s91_92 (set_prod g_s60_61 g_s63_64)) (subset g_s92_93 g_s60_61)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s87$1_94 (POW g_s72_73)))
(define-fun lh_2 () Bool (mem g_s88$1_95 (|-->| g_s84_85 g_s40_41)))
(define-fun lh_3 () Bool (mem g_s89$1_96 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_4 () Bool (mem g_s90$1_97 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_5 () Bool (mem g_s91$1_98 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_6 () Bool (mem g_s92$1_99 (POW g_s60_61)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset g_s92$1_99 g_s60_61))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset g_s89$1_96 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset g_s90$1_97 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset g_s91$1_98 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset g_s87$1_94 g_s72_73))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s96_100 g_s36_37))
(assert (mem g_s96_100 g_s72_73))
(define-fun lh_1 () Bool (mem g_s87$1_94 (POW g_s72_73)))
; PO 1 in group 1
(assert (not (=> lh_1 (subset g_s87$1_94 g_s72_73))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s98_101 g_s31_32))
(assert (mem g_s98_101 g_s60_61))
(define-fun lh_1 () Bool (mem g_s89$1_96 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_2 () Bool (mem g_s90$1_97 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_3 () Bool (mem g_s91$1_98 (POW (set_prod g_s60_61 g_s63_64))))
(define-fun lh_4 () Bool (mem g_s92$1_99 (POW g_s60_61)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset g_s92$1_99 g_s60_61))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset g_s89$1_96 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset g_s90$1_97 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (subset g_s91$1_98 (set_prod g_s60_61 g_s63_64)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s100_102 g_s39_40))
(assert (mem g_s100_102 g_s84_85))
(define-fun lh_1 () Bool (mem g_s101$1_103 g_s40_41))
; PO 1 in group 3
(push 1)
(assert (not (=> lh_1 (mem g_s100_102 (dom g_s88_89)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> lh_1 (mem g_s88_89 (|+->| (dom g_s88_89) (ran g_s88_89))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)