(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_100 () U)
(declare-fun g_s101_101 () U)
(declare-fun g_s102_102 () U)
(declare-fun g_s103_103 () U)
(declare-fun g_s104_104 () U)
(declare-fun g_s105_105 () U)
(declare-fun g_s106_106 () U)
(declare-fun g_s107_107 () U)
(declare-fun g_s108_108 () U)
(declare-fun g_s109_109 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_110 () U)
(declare-fun g_s111_111 () U)
(declare-fun g_s112_112 () U)
(declare-fun g_s113_113 () U)
(declare-fun g_s114_114 () U)
(declare-fun g_s115_115 () U)
(declare-fun g_s116_116 () U)
(declare-fun g_s117_117 () U)
(declare-fun g_s118_118 () U)
(declare-fun g_s119_119 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_120 () U)
(declare-fun g_s121_122 () U)
(declare-fun g_s122_121 () U)
(declare-fun g_s123_125 () U)
(declare-fun g_s124_124 () U)
(declare-fun g_s125_123 () U)
(declare-fun g_s126_128 () U)
(declare-fun g_s127_127 () U)
(declare-fun g_s128_126 () U)
(declare-fun g_s129_130 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_129 () U)
(declare-fun g_s131_133 () U)
(declare-fun g_s132_132 () U)
(declare-fun g_s133_131 () U)
(declare-fun g_s134_136 () U)
(declare-fun g_s135_135 () U)
(declare-fun g_s136_134 () U)
(declare-fun g_s137_137 () U)
(declare-fun g_s138_143 () U)
(declare-fun g_s139_142 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_139 () U)
(declare-fun g_s141_138 () U)
(declare-fun g_s142_140 () U)
(declare-fun g_s143_141 () U)
(declare-fun g_s144_144 () U)
(declare-fun g_s145_145 () U)
(declare-fun g_s146_146 () U)
(declare-fun g_s147_148 () U)
(declare-fun g_s148_147 () U)
(declare-fun g_s149_149 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_151 () U)
(declare-fun g_s151_150 () U)
(declare-fun g_s152_152 () U)
(declare-fun g_s153_153 () U)
(declare-fun g_s154_154 () U)
(declare-fun g_s155_155 () U)
(declare-fun g_s156_156 () U)
(declare-fun g_s157_157 () U)
(declare-fun g_s158_158 () U)
(declare-fun g_s158$1_159 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s162_161 () U)
(declare-fun g_s162$1_160 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s49_49 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_50 () U)
(declare-fun g_s51_51 () U)
(declare-fun g_s52_52 () U)
(declare-fun g_s53_53 () U)
(declare-fun g_s54_54 () U)
(declare-fun g_s55_55 () U)
(declare-fun g_s56_56 () U)
(declare-fun g_s57_57 () U)
(declare-fun g_s58_58 () U)
(declare-fun g_s59_59 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_60 () U)
(declare-fun g_s61_61 () U)
(declare-fun g_s62_62 () U)
(declare-fun g_s63_63 () U)
(declare-fun g_s64_64 () U)
(declare-fun g_s65_65 () U)
(declare-fun g_s66_66 () U)
(declare-fun g_s67_67 () U)
(declare-fun g_s68_68 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_69 () U)
(declare-fun g_s71_71 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_72 () U)
(declare-fun g_s74_74 () U)
(declare-fun g_s75_75 () U)
(declare-fun g_s76_76 () U)
(declare-fun g_s77_77 () U)
(declare-fun g_s78_78 () U)
(declare-fun g_s79_79 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_80 () U)
(declare-fun g_s81_81 () U)
(declare-fun g_s82_82 () U)
(declare-fun g_s83_83 () U)
(declare-fun g_s84_84 () U)
(declare-fun g_s85_85 () U)
(declare-fun g_s86_86 () U)
(declare-fun g_s87_87 () U)
(declare-fun g_s88_88 () U)
(declare-fun g_s89_89 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_90 () U)
(declare-fun g_s91_91 () U)
(declare-fun g_s92_92 () U)
(declare-fun g_s93_93 () U)
(declare-fun g_s94_94 () U)
(declare-fun g_s95_95 () U)
(declare-fun g_s96_96 () U)
(declare-fun g_s97_97 () U)
(declare-fun g_s98_98 () U)
(declare-fun g_s99_99 () U)
(declare-fun e48 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (= g_s7_8 INT) (= g_s8_9 NAT) (= g_s9_10 NAT1) (subset g_s9_10 g_s8_9) (subset g_s8_9 g_s7_8) (mem g_s10_11 g_s7_8) (mem g_s10_11 g_s8_9) (not (mem g_s10_11 g_s9_10)) (mem g_s11_12 g_s7_8) (not (mem g_s11_12 g_s8_9)) (= g_s12_13 INT) (subset g_s13_14 g_s0_1) (mem g_s14_15 g_s0_1) (mem g_s14_15 g_s13_14) (mem g_s15_16 g_s0_1) (not (mem g_s15_16 g_s13_14)) (mem g_s16_17 (|+->| NAT g_s0_1)) (mem g_s16_17 (perm g_s13_14)) (= (card g_s13_14) g_s17_18) (subset g_s18_19 g_s1_2) (mem g_s19_20 g_s1_2) (mem g_s19_20 g_s18_19) (mem g_s20_21 g_s1_2) (not (mem g_s20_21 g_s18_19)) (mem g_s21_22 (|+->| NAT g_s1_2)) (mem g_s21_22 (perm g_s18_19)) (= (card g_s18_19) g_s22_23) (mem g_s23_24 (|+->| (set_prod g_s12_13 g_s12_13) g_s12_13)) (subset g_s24_25 g_s12_13) (mem g_s25_26 (|-->| (set_prod g_s8_9 g_s8_9) g_s12_13)) (mem g_s26_27 (|+->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s27_28 (|-->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s28_29 (|-->| (set_prod g_s8_9 g_s12_13) (POW g_s8_9))) (mem g_s29_30 (|-->| (set_prod g_s8_9 g_s8_9) (POW g_s8_9))) (mem g_s30_31 (|-->| (set_prod g_s8_9 g_s8_9) (POW g_s8_9))) (mem g_s31_32 (|-->| (set_prod g_s8_9 g_s8_9) (POW g_s8_9))) (mem g_s32_33 (|-->| (set_prod g_s8_9 g_s8_9) (POW g_s8_9))) (mem g_s33_34 (|<->| g_s8_9 g_s8_9)) (mem g_s34_35 (|<->| g_s8_9 g_s8_9)) (mem g_s35_36 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s36_37 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s37_38 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s38_39 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s39_40 (|<->| g_s8_9 g_s8_9)) (mem g_s40_41 (|<->| g_s8_9 g_s8_9)) (mem g_s41_42 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s42_43 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s43_44 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s44_45 (|<->| (set_prod g_s8_9 g_s12_13) g_s8_9)) (mem g_s45_46 (|-->| (set_prod g_s8_9 g_s8_9) g_s8_9)) (mem g_s46_47 (|-->| (set_prod g_s8_9 g_s8_9) g_s8_9)) (= (dom g_s26_27) (set_prod g_s8_9 NAT)) (= (dom g_s23_24) e48) (subset g_s49_49 g_s2_3) (mem g_s50_50 g_s2_3) (not (mem g_s50_50 g_s49_49)) (mem g_s51_51 (|+->| NAT g_s2_3)) (mem g_s51_51 (perm g_s49_49)) (subset g_s52_52 g_s3_4) (mem g_s53_53 g_s3_4) (not (mem g_s53_53 g_s52_52)) (mem g_s54_54 (|+->| NAT g_s3_4)) (mem g_s54_54 (perm g_s52_52)) (subset g_s55_55 g_s4_5) (mem g_s56_56 g_s4_5) (not (mem g_s56_56 g_s55_55)) (mem g_s57_57 (|+->| NAT g_s4_5)) (mem g_s57_57 (perm g_s55_55)) (subset g_s58_58 g_s5_6) (mem g_s59_59 g_s5_6) (not (mem g_s59_59 g_s58_58)) (mem g_s60_60 (|+->| NAT g_s5_6)) (mem g_s60_60 (perm g_s58_58)) (subset g_s61_61 g_s6_7) (mem g_s62_62 g_s6_7) (not (mem g_s62_62 g_s61_61)) (mem g_s63_63 (|+->| NAT g_s6_7)) (mem g_s63_63 (perm g_s61_61)) (mem g_s64_64 (|>->| g_s49_49 g_s18_19)) (mem g_s65_65 (|>->| g_s52_52 g_s18_19)) (mem g_s66_66 g_s1_2) (=> (not (= g_s67_67 e0)) (mem g_s66_66 g_s18_19)) (mem g_s68_68 (|>->| g_s58_58 g_s18_19)) (= (binary_inter (ran g_s64_64) (ran g_s65_65)) empty) (= (binary_inter (ran g_s64_64) (ran g_s68_68)) empty) (= (binary_inter (ran g_s68_68) (ran g_s65_65)) empty) (=> (not (= g_s67_67 e0)) (not (mem g_s66_66 (ran g_s64_64)))) (=> (not (= g_s67_67 e0)) (not (mem g_s66_66 (ran g_s65_65)))) (=> (not (= g_s67_67 e0)) (not (mem g_s66_66 (ran g_s68_68)))) (mem g_s69_70 g_s70_69) (mem g_s71_71 g_s70_69) (mem g_s72_73 g_s73_72) (mem g_s74_74 g_s73_72) (=> (not (= g_s71_71 g_s69_70)) (not (= g_s67_67 e0))) (mem g_s69_70 g_s75_75) (mem g_s71_71 g_s75_75) (mem g_s72_73 g_s76_76) (mem g_s74_74 g_s76_76) (|>i| g_s77_77 e0) (|>i| g_s78_78 e0) (|>i| g_s79_79 e0) (|>i| g_s80_80 e0) (|>i| g_s81_81 e0) (|>i| g_s82_82 e0) (|>i| g_s83_83 e0) (|>i| g_s84_84 e0) (|>i| g_s85_85 e0) (|>i| g_s86_86 e0) (|>i| g_s87_87 e0) (|>i| g_s88_88 e0) (|>i| g_s89_89 e0) (|>i| g_s90_90 e0) (|>i| g_s91_91 e0) (|>i| g_s92_92 e0) (|>i| g_s93_93 e0) (|>i| g_s94_94 e0) (|>i| g_s95_95 e0) (|>i| g_s96_96 e0) (|>i| g_s97_97 e0) (|>i| g_s98_98 e0) (|>i| g_s99_99 e0) (|>i| g_s100_100 e0) (|>i| g_s101_101 e0) (|>i| g_s102_102 e0) (|>i| g_s103_103 e0) (|>i| g_s104_104 e0) (|>i| g_s105_105 e0) (|>i| g_s106_106 e0) (|>i| g_s107_107 e0) (|>i| g_s108_108 e0) (|>i| g_s109_109 e0) (|>i| g_s110_110 e0) (|>i| g_s111_111 e0) (|>i| g_s112_112 e0) (|>i| g_s113_113 e0) (|>i| g_s114_114 e0) (|>=i| g_s115_115 e0) (|>i| g_s116_116 e0) (|>=i| g_s117_117 e0) (mem (|+i| g_s114_114 g_s115_115) g_s12_13) (mem (|+i| g_s84_84 g_s107_107) g_s118_118) (mem (|+i| g_s81_81 g_s107_107) g_s118_118) (mem g_s77_77 g_s12_13) (mem g_s78_78 g_s12_13) (mem g_s79_79 g_s118_118) (mem g_s80_80 g_s118_118) (mem g_s81_81 g_s118_118) (mem g_s82_82 g_s118_118) (mem g_s83_83 g_s118_118) (mem g_s84_84 g_s118_118) (mem g_s85_85 g_s118_118) (mem g_s86_86 g_s12_13) (mem g_s87_87 g_s118_118) (mem g_s88_88 g_s118_118) (mem g_s89_89 g_s118_118) (mem g_s90_90 g_s118_118) (mem g_s91_91 g_s118_118) (mem g_s92_92 g_s12_13) (mem g_s93_93 g_s12_13) (mem g_s94_94 g_s12_13) (mem g_s95_95 g_s12_13) (mem g_s96_96 g_s12_13) (mem g_s97_97 g_s12_13) (mem g_s98_98 g_s12_13) (mem g_s99_99 g_s12_13) (mem g_s100_100 g_s12_13) (mem g_s101_101 g_s12_13) (mem g_s102_102 g_s12_13) (mem g_s103_103 g_s118_118) (mem g_s104_104 g_s12_13) (mem g_s105_105 g_s12_13) (mem g_s106_106 g_s12_13) (mem g_s107_107 g_s12_13) (mem g_s108_108 g_s118_118) (mem g_s109_109 g_s12_13) (mem g_s110_110 g_s12_13) (mem g_s111_111 g_s118_118) (mem g_s112_112 g_s118_118) (mem g_s113_113 g_s118_118) (mem g_s114_114 g_s12_13) (mem g_s115_115 g_s12_13) (mem g_s116_116 g_s118_118) (mem g_s117_117 g_s12_13) (mem g_s119_119 (|>->| g_s49_49 g_s70_69)) (mem g_s120_120 (|>->| g_s52_52 g_s70_69)) (mem g_s121_122 (|>->| g_s58_58 g_s122_121)) (mem g_s123_125 (|>->| g_s124_124 g_s125_123)) (mem g_s126_128 (|>->| g_s127_127 g_s128_126)) (mem g_s129_130 (|>->| g_s127_127 g_s130_129)) (mem g_s131_133 (|>->| g_s132_132 g_s133_131)) (mem g_s134_136 (|>->| g_s135_135 g_s136_134)) (not (mem g_s69_70 (ran g_s119_119))) (not (mem g_s69_70 (ran g_s120_120)))))
(define-fun |def_seext| () Bool (and (mem g_s137_137 g_s8_9) (=> (= g_s138_143 g_s139_142) (and (= (dom g_s140_139) (dom g_s141_138)) (= (dom g_s142_140) (dom g_s141_138)) (= (dom g_s143_141) (dom g_s141_138)))) (mem g_s144_144 g_s75_75) (mem g_s145_145 g_s75_75) (mem g_s138_143 g_s146_146) (mem g_s147_148 g_s148_147) (mem g_s149_149 BOOL) (subset g_s150_151 g_s151_150) (mem g_s141_138 (|+->| g_s151_150 g_s152_152)) (mem g_s140_139 (|+->| g_s151_150 g_s153_153)) (mem g_s142_140 (|+->| g_s151_150 g_s154_154)) (mem g_s143_141 (|+->| g_s151_150 g_s154_154)) (mem g_s155_155 g_s7_8) (mem g_s156_156 g_s7_8) (mem g_s157_157 BOOL)))
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool  (mem g_s158_158 BOOL))
(define-fun |def_inv| () Bool (and (= g_s158_158 g_s158$1_159) (mem g_s158$1_159 BOOL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (= FALSE TRUE))
; PO 1 in group 0
(assert (not (=> lh_1 (= g_s157_157 TRUE))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (not (= g_s69_70 g_s71_71)))
(assert (= g_s162_161 g_s162$1_160))
(assert (not (= g_s69_70 g_s71_71)))
(define-fun lh_1 () Bool (= (bool (and (= g_s157_157 TRUE) (mem g_s156_156 g_s8_9) (or (mem (mapplet (mapplet g_s137_137 g_s117_117) g_s156_156) g_s43_44) (mem (mapplet (mapplet g_s137_137 g_s117_117) g_s156_156) g_s35_36)))) TRUE))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_1 (mem g_s156_156 g_s8_9))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> lh_1 (= g_s157_157 TRUE))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s162_161 g_s162$1_160))
; PO 1 in group 2
(assert (not (= (bool (= g_s158_158 TRUE)) (bool (= g_s158$1_159 TRUE)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)