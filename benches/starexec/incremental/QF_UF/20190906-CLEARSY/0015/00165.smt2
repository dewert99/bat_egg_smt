(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e25 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_56 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_58 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58_60 () U)
(declare-fun g_s59_61 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_62 () U)
(declare-fun g_s61_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s63_65 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s69$1_71 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70$1_72 () U)
(declare-fun g_s74_73 () U)
(declare-fun g_s75$1_74 () U)
(declare-fun g_s76$1_75 () U)
(declare-fun g_s77$1_76 () U)
(declare-fun g_s78$1_77 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_78 () U)
(declare-fun g_s80$1_79 () U)
(declare-fun g_s81_85 () U)
(declare-fun g_s81_80 () U)
(declare-fun g_s81$1_86 () U)
(declare-fun g_s81$1_81 () U)
(declare-fun g_s85_82 () U)
(declare-fun g_s85$1_83 () U)
(declare-fun g_s86_84 () U)
(declare-fun g_s9_10 () U)
(declare-fun e23 () U)
(declare-fun e22 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (not (= g_s12_13 empty)) (not (= g_s13_14 empty)) (not (= g_s14_15 empty)) (not (= g_s15_16 empty)) (not (= g_s16_17 empty)) (not (= g_s17_18 empty)) (not (= g_s18_19 empty)) (not (= g_s19_20 empty)) (mem g_s20_21 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s20_21 (binary_union e23 e22)) (mem g_s23_24 (|-->| BOOL NAT)) (= g_s23_24 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e25)))) (subset g_s24_26 g_s8_9) (mem g_s25_27 g_s8_9) (not (mem g_s25_27 g_s24_26)) (mem g_s26_28 (|+->| NAT g_s8_9)) (mem g_s26_28 (perm g_s24_26)) (subset g_s27_29 g_s9_10) (mem g_s28_30 g_s9_10) (not (mem g_s28_30 g_s27_29)) (mem g_s29_31 (|+->| NAT g_s9_10)) (mem g_s29_31 (perm g_s27_29)) (subset g_s30_32 g_s10_11) (mem g_s31_33 g_s10_11) (not (mem g_s31_33 g_s30_32)) (mem g_s32_34 (|+->| NAT g_s10_11)) (mem g_s32_34 (perm g_s30_32)) (subset g_s33_35 g_s11_12) (mem g_s34_36 g_s11_12) (not (mem g_s34_36 g_s33_35)) (mem g_s35_37 (|+->| NAT g_s11_12)) (mem g_s35_37 (perm g_s33_35)) (subset g_s36_38 g_s12_13) (mem g_s37_39 g_s12_13) (not (mem g_s37_39 g_s36_38)) (mem g_s38_40 (|+->| NAT g_s12_13)) (mem g_s38_40 (perm g_s36_38)) (subset g_s39_41 g_s13_14) (mem g_s40_42 g_s13_14) (not (mem g_s40_42 g_s39_41)) (mem g_s41_43 (|+->| NAT g_s13_14)) (mem g_s41_43 (perm g_s39_41)) (subset g_s42_44 g_s14_15) (mem g_s43_45 g_s14_15) (not (mem g_s43_45 g_s42_44)) (mem g_s44_46 (|+->| NAT g_s14_15)) (mem g_s44_46 (perm g_s42_44)) (subset g_s45_47 g_s15_16) (mem g_s46_48 g_s15_16) (not (mem g_s46_48 g_s45_47)) (mem g_s47_49 (|+->| NAT g_s15_16)) (mem g_s47_49 (perm g_s45_47)) (mem g_s48_50 g_s16_17) (mem g_s49_51 (|-->| g_s16_17 g_s9_10)) (= (apply g_s49_51 g_s48_50) g_s28_30) (subset g_s50_52 g_s17_18) (mem g_s51_53 g_s17_18) (not (mem g_s51_53 g_s50_52)) (subset g_s52_55 g_s53_54) (not (mem g_s54_56 g_s52_55)) (= g_s52_55 (SET (mapplet g_s57_59 (mapplet g_s56_58 g_s55_57)))) (subset g_s58_60 g_s18_19) (mem g_s59_61 g_s18_19) (not (mem g_s59_61 g_s58_60)) (mem g_s60_62 (|+->| NAT g_s18_19)) (mem g_s60_62 (perm g_s58_60)) (subset g_s61_63 g_s19_20) (mem g_s62_64 g_s19_20) (not (mem g_s62_64 g_s61_63)) (mem g_s63_65 (|+->| NAT g_s19_20)) (mem g_s63_65 (perm g_s61_63)) (mem g_s64_66 (|-->| NATURAL g_s19_20)) (mem g_s65_68 (|>->| g_s61_63 g_s66_67))))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (mem g_s67_69 (|+->| g_s61_63 g_s27_29)) (subset g_s68_70 g_s61_63)))
(define-fun |def_inv| () Bool (and (mem g_s69$1_71 (|-->| g_s19_20 g_s9_10)) (mem g_s70$1_72 (|-->| g_s19_20 BOOL)) (= g_s67_69 (range_restriction (domain_restriction g_s61_63 g_s69$1_71) g_s27_29)) (= g_s68_70 (image (inverse g_s70$1_72) (SET TRUE)))))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
; PO 1 in group 0
(push 1)
(assert (not (mem (set_prod g_s19_20 (SET FALSE)) (|-->| g_s19_20 BOOL))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (mem (set_prod g_s19_20 (SET g_s28_30)) (|-->| g_s19_20 g_s9_10))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem (range_restriction (domain_restriction g_s61_63 (set_prod g_s19_20 (SET g_s28_30))) g_s27_29) (|+->| g_s61_63 g_s27_29))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (subset (image (inverse (set_prod g_s19_20 (SET FALSE))) (SET TRUE)) g_s61_63)))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
(define-fun lh_3 () Bool (mem g_s75$1_74 g_s1_2))
(define-fun lh_4 () Bool (mem g_s76$1_75 BOOL))
(define-fun lh_5 () Bool (mem g_s77$1_76 g_s0_1))
(define-fun lh_6 () Bool (mem g_s78$1_77 g_s9_10))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s70$1_72 (SET (mapplet g_s74_73 g_s76$1_75))) (|-->| g_s19_20 BOOL)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|<+| g_s69$1_71 (SET (mapplet g_s74_73 g_s78$1_77))) (|-->| g_s19_20 g_s9_10)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (range_restriction (domain_restriction g_s61_63 (|<+| g_s69$1_71 (SET (mapplet g_s74_73 g_s78$1_77)))) g_s27_29) (|+->| g_s61_63 g_s27_29)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (subset (image (inverse (|<+| g_s70$1_72 (SET (mapplet g_s74_73 g_s76$1_75)))) (SET TRUE)) g_s61_63))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s80$1_79 g_s80_78))
(assert (= g_s81$1_81 g_s81_80))
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
(define-fun lh_3 () Bool (mem (apply g_s69$1_71 g_s74_73) g_s9_10))
(define-fun lh_4 () Bool (mem g_s74_73 (dom g_s67_69)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s69$1_71 g_s74_73) g_s27_29)) (bool (mem g_s74_73 (dom g_s67_69)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s69$1_71 g_s74_73) (apply g_s67_69 g_s74_73)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s80$1_79 g_s80_78))
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
(define-fun lh_3 () Bool (mem (apply g_s69$1_71 g_s74_73) g_s9_10))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s69$1_71 g_s74_73) g_s27_29)) (bool (mem g_s74_73 (dom g_s67_69)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s81$1_81 g_s81_80))
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
(define-fun lh_3 () Bool (mem g_s74_73 (dom g_s67_69)))
; PO 1 in group 4
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s69$1_71 g_s74_73) (apply g_s67_69 g_s74_73)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s85$1_83 g_s85_82))
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
(define-fun lh_3 () Bool (mem g_s86_84 g_s9_10))
(define-fun lh_4 () Bool (mem g_s86_84 g_s27_29))
; PO 1 in group 5
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (= (apply g_s69$1_71 g_s74_73) g_s86_84)) (bool (mem (mapplet g_s74_73 g_s86_84) g_s67_69))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s81$1_86 g_s81_85))
(define-fun lh_1 () Bool (mem g_s74_73 g_s19_20))
(define-fun lh_2 () Bool (mem g_s74_73 g_s61_63))
; PO 1 in group 6
(assert (not (=> (and lh_1 lh_2) (= (apply g_s70$1_72 g_s74_73) (bool (mem g_s74_73 g_s68_70))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s74_73 g_s19_20))
(assert (mem g_s74_73 g_s61_63))
; PO 1 in group 7
(push 1)
(assert (not (mem g_s74_73 (dom g_s69$1_71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 7
(push 1)
(assert (not (mem g_s69$1_71 (|+->| (dom g_s69$1_71) (ran g_s69$1_71)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s74_73 g_s19_20))
(assert (mem g_s74_73 g_s61_63))
; PO 1 in group 8
(push 1)
(assert (not (mem g_s74_73 (dom g_s69$1_71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (mem g_s69$1_71 (|+->| (dom g_s69$1_71) (ran g_s69$1_71)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s74_73 g_s19_20))
(assert (mem g_s74_73 g_s61_63))
(assert (mem g_s74_73 (dom g_s67_69)))
; PO 1 in group 9
(push 1)
(assert (not (mem g_s74_73 (dom g_s69$1_71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (mem g_s69$1_71 (|+->| (dom g_s69$1_71) (ran g_s69$1_71)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s74_73 g_s19_20))
(assert (mem g_s74_73 g_s61_63))
(assert (mem g_s86_84 g_s9_10))
(assert (mem g_s86_84 g_s27_29))
; PO 1 in group 10
(push 1)
(assert (not (mem g_s74_73 (dom g_s69$1_71))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (mem g_s69$1_71 (|+->| (dom g_s69$1_71) (ran g_s69$1_71)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s74_73 g_s19_20))
(assert (mem g_s74_73 g_s61_63))
; PO 1 in group 11
(push 1)
(assert (not (mem g_s70$1_72 (|+->| (dom g_s70$1_72) (ran g_s70$1_72)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (mem g_s74_73 (dom g_s70$1_72))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)