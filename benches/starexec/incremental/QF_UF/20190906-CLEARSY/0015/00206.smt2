(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e118 () U)
(declare-fun e214 () U)
(declare-fun e216 () U)
(declare-fun e218 () U)
(declare-fun e220 () U)
(declare-fun e222 () U)
(declare-fun e224 () U)
(declare-fun e226 () U)
(declare-fun e228 () U)
(declare-fun e230 () U)
(declare-fun e232 () U)
(declare-fun e234 () U)
(declare-fun e236 () U)
(declare-fun e238 () U)
(declare-fun e240 () U)
(declare-fun e242 () U)
(declare-fun e244 () U)
(declare-fun e246 () U)
(declare-fun e248 () U)
(declare-fun e250 () U)
(declare-fun e252 () U)
(declare-fun e254 () U)
(declare-fun e256 () U)
(declare-fun e258 () U)
(declare-fun e260 () U)
(declare-fun e262 () U)
(declare-fun e264 () U)
(declare-fun e266 () U)
(declare-fun e268 () U)
(declare-fun e270 () U)
(declare-fun e272 () U)
(declare-fun e274 () U)
(declare-fun e276 () U)
(declare-fun e278 () U)
(declare-fun e280 () U)
(declare-fun e282 () U)
(declare-fun e284 () U)
(declare-fun e286 () U)
(declare-fun e288 () U)
(declare-fun e290 () U)
(declare-fun e292 () U)
(declare-fun e294 () U)
(declare-fun e296 () U)
(declare-fun e298 () U)
(declare-fun e300 () U)
(declare-fun e302 () U)
(declare-fun e304 () U)
(declare-fun e306 () U)
(declare-fun e308 () U)
(declare-fun e310 () U)
(declare-fun e312 () U)
(declare-fun e314 () U)
(declare-fun e316 () U)
(declare-fun e318 () U)
(declare-fun e320 () U)
(declare-fun e322 () U)
(declare-fun e324 () U)
(declare-fun e326 () U)
(declare-fun e328 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_101 () U)
(declare-fun g_s101_102 () U)
(declare-fun g_s102_103 () U)
(declare-fun g_s103_104 () U)
(declare-fun g_s104_105 () U)
(declare-fun g_s105_106 () U)
(declare-fun g_s106_107 () U)
(declare-fun g_s107_108 () U)
(declare-fun g_s108_109 () U)
(declare-fun g_s109_110 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_111 () U)
(declare-fun g_s111_112 () U)
(declare-fun g_s112_113 () U)
(declare-fun g_s113_114 () U)
(declare-fun g_s116_117 () U)
(declare-fun g_s117_119 () U)
(declare-fun g_s118_120 () U)
(declare-fun g_s119_121 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_122 () U)
(declare-fun g_s121_123 () U)
(declare-fun g_s122_124 () U)
(declare-fun g_s123_125 () U)
(declare-fun g_s124_126 () U)
(declare-fun g_s125_127 () U)
(declare-fun g_s126_128 () U)
(declare-fun g_s127_129 () U)
(declare-fun g_s128_130 () U)
(declare-fun g_s129_131 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_132 () U)
(declare-fun g_s131_133 () U)
(declare-fun g_s132_134 () U)
(declare-fun g_s133_136 () U)
(declare-fun g_s134_135 () U)
(declare-fun g_s135_137 () U)
(declare-fun g_s136_139 () U)
(declare-fun g_s137_138 () U)
(declare-fun g_s138_140 () U)
(declare-fun g_s139_141 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_142 () U)
(declare-fun g_s141_143 () U)
(declare-fun g_s142_144 () U)
(declare-fun g_s143_145 () U)
(declare-fun g_s144_146 () U)
(declare-fun g_s145_147 () U)
(declare-fun g_s146_148 () U)
(declare-fun g_s147_149 () U)
(declare-fun g_s148_150 () U)
(declare-fun g_s149_151 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_152 () U)
(declare-fun g_s151_153 () U)
(declare-fun g_s152_154 () U)
(declare-fun g_s153_155 () U)
(declare-fun g_s154_156 () U)
(declare-fun g_s155_157 () U)
(declare-fun g_s156_158 () U)
(declare-fun g_s157_159 () U)
(declare-fun g_s158_160 () U)
(declare-fun g_s159_161 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_162 () U)
(declare-fun g_s161_163 () U)
(declare-fun g_s162_164 () U)
(declare-fun g_s163_165 () U)
(declare-fun g_s164_166 () U)
(declare-fun g_s165_167 () U)
(declare-fun g_s166_168 () U)
(declare-fun g_s167_169 () U)
(declare-fun g_s168_170 () U)
(declare-fun g_s169_171 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_172 () U)
(declare-fun g_s171_173 () U)
(declare-fun g_s172_174 () U)
(declare-fun g_s173_175 () U)
(declare-fun g_s174_176 () U)
(declare-fun g_s175_177 () U)
(declare-fun g_s176_178 () U)
(declare-fun g_s177_179 () U)
(declare-fun g_s178_180 () U)
(declare-fun g_s179_181 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180_182 () U)
(declare-fun g_s181_183 () U)
(declare-fun g_s182_184 () U)
(declare-fun g_s183_185 () U)
(declare-fun g_s184_186 () U)
(declare-fun g_s185_187 () U)
(declare-fun g_s186_188 () U)
(declare-fun g_s187_189 () U)
(declare-fun g_s188_190 () U)
(declare-fun g_s189_191 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_192 () U)
(declare-fun g_s191_193 () U)
(declare-fun g_s192_194 () U)
(declare-fun g_s193_195 () U)
(declare-fun g_s194_196 () U)
(declare-fun g_s195_197 () U)
(declare-fun g_s196_198 () U)
(declare-fun g_s197_199 () U)
(declare-fun g_s198_200 () U)
(declare-fun g_s199_201 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s200_202 () U)
(declare-fun g_s201_203 () U)
(declare-fun g_s202_204 () U)
(declare-fun g_s203_205 () U)
(declare-fun g_s204_206 () U)
(declare-fun g_s205_207 () U)
(declare-fun g_s206_208 () U)
(declare-fun g_s207_209 () U)
(declare-fun g_s208_210 () U)
(declare-fun g_s209_211 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s210_212 () U)
(declare-fun g_s211_213 () U)
(declare-fun g_s212_215 () U)
(declare-fun g_s213_217 () U)
(declare-fun g_s214_219 () U)
(declare-fun g_s215_221 () U)
(declare-fun g_s216_223 () U)
(declare-fun g_s217_225 () U)
(declare-fun g_s218_227 () U)
(declare-fun g_s219_229 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s220_231 () U)
(declare-fun g_s221_233 () U)
(declare-fun g_s222_235 () U)
(declare-fun g_s223_237 () U)
(declare-fun g_s224_239 () U)
(declare-fun g_s225_241 () U)
(declare-fun g_s226_243 () U)
(declare-fun g_s227_245 () U)
(declare-fun g_s228_247 () U)
(declare-fun g_s229_249 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s230_251 () U)
(declare-fun g_s231_253 () U)
(declare-fun g_s232_255 () U)
(declare-fun g_s233_257 () U)
(declare-fun g_s234_259 () U)
(declare-fun g_s235_261 () U)
(declare-fun g_s236_263 () U)
(declare-fun g_s237_265 () U)
(declare-fun g_s238_267 () U)
(declare-fun g_s239_269 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s240_271 () U)
(declare-fun g_s241_273 () U)
(declare-fun g_s242_275 () U)
(declare-fun g_s243_277 () U)
(declare-fun g_s244_279 () U)
(declare-fun g_s245_281 () U)
(declare-fun g_s246_283 () U)
(declare-fun g_s247_285 () U)
(declare-fun g_s248_287 () U)
(declare-fun g_s249_289 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s250_291 () U)
(declare-fun g_s251_293 () U)
(declare-fun g_s252_295 () U)
(declare-fun g_s253_297 () U)
(declare-fun g_s254_299 () U)
(declare-fun g_s255_301 () U)
(declare-fun g_s256_303 () U)
(declare-fun g_s257_305 () U)
(declare-fun g_s258_307 () U)
(declare-fun g_s259_309 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s260_311 () U)
(declare-fun g_s261_313 () U)
(declare-fun g_s262_315 () U)
(declare-fun g_s263_317 () U)
(declare-fun g_s264_319 () U)
(declare-fun g_s265_321 () U)
(declare-fun g_s266_323 () U)
(declare-fun g_s267_325 () U)
(declare-fun g_s268_327 () U)
(declare-fun g_s269_329 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s270_330 () U)
(declare-fun g_s271_331 () U)
(declare-fun g_s272_332 () U)
(declare-fun g_s273_333 () U)
(declare-fun g_s274_334 () U)
(declare-fun g_s275_335 () U)
(declare-fun g_s276_336 () U)
(declare-fun g_s277_337 () U)
(declare-fun g_s278_338 () U)
(declare-fun g_s279_339 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s280_340 () U)
(declare-fun g_s281_341 () U)
(declare-fun g_s282_342 () U)
(declare-fun g_s283_343 () U)
(declare-fun g_s284_344 () U)
(declare-fun g_s285_345 () U)
(declare-fun g_s286_346 () U)
(declare-fun g_s287_347 () U)
(declare-fun g_s288_348 () U)
(declare-fun g_s289_349 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s290_350 () U)
(declare-fun g_s291_351 () U)
(declare-fun g_s292_352 () U)
(declare-fun g_s293_353 () U)
(declare-fun g_s294_354 () U)
(declare-fun g_s295_355 () U)
(declare-fun g_s296_356 () U)
(declare-fun g_s297_357 () U)
(declare-fun g_s298_358 () U)
(declare-fun g_s299_359 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s300_360 () U)
(declare-fun g_s301_361 () U)
(declare-fun g_s302_362 () U)
(declare-fun g_s303_363 () U)
(declare-fun g_s304_364 () U)
(declare-fun g_s305_365 () U)
(declare-fun g_s306_366 () U)
(declare-fun g_s307_367 () U)
(declare-fun g_s308_368 () U)
(declare-fun g_s309_369 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s310_370 () U)
(declare-fun g_s311_371 () U)
(declare-fun g_s312_372 () U)
(declare-fun g_s313_373 () U)
(declare-fun g_s314_374 () U)
(declare-fun g_s315_375 () U)
(declare-fun g_s316_376 () U)
(declare-fun g_s317_377 () U)
(declare-fun g_s318_378 () U)
(declare-fun g_s319_379 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s320_380 () U)
(declare-fun g_s321_381 () U)
(declare-fun g_s322_382 () U)
(declare-fun g_s323_383 () U)
(declare-fun g_s324_384 () U)
(declare-fun g_s325_385 () U)
(declare-fun g_s326_386 () U)
(declare-fun g_s327_387 () U)
(declare-fun g_s328_388 () U)
(declare-fun g_s329_389 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s330_390 () U)
(declare-fun g_s331_391 () U)
(declare-fun g_s332_392 () U)
(declare-fun g_s333_393 () U)
(declare-fun g_s334_394 () U)
(declare-fun g_s335_395 () U)
(declare-fun g_s336_396 () U)
(declare-fun g_s337_397 () U)
(declare-fun g_s338_398 () U)
(declare-fun g_s339_399 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s340_400 () U)
(declare-fun g_s341_401 () U)
(declare-fun g_s342_402 () U)
(declare-fun g_s343_403 () U)
(declare-fun g_s344_404 () U)
(declare-fun g_s345_405 () U)
(declare-fun g_s346_406 () U)
(declare-fun g_s347_407 () U)
(declare-fun g_s348_408 () U)
(declare-fun g_s349_409 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s350_410 () U)
(declare-fun g_s351_411 () U)
(declare-fun g_s352_412 () U)
(declare-fun g_s353_413 () U)
(declare-fun g_s354_414 () U)
(declare-fun g_s355_415 () U)
(declare-fun g_s356_416 () U)
(declare-fun g_s357_417 () U)
(declare-fun g_s358_418 () U)
(declare-fun g_s359_419 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s360_420 () U)
(declare-fun g_s361_421 () U)
(declare-fun g_s362_422 () U)
(declare-fun g_s363_423 () U)
(declare-fun g_s364_424 () U)
(declare-fun g_s365_425 () U)
(declare-fun g_s366_426 () U)
(declare-fun g_s367_427 () U)
(declare-fun g_s368_428 () U)
(declare-fun g_s369_429 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s370_430 () U)
(declare-fun g_s371_431 () U)
(declare-fun g_s372_432 () U)
(declare-fun g_s373_433 () U)
(declare-fun g_s374_434 () U)
(declare-fun g_s375_435 () U)
(declare-fun g_s376_436 () U)
(declare-fun g_s377_437 () U)
(declare-fun g_s378_438 () U)
(declare-fun g_s379_439 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s380_440 () U)
(declare-fun g_s381_441 () U)
(declare-fun g_s382_442 () U)
(declare-fun g_s383_443 () U)
(declare-fun g_s384_444 () U)
(declare-fun g_s385_445 () U)
(declare-fun g_s386_446 () U)
(declare-fun g_s387_447 () U)
(declare-fun g_s388_448 () U)
(declare-fun g_s389_449 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s390_450 () U)
(declare-fun g_s391_451 () U)
(declare-fun g_s392_452 () U)
(declare-fun g_s393_453 () U)
(declare-fun g_s394_454 () U)
(declare-fun g_s395_455 () U)
(declare-fun g_s396_456 () U)
(declare-fun g_s397_457 () U)
(declare-fun g_s398_458 () U)
(declare-fun g_s399_459 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s400_460 () U)
(declare-fun g_s401_461 () U)
(declare-fun g_s402_462 () U)
(declare-fun g_s403_463 () U)
(declare-fun g_s404_464 () U)
(declare-fun g_s405_465 () U)
(declare-fun g_s406_466 () U)
(declare-fun g_s407_467 () U)
(declare-fun g_s408_468 () U)
(declare-fun g_s409_469 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s410_470 () U)
(declare-fun g_s411_471 () U)
(declare-fun g_s412_472 () U)
(declare-fun g_s413_473 () U)
(declare-fun g_s414_474 () U)
(declare-fun g_s415_475 () U)
(declare-fun g_s416_476 () U)
(declare-fun g_s417_477 () U)
(declare-fun g_s418_478 () U)
(declare-fun g_s419_479 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s420_480 () U)
(declare-fun g_s421_481 () U)
(declare-fun g_s422_482 () U)
(declare-fun g_s423_483 () U)
(declare-fun g_s424_484 () U)
(declare-fun g_s425_485 () U)
(declare-fun g_s426_486 () U)
(declare-fun g_s427_487 () U)
(declare-fun g_s428_488 () U)
(declare-fun g_s429_489 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s430_490 () U)
(declare-fun g_s431_491 () U)
(declare-fun g_s432_492 () U)
(declare-fun g_s433_493 () U)
(declare-fun g_s434_494 () U)
(declare-fun g_s435_495 () U)
(declare-fun g_s436_496 () U)
(declare-fun g_s437_497 () U)
(declare-fun g_s438_498 () U)
(declare-fun g_s439_499 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s440_500 () U)
(declare-fun g_s441_501 () U)
(declare-fun g_s442_502 () U)
(declare-fun g_s443_503 () U)
(declare-fun g_s444_504 () U)
(declare-fun g_s445_505 () U)
(declare-fun g_s446_506 () U)
(declare-fun g_s447_507 () U)
(declare-fun g_s448_508 () U)
(declare-fun g_s449_509 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s450_510 () U)
(declare-fun g_s451_511 () U)
(declare-fun g_s452_512 () U)
(declare-fun g_s453_513 () U)
(declare-fun g_s454_514 () U)
(declare-fun g_s455_515 () U)
(declare-fun g_s456_516 () U)
(declare-fun g_s457_517 () U)
(declare-fun g_s458_518 () U)
(declare-fun g_s459_519 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s460_520 () U)
(declare-fun g_s461_521 () U)
(declare-fun g_s462_522 () U)
(declare-fun g_s463_523 () U)
(declare-fun g_s464_524 () U)
(declare-fun g_s465_525 () U)
(declare-fun g_s466_526 () U)
(declare-fun g_s467_527 () U)
(declare-fun g_s468_528 () U)
(declare-fun g_s469_529 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s470_530 () U)
(declare-fun g_s471_531 () U)
(declare-fun g_s472_532 () U)
(declare-fun g_s473_533 () U)
(declare-fun g_s474_534 () U)
(declare-fun g_s475_535 () U)
(declare-fun g_s476_536 () U)
(declare-fun g_s477_537 () U)
(declare-fun g_s478_538 () U)
(declare-fun g_s479_539 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s480_540 () U)
(declare-fun g_s481_541 () U)
(declare-fun g_s482_542 () U)
(declare-fun g_s483_543 () U)
(declare-fun g_s484_544 () U)
(declare-fun g_s485_545 () U)
(declare-fun g_s486_546 () U)
(declare-fun g_s487_547 () U)
(declare-fun g_s488_548 () U)
(declare-fun g_s489_549 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s490_550 () U)
(declare-fun g_s491_551 () U)
(declare-fun g_s492_552 () U)
(declare-fun g_s493_553 () U)
(declare-fun g_s494_554 () U)
(declare-fun g_s495_555 () U)
(declare-fun g_s496_556 () U)
(declare-fun g_s497_557 () U)
(declare-fun g_s498_558 () U)
(declare-fun g_s499_559 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s500_560 () U)
(declare-fun g_s501_561 () U)
(declare-fun g_s502_562 () U)
(declare-fun g_s503_563 () U)
(declare-fun g_s504_564 () U)
(declare-fun g_s505_565 () U)
(declare-fun g_s506_566 () U)
(declare-fun g_s507_571 () U)
(declare-fun g_s508_568 () U)
(declare-fun g_s509_567 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s510_569 () U)
(declare-fun g_s511_570 () U)
(declare-fun g_s512_572 () U)
(declare-fun g_s513_573 () U)
(declare-fun g_s514_574 () U)
(declare-fun g_s515_575 () U)
(declare-fun g_s516_576 () U)
(declare-fun g_s517_577 () U)
(declare-fun g_s518_578 () U)
(declare-fun g_s519_579 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s520$1_580 () U)
(declare-fun g_s520$2_598 () U)
(declare-fun g_s521$1_581 () U)
(declare-fun g_s521$2_599 () U)
(declare-fun g_s522$1_582 () U)
(declare-fun g_s522$2_597 () U)
(declare-fun g_s523$1_583 () U)
(declare-fun g_s523$2_600 () U)
(declare-fun g_s524$1_584 () U)
(declare-fun g_s524$2_601 () U)
(declare-fun g_s525$1_585 () U)
(declare-fun g_s525$2_602 () U)
(declare-fun g_s526$1_586 () U)
(declare-fun g_s526$2_593 () U)
(declare-fun g_s527$1_587 () U)
(declare-fun g_s527$2_594 () U)
(declare-fun g_s528$1_588 () U)
(declare-fun g_s528$2_595 () U)
(declare-fun g_s529$1_589 () U)
(declare-fun g_s529$2_596 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s530$1_590 () U)
(declare-fun g_s530$2_603 () U)
(declare-fun g_s531$1_591 () U)
(declare-fun g_s531$2_604 () U)
(declare-fun g_s532$1_592 () U)
(declare-fun g_s532$2_605 () U)
(declare-fun g_s537_610 () U)
(declare-fun g_s537_612 () U)
(declare-fun g_s537_617 () U)
(declare-fun g_s537_608 () U)
(declare-fun g_s537_606 () U)
(declare-fun g_s537$1_611 () U)
(declare-fun g_s537$1_613 () U)
(declare-fun g_s537$1_618 () U)
(declare-fun g_s537$1_609 () U)
(declare-fun g_s537$1_607 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s543_614 () U)
(declare-fun g_s545_615 () U)
(declare-fun g_s545$1_616 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s94_95 () U)
(declare-fun g_s95_96 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_98 () U)
(declare-fun g_s98_99 () U)
(declare-fun g_s99_100 () U)
(declare-fun e116 () U)
(declare-fun e115 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (= g_s8_9 (SET (mapplet g_s10_11 g_s9_10))) (= g_s11_12 (SET (mapplet g_s16_17 (mapplet g_s15_16 (mapplet g_s14_15 (mapplet g_s13_14 g_s12_13)))))) (= g_s17_18 (SET (mapplet g_s21_22 (mapplet g_s20_21 (mapplet g_s19_20 g_s18_19))))) (= g_s22_23 (SET (mapplet g_s25_26 (mapplet g_s24_25 g_s23_24)))) (= g_s26_27 (SET (mapplet g_s29_30 (mapplet g_s28_29 g_s27_28)))) (= g_s30_31 (SET (mapplet g_s33_34 (mapplet g_s32_33 g_s31_32)))) (= g_s34_35 (SET (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 g_s35_36))))) (= g_s39_40 (SET (mapplet g_s47_48 (mapplet g_s46_47 (mapplet g_s45_46 (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 (mapplet g_s41_42 g_s40_41))))))))) (= g_s48_49 (SET (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 g_s49_50))))) (= g_s53_54 (SET (mapplet g_s61_62 (mapplet g_s60_61 (mapplet g_s59_60 (mapplet g_s58_59 (mapplet g_s57_58 (mapplet g_s56_57 (mapplet g_s55_56 g_s54_55))))))))) (= g_s62_63 (SET (mapplet g_s65_66 (mapplet g_s64_65 g_s63_64)))) (= g_s66_67 (SET (mapplet g_s69_70 (mapplet g_s68_69 g_s67_68)))) (= g_s70_71 (SET (mapplet g_s73_74 (mapplet g_s72_73 g_s71_72)))) (= g_s74_75 (SET (mapplet g_s76_77 g_s75_76))) (= g_s77_78 (SET (mapplet g_s79_80 g_s78_79))) (= g_s80_81 (SET (mapplet g_s83_84 (mapplet g_s82_83 g_s81_82)))) (= g_s84_85 (SET (mapplet g_s86_87 g_s85_86))) (= g_s87_88 (SET (mapplet g_s90_91 (mapplet g_s89_90 g_s88_89)))) (not (= g_s91_92 empty)) (not (= g_s92_93 empty)) (not (= g_s93_94 empty)) (not (= g_s94_95 empty)) (not (= g_s95_96 empty)) (not (= g_s96_97 empty)) (not (= g_s97_98 empty)) (not (= g_s98_99 empty)) (not (= g_s99_100 empty)) (not (= g_s100_101 empty)) (not (= g_s101_102 empty)) (not (= g_s102_103 empty)) (not (= g_s103_104 empty)) (not (= g_s104_105 empty)) (not (= g_s105_106 empty)) (not (= g_s106_107 empty)) (not (= g_s107_108 empty)) (not (= g_s108_109 empty)) (not (= g_s109_110 empty)) (not (= g_s110_111 empty)) (not (= g_s111_112 empty)) (not (= g_s112_113 empty)) (mem g_s113_114 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s113_114 (binary_union e116 e115)) (mem g_s116_117 (|-->| BOOL NAT)) (= g_s116_117 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e118)))) (= g_s117_119 INT) (= g_s118_120 NAT) (= g_s119_121 NAT1) (subset g_s119_121 g_s118_120) (subset g_s118_120 g_s117_119) (mem g_s120_122 g_s117_119) (mem g_s120_122 g_s118_120) (not (mem g_s120_122 g_s119_121)) (mem g_s121_123 g_s117_119) (not (mem g_s121_123 g_s118_120)) (= g_s122_124 INT) (subset g_s123_125 g_s91_92) (mem g_s124_126 g_s91_92) (mem g_s124_126 g_s123_125) (mem g_s125_127 g_s91_92) (not (mem g_s125_127 g_s123_125)) (mem g_s126_128 (|+->| NAT g_s91_92)) (mem g_s126_128 (perm g_s123_125)) (= (card g_s123_125) g_s127_129) (subset g_s128_130 g_s92_93) (mem g_s129_131 g_s92_93) (mem g_s129_131 g_s128_130) (mem g_s130_132 g_s92_93) (not (mem g_s130_132 g_s128_130)) (mem g_s131_133 (|+->| NAT g_s92_93)) (mem g_s131_133 (perm g_s128_130)) (= (card g_s128_130) g_s132_134) (mem g_s133_136 g_s134_135) (mem g_s135_137 g_s134_135) (mem g_s136_139 g_s137_138) (mem g_s138_140 g_s137_138) (=> (not (= g_s135_137 g_s133_136)) (not (= g_s139_141 e0))) (mem g_s133_136 g_s93_94) (mem g_s135_137 g_s93_94) (mem g_s136_139 g_s96_97) (mem g_s138_140 g_s96_97) (subset g_s134_135 g_s93_94) (mem g_s140_142 g_s93_94) (not (mem g_s140_142 g_s134_135)) (mem g_s141_143 (|+->| NAT g_s93_94)) (mem g_s141_143 (perm g_s134_135)) (subset g_s142_144 g_s94_95) (mem g_s143_145 g_s94_95) (not (mem g_s143_145 g_s142_144)) (mem g_s144_146 (|+->| NAT g_s94_95)) (mem g_s144_146 (perm g_s142_144)) (subset g_s145_147 g_s95_96) (mem g_s146_148 g_s95_96) (not (mem g_s146_148 g_s145_147)) (mem g_s147_149 (|+->| NAT g_s95_96)) (mem g_s147_149 (perm g_s145_147)) (subset g_s137_138 g_s96_97) (mem g_s148_150 g_s96_97) (not (mem g_s148_150 g_s137_138)) (mem g_s149_151 (|+->| NAT g_s96_97)) (mem g_s149_151 (perm g_s137_138)) (subset g_s150_152 g_s97_98) (mem g_s151_153 g_s97_98) (not (mem g_s151_153 g_s150_152)) (mem g_s152_154 (|+->| NAT g_s97_98)) (mem g_s152_154 (perm g_s150_152)) (subset g_s153_155 g_s98_99) (mem g_s154_156 g_s98_99) (not (mem g_s154_156 g_s153_155)) (mem g_s155_157 (|+->| NAT g_s98_99)) (mem g_s155_157 (perm g_s153_155)) (subset g_s156_158 g_s99_100) (mem g_s157_159 g_s99_100) (not (mem g_s157_159 g_s156_158)) (mem g_s158_160 (|+->| NAT g_s99_100)) (mem g_s158_160 (perm g_s156_158)) (subset g_s159_161 g_s100_101) (mem g_s160_162 g_s100_101) (not (mem g_s160_162 g_s159_161)) (mem g_s161_163 (|+->| NAT g_s100_101)) (mem g_s161_163 (perm g_s159_161)) (mem g_s162_164 g_s101_102) (mem g_s163_165 (|-->| g_s101_102 g_s94_95)) (= (apply g_s163_165 g_s162_164) g_s143_145) (subset g_s164_166 g_s102_103) (mem g_s165_167 g_s102_103) (not (mem g_s165_167 g_s164_166)) (subset g_s166_168 g_s103_104) (mem g_s167_169 g_s103_104) (not (mem g_s167_169 g_s166_168)) (mem g_s168_170 (|+->| NAT g_s103_104)) (mem g_s168_170 (perm g_s166_168)) (subset g_s169_171 g_s104_105) (mem g_s170_172 g_s104_105) (not (mem g_s170_172 g_s169_171)) (mem g_s171_173 (|+->| NAT g_s104_105)) (mem g_s171_173 (perm g_s169_171)) (subset g_s172_174 g_s105_106) (mem g_s173_175 g_s105_106) (not (mem g_s173_175 g_s172_174)) (mem g_s174_176 (|+->| NAT g_s105_106)) (mem g_s174_176 (perm g_s172_174)) (subset g_s175_177 g_s106_107) (mem g_s176_178 g_s106_107) (not (mem g_s176_178 g_s175_177)) (mem g_s177_179 (|+->| NAT g_s106_107)) (mem g_s177_179 (perm g_s175_177)) (subset g_s178_180 g_s107_108) (mem g_s179_181 g_s107_108) (not (mem g_s179_181 g_s178_180)) (mem g_s180_182 (|+->| NAT g_s107_108)) (mem g_s180_182 (perm g_s178_180)) (mem g_s181_183 (|>->| g_s166_168 g_s128_130)) (mem g_s182_184 (|>->| g_s169_171 g_s128_130)) (mem g_s183_185 g_s92_93) (=> (not (= g_s139_141 e0)) (mem g_s183_185 g_s128_130)) (mem g_s184_186 (|>->| g_s175_177 g_s128_130)) (= (binary_inter (ran g_s181_183) (ran g_s182_184)) empty) (= (binary_inter (ran g_s181_183) (ran g_s184_186)) empty) (= (binary_inter (ran g_s184_186) (ran g_s182_184)) empty) (=> (not (= g_s139_141 e0)) (not (mem g_s183_185 (ran g_s181_183)))) (=> (not (= g_s139_141 e0)) (not (mem g_s183_185 (ran g_s182_184)))) (=> (not (= g_s139_141 e0)) (not (mem g_s183_185 (ran g_s184_186)))) (subset g_s185_187 g_s108_109) (mem g_s186_188 g_s108_109) (not (mem g_s186_188 g_s185_187)) (mem g_s187_189 (|+->| NAT g_s108_109)) (mem g_s187_189 (perm g_s185_187)) (mem (card g_s185_187) NAT) (subset g_s188_190 g_s109_110) (mem g_s189_191 g_s109_110) (not (mem g_s189_191 g_s188_190)) (mem g_s190_192 (|+->| NAT g_s109_110)) (mem g_s190_192 (perm g_s188_190)) (subset g_s191_193 g_s110_111) (mem g_s192_194 g_s110_111) (not (mem g_s192_194 g_s191_193)) (mem g_s193_195 (|+->| NAT g_s110_111)) (mem g_s193_195 (perm g_s191_193)) (subset g_s194_196 g_s111_112) (mem g_s195_197 g_s111_112) (not (mem g_s195_197 g_s194_196)) (mem g_s196_198 (|+->| NAT g_s111_112)) (mem g_s196_198 (perm g_s194_196)) (mem g_s197_199 g_s112_113) (subset g_s198_200 INT) (= g_s198_200 (interval e0 g_s199_201)) (subset g_s200_202 g_s198_200) (subset g_s200_202 NAT) (mem g_s201_203 g_s198_200) (not (mem g_s201_203 g_s200_202)) (= g_s202_204 INT) (subset g_s203_205 NAT) (subset g_s203_205 g_s202_204) (mem g_s204_206 g_s202_204) (not (mem g_s204_206 g_s203_205)) (= g_s205_207 INT) (subset g_s206_208 INT) (subset g_s206_208 g_s205_207) (mem g_s207_209 g_s205_207) (not (mem g_s207_209 g_s206_208))))
(define-fun |def_seext| () Bool (and (= g_s208_210 TRUE) (= g_s209_211 FALSE) (= g_s210_212 e0) (= g_s211_213 e118) (= g_s212_215 e214) (= g_s213_217 e216) (= g_s214_219 e218) (= g_s215_221 e220) (= g_s216_223 e222) (= g_s217_225 e224) (= g_s218_227 e226) (= g_s219_229 e228) (= g_s220_231 e230) (= g_s221_233 e232) (= g_s222_235 e234) (= g_s223_237 e236) (= g_s224_239 e238) (= g_s225_241 e240) (= g_s226_243 e242) (= g_s227_245 e244) (= g_s228_247 e246) (= g_s229_249 e248) (= g_s230_251 e250) (= g_s231_253 e252) (= g_s232_255 e254) (= g_s233_257 e256) (= g_s234_259 e258) (= g_s235_261 e260) (= g_s236_263 e262) (= g_s237_265 e264) (= g_s238_267 e266) (= g_s239_269 e268) (= g_s240_271 e270) (= g_s241_273 e272) (= g_s242_275 e274) (= g_s243_277 e276) (= g_s244_279 e278) (= g_s245_281 e280) (= g_s246_283 e282) (= g_s247_285 e284) (= g_s248_287 e286) (= g_s249_289 e288) (= g_s250_291 e290) (= g_s251_293 e292) (= g_s252_295 e294) (= g_s253_297 e296) (= g_s254_299 e298) (= g_s255_301 e300) (= g_s256_303 e302) (= g_s257_305 e304) (= g_s258_307 e306) (= g_s259_309 e308) (= g_s260_311 e310) (= g_s261_313 e312) (= g_s262_315 e314) (= g_s263_317 e316) (= g_s264_319 e318) (= g_s265_321 e320) (= g_s266_323 e322) (= g_s267_325 e324) (= g_s268_327 e326) (= g_s269_329 e328) (mem g_s270_330 g_s0_1) (mem g_s271_331 g_s0_1) (mem g_s272_332 g_s0_1) (mem g_s273_333 g_s0_1) (mem g_s274_334 g_s0_1) (mem g_s275_335 g_s0_1) (mem g_s276_336 g_s0_1) (mem g_s277_337 g_s0_1) (mem g_s278_338 g_s0_1) (mem g_s279_339 g_s0_1) (mem g_s280_340 g_s0_1) (mem g_s281_341 g_s0_1) (mem g_s282_342 g_s0_1) (mem g_s283_343 g_s0_1) (mem g_s284_344 g_s0_1) (mem g_s285_345 g_s0_1) (mem g_s286_346 g_s0_1) (mem g_s287_347 g_s0_1) (mem g_s288_348 g_s0_1) (mem g_s289_349 g_s0_1) (mem g_s290_350 g_s0_1) (mem g_s291_351 g_s0_1) (mem g_s292_352 g_s0_1) (mem g_s293_353 g_s0_1) (mem g_s294_354 g_s0_1) (mem g_s295_355 g_s0_1) (mem g_s296_356 g_s0_1) (mem g_s297_357 g_s0_1) (mem g_s298_358 g_s0_1) (mem g_s299_359 g_s0_1) (mem g_s300_360 g_s0_1) (mem g_s301_361 g_s0_1) (mem g_s302_362 g_s0_1) (mem g_s303_363 g_s0_1) (mem g_s304_364 g_s0_1) (mem g_s305_365 g_s0_1) (mem g_s306_366 g_s0_1) (mem g_s307_367 g_s0_1) (mem g_s308_368 g_s0_1) (mem g_s309_369 g_s0_1) (mem g_s310_370 g_s0_1) (mem g_s311_371 g_s0_1) (mem g_s312_372 g_s7_8) (mem g_s313_373 g_s7_8) (mem g_s314_374 g_s7_8) (mem g_s315_375 g_s7_8) (mem g_s316_376 g_s7_8) (mem g_s317_377 g_s7_8) (mem g_s318_378 g_s7_8) (mem g_s319_379 g_s7_8) (mem g_s320_380 g_s7_8) (mem g_s321_381 g_s7_8) (mem g_s322_382 g_s7_8) (mem g_s323_383 g_s7_8) (mem g_s324_384 g_s7_8) (mem g_s325_385 g_s7_8) (mem g_s326_386 g_s7_8) (mem g_s327_387 g_s7_8) (mem g_s328_388 g_s7_8) (mem g_s329_389 g_s7_8) (mem g_s330_390 g_s7_8) (mem g_s331_391 g_s7_8) (mem g_s332_392 g_s7_8) (mem g_s333_393 g_s7_8) (mem g_s334_394 g_s7_8) (mem g_s335_395 g_s7_8) (mem g_s336_396 g_s7_8) (mem g_s337_397 g_s7_8) (mem g_s338_398 g_s7_8) (mem g_s339_399 g_s7_8) (mem g_s340_400 g_s7_8) (mem g_s341_401 g_s7_8) (mem g_s342_402 g_s7_8) (mem g_s343_403 g_s7_8) (mem g_s344_404 g_s7_8) (mem g_s345_405 g_s7_8) (mem g_s346_406 g_s7_8) (mem g_s347_407 g_s7_8) (mem g_s348_408 g_s7_8) (mem g_s349_409 g_s7_8) (mem g_s350_410 g_s7_8) (mem g_s351_411 g_s7_8) (mem g_s352_412 g_s7_8) (mem g_s353_413 g_s7_8) (mem g_s354_414 g_s7_8) (mem g_s355_415 g_s7_8) (mem g_s356_416 g_s7_8) (mem g_s357_417 g_s7_8) (mem g_s358_418 g_s7_8) (mem g_s359_419 g_s7_8) (mem g_s360_420 g_s7_8) (mem g_s361_421 g_s7_8) (mem g_s362_422 g_s7_8) (mem g_s363_423 g_s7_8) (mem g_s364_424 g_s7_8) (mem g_s365_425 g_s7_8) (mem g_s366_426 g_s7_8) (mem g_s367_427 g_s7_8) (mem g_s368_428 g_s7_8) (mem g_s369_429 g_s7_8) (mem g_s370_430 g_s7_8) (mem g_s371_431 g_s7_8) (mem g_s372_432 g_s7_8) (mem g_s373_433 g_s7_8) (mem g_s374_434 g_s7_8) (mem g_s375_435 g_s7_8) (mem g_s376_436 g_s7_8) (mem g_s377_437 g_s7_8) (mem g_s378_438 g_s7_8) (mem g_s379_439 g_s7_8) (mem g_s380_440 g_s7_8) (mem g_s381_441 g_s7_8) (mem g_s382_442 g_s7_8) (mem g_s383_443 g_s7_8) (mem g_s384_444 g_s7_8) (mem g_s385_445 g_s7_8) (mem g_s386_446 g_s7_8) (mem g_s387_447 g_s7_8) (mem g_s388_448 g_s7_8) (mem g_s389_449 g_s7_8) (mem g_s390_450 g_s7_8) (mem g_s391_451 g_s7_8) (mem g_s392_452 g_s7_8) (mem g_s393_453 g_s7_8) (mem g_s394_454 g_s7_8) (mem g_s395_455 g_s7_8) (mem g_s396_456 g_s7_8) (mem g_s397_457 g_s7_8) (mem g_s398_458 g_s7_8) (mem g_s399_459 g_s7_8) (mem g_s400_460 g_s7_8) (mem g_s401_461 g_s7_8) (mem g_s402_462 g_s7_8) (mem g_s403_463 g_s7_8) (mem g_s404_464 g_s7_8) (mem g_s405_465 g_s7_8) (mem g_s406_466 g_s7_8) (mem g_s407_467 g_s7_8) (mem g_s408_468 g_s7_8) (mem g_s409_469 g_s7_8) (mem g_s410_470 g_s7_8) (mem g_s411_471 g_s7_8) (mem g_s412_472 g_s7_8) (mem g_s413_473 g_s7_8) (mem g_s414_474 g_s7_8) (mem g_s415_475 g_s7_8) (mem g_s416_476 g_s7_8) (mem g_s417_477 g_s7_8) (mem g_s418_478 g_s7_8) (mem g_s419_479 g_s7_8) (mem g_s420_480 g_s7_8) (mem g_s421_481 g_s7_8) (mem g_s422_482 g_s7_8) (mem g_s423_483 g_s7_8) (mem g_s424_484 g_s7_8) (mem g_s425_485 g_s7_8) (mem g_s426_486 g_s7_8) (mem g_s427_487 g_s7_8) (mem g_s428_488 g_s7_8) (mem g_s429_489 g_s7_8) (mem g_s430_490 g_s7_8) (mem g_s431_491 g_s7_8) (mem g_s432_492 g_s7_8) (mem g_s433_493 g_s7_8) (mem g_s434_494 g_s7_8) (mem g_s435_495 g_s7_8) (mem g_s436_496 g_s7_8) (mem g_s437_497 g_s7_8) (mem g_s438_498 g_s7_8) (mem g_s439_499 g_s7_8) (mem g_s440_500 g_s7_8) (mem g_s441_501 g_s7_8) (mem g_s442_502 g_s7_8) (mem g_s443_503 g_s7_8) (mem g_s444_504 g_s7_8) (mem g_s445_505 g_s7_8) (mem g_s446_506 g_s7_8) (mem g_s447_507 g_s7_8) (mem g_s448_508 g_s7_8) (mem g_s449_509 g_s7_8) (mem g_s450_510 g_s7_8) (mem g_s451_511 g_s7_8) (mem g_s452_512 g_s7_8) (mem g_s453_513 g_s7_8) (mem g_s454_514 g_s7_8) (mem g_s455_515 g_s7_8) (mem g_s456_516 g_s7_8) (mem g_s457_517 g_s7_8) (mem g_s458_518 g_s7_8) (mem g_s459_519 g_s7_8) (mem g_s460_520 g_s7_8) (mem g_s461_521 g_s7_8) (mem g_s462_522 g_s7_8) (mem g_s463_523 g_s7_8) (mem g_s464_524 g_s7_8) (mem g_s465_525 g_s7_8) (mem g_s466_526 g_s7_8) (mem g_s467_527 g_s7_8) (mem g_s468_528 g_s7_8) (mem g_s469_529 g_s7_8) (mem g_s470_530 g_s7_8) (mem g_s471_531 g_s7_8) (mem g_s472_532 g_s7_8) (mem g_s473_533 g_s7_8) (mem g_s474_534 g_s7_8) (mem g_s475_535 g_s7_8) (mem g_s476_536 g_s7_8) (mem g_s477_537 g_s7_8) (mem g_s478_538 g_s7_8) (mem g_s479_539 g_s7_8) (mem g_s480_540 g_s7_8) (mem g_s481_541 g_s7_8) (mem g_s482_542 g_s7_8) (mem g_s483_543 g_s7_8) (mem g_s484_544 g_s7_8) (mem g_s485_545 g_s7_8) (mem g_s486_546 g_s7_8) (mem g_s487_547 g_s7_8) (mem g_s488_548 g_s7_8) (mem g_s489_549 g_s7_8) (mem g_s490_550 g_s7_8) (mem g_s491_551 g_s7_8) (mem g_s492_552 g_s7_8) (mem g_s493_553 g_s7_8) (mem g_s494_554 g_s7_8) (mem g_s495_555 g_s7_8) (mem g_s496_556 g_s7_8) (mem g_s497_557 g_s7_8) (mem g_s498_558 g_s7_8) (mem g_s499_559 g_s7_8) (mem g_s500_560 g_s7_8) (mem g_s501_561 g_s7_8) (mem g_s502_562 g_s7_8) (mem g_s503_563 g_s7_8) (mem g_s504_564 g_s7_8) (mem g_s505_565 g_s7_8) (mem g_s506_566 g_s7_8)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (=> (= g_s507_571 g_s10_11) (and (= (dom g_s508_568) (dom g_s509_567)) (= (dom g_s510_569) (dom g_s509_567)) (= (dom g_s511_570) (dom g_s509_567)))) (mem g_s512_572 g_s93_94) (mem g_s513_573 g_s93_94) (mem g_s507_571 g_s8_9) (mem g_s514_574 g_s198_200) (mem g_s515_575 BOOL) (subset g_s516_576 g_s185_187) (mem g_s509_567 (|+->| g_s185_187 g_s203_205)) (mem g_s508_568 (|+->| g_s185_187 g_s191_193)) (mem g_s510_569 (|+->| g_s185_187 g_s206_208)) (mem g_s511_570 (|+->| g_s185_187 g_s206_208)) (mem g_s517_577 g_s117_119) (mem g_s518_578 g_s117_119) (mem g_s519_579 BOOL)))
(define-fun |def_inv| () Bool (and (= g_s512_572 g_s520$1_580) (= g_s513_573 g_s521$1_581) (= g_s507_571 g_s522$1_582) (= g_s514_574 g_s523$1_583) (= g_s515_575 (bool (= g_s524$1_584 e118))) (= g_s516_576 (binary_inter g_s185_187 (image (inverse g_s525$1_585) (SET e118)))) (= g_s509_567 (range_restriction (domain_restriction g_s185_187 g_s526$1_586) g_s203_205)) (= g_s508_568 (range_restriction (domain_restriction g_s185_187 g_s527$1_587) g_s191_193)) (= g_s510_569 (range_restriction (domain_restriction g_s185_187 g_s528$1_588) g_s206_208)) (= g_s511_570 (range_restriction (domain_restriction g_s185_187 g_s529$1_589) g_s206_208)) (= g_s517_577 g_s530$1_590) (= g_s518_578 g_s531$1_591) (= g_s519_579 g_s532$1_592)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (=> (= g_s522$1_582 g_s10_11) (and (= (dom (range_restriction (domain_restriction g_s185_187 g_s527$1_587) g_s191_193)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$1_586) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 g_s528$1_588) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$1_586) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 g_s529$1_589) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$1_586) g_s203_205))))) (mem g_s520$1_580 g_s93_94) (mem g_s521$1_581 g_s93_94) (mem g_s522$1_582 g_s8_9) (mem g_s523$1_583 g_s198_200) (mem g_s524$1_584 INT) (mem g_s525$1_585 (|-->| g_s108_109 INT)) (mem g_s526$1_586 (|-->| g_s108_109 g_s202_204)) (mem g_s527$1_587 (|-->| g_s108_109 g_s110_111)) (mem g_s528$1_588 (|-->| g_s108_109 g_s205_207)) (mem g_s529$1_589 (|-->| g_s108_109 g_s205_207)) (mem g_s530$1_590 g_s117_119) (mem g_s531$1_591 g_s117_119) (mem g_s532$1_592 BOOL)))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (=> (= g_s9_10 g_s10_11) (and (= (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET g_s192_194))) g_s191_193)) (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s203_205))))))
(define-fun lh_2 () Bool (mem g_s140_142 g_s93_94))
(define-fun lh_3 () Bool (mem g_s9_10 g_s8_9))
(define-fun lh_4 () Bool (mem g_s201_203 g_s198_200))
(define-fun lh_5 () Bool (mem e0 INT))
(define-fun lh_6 () Bool (mem (set_prod g_s108_109 (SET e0)) (|-->| g_s108_109 INT)))
(define-fun lh_7 () Bool (mem (set_prod g_s108_109 (SET e0)) (|-->| g_s108_109 g_s202_204)))
(define-fun lh_8 () Bool (mem (set_prod g_s108_109 (SET g_s192_194)) (|-->| g_s108_109 g_s110_111)))
(define-fun lh_9 () Bool (mem (set_prod g_s108_109 (SET e0)) (|-->| g_s108_109 g_s205_207)))
(define-fun lh_10 () Bool (mem e0 g_s117_119))
(define-fun lh_11 () Bool (mem FALSE BOOL))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s206_208) (|+->| g_s185_187 g_s206_208)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (mem (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET e0))) g_s203_205) (|+->| g_s185_187 g_s203_205)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (= FALSE (bool (= e0 e118))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (= empty (binary_inter g_s185_187 (image (inverse (set_prod g_s108_109 (SET e0))) (SET e118)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (= empty (range_restriction (domain_restriction g_s185_187 (set_prod g_s108_109 (SET g_s192_194))) g_s191_193)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (not (= g_s133_136 g_s135_137)))
(define-fun lh_2 () Bool (mem g_s474_534 g_s7_8))
(define-fun lh_3 () Bool (mem g_s296_356 g_s0_1))
(define-fun lh_4 () Bool (mem g_s275_335 g_s0_1))
(define-fun lh_5 () Bool (=> (= g_s522$2_597 g_s10_11) (and (= (dom (range_restriction (domain_restriction g_s185_187 g_s527$2_594) g_s191_193)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 g_s528$2_595) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))) (= (dom (range_restriction (domain_restriction g_s185_187 g_s529$2_596) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))))))
(define-fun lh_6 () Bool (mem g_s520$2_598 g_s93_94))
(define-fun lh_7 () Bool (mem g_s521$2_599 g_s93_94))
(define-fun lh_8 () Bool (mem g_s522$2_597 g_s8_9))
(define-fun lh_9 () Bool (mem g_s523$2_600 g_s198_200))
(define-fun lh_10 () Bool (mem g_s524$2_601 INT))
(define-fun lh_11 () Bool (mem g_s525$2_602 (|-->| g_s108_109 INT)))
(define-fun lh_12 () Bool (mem g_s526$2_593 (|-->| g_s108_109 g_s202_204)))
(define-fun lh_13 () Bool (mem g_s527$2_594 (|-->| g_s108_109 g_s110_111)))
(define-fun lh_14 () Bool (mem g_s528$2_595 (|-->| g_s108_109 g_s205_207)))
(define-fun lh_15 () Bool (mem g_s529$2_596 (|-->| g_s108_109 g_s205_207)))
(define-fun lh_16 () Bool (mem g_s530$2_603 g_s117_119))
(define-fun lh_17 () Bool (mem g_s531$2_604 g_s117_119))
(define-fun lh_18 () Bool (mem g_s532$2_605 BOOL))
(define-fun lh_19 () Bool (= g_s522$2_597 g_s10_11))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (range_restriction (domain_restriction g_s185_187 g_s527$2_594) g_s191_193) (|+->| g_s185_187 g_s191_193)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (range_restriction (domain_restriction g_s185_187 g_s528$2_595) g_s206_208) (|+->| g_s185_187 g_s206_208)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (range_restriction (domain_restriction g_s185_187 g_s529$2_596) g_s206_208) (|+->| g_s185_187 g_s206_208)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (mem (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205) (|+->| g_s185_187 g_s203_205)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18) (subset (binary_inter g_s185_187 (image (inverse g_s525$2_602) (SET e118))) g_s185_187))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (= (dom (range_restriction (domain_restriction g_s185_187 g_s527$2_594) g_s191_193)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (= (dom (range_restriction (domain_restriction g_s185_187 g_s528$2_595) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11 lh_12 lh_13 lh_14 lh_15 lh_16 lh_17 lh_18 lh_19) (= (dom (range_restriction (domain_restriction g_s185_187 g_s529$2_596) g_s206_208)) (dom (range_restriction (domain_restriction g_s185_187 g_s526$2_593) g_s203_205))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_607 g_s537_606))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 2
(assert (not (=> lh_1 (= g_s520$1_580 g_s512_572))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_607 g_s537_606))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 3
(assert (not (=> lh_1 (= g_s521$1_581 g_s513_573))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_609 g_s537_608))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 4
(assert (not (=> lh_1 (= g_s522$1_582 g_s507_571))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 5
(assert (not (=> lh_1 (= g_s523$1_583 g_s514_574))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_613 g_s537_612))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 6
(assert (not (=> lh_1 (= (bool (= g_s524$1_584 e118)) (bool (= g_s515_575 TRUE))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_613 g_s537_612))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
; PO 1 in group 7
(assert (not (=> (and lh_1 lh_2) (= (bool (= (apply g_s525$1_585 g_s543_614) e118)) (bool (mem g_s543_614 g_s516_576))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s526$1_586 g_s543_614) g_s202_204))
(define-fun lh_4 () Bool (mem g_s543_614 (dom g_s509_567)))
; PO 1 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s526$1_586 g_s543_614) g_s202_204))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s509_567 g_s543_614) g_s202_204))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s526$1_586 g_s543_614) g_s203_205)) (bool (mem g_s543_614 (dom g_s509_567)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 8
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s526$1_586 g_s543_614) (apply g_s509_567 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s526$1_586 g_s543_614) g_s202_204))
; PO 1 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s526$1_586 g_s543_614) g_s202_204))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 9
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s526$1_586 g_s543_614) g_s203_205)) (bool (mem g_s543_614 (dom g_s509_567)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem g_s543_614 (dom g_s509_567)))
; PO 1 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s509_567 g_s543_614) g_s202_204))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 10
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s526$1_586 g_s543_614) (apply g_s509_567 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(assert (= g_s537$1_618 g_s537_617))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s527$1_587 g_s543_614) g_s110_111))
(define-fun lh_4 () Bool (mem g_s543_614 (dom g_s508_568)))
; PO 1 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s527$1_587 g_s543_614) g_s191_193)) (bool (mem g_s543_614 (dom g_s508_568)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 11
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s527$1_587 g_s543_614) (apply g_s508_568 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s527$1_587 g_s543_614) g_s110_111))
; PO 1 in group 12
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s527$1_587 g_s543_614) g_s191_193)) (bool (mem g_s543_614 (dom g_s508_568)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_618 g_s537_617))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem g_s543_614 (dom g_s508_568)))
; PO 1 in group 13
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s527$1_587 g_s543_614) (apply g_s508_568 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s528$1_588 g_s543_614) g_s205_207))
(define-fun lh_4 () Bool (mem g_s543_614 (dom g_s510_569)))
; PO 1 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s528$1_588 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s510_569 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s528$1_588 g_s543_614) g_s206_208)) (bool (mem g_s543_614 (dom g_s510_569)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 14
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s528$1_588 g_s543_614) (apply g_s510_569 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s528$1_588 g_s543_614) g_s205_207))
; PO 1 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s528$1_588 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 15
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s528$1_588 g_s543_614) g_s206_208)) (bool (mem g_s543_614 (dom g_s510_569)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem g_s543_614 (dom g_s510_569)))
; PO 1 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s510_569 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 16
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s528$1_588 g_s543_614) (apply g_s510_569 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 17 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s529$1_589 g_s543_614) g_s205_207))
(define-fun lh_4 () Bool (mem g_s543_614 (dom g_s511_570)))
; PO 1 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s529$1_589 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem (apply g_s511_570 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (mem (apply g_s529$1_589 g_s543_614) g_s206_208)) (bool (mem g_s543_614 (dom g_s511_570)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 17
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (apply g_s529$1_589 g_s543_614) (apply g_s511_570 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 18 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s545$1_616 g_s545_615))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem (apply g_s529$1_589 g_s543_614) g_s205_207))
; PO 1 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2) (mem (apply g_s529$1_589 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 18
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (bool (mem (apply g_s529$1_589 g_s543_614) g_s206_208)) (bool (mem g_s543_614 (dom g_s511_570)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 19 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (mem g_s543_614 g_s108_109))
(define-fun lh_2 () Bool (mem g_s543_614 g_s185_187))
(define-fun lh_3 () Bool (mem g_s543_614 (dom g_s511_570)))
; PO 1 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (mem (apply g_s511_570 g_s543_614) g_s205_207))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 19
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= (apply g_s529$1_589 g_s543_614) (apply g_s511_570 g_s543_614)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 20 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 20
(assert (not (=> lh_1 (= g_s530$1_590 g_s517_577))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 21 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_611 g_s537_610))
(define-fun lh_1 () Bool (= g_s519_579 TRUE))
; PO 1 in group 21
(assert (not (=> lh_1 (= g_s531$1_591 g_s518_578))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 22 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s537$1_613 g_s537_612))
; PO 1 in group 22
(assert (not (= (bool (= g_s532$1_592 TRUE)) (bool (= g_s519_579 TRUE)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 23 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 23
(push 1)
(assert (not (mem g_s525$1_585 (|+->| (dom g_s525$1_585) (ran g_s525$1_585)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 23
(push 1)
(assert (not (mem g_s543_614 (dom g_s525$1_585))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 24 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 24
(push 1)
(assert (not (mem g_s543_614 (dom g_s526$1_586))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 24
(push 1)
(assert (not (mem g_s526$1_586 (|+->| (dom g_s526$1_586) (ran g_s526$1_586)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 25 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 25
(push 1)
(assert (not (mem g_s543_614 (dom g_s526$1_586))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 25
(push 1)
(assert (not (mem g_s526$1_586 (|+->| (dom g_s526$1_586) (ran g_s526$1_586)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 26 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
(assert (mem g_s543_614 (dom g_s509_567)))
; PO 1 in group 26
(push 1)
(assert (not (mem g_s543_614 (dom g_s526$1_586))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 26
(push 1)
(assert (not (mem g_s526$1_586 (|+->| (dom g_s526$1_586) (ran g_s526$1_586)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 27 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 27
(push 1)
(assert (not (mem g_s527$1_587 (|+->| (dom g_s527$1_587) (ran g_s527$1_587)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 27
(push 1)
(assert (not (mem g_s543_614 (dom g_s527$1_587))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 28 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 28
(push 1)
(assert (not (mem g_s527$1_587 (|+->| (dom g_s527$1_587) (ran g_s527$1_587)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 28
(push 1)
(assert (not (mem g_s543_614 (dom g_s527$1_587))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 29 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
(assert (mem g_s543_614 (dom g_s508_568)))
; PO 1 in group 29
(push 1)
(assert (not (mem g_s527$1_587 (|+->| (dom g_s527$1_587) (ran g_s527$1_587)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 29
(push 1)
(assert (not (mem g_s543_614 (dom g_s527$1_587))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 30 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 30
(push 1)
(assert (not (mem g_s543_614 (dom g_s528$1_588))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 30
(push 1)
(assert (not (mem g_s528$1_588 (|+->| (dom g_s528$1_588) (ran g_s528$1_588)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 31 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 31
(push 1)
(assert (not (mem g_s543_614 (dom g_s528$1_588))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 31
(push 1)
(assert (not (mem g_s528$1_588 (|+->| (dom g_s528$1_588) (ran g_s528$1_588)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 32 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
(assert (mem g_s543_614 (dom g_s510_569)))
; PO 1 in group 32
(push 1)
(assert (not (mem g_s543_614 (dom g_s528$1_588))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 32
(push 1)
(assert (not (mem g_s528$1_588 (|+->| (dom g_s528$1_588) (ran g_s528$1_588)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 33 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 33
(push 1)
(assert (not (mem g_s543_614 (dom g_s529$1_589))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 33
(push 1)
(assert (not (mem g_s529$1_589 (|+->| (dom g_s529$1_589) (ran g_s529$1_589)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 34 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
; PO 1 in group 34
(push 1)
(assert (not (mem g_s543_614 (dom g_s529$1_589))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 34
(push 1)
(assert (not (mem g_s529$1_589 (|+->| (dom g_s529$1_589) (ran g_s529$1_589)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 35 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s543_614 g_s108_109))
(assert (mem g_s543_614 g_s185_187))
(assert (mem g_s543_614 (dom g_s511_570)))
; PO 1 in group 35
(push 1)
(assert (not (mem g_s543_614 (dom g_s529$1_589))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 35
(push 1)
(assert (not (mem g_s529$1_589 (|+->| (dom g_s529$1_589) (ran g_s529$1_589)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)