(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e98 () U)
(declare-fun e107 () U)
(declare-fun e109 () U)
(declare-fun e111 () U)
(declare-fun e113 () U)
(declare-fun e115 () U)
(declare-fun e117 () U)
(declare-fun e119 () U)
(declare-fun e121 () U)
(declare-fun e123 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e129 () U)
(declare-fun e131 () U)
(declare-fun e133 () U)
(declare-fun e135 () U)
(declare-fun e137 () U)
(declare-fun e139 () U)
(declare-fun e141 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun e169 () U)
(declare-fun e171 () U)
(declare-fun e173 () U)
(declare-fun e175 () U)
(declare-fun e177 () U)
(declare-fun e179 () U)
(declare-fun e181 () U)
(declare-fun e183 () U)
(declare-fun e185 () U)
(declare-fun e187 () U)
(declare-fun e189 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e213 () U)
(declare-fun e215 () U)
(declare-fun e217 () U)
(declare-fun e219 () U)
(declare-fun e221 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_110 () U)
(declare-fun g_s107_112 () U)
(declare-fun g_s108_114 () U)
(declare-fun g_s109_116 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_118 () U)
(declare-fun g_s111_120 () U)
(declare-fun g_s112_122 () U)
(declare-fun g_s113_124 () U)
(declare-fun g_s114_126 () U)
(declare-fun g_s115_128 () U)
(declare-fun g_s116_130 () U)
(declare-fun g_s117_132 () U)
(declare-fun g_s118_134 () U)
(declare-fun g_s119_136 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_138 () U)
(declare-fun g_s121_140 () U)
(declare-fun g_s122_142 () U)
(declare-fun g_s123_144 () U)
(declare-fun g_s124_146 () U)
(declare-fun g_s125_148 () U)
(declare-fun g_s126_150 () U)
(declare-fun g_s127_152 () U)
(declare-fun g_s128_154 () U)
(declare-fun g_s129_156 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_158 () U)
(declare-fun g_s131_160 () U)
(declare-fun g_s132_162 () U)
(declare-fun g_s133_164 () U)
(declare-fun g_s134_166 () U)
(declare-fun g_s135_168 () U)
(declare-fun g_s136_170 () U)
(declare-fun g_s137_172 () U)
(declare-fun g_s138_174 () U)
(declare-fun g_s139_176 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_178 () U)
(declare-fun g_s141_180 () U)
(declare-fun g_s142_182 () U)
(declare-fun g_s143_184 () U)
(declare-fun g_s144_186 () U)
(declare-fun g_s145_188 () U)
(declare-fun g_s146_190 () U)
(declare-fun g_s147_192 () U)
(declare-fun g_s148_194 () U)
(declare-fun g_s149_196 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_198 () U)
(declare-fun g_s151_200 () U)
(declare-fun g_s152_202 () U)
(declare-fun g_s153_204 () U)
(declare-fun g_s154_206 () U)
(declare-fun g_s155_208 () U)
(declare-fun g_s156_210 () U)
(declare-fun g_s157_212 () U)
(declare-fun g_s158_214 () U)
(declare-fun g_s159_216 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_218 () U)
(declare-fun g_s161_220 () U)
(declare-fun g_s162_222 () U)
(declare-fun g_s163_223 () U)
(declare-fun g_s164_224 () U)
(declare-fun g_s165_225 () U)
(declare-fun g_s166_226 () U)
(declare-fun g_s167_227 () U)
(declare-fun g_s168_228 () U)
(declare-fun g_s169_229 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_230 () U)
(declare-fun g_s171_231 () U)
(declare-fun g_s172_232 () U)
(declare-fun g_s176_233 () U)
(declare-fun g_s179_234 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s181_235 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_100 () U)
(declare-fun g_s99_102 () U)
(declare-fun e99 () U)
(declare-fun e101 () U)
(declare-fun e96 () U)
(declare-fun e95 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5)))))) (= g_s9_10 (SET (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 g_s10_11))))) (= g_s14_15 (SET (mapplet g_s17_18 (mapplet g_s16_17 g_s15_16)))) (= g_s18_19 (SET (mapplet g_s21_22 (mapplet g_s20_21 g_s19_20)))) (= g_s22_23 (SET (mapplet g_s25_26 (mapplet g_s24_25 g_s23_24)))) (= g_s26_27 (SET (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 g_s27_28))))) (= g_s31_32 (SET (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 g_s32_33))))))))) (= g_s40_41 (SET (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 g_s41_42))))) (= g_s45_46 (SET (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47))))))))) (= g_s54_55 (SET (mapplet g_s57_58 (mapplet g_s56_57 g_s55_56)))) (= g_s58_59 (SET (mapplet g_s61_62 (mapplet g_s60_61 g_s59_60)))) (= g_s62_63 (SET (mapplet g_s65_66 (mapplet g_s64_65 g_s63_64)))) (= g_s66_67 (SET (mapplet g_s68_69 g_s67_68))) (= g_s69_70 (SET (mapplet g_s71_72 g_s70_71))) (= g_s72_73 (SET (mapplet g_s75_76 (mapplet g_s74_75 g_s73_74)))) (= g_s76_77 (SET (mapplet g_s78_79 g_s77_78))) (= g_s79_80 (SET (mapplet g_s82_83 (mapplet g_s81_82 g_s80_81)))) (not (= g_s83_84 empty)) (not (= g_s84_85 empty)) (not (= g_s85_86 empty)) (not (= g_s86_87 empty)) (not (= g_s87_88 empty)) (not (= g_s88_89 empty)) (not (= g_s89_90 empty)) (not (= g_s90_91 empty)) (not (= g_s91_92 empty)) (not (= g_s92_93 empty)) (mem g_s93_94 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s93_94 (binary_union e96 e95)) (mem g_s96_97 (|-->| BOOL NAT)) (= g_s96_97 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e98)))) (= g_s97_100 e99) (= g_s99_102 e101)))
(define-fun |def_seext| () Bool (and (= g_s101_103 TRUE) (= g_s102_104 FALSE) (= g_s103_105 e0) (= g_s104_106 e98) (= g_s105_108 e107) (= g_s106_110 e109) (= g_s107_112 e111) (= g_s108_114 e113) (= g_s109_116 e115) (= g_s110_118 e117) (= g_s111_120 e119) (= g_s112_122 e121) (= g_s113_124 e123) (= g_s114_126 e125) (= g_s115_128 e127) (= g_s116_130 e129) (= g_s117_132 e131) (= g_s118_134 e133) (= g_s119_136 e135) (= g_s120_138 e137) (= g_s121_140 e139) (= g_s122_142 e141) (= g_s123_144 e143) (= g_s124_146 e145) (= g_s125_148 e147) (= g_s126_150 e149) (= g_s127_152 e151) (= g_s128_154 e153) (= g_s129_156 e155) (= g_s130_158 e157) (= g_s131_160 e159) (= g_s132_162 e161) (= g_s133_164 e163) (= g_s134_166 e165) (= g_s135_168 e167) (= g_s136_170 e169) (= g_s137_172 e171) (= g_s138_174 e173) (= g_s139_176 e175) (= g_s140_178 e177) (= g_s141_180 e179) (= g_s142_182 e181) (= g_s143_184 e183) (= g_s144_186 e185) (= g_s145_188 e187) (= g_s146_190 e189) (= g_s147_192 e191) (= g_s148_194 e193) (= g_s149_196 e195) (= g_s150_198 e197) (= g_s151_200 e199) (= g_s152_202 e201) (= g_s153_204 e203) (= g_s154_206 e205) (= g_s155_208 e207) (= g_s156_210 e209) (= g_s157_212 e211) (= g_s158_214 e213) (= g_s159_216 e215) (= g_s160_218 e217) (= g_s161_220 e219) (= g_s162_222 e221) (mem g_s163_223 g_s91_92)))
(define-fun |def_lprp| () Bool (and (= g_s164_224 (SET (mapplet g_s167_227 (mapplet g_s166_226 g_s165_225)))) (subset g_s168_228 g_s54_55) (not (mem g_s55_56 g_s168_228)) (= g_s168_228 (SET (mapplet g_s57_58 g_s56_57))) (mem g_s169_229 (|>->>| g_s168_228 g_s168_228)) (= (binary_inter g_s169_229 (id g_s168_228)) empty) (mem g_s170_230 (|>->>| g_s14_15 g_s54_55)) (not (mem (apply g_s170_230 g_s15_16) g_s168_228)) (mem g_s171_231 (|>->>| g_s18_19 g_s54_55)) (mem g_s172_232 (|>->>| g_s54_55 g_s18_19)) (= g_s171_231 (inverse g_s172_232)) (not (mem (apply g_s171_231 g_s19_20) g_s168_228))))
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool  (= g_s164_224 (SET (mapplet g_s167_227 (mapplet g_s166_226 g_s165_225)))))
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_sets|)
(define-fun lh_1 () Bool (subset g_s168_228 g_s54_55))
(define-fun lh_2 () Bool (not (mem g_s55_56 g_s168_228)))
(define-fun lh_3 () Bool (= g_s168_228 (SET (mapplet g_s57_58 g_s56_57))))
(define-fun lh_4 () Bool (mem g_s169_229 (|>->>| g_s168_228 g_s168_228)))
(define-fun lh_5 () Bool (= (binary_inter g_s169_229 (id g_s168_228)) empty))
(define-fun lh_6 () Bool (mem g_s170_230 (|>->>| g_s14_15 g_s54_55)))
(define-fun lh_7 () Bool (not (mem (apply g_s170_230 g_s15_16) g_s168_228)))
(define-fun lh_8 () Bool (mem g_s171_231 (|>->>| g_s18_19 g_s54_55)))
(define-fun lh_9 () Bool (mem g_s172_232 (|>->>| g_s54_55 g_s18_19)))
(define-fun lh_10 () Bool (= g_s171_231 (inverse g_s172_232)))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem g_s15_16 (dom g_s170_230)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem g_s170_230 (|+->| (dom g_s170_230) (ran g_s170_230))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (mem g_s19_20 (dom g_s171_231)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10) (mem g_s171_231 (|+->| (dom g_s171_231) (ran g_s171_231))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s176_233 g_s54_55))
(assert (mem g_s176_233 g_s168_228))
; PO 1 in group 1
(push 1)
(assert (not (mem g_s169_229 (|+->| (dom g_s169_229) (ran g_s169_229)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (mem g_s176_233 (dom g_s169_229))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s179_234 g_s14_15))
; PO 1 in group 2
(push 1)
(assert (not (mem g_s170_230 (|+->| (dom g_s170_230) (ran g_s170_230)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (mem g_s179_234 (dom g_s170_230))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s181_235 g_s18_19))
; PO 1 in group 3
(push 1)
(assert (not (mem g_s171_231 (|+->| (dom g_s171_231) (ran g_s171_231)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (mem g_s181_235 (dom g_s171_231))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(assert (mem g_s176_233 g_s54_55))
; PO 1 in group 4
(push 1)
(assert (not (mem g_s172_232 (|+->| (dom g_s172_232) (ran g_s172_232)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (mem g_s176_233 (dom g_s172_232))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)