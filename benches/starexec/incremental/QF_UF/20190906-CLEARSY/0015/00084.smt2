(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s48$1_59 () U)
(declare-fun g_s48$2_71 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s49$1_61 () U)
(declare-fun g_s49$2_74 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s50$1_62 () U)
(declare-fun g_s50$2_75 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s51$1_63 () U)
(declare-fun g_s51$2_76 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s52$1_64 () U)
(declare-fun g_s52$2_77 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s53$1_65 () U)
(declare-fun g_s53$2_78 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s54$1_66 () U)
(declare-fun g_s54$2_79 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s55$1_67 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s56$1_68 () U)
(declare-fun g_s56$2_80 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s57$1_60 () U)
(declare-fun g_s57$2_72 () U)
(declare-fun g_s58$1_70 () U)
(declare-fun g_s58$2_73 () U)
(declare-fun g_s59_69 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (= g_s6_7 (SET (mapplet g_s9_10 (mapplet g_s8_9 g_s7_8)))) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (subset g_s12_13 g_s0_1) (mem g_s13_14 g_s0_1) (not (mem g_s13_14 g_s12_13)) (mem g_s14_15 (|+->| NAT g_s0_1)) (mem g_s14_15 (perm g_s12_13)) (subset g_s15_16 g_s1_2) (mem g_s16_17 g_s1_2) (not (mem g_s16_17 g_s15_16)) (mem g_s17_18 (|+->| NAT g_s1_2)) (mem g_s17_18 (perm g_s15_16)) (subset g_s18_19 g_s2_3) (mem g_s19_20 g_s2_3) (not (mem g_s19_20 g_s18_19)) (mem g_s20_21 (|+->| NAT g_s2_3)) (mem g_s20_21 (perm g_s18_19)) (subset g_s21_22 g_s2_3) (subset g_s22_23 g_s21_22) (subset g_s22_23 g_s2_3) (subset g_s22_23 g_s18_19) (mem g_s19_20 g_s21_22) (not (mem g_s19_20 g_s22_23)) (mem g_s23_24 (|+->| NAT g_s21_22)) (mem g_s23_24 (perm g_s22_23)) (subset g_s24_25 g_s3_4) (mem g_s25_26 g_s3_4) (not (mem g_s25_26 g_s24_25)) (mem g_s26_27 (|+->| NAT g_s3_4)) (mem g_s26_27 (perm g_s24_25)) (subset g_s27_28 g_s4_5) (mem g_s28_29 g_s4_5) (not (mem g_s28_29 g_s27_28)) (mem g_s29_30 (|+->| NAT g_s4_5)) (mem g_s29_30 (perm g_s27_28)) (subset g_s30_31 g_s5_6) (mem g_s31_32 g_s5_6) (not (mem g_s31_32 g_s30_31)) (mem g_s32_33 (|+->| NAT g_s5_6)) (mem g_s32_33 (perm g_s30_31)) (subset g_s33_34 g_s10_11) (mem g_s34_35 g_s10_11) (not (mem g_s34_35 g_s33_34)) (mem g_s35_36 (|+->| NAT g_s10_11)) (mem g_s35_36 (perm g_s33_34)) (subset g_s36_37 g_s11_12) (mem g_s37_38 g_s11_12) (not (mem g_s37_38 g_s36_37)) (mem g_s38_39 (|+->| NAT g_s11_12)) (mem g_s38_39 (perm g_s36_37)) (mem g_s39_40 BOOL) (mem g_s40_41 BOOL) (mem g_s41_42 BOOL) (mem g_s42_43 BOOL) (mem g_s43_44 BOOL) (mem g_s44_45 BOOL) (mem g_s45_46 BOOL) (mem g_s46_47 BOOL) (mem g_s47_48 BOOL)))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool true)
(define-fun |def_abs| () Bool (and (subset g_s48_49 g_s18_19) (subset g_s49_50 g_s15_16) (subset g_s50_51 g_s27_28) (subset g_s51_52 g_s33_34) (subset g_s52_53 g_s33_34) (subset g_s53_54 g_s36_37) (subset g_s54_55 g_s33_34) (subset g_s55_56 g_s12_13) (subset g_s56_57 g_s33_34) (subset g_s57_58 g_s12_13)))
(define-fun |def_inv| () Bool (and (= g_s48_49 g_s48$1_59) (= g_s57_58 g_s57$1_60) (= g_s49_50 g_s49$1_61) (= g_s50_51 g_s50$1_62) (= g_s51_52 g_s51$1_63) (= g_s52_53 g_s52$1_64) (= g_s53_54 g_s53$1_65) (= g_s54_55 g_s54$1_66) (= g_s55_56 g_s55$1_67) (= g_s56_57 g_s56$1_68)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool true)
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool (and (subset g_s48$1_59 g_s18_19) (subset g_s57$1_60 g_s12_13) (subset g_s58$1_70 g_s59_69) (subset g_s49$1_61 g_s15_16) (subset g_s55$1_67 g_s12_13) (subset g_s56$1_68 g_s33_34) (subset g_s50$1_62 g_s27_28) (subset g_s51$1_63 g_s33_34) (subset g_s52$1_64 g_s33_34) (subset g_s53$1_65 g_s36_37) (subset g_s54$1_66 g_s33_34)))
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (subset g_s48$2_71 g_s18_19))
(define-fun lh_2 () Bool (subset g_s57$2_72 g_s12_13))
(define-fun lh_3 () Bool (subset g_s58$2_73 g_s59_69))
(define-fun lh_4 () Bool (mem g_s49$2_74 (POW g_s15_16)))
(define-fun lh_5 () Bool (subset g_s50$2_75 g_s27_28))
(define-fun lh_6 () Bool (subset g_s51$2_76 g_s33_34))
(define-fun lh_7 () Bool (subset g_s52$2_77 g_s33_34))
(define-fun lh_8 () Bool (subset g_s53$2_78 g_s36_37))
(define-fun lh_9 () Bool (subset g_s54$2_79 g_s33_34))
(define-fun lh_10 () Bool (= g_s45_46 TRUE))
(define-fun lh_11 () Bool (subset g_s56$2_80 g_s33_34))
; PO 1 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (subset g_s49$2_74 g_s15_16))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6 lh_7 lh_8 lh_9 lh_10 lh_11) (subset g_s12_13 g_s12_13))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)