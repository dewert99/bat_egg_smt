(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e17 () U)
(declare-fun e121 () U)
(declare-fun e123 () U)
(declare-fun e125 () U)
(declare-fun e127 () U)
(declare-fun e129 () U)
(declare-fun e131 () U)
(declare-fun e133 () U)
(declare-fun e135 () U)
(declare-fun e137 () U)
(declare-fun e139 () U)
(declare-fun e141 () U)
(declare-fun e143 () U)
(declare-fun e145 () U)
(declare-fun e147 () U)
(declare-fun e149 () U)
(declare-fun e151 () U)
(declare-fun e153 () U)
(declare-fun e155 () U)
(declare-fun e157 () U)
(declare-fun e159 () U)
(declare-fun e161 () U)
(declare-fun e163 () U)
(declare-fun e165 () U)
(declare-fun e167 () U)
(declare-fun e169 () U)
(declare-fun e171 () U)
(declare-fun e173 () U)
(declare-fun e175 () U)
(declare-fun e177 () U)
(declare-fun e179 () U)
(declare-fun e181 () U)
(declare-fun e183 () U)
(declare-fun e185 () U)
(declare-fun e187 () U)
(declare-fun e189 () U)
(declare-fun e191 () U)
(declare-fun e193 () U)
(declare-fun e195 () U)
(declare-fun e197 () U)
(declare-fun e199 () U)
(declare-fun e201 () U)
(declare-fun e203 () U)
(declare-fun e205 () U)
(declare-fun e207 () U)
(declare-fun e209 () U)
(declare-fun e211 () U)
(declare-fun e213 () U)
(declare-fun e215 () U)
(declare-fun e52 () U)
(declare-fun e218 () U)
(declare-fun e220 () U)
(declare-fun e222 () U)
(declare-fun e224 () U)
(declare-fun e226 () U)
(declare-fun e228 () U)
(declare-fun e230 () U)
(declare-fun e232 () U)
(declare-fun e234 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s100_103 () U)
(declare-fun g_s101_104 () U)
(declare-fun g_s102_105 () U)
(declare-fun g_s103_106 () U)
(declare-fun g_s104_107 () U)
(declare-fun g_s105_108 () U)
(declare-fun g_s106_109 () U)
(declare-fun g_s107_110 () U)
(declare-fun g_s108_111 () U)
(declare-fun g_s109_112 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_113 () U)
(declare-fun g_s111_114 () U)
(declare-fun g_s112_115 () U)
(declare-fun g_s113_116 () U)
(declare-fun g_s114_117 () U)
(declare-fun g_s115_118 () U)
(declare-fun g_s116_119 () U)
(declare-fun g_s117_120 () U)
(declare-fun g_s118_122 () U)
(declare-fun g_s119_124 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_126 () U)
(declare-fun g_s121_128 () U)
(declare-fun g_s122_130 () U)
(declare-fun g_s123_132 () U)
(declare-fun g_s124_134 () U)
(declare-fun g_s125_136 () U)
(declare-fun g_s126_138 () U)
(declare-fun g_s127_140 () U)
(declare-fun g_s128_142 () U)
(declare-fun g_s129_144 () U)
(declare-fun g_s130_146 () U)
(declare-fun g_s131_148 () U)
(declare-fun g_s132_150 () U)
(declare-fun g_s133_152 () U)
(declare-fun g_s134_154 () U)
(declare-fun g_s135_156 () U)
(declare-fun g_s136_158 () U)
(declare-fun g_s137_160 () U)
(declare-fun g_s138_162 () U)
(declare-fun g_s139_164 () U)
(declare-fun g_s140_166 () U)
(declare-fun g_s141_168 () U)
(declare-fun g_s142_170 () U)
(declare-fun g_s143_172 () U)
(declare-fun g_s144_174 () U)
(declare-fun g_s145_176 () U)
(declare-fun g_s146_178 () U)
(declare-fun g_s147_180 () U)
(declare-fun g_s148_182 () U)
(declare-fun g_s149_184 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_186 () U)
(declare-fun g_s151_188 () U)
(declare-fun g_s152_190 () U)
(declare-fun g_s153_192 () U)
(declare-fun g_s154_194 () U)
(declare-fun g_s155_196 () U)
(declare-fun g_s156_198 () U)
(declare-fun g_s157_200 () U)
(declare-fun g_s158_202 () U)
(declare-fun g_s159_204 () U)
(declare-fun g_s16_19 () U)
(declare-fun g_s160_206 () U)
(declare-fun g_s161_208 () U)
(declare-fun g_s162_210 () U)
(declare-fun g_s163_212 () U)
(declare-fun g_s164_214 () U)
(declare-fun g_s165_216 () U)
(declare-fun g_s166_217 () U)
(declare-fun g_s167_219 () U)
(declare-fun g_s168_221 () U)
(declare-fun g_s169_223 () U)
(declare-fun g_s170_225 () U)
(declare-fun g_s171_227 () U)
(declare-fun g_s172_229 () U)
(declare-fun g_s173_231 () U)
(declare-fun g_s174_233 () U)
(declare-fun g_s175_235 () U)
(declare-fun g_s176_236 () U)
(declare-fun g_s177_237 () U)
(declare-fun g_s178_238 () U)
(declare-fun g_s179_239 () U)
(declare-fun g_s18_21 () U)
(declare-fun g_s180_240 () U)
(declare-fun g_s181_241 () U)
(declare-fun g_s182_242 () U)
(declare-fun g_s183_243 () U)
(declare-fun g_s184_244 () U)
(declare-fun g_s185_245 () U)
(declare-fun g_s186_246 () U)
(declare-fun g_s187_247 () U)
(declare-fun g_s188_248 () U)
(declare-fun g_s189_249 () U)
(declare-fun g_s190_250 () U)
(declare-fun g_s191_251 () U)
(declare-fun g_s192_252 () U)
(declare-fun g_s193_253 () U)
(declare-fun g_s194_254 () U)
(declare-fun g_s195_255 () U)
(declare-fun g_s196_256 () U)
(declare-fun g_s197_257 () U)
(declare-fun g_s198_258 () U)
(declare-fun g_s199_259 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s203_260 () U)
(declare-fun g_s203_262 () U)
(declare-fun g_s203$1_261 () U)
(declare-fun g_s203$1_263 () U)
(declare-fun g_s206_264 () U)
(declare-fun g_s208_265 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s210_266 () U)
(declare-fun g_s211$1_267 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_42 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_44 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_46 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_49 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_54 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_55 () U)
(declare-fun g_s53_56 () U)
(declare-fun g_s54_57 () U)
(declare-fun g_s55_58 () U)
(declare-fun g_s56_59 () U)
(declare-fun g_s57_60 () U)
(declare-fun g_s58_61 () U)
(declare-fun g_s59_62 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_63 () U)
(declare-fun g_s61_64 () U)
(declare-fun g_s62_65 () U)
(declare-fun g_s63_66 () U)
(declare-fun g_s64_67 () U)
(declare-fun g_s65_68 () U)
(declare-fun g_s66_69 () U)
(declare-fun g_s67_70 () U)
(declare-fun g_s68_71 () U)
(declare-fun g_s69_72 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_73 () U)
(declare-fun g_s71_74 () U)
(declare-fun g_s72_75 () U)
(declare-fun g_s73_76 () U)
(declare-fun g_s74_77 () U)
(declare-fun g_s75_78 () U)
(declare-fun g_s76_79 () U)
(declare-fun g_s77_80 () U)
(declare-fun g_s78_81 () U)
(declare-fun g_s79_82 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_83 () U)
(declare-fun g_s81_84 () U)
(declare-fun g_s82_85 () U)
(declare-fun g_s83_86 () U)
(declare-fun g_s84_87 () U)
(declare-fun g_s85_88 () U)
(declare-fun g_s86_89 () U)
(declare-fun g_s87_90 () U)
(declare-fun g_s88_91 () U)
(declare-fun g_s89_92 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_93 () U)
(declare-fun g_s91_94 () U)
(declare-fun g_s92_95 () U)
(declare-fun g_s93_96 () U)
(declare-fun g_s94_97 () U)
(declare-fun g_s95_98 () U)
(declare-fun g_s96_99 () U)
(declare-fun g_s97_100 () U)
(declare-fun g_s98_101 () U)
(declare-fun g_s99_102 () U)
(declare-fun e18 () U)
(declare-fun e20 () U)
(declare-fun e15 () U)
(declare-fun e14 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (not (= g_s0_1 empty)) (not (= g_s1_2 empty)) (not (= g_s2_3 empty)) (not (= g_s3_4 empty)) (not (= g_s4_5 empty)) (not (= g_s5_6 empty)) (not (= g_s6_7 empty)) (not (= g_s7_8 empty)) (not (= g_s8_9 empty)) (not (= g_s9_10 empty)) (not (= g_s10_11 empty)) (not (= g_s11_12 empty)) (mem g_s12_13 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s12_13 (binary_union e15 e14)) (mem g_s15_16 (|-->| BOOL NAT)) (= g_s15_16 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e17)))) (= g_s16_19 e18) (= g_s18_21 e20) (= g_s20_22 INT) (= g_s21_23 NAT) (= g_s22_24 NAT1) (subset g_s22_24 g_s21_23) (subset g_s21_23 g_s20_22) (mem g_s23_25 g_s20_22) (mem g_s23_25 g_s21_23) (not (mem g_s23_25 g_s22_24)) (mem g_s24_26 g_s20_22) (not (mem g_s24_26 g_s21_23)) (= g_s25_27 INT) (subset g_s26_28 g_s10_11) (mem g_s27_29 g_s10_11) (mem g_s27_29 g_s26_28) (mem g_s28_30 g_s10_11) (not (mem g_s28_30 g_s26_28)) (mem g_s29_31 (|+->| NAT g_s10_11)) (mem g_s29_31 (perm g_s26_28)) (= (card g_s26_28) g_s30_32) (subset g_s31_33 g_s11_12) (mem g_s32_34 g_s11_12) (mem g_s32_34 g_s31_33) (mem g_s33_35 g_s11_12) (not (mem g_s33_35 g_s31_33)) (mem g_s34_36 (|+->| NAT g_s11_12)) (mem g_s34_36 (perm g_s31_33)) (= (card g_s31_33) g_s35_37) (|<i| g_s36_38 MaxInt) (|<i| g_s37_39 MaxInt) (|<i| g_s38_40 MaxInt) (|<=i| g_s39_42 g_s40_41) (|<=i| g_s41_44 g_s42_43) (|<=i| g_s43_46 g_s44_45) (|<=i| g_s45_47 g_s44_45) (|<i| g_s46_49 g_s47_48) (not (mem g_s48_50 (interval g_s46_49 g_s47_48))) (= g_s49_51 MaxInt) (= g_s50_54 (|*i| g_s51_53 e52)) (mem g_s36_38 NAT) (mem g_s37_39 NAT) (mem g_s38_40 NAT) (mem g_s52_55 NAT) (mem g_s53_56 NAT) (mem g_s54_57 NAT) (mem g_s55_58 NAT) (mem g_s56_59 NAT) (mem g_s57_60 NAT) (mem g_s58_61 NAT) (mem g_s59_62 NAT) (mem g_s60_63 NAT) (mem g_s61_64 NAT) (mem g_s62_65 NAT) (mem g_s42_43 NAT) (mem g_s63_66 NAT) (mem g_s64_67 NAT) (mem g_s65_68 NAT) (mem g_s66_69 NAT) (mem g_s67_70 NAT) (mem g_s68_71 NAT) (mem g_s69_72 NAT) (mem g_s70_73 NAT1) (mem g_s71_74 NAT) (mem g_s41_44 NAT) (mem g_s72_75 NAT) (mem g_s73_76 NAT) (mem g_s74_77 NAT) (mem g_s75_78 NAT) (mem g_s76_79 NAT) (mem g_s77_80 NAT) (mem g_s78_81 NAT) (mem g_s79_82 NAT) (mem g_s80_83 NAT) (mem g_s81_84 NAT) (mem g_s82_85 NAT) (mem g_s83_86 NAT) (mem g_s40_41 NAT) (mem g_s39_42 NAT) (mem g_s84_87 NAT) (mem g_s85_88 NAT) (mem g_s86_89 NAT) (mem g_s87_90 NAT) (mem g_s88_91 NAT) (mem g_s89_92 NAT) (mem g_s90_93 NAT) (mem g_s91_94 NAT) (mem g_s92_95 NAT) (mem g_s93_96 NAT) (mem g_s94_97 NAT) (mem g_s95_98 NAT) (mem g_s96_99 NAT) (mem g_s97_100 NAT) (mem g_s98_101 NAT) (mem g_s99_102 NAT) (mem g_s100_103 NAT1) (mem g_s101_104 NAT) (mem g_s102_105 NAT) (mem g_s103_106 NAT) (mem g_s104_107 NAT) (mem g_s105_108 NAT) (mem g_s44_45 NAT) (mem g_s43_46 NAT) (mem g_s45_47 NAT) (mem g_s50_54 NAT) (mem g_s51_53 NAT) (mem g_s106_109 NAT) (mem g_s49_51 NAT) (mem g_s107_110 NAT) (mem g_s108_111 NAT) (mem g_s46_49 INT) (mem g_s47_48 NAT) (mem g_s48_50 INT) (mem g_s109_112 INT) (mem g_s110_113 INT) (mem g_s111_114 INT) (mem g_s112_115 INT) (mem g_s113_116 INT)))
(define-fun |def_seext| () Bool (and (= g_s114_117 TRUE) (= g_s115_118 FALSE) (= g_s116_119 e0) (= g_s117_120 e17) (= g_s118_122 e121) (= g_s119_124 e123) (= g_s120_126 e125) (= g_s121_128 e127) (= g_s122_130 e129) (= g_s123_132 e131) (= g_s124_134 e133) (= g_s125_136 e135) (= g_s126_138 e137) (= g_s127_140 e139) (= g_s128_142 e141) (= g_s129_144 e143) (= g_s130_146 e145) (= g_s131_148 e147) (= g_s132_150 e149) (= g_s133_152 e151) (= g_s134_154 e153) (= g_s135_156 e155) (= g_s136_158 e157) (= g_s137_160 e159) (= g_s138_162 e161) (= g_s139_164 e163) (= g_s140_166 e165) (= g_s141_168 e167) (= g_s142_170 e169) (= g_s143_172 e171) (= g_s144_174 e173) (= g_s145_176 e175) (= g_s146_178 e177) (= g_s147_180 e179) (= g_s148_182 e181) (= g_s149_184 e183) (= g_s150_186 e185) (= g_s151_188 e187) (= g_s152_190 e189) (= g_s153_192 e191) (= g_s154_194 e193) (= g_s155_196 e195) (= g_s156_198 e197) (= g_s157_200 e199) (= g_s158_202 e201) (= g_s159_204 e203) (= g_s160_206 e205) (= g_s161_208 e207) (= g_s162_210 e209) (= g_s163_212 e211) (= g_s164_214 e213) (= g_s165_216 e215) (= g_s166_217 e52) (= g_s167_219 e218) (= g_s168_221 e220) (= g_s169_223 e222) (= g_s170_225 e224) (= g_s171_227 e226) (= g_s172_229 e228) (= g_s173_231 e230) (= g_s174_233 e232) (= g_s175_235 e234) (mem g_s176_236 g_s8_9)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s177_237 (SET (mapplet g_s183_243 (mapplet g_s182_242 (mapplet g_s181_241 (mapplet g_s180_240 (mapplet g_s179_239 g_s178_238))))))) (= g_s184_244 (SET (mapplet g_s187_247 (mapplet g_s186_246 g_s185_245)))) (= g_s188_248 (SET (mapplet g_s195_255 (mapplet g_s194_254 (mapplet g_s193_253 (mapplet g_s192_252 (mapplet g_s191_251 (mapplet g_s190_250 g_s189_249)))))))) (subset g_s196_256 g_s20_22) (subset g_s197_257 g_s196_256) (= g_s197_257 g_s22_24) (mem g_s198_258 g_s196_256) (not (mem g_s198_258 g_s197_257)) (mem g_s199_259 (|+->| NAT g_s196_256)) (mem g_s199_259 (perm g_s197_257))))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s197_257 (interval e17 g_s49_51)) (= g_s199_259 (id g_s197_257)) (= g_s198_258 e0) (= g_s196_256 (interval e0 g_s49_51))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (not (mem e0 g_s22_24))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (and (|>=i| e0 e0) (|<=i| e0 g_s49_51))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (mem (id g_s197_257) (perm g_s22_24))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem (id g_s197_257) (|+->| NAT (interval e0 g_s49_51)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (subset g_s22_24 (interval e0 g_s49_51))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (subset (interval e0 g_s49_51) g_s20_22)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (= g_s22_24 (interval e17 g_s49_51))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (= (id g_s197_257) (id g_s22_24))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s203$1_261 g_s203_260))
; PO 1 in group 1
(push 1)
(assert (not (mem (card g_s197_257) INT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (= g_s49_51 (card g_s197_257))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s203$1_263 g_s203_262))
(define-fun lh_1 () Bool (mem g_s206_264 g_s196_256))
(define-fun lh_2 () Bool (mem g_s206_264 INTEGER))
(define-fun lh_3 () Bool (mem g_s117_120 INTEGER))
(define-fun lh_4 () Bool (mem g_s49_51 INTEGER))
; PO 1 in group 2
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (= (bool (and (|>=i| g_s206_264 g_s117_120) (|<=i| g_s206_264 g_s49_51))) (bool (mem g_s206_264 g_s197_257))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s203$1_261 g_s203_260))
(define-fun lh_1 () Bool (mem g_s208_265 NATURAL))
(define-fun lh_2 () Bool (mem g_s208_265 (dom g_s199_259)))
; PO 1 in group 3
(assert (not (=> (and lh_1 lh_2) (= g_s208_265 (apply g_s199_259 g_s208_265)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s203$1_261 g_s203_260))
(define-fun lh_1 () Bool (mem g_s210_266 g_s0_1))
(define-fun lh_2 () Bool (mem g_s211$1_267 INTEGER))
(define-fun lh_3 () Bool (mem g_s117_120 INTEGER))
(define-fun lh_4 () Bool (mem g_s49_51 INTEGER))
(define-fun lh_5 () Bool (not (= (bool (and (|>=i| g_s211$1_267 g_s117_120) (|<=i| g_s211$1_267 g_s49_51))) FALSE)))
; PO 1 in group 4
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5) (mem g_s211$1_267 (binary_inter g_s196_256 g_s197_257)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)