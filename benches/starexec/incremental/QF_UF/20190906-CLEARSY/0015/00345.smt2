(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e98 () U)
(declare-fun e112 () U)
(declare-fun e114 () U)
(declare-fun e116 () U)
(declare-fun e118 () U)
(declare-fun e120 () U)
(declare-fun e122 () U)
(declare-fun e124 () U)
(declare-fun e126 () U)
(declare-fun e128 () U)
(declare-fun e130 () U)
(declare-fun e132 () U)
(declare-fun e134 () U)
(declare-fun e136 () U)
(declare-fun e138 () U)
(declare-fun e140 () U)
(declare-fun e142 () U)
(declare-fun e144 () U)
(declare-fun e146 () U)
(declare-fun e148 () U)
(declare-fun e150 () U)
(declare-fun e152 () U)
(declare-fun e154 () U)
(declare-fun e156 () U)
(declare-fun e158 () U)
(declare-fun e160 () U)
(declare-fun e162 () U)
(declare-fun e164 () U)
(declare-fun e166 () U)
(declare-fun e168 () U)
(declare-fun e170 () U)
(declare-fun e172 () U)
(declare-fun e174 () U)
(declare-fun e176 () U)
(declare-fun e178 () U)
(declare-fun e180 () U)
(declare-fun e182 () U)
(declare-fun e184 () U)
(declare-fun e186 () U)
(declare-fun e188 () U)
(declare-fun e190 () U)
(declare-fun e192 () U)
(declare-fun e194 () U)
(declare-fun e196 () U)
(declare-fun e198 () U)
(declare-fun e200 () U)
(declare-fun e202 () U)
(declare-fun e204 () U)
(declare-fun e206 () U)
(declare-fun e208 () U)
(declare-fun e210 () U)
(declare-fun e212 () U)
(declare-fun e214 () U)
(declare-fun e216 () U)
(declare-fun e218 () U)
(declare-fun e220 () U)
(declare-fun e222 () U)
(declare-fun e224 () U)
(declare-fun e226 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s101_103 () U)
(declare-fun g_s102_104 () U)
(declare-fun g_s103_105 () U)
(declare-fun g_s104_106 () U)
(declare-fun g_s105_107 () U)
(declare-fun g_s106_108 () U)
(declare-fun g_s107_109 () U)
(declare-fun g_s108_110 () U)
(declare-fun g_s109_111 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s110_113 () U)
(declare-fun g_s111_115 () U)
(declare-fun g_s112_117 () U)
(declare-fun g_s113_119 () U)
(declare-fun g_s114_121 () U)
(declare-fun g_s115_123 () U)
(declare-fun g_s116_125 () U)
(declare-fun g_s117_127 () U)
(declare-fun g_s118_129 () U)
(declare-fun g_s119_131 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s120_133 () U)
(declare-fun g_s121_135 () U)
(declare-fun g_s122_137 () U)
(declare-fun g_s123_139 () U)
(declare-fun g_s124_141 () U)
(declare-fun g_s125_143 () U)
(declare-fun g_s126_145 () U)
(declare-fun g_s127_147 () U)
(declare-fun g_s128_149 () U)
(declare-fun g_s129_151 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s130_153 () U)
(declare-fun g_s131_155 () U)
(declare-fun g_s132_157 () U)
(declare-fun g_s133_159 () U)
(declare-fun g_s134_161 () U)
(declare-fun g_s135_163 () U)
(declare-fun g_s136_165 () U)
(declare-fun g_s137_167 () U)
(declare-fun g_s138_169 () U)
(declare-fun g_s139_171 () U)
(declare-fun g_s14_15 () U)
(declare-fun g_s140_173 () U)
(declare-fun g_s141_175 () U)
(declare-fun g_s142_177 () U)
(declare-fun g_s143_179 () U)
(declare-fun g_s144_181 () U)
(declare-fun g_s145_183 () U)
(declare-fun g_s146_185 () U)
(declare-fun g_s147_187 () U)
(declare-fun g_s148_189 () U)
(declare-fun g_s149_191 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s150_193 () U)
(declare-fun g_s151_195 () U)
(declare-fun g_s152_197 () U)
(declare-fun g_s153_199 () U)
(declare-fun g_s154_201 () U)
(declare-fun g_s155_203 () U)
(declare-fun g_s156_205 () U)
(declare-fun g_s157_207 () U)
(declare-fun g_s158_209 () U)
(declare-fun g_s159_211 () U)
(declare-fun g_s16_17 () U)
(declare-fun g_s160_213 () U)
(declare-fun g_s161_215 () U)
(declare-fun g_s162_217 () U)
(declare-fun g_s163_219 () U)
(declare-fun g_s164_221 () U)
(declare-fun g_s165_223 () U)
(declare-fun g_s166_225 () U)
(declare-fun g_s167_227 () U)
(declare-fun g_s168_228 () U)
(declare-fun g_s169_229 () U)
(declare-fun g_s17_18 () U)
(declare-fun g_s170_230 () U)
(declare-fun g_s171_231 () U)
(declare-fun g_s172_232 () U)
(declare-fun g_s173_233 () U)
(declare-fun g_s174_234 () U)
(declare-fun g_s175_235 () U)
(declare-fun g_s176_236 () U)
(declare-fun g_s177_237 () U)
(declare-fun g_s178$1_238 () U)
(declare-fun g_s179$1_239 () U)
(declare-fun g_s18_19 () U)
(declare-fun g_s180$1_240 () U)
(declare-fun g_s181$1_241 () U)
(declare-fun g_s185_242 () U)
(declare-fun g_s185$1_243 () U)
(declare-fun g_s186_244 () U)
(declare-fun g_s186$1_248 () U)
(declare-fun g_s189_245 () U)
(declare-fun g_s189$1_246 () U)
(declare-fun g_s19_20 () U)
(declare-fun g_s190_247 () U)
(declare-fun g_s192_249 () U)
(declare-fun g_s192$1_250 () U)
(declare-fun g_s195_251 () U)
(declare-fun g_s195_253 () U)
(declare-fun g_s195$1_252 () U)
(declare-fun g_s195$1_254 () U)
(declare-fun g_s197_255 () U)
(declare-fun g_s198$1_256 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_21 () U)
(declare-fun g_s21_22 () U)
(declare-fun g_s22_23 () U)
(declare-fun g_s23_24 () U)
(declare-fun g_s24_25 () U)
(declare-fun g_s25_26 () U)
(declare-fun g_s26_27 () U)
(declare-fun g_s27_28 () U)
(declare-fun g_s28_29 () U)
(declare-fun g_s29_30 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_31 () U)
(declare-fun g_s31_32 () U)
(declare-fun g_s32_33 () U)
(declare-fun g_s33_34 () U)
(declare-fun g_s34_35 () U)
(declare-fun g_s35_36 () U)
(declare-fun g_s36_37 () U)
(declare-fun g_s37_38 () U)
(declare-fun g_s38_39 () U)
(declare-fun g_s39_40 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_41 () U)
(declare-fun g_s41_42 () U)
(declare-fun g_s42_43 () U)
(declare-fun g_s43_44 () U)
(declare-fun g_s44_45 () U)
(declare-fun g_s45_46 () U)
(declare-fun g_s46_47 () U)
(declare-fun g_s47_48 () U)
(declare-fun g_s48_49 () U)
(declare-fun g_s49_50 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s50_51 () U)
(declare-fun g_s51_52 () U)
(declare-fun g_s52_53 () U)
(declare-fun g_s53_54 () U)
(declare-fun g_s54_55 () U)
(declare-fun g_s55_56 () U)
(declare-fun g_s56_57 () U)
(declare-fun g_s57_58 () U)
(declare-fun g_s58_59 () U)
(declare-fun g_s59_60 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_61 () U)
(declare-fun g_s61_62 () U)
(declare-fun g_s62_63 () U)
(declare-fun g_s63_64 () U)
(declare-fun g_s64_65 () U)
(declare-fun g_s65_66 () U)
(declare-fun g_s66_67 () U)
(declare-fun g_s67_68 () U)
(declare-fun g_s68_69 () U)
(declare-fun g_s69_70 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_71 () U)
(declare-fun g_s71_72 () U)
(declare-fun g_s72_73 () U)
(declare-fun g_s73_74 () U)
(declare-fun g_s74_75 () U)
(declare-fun g_s75_76 () U)
(declare-fun g_s76_77 () U)
(declare-fun g_s77_78 () U)
(declare-fun g_s78_79 () U)
(declare-fun g_s79_80 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_81 () U)
(declare-fun g_s81_82 () U)
(declare-fun g_s82_83 () U)
(declare-fun g_s83_84 () U)
(declare-fun g_s84_85 () U)
(declare-fun g_s85_86 () U)
(declare-fun g_s86_87 () U)
(declare-fun g_s87_88 () U)
(declare-fun g_s88_89 () U)
(declare-fun g_s89_90 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_91 () U)
(declare-fun g_s91_92 () U)
(declare-fun g_s92_93 () U)
(declare-fun g_s93_94 () U)
(declare-fun g_s96_97 () U)
(declare-fun g_s97_100 () U)
(declare-fun g_s99_102 () U)
(declare-fun e99 () U)
(declare-fun e101 () U)
(declare-fun e96 () U)
(declare-fun e95 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s2_3 g_s1_2))) (= g_s3_4 (SET (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 g_s4_5)))))) (= g_s9_10 (SET (mapplet g_s13_14 (mapplet g_s12_13 (mapplet g_s11_12 g_s10_11))))) (= g_s14_15 (SET (mapplet g_s17_18 (mapplet g_s16_17 g_s15_16)))) (= g_s18_19 (SET (mapplet g_s21_22 (mapplet g_s20_21 g_s19_20)))) (= g_s22_23 (SET (mapplet g_s25_26 (mapplet g_s24_25 g_s23_24)))) (= g_s26_27 (SET (mapplet g_s30_31 (mapplet g_s29_30 (mapplet g_s28_29 g_s27_28))))) (= g_s31_32 (SET (mapplet g_s39_40 (mapplet g_s38_39 (mapplet g_s37_38 (mapplet g_s36_37 (mapplet g_s35_36 (mapplet g_s34_35 (mapplet g_s33_34 g_s32_33))))))))) (= g_s40_41 (SET (mapplet g_s44_45 (mapplet g_s43_44 (mapplet g_s42_43 g_s41_42))))) (= g_s45_46 (SET (mapplet g_s53_54 (mapplet g_s52_53 (mapplet g_s51_52 (mapplet g_s50_51 (mapplet g_s49_50 (mapplet g_s48_49 (mapplet g_s47_48 g_s46_47))))))))) (= g_s54_55 (SET (mapplet g_s57_58 (mapplet g_s56_57 g_s55_56)))) (= g_s58_59 (SET (mapplet g_s61_62 (mapplet g_s60_61 g_s59_60)))) (= g_s62_63 (SET (mapplet g_s65_66 (mapplet g_s64_65 g_s63_64)))) (= g_s66_67 (SET (mapplet g_s68_69 g_s67_68))) (= g_s69_70 (SET (mapplet g_s71_72 g_s70_71))) (= g_s72_73 (SET (mapplet g_s75_76 (mapplet g_s74_75 g_s73_74)))) (= g_s76_77 (SET (mapplet g_s78_79 g_s77_78))) (= g_s79_80 (SET (mapplet g_s82_83 (mapplet g_s81_82 g_s80_81)))) (not (= g_s83_84 empty)) (not (= g_s84_85 empty)) (not (= g_s85_86 empty)) (not (= g_s86_87 empty)) (not (= g_s87_88 empty)) (not (= g_s88_89 empty)) (not (= g_s89_90 empty)) (not (= g_s90_91 empty)) (not (= g_s91_92 empty)) (not (= g_s92_93 empty)) (mem g_s93_94 (|-->| (set_prod INTEGER NATURAL) INTEGER)) (= g_s93_94 (binary_union e96 e95)) (mem g_s96_97 (|-->| BOOL NAT)) (= g_s96_97 (SET (mapplet (mapplet FALSE e0) (mapplet TRUE e98)))) (= g_s97_100 e99) (= g_s99_102 e101) (mem g_s101_103 INT) (mem g_s102_104 INT) (mem g_s103_105 INT) (mem g_s104_106 INT) (mem g_s105_107 INT)))
(define-fun |def_seext| () Bool (and (= g_s106_108 TRUE) (= g_s107_109 FALSE) (= g_s108_110 e0) (= g_s109_111 e98) (= g_s110_113 e112) (= g_s111_115 e114) (= g_s112_117 e116) (= g_s113_119 e118) (= g_s114_121 e120) (= g_s115_123 e122) (= g_s116_125 e124) (= g_s117_127 e126) (= g_s118_129 e128) (= g_s119_131 e130) (= g_s120_133 e132) (= g_s121_135 e134) (= g_s122_137 e136) (= g_s123_139 e138) (= g_s124_141 e140) (= g_s125_143 e142) (= g_s126_145 e144) (= g_s127_147 e146) (= g_s128_149 e148) (= g_s129_151 e150) (= g_s130_153 e152) (= g_s131_155 e154) (= g_s132_157 e156) (= g_s133_159 e158) (= g_s134_161 e160) (= g_s135_163 e162) (= g_s136_165 e164) (= g_s137_167 e166) (= g_s138_169 e168) (= g_s139_171 e170) (= g_s140_173 e172) (= g_s141_175 e174) (= g_s142_177 e176) (= g_s143_179 e178) (= g_s144_181 e180) (= g_s145_183 e182) (= g_s146_185 e184) (= g_s147_187 e186) (= g_s148_189 e188) (= g_s149_191 e190) (= g_s150_193 e192) (= g_s151_195 e194) (= g_s152_197 e196) (= g_s153_199 e198) (= g_s154_201 e200) (= g_s155_203 e202) (= g_s156_205 e204) (= g_s157_207 e206) (= g_s158_209 e208) (= g_s159_211 e210) (= g_s160_213 e212) (= g_s161_215 e214) (= g_s162_217 e216) (= g_s163_219 e218) (= g_s164_221 e220) (= g_s165_223 e222) (= g_s166_225 e224) (= g_s167_227 e226) (mem g_s168_228 g_s91_92)))
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (= g_s169_229 (SET (mapplet g_s172_232 (mapplet g_s171_231 g_s170_230)))) (subset g_s173_233 g_s54_55) (not (mem g_s55_56 g_s173_233)) (= g_s173_233 (SET (mapplet g_s57_58 g_s56_57))) (mem g_s174_234 (|>->>| g_s173_233 g_s173_233)) (= (binary_inter g_s174_234 (id g_s173_233)) empty) (mem g_s175_235 (|>->>| g_s14_15 g_s54_55)) (not (mem (apply g_s175_235 g_s15_16) g_s173_233)) (mem g_s176_236 (|>->>| g_s18_19 g_s54_55)) (mem g_s177_237 (|>->>| g_s54_55 g_s18_19)) (= g_s176_236 (inverse g_s177_237)) (not (mem (apply g_s176_236 g_s19_20) g_s173_233))))
(define-fun |def_abs| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s178$1_238 g_s54_55) (mem g_s179$1_239 g_s54_55) (mem g_s180$1_240 g_s54_55) (mem g_s181$1_241 g_s18_19)))
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s173_233 (SET (mapplet g_s57_58 g_s56_57))) (= g_s174_234 (SET (mapplet (mapplet g_s57_58 g_s56_57) (mapplet g_s56_57 g_s57_58)))) (= g_s175_235 (SET (mapplet (mapplet g_s17_18 g_s57_58) (mapplet (mapplet g_s16_17 g_s56_57) (mapplet g_s15_16 g_s55_56))))) (= g_s176_236 (SET (mapplet (mapplet g_s21_22 g_s57_58) (mapplet (mapplet g_s20_21 g_s56_57) (mapplet g_s19_20 g_s55_56))))) (= g_s177_237 (SET (mapplet (mapplet g_s57_58 g_s21_22) (mapplet (mapplet g_s56_57 g_s20_21) (mapplet g_s55_56 g_s19_20)))))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (not (mem g_s55_56 (SET (mapplet g_s57_58 g_s56_57))))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (not (mem (apply (SET (mapplet (mapplet g_s17_18 g_s57_58) (mapplet (mapplet g_s16_17 g_s56_57) (mapplet g_s15_16 g_s55_56)))) g_s15_16) (SET (mapplet g_s57_58 g_s56_57))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (not (mem (apply (SET (mapplet (mapplet g_s21_22 g_s57_58) (mapplet (mapplet g_s20_21 g_s56_57) (mapplet g_s19_20 g_s55_56)))) g_s19_20) (SET (mapplet g_s57_58 g_s56_57))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s57_58 g_s56_57) (mapplet g_s56_57 g_s57_58))) (|>->>| (SET (mapplet g_s57_58 g_s56_57)) (SET (mapplet g_s57_58 g_s56_57))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s17_18 g_s57_58) (mapplet (mapplet g_s16_17 g_s56_57) (mapplet g_s15_16 g_s55_56)))) (|>->>| g_s14_15 g_s54_55))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s57_58 g_s21_22) (mapplet (mapplet g_s56_57 g_s20_21) (mapplet g_s55_56 g_s19_20)))) (|>->>| g_s54_55 g_s18_19))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (mem (SET (mapplet (mapplet g_s21_22 g_s57_58) (mapplet (mapplet g_s20_21 g_s56_57) (mapplet g_s19_20 g_s55_56)))) (|>->>| g_s18_19 g_s54_55))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (subset (SET (mapplet g_s57_58 g_s56_57)) g_s54_55)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (= (binary_inter (SET (mapplet (mapplet g_s57_58 g_s56_57) (mapplet g_s56_57 g_s57_58))) (id (SET (mapplet g_s57_58 g_s56_57)))) empty)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (= (SET (mapplet (mapplet g_s21_22 g_s57_58) (mapplet (mapplet g_s20_21 g_s56_57) (mapplet g_s19_20 g_s55_56)))) (inverse (SET (mapplet (mapplet g_s57_58 g_s21_22) (mapplet (mapplet g_s56_57 g_s20_21) (mapplet g_s55_56 g_s19_20))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s185$1_243 g_s185_242))
(define-fun lh_1 () Bool (mem g_s186_244 g_s54_55))
(define-fun lh_2 () Bool (mem g_s186_244 g_s173_233))
(define-fun lh_3 () Bool (= g_s186_244 g_s56_57))
(define-fun lh_4 () Bool (= g_s186_244 g_s57_58))
(define-fun lh_5 () Bool (not (= g_s186_244 g_s56_57)))
(define-fun lh_6 () Bool (not (= g_s186_244 g_s57_58)))
; PO 1 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_4) (= g_s56_57 (apply g_s174_234 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3) (= g_s57_58 (apply g_s174_234 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_5 lh_6) (= g_s55_56 (apply g_s174_234 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s189$1_246 g_s189_245))
(define-fun lh_1 () Bool (mem g_s190_247 g_s14_15))
(define-fun lh_2 () Bool (= g_s190_247 g_s16_17))
(define-fun lh_3 () Bool (= g_s190_247 g_s17_18))
(define-fun lh_4 () Bool (not (= g_s190_247 g_s16_17)))
(define-fun lh_5 () Bool (not (= g_s190_247 g_s17_18)))
; PO 1 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s56_57 (apply g_s175_235 g_s190_247)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_3) (= g_s57_58 (apply g_s175_235 g_s190_247)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 2
(push 1)
(assert (not (=> (and lh_1 lh_4 lh_5) (= g_s55_56 (apply g_s175_235 g_s190_247)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s186$1_248 g_s186_244))
(define-fun lh_1 () Bool (mem g_s192_249 g_s18_19))
(define-fun lh_2 () Bool (= g_s192_249 g_s20_21))
(define-fun lh_3 () Bool (= g_s192_249 g_s21_22))
(define-fun lh_4 () Bool (not (= g_s192_249 g_s20_21)))
(define-fun lh_5 () Bool (not (= g_s192_249 g_s21_22)))
; PO 1 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s56_57 (apply g_s176_236 g_s192_249)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_3) (= g_s57_58 (apply g_s176_236 g_s192_249)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 3
(push 1)
(assert (not (=> (and lh_1 lh_4 lh_5) (= g_s55_56 (apply g_s176_236 g_s192_249)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s192$1_250 g_s192_249))
(define-fun lh_1 () Bool (mem g_s186_244 g_s54_55))
(define-fun lh_2 () Bool (= g_s186_244 g_s56_57))
(define-fun lh_3 () Bool (= g_s186_244 g_s57_58))
(define-fun lh_4 () Bool (not (= g_s186_244 g_s56_57)))
(define-fun lh_5 () Bool (not (= g_s186_244 g_s57_58)))
; PO 1 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_2) (= g_s20_21 (apply g_s177_237 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_3) (= g_s21_22 (apply g_s177_237 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 4
(push 1)
(assert (not (=> (and lh_1 lh_4 lh_5) (= g_s19_20 (apply g_s177_237 g_s186_244)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s195$1_252 g_s195_251))
(define-fun lh_1 () Bool (mem g_s186_244 g_s54_55))
; PO 1 in group 5
(assert (not (=> lh_1 (= (bool (not (= g_s186_244 g_s55_56))) (bool (mem g_s186_244 g_s173_233))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_mchcst|)
(assert |def_aprp|)
(assert |def_imlprp|)
(assert |def_imprp|)
(assert |def_imext|)
(assert |def_seext|)
(assert |def_abs|)
(assert |def_inv|)
(assert |def_ass|)
(assert (= g_s195$1_254 g_s195_253))
(define-fun lh_1 () Bool (mem g_s197_255 g_s83_84))
(define-fun lh_2 () Bool (mem g_s198$1_256 INTEGER))
(define-fun lh_3 () Bool (= g_s198$1_256 g_s109_111))
; PO 1 in group 6
(assert (not (=> (and lh_1 lh_2 lh_3) (mem g_s56_57 (binary_inter g_s54_55 g_s173_233)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)