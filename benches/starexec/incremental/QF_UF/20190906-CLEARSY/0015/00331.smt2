(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e15 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s11_11 () U)
(declare-fun g_s12_13 () U)
(declare-fun g_s13_14 () U)
(declare-fun g_s14_17 () U)
(declare-fun g_s15_16 () U)
(declare-fun g_s16_18 () U)
(declare-fun g_s17_19 () U)
(declare-fun g_s18_20 () U)
(declare-fun g_s19_21 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_22 () U)
(declare-fun g_s21_23 () U)
(declare-fun g_s22_24 () U)
(declare-fun g_s23_25 () U)
(declare-fun g_s24_26 () U)
(declare-fun g_s25_27 () U)
(declare-fun g_s26_28 () U)
(declare-fun g_s27_29 () U)
(declare-fun g_s28_30 () U)
(declare-fun g_s29_31 () U)
(declare-fun g_s3_5 () U)
(declare-fun g_s30_32 () U)
(declare-fun g_s31_33 () U)
(declare-fun g_s32_34 () U)
(declare-fun g_s33_35 () U)
(declare-fun g_s34_36 () U)
(declare-fun g_s35_37 () U)
(declare-fun g_s36_38 () U)
(declare-fun g_s37_39 () U)
(declare-fun g_s38_40 () U)
(declare-fun g_s39_41 () U)
(declare-fun g_s4_4 () U)
(declare-fun g_s40_42 () U)
(declare-fun g_s41_43 () U)
(declare-fun g_s42_44 () U)
(declare-fun g_s43_45 () U)
(declare-fun g_s44_46 () U)
(declare-fun g_s45_47 () U)
(declare-fun g_s46_48 () U)
(declare-fun g_s47_49 () U)
(declare-fun g_s48_50 () U)
(declare-fun g_s49_51 () U)
(declare-fun g_s5_7 () U)
(declare-fun g_s50_52 () U)
(declare-fun g_s51_53 () U)
(declare-fun g_s52_54 () U)
(declare-fun g_s53_55 () U)
(declare-fun g_s54_56 () U)
(declare-fun g_s55_57 () U)
(declare-fun g_s56_58 () U)
(declare-fun g_s57_59 () U)
(declare-fun g_s58_60 () U)
(declare-fun g_s59_61 () U)
(declare-fun g_s6_6 () U)
(declare-fun g_s60_62 () U)
(declare-fun g_s61_63 () U)
(declare-fun g_s62_64 () U)
(declare-fun g_s63_65 () U)
(declare-fun g_s64_66 () U)
(declare-fun g_s65_67 () U)
(declare-fun g_s66_68 () U)
(declare-fun g_s67_69 () U)
(declare-fun g_s68_70 () U)
(declare-fun g_s69_71 () U)
(declare-fun g_s7_9 () U)
(declare-fun g_s70_72 () U)
(declare-fun g_s71_73 () U)
(declare-fun g_s72_74 () U)
(declare-fun g_s73_75 () U)
(declare-fun g_s74_76 () U)
(declare-fun g_s75_77 () U)
(declare-fun g_s8_8 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (|<i| g_s0_1 MaxInt) (|<i| g_s1_2 MaxInt) (|<i| g_s2_3 MaxInt) (|<=i| g_s3_5 g_s4_4) (|<=i| g_s5_7 g_s6_6) (|<=i| g_s7_9 g_s8_8) (|<=i| g_s9_10 g_s8_8) (|<i| g_s10_12 g_s11_11) (not (mem g_s12_13 (interval g_s10_12 g_s11_11))) (= g_s13_14 MaxInt) (= g_s14_17 (|*i| g_s15_16 e15)) (mem g_s0_1 NAT) (mem g_s1_2 NAT) (mem g_s2_3 NAT) (mem g_s16_18 NAT) (mem g_s17_19 NAT) (mem g_s18_20 NAT) (mem g_s19_21 NAT) (mem g_s20_22 NAT) (mem g_s21_23 NAT) (mem g_s22_24 NAT) (mem g_s23_25 NAT) (mem g_s24_26 NAT) (mem g_s25_27 NAT) (mem g_s26_28 NAT) (mem g_s6_6 NAT) (mem g_s27_29 NAT) (mem g_s28_30 NAT) (mem g_s29_31 NAT) (mem g_s30_32 NAT) (mem g_s31_33 NAT) (mem g_s32_34 NAT) (mem g_s33_35 NAT) (mem g_s34_36 NAT1) (mem g_s35_37 NAT) (mem g_s5_7 NAT) (mem g_s36_38 NAT) (mem g_s37_39 NAT) (mem g_s38_40 NAT) (mem g_s39_41 NAT) (mem g_s40_42 NAT) (mem g_s41_43 NAT) (mem g_s42_44 NAT) (mem g_s43_45 NAT) (mem g_s44_46 NAT) (mem g_s45_47 NAT) (mem g_s46_48 NAT) (mem g_s47_49 NAT) (mem g_s4_4 NAT) (mem g_s3_5 NAT) (mem g_s48_50 NAT) (mem g_s49_51 NAT) (mem g_s50_52 NAT) (mem g_s51_53 NAT) (mem g_s52_54 NAT) (mem g_s53_55 NAT) (mem g_s54_56 NAT) (mem g_s55_57 NAT) (mem g_s56_58 NAT) (mem g_s57_59 NAT) (mem g_s58_60 NAT) (mem g_s59_61 NAT) (mem g_s60_62 NAT) (mem g_s61_63 NAT) (mem g_s62_64 NAT) (mem g_s63_65 NAT) (mem g_s64_66 NAT1) (mem g_s65_67 NAT) (mem g_s66_68 NAT) (mem g_s67_69 NAT) (mem g_s68_70 NAT) (mem g_s69_71 NAT) (mem g_s8_8 NAT) (mem g_s7_9 NAT) (mem g_s9_10 NAT) (mem g_s14_17 NAT) (mem g_s15_16 NAT) (mem g_s70_72 NAT) (mem g_s13_14 NAT) (mem g_s71_73 NAT) (mem g_s72_74 NAT) (mem g_s10_12 INT) (mem g_s11_11 NAT) (mem g_s12_13 INT)))
(define-fun |def_seext| () Bool true)
(define-fun |def_mchcst| () Bool true)
(define-fun |def_aprp| () Bool (and (subset g_s73_75 NAT) (not (= g_s73_75 empty)) (= g_s73_75 (interval (imin g_s73_75) (imax g_s73_75))) (not (mem MaxInt g_s73_75)) (subset g_s74_76 NAT) (not (= g_s74_76 empty)) (= g_s74_76 (interval (imin g_s74_76) (imax g_s74_76))) (not (mem MaxInt g_s74_76)) (subset g_s75_77 NAT) (not (= g_s75_77 empty)) (= g_s75_77 (interval (imin g_s75_77) (imax g_s75_77))) (not (mem MaxInt g_s75_77))))
(define-fun |def_abs| () Bool (and (subset NAT NATURAL) (subset g_s73_75 NATURAL) (subset g_s74_76 NATURAL) (subset g_s75_77 NATURAL)))
(define-fun |def_inv| () Bool true)
(define-fun |def_ass| () Bool true)
(define-fun |def_sets| () Bool true)
(define-fun |def_imlprp| () Bool (and (= g_s73_75 (interval e0 g_s0_1)) (= g_s74_76 (interval e0 g_s1_2)) (= g_s75_77 (interval e0 g_s2_3))))
(define-fun |def_imprp| () Bool true)
(define-fun |def_imext| () Bool true)
; PO group 0 
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_imprp|)
; PO 1 in group 0
(push 1)
(assert (not (not (mem MaxInt (interval e0 g_s0_1)))))
(check-sat)
(pop 1)
; PO 2 in group 0
(push 1)
(assert (not (not (mem MaxInt (interval e0 g_s1_2)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 0
(push 1)
(assert (not (not (mem MaxInt (interval e0 g_s2_3)))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 0
(push 1)
(assert (not (not (= (interval e0 g_s0_1) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 0
(push 1)
(assert (not (not (= (interval e0 g_s1_2) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 0
(push 1)
(assert (not (not (= (interval e0 g_s2_3) empty))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 0
(push 1)
(assert (not (subset (interval e0 g_s0_1) NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 0
(push 1)
(assert (not (subset (interval e0 g_s1_2) NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 0
(push 1)
(assert (not (subset (interval e0 g_s2_3) NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 0
(push 1)
(assert (not (= (interval e0 g_s0_1) (interval (imin (interval e0 g_s0_1)) (imax (interval e0 g_s0_1))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 0
(push 1)
(assert (not (= (interval e0 g_s1_2) (interval (imin (interval e0 g_s1_2)) (imax (interval e0 g_s1_2))))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 0
(push 1)
(assert (not (= (interval e0 g_s2_3) (interval (imin (interval e0 g_s2_3)) (imax (interval e0 g_s2_3))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)