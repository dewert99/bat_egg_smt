(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-06
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e13 () U)
(declare-fun e15 () U)
(declare-fun e17 () U)
(declare-fun e19 () U)
(declare-fun e21 () U)
(declare-fun e23 () U)
(declare-fun e25 () U)
(declare-fun e27 () U)
(declare-fun e29 () U)
(declare-fun e31 () U)
(declare-fun e33 () U)
(declare-fun e35 () U)
(declare-fun e37 () U)
(declare-fun e39 () U)
(declare-fun e41 () U)
(declare-fun e43 () U)
(declare-fun e45 () U)
(declare-fun e47 () U)
(declare-fun e49 () U)
(declare-fun e51 () U)
(declare-fun e53 () U)
(declare-fun e55 () U)
(declare-fun e57 () U)
(declare-fun e59 () U)
(declare-fun e61 () U)
(declare-fun e63 () U)
(declare-fun e65 () U)
(declare-fun e67 () U)
(declare-fun e69 () U)
(declare-fun e71 () U)
(declare-fun e73 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_11 () U)
(declare-fun g_s11_12 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s13_16 () U)
(declare-fun g_s14_18 () U)
(declare-fun g_s15_20 () U)
(declare-fun g_s16_22 () U)
(declare-fun g_s17_24 () U)
(declare-fun g_s18_26 () U)
(declare-fun g_s19_28 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_30 () U)
(declare-fun g_s21_32 () U)
(declare-fun g_s22_34 () U)
(declare-fun g_s23_36 () U)
(declare-fun g_s24_38 () U)
(declare-fun g_s25_40 () U)
(declare-fun g_s26_42 () U)
(declare-fun g_s27_44 () U)
(declare-fun g_s28_46 () U)
(declare-fun g_s29_48 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s30_50 () U)
(declare-fun g_s31_52 () U)
(declare-fun g_s32_54 () U)
(declare-fun g_s33_56 () U)
(declare-fun g_s34_58 () U)
(declare-fun g_s35_60 () U)
(declare-fun g_s36_62 () U)
(declare-fun g_s37_64 () U)
(declare-fun g_s38_66 () U)
(declare-fun g_s39_68 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s40_70 () U)
(declare-fun g_s41_72 () U)
(declare-fun g_s42_74 () U)
(declare-fun g_s43_75 () U)
(declare-fun g_s45_77 () U)
(declare-fun g_s46_78 () U)
(declare-fun g_s47_80 () U)
(declare-fun g_s48_81 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s51_83 () U)
(declare-fun g_s52_84 () U)
(declare-fun g_s53_85 () U)
(declare-fun g_s54_87 () U)
(declare-fun g_s55_88 () U)
(declare-fun g_s56_89 () U)
(declare-fun g_s59_91 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s60_92 () U)
(declare-fun g_s61_93 () U)
(declare-fun g_s62_94 () U)
(declare-fun g_s63_96 () U)
(declare-fun g_s64_97 () U)
(declare-fun g_s65_98 () U)
(declare-fun g_s66_99 () U)
(declare-fun g_s67_101 () U)
(declare-fun g_s68_102 () U)
(declare-fun g_s69_103 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s70_105 () U)
(declare-fun g_s71_106 () U)
(declare-fun g_s72_107 () U)
(declare-fun g_s73_109 () U)
(declare-fun g_s74_110 () U)
(declare-fun g_s75_111 () U)
(declare-fun g_s76_112 () U)
(declare-fun g_s77_113 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s80_115 () U)
(declare-fun g_s81_116 () U)
(declare-fun g_s83_118 () U)
(declare-fun g_s84_120 () U)
(declare-fun g_s86_121 () U)
(declare-fun g_s87_122 () U)
(declare-fun g_s88_123 () U)
(declare-fun g_s89_124 () U)
(declare-fun g_s9_10 () U)
(declare-fun g_s90_125 () U)
(declare-fun e108 () U)
(declare-fun e76 () U)
(declare-fun e79 () U)
(declare-fun e117 () U)
(declare-fun e119 () U)
(declare-fun e86 () U)
(declare-fun e82 () U)
(declare-fun e104 () U)
(declare-fun e100 () U)
(declare-fun e90 () U)
(declare-fun e95 () U)
(declare-fun e114 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 BOOL) (= g_s1_2 BOOL) (= g_s2_3 INT) (= g_s3_4 INT) (= g_s4_5 INT) (= g_s5_6 g_s4_5) (= g_s6_7 g_s4_5) (= g_s7_8 g_s2_3) (= g_s8_9 g_s0_1) (= g_s9_10 INT) (= g_s10_11 INT) (= g_s11_12 e0) (= g_s12_14 e13) (= g_s13_16 e15) (= g_s14_18 e17) (= g_s15_20 e19) (= g_s16_22 e21) (= g_s17_24 e23) (= g_s18_26 e25) (= g_s19_28 e27) (= g_s20_30 e29) (= g_s21_32 e31) (= g_s22_34 e33) (= g_s23_36 e35) (= g_s24_38 e37) (= g_s25_40 e39) (= g_s26_42 e41) (= g_s27_44 e43) (= g_s28_46 e45) (= g_s29_48 e47) (= g_s30_50 e49) (= g_s31_52 e51) (= g_s32_54 e53) (= g_s33_56 e55) (= g_s34_58 e57) (= g_s35_60 e59) (= g_s36_62 e61) (= g_s37_64 e63) (= g_s38_66 e65) (= g_s39_68 e67) (= g_s40_70 e69) (= g_s41_72 e71) (= g_s42_74 e73) (mem g_s43_75 (|-->| BOOL BOOL)) (= g_s43_75 e76) (mem g_s45_77 (|-->| BOOL BOOL)) (= g_s45_77 g_s43_75) (mem g_s46_78 (|-->| BOOL BOOL)) (= g_s46_78 e79) (mem g_s47_80 (|-->| BOOL BOOL)) (= g_s47_80 g_s46_78) (mem g_s48_81 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s48_81 e82) (mem g_s51_83 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s51_83 g_s48_81) (mem g_s52_84 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s52_84 g_s48_81) (mem g_s53_85 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s53_85 e86) (mem g_s54_87 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s54_87 g_s53_85) (mem g_s55_88 (|-->| (set_prod BOOL BOOL) BOOL)) (= g_s55_88 g_s53_85) (mem g_s56_89 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s56_89 e90) (mem g_s59_91 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s59_91 g_s56_89) (mem g_s60_92 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s60_92 g_s56_89) (mem g_s61_93 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s61_93 g_s56_89) (mem g_s62_94 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s62_94 e95) (mem g_s63_96 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s63_96 g_s62_94) (mem g_s64_97 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s64_97 g_s62_94) (mem g_s65_98 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s65_98 g_s62_94) (mem g_s66_99 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s66_99 e100) (mem g_s67_101 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s67_101 g_s66_99) (mem g_s68_102 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s68_102 g_s66_99) (mem g_s69_103 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s69_103 e104) (mem g_s70_105 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s70_105 g_s69_103) (mem g_s71_106 (|-->| (set_prod g_s2_3 g_s2_3) BOOL)) (= g_s71_106 g_s69_103) (mem g_s72_107 (|-->| BOOL BOOL)) (= g_s72_107 e108) (mem g_s73_109 (|-->| BOOL BOOL)) (= g_s73_109 e108) (mem g_s74_110 (|-->| BOOL BOOL)) (= g_s74_110 e108) (mem g_s75_111 (|-->| BOOL BOOL)) (= g_s75_111 e108) (mem g_s76_112 (|-->| BOOL BOOL)) (= g_s76_112 e108) (mem g_s77_113 (|-->| (set_prod g_s5_6 g_s4_5) BOOL)) (= g_s77_113 e114) (mem g_s80_115 (|-->| (set_prod g_s4_5 g_s4_5) BOOL)) (= g_s80_115 g_s80_115) (mem g_s81_116 (|>->>| g_s4_5 g_s4_5)) (= g_s81_116 e117) (mem g_s83_118 (|>->>| g_s5_6 g_s5_6)) (= g_s83_118 g_s81_116) (= g_s84_120 e119) (= g_s86_121 e108)))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s87_122 NAT) (mem g_s88_123 NAT) (mem g_s89_124 NAT) (mem g_s90_125 NAT)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 0
(assert (not (mem e0 NAT)))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 1
(assert (not (mem e13 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 2 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 2
(assert (not (mem e15 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 3 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 3
(assert (not (mem e0 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 4 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 4
(assert (not (mem e13 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 5 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 5
(assert (not (mem e15 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 6 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 6
(assert (not (mem e17 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 7 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 7
(assert (not (mem e19 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 8 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 8
(assert (not (mem e0 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 9 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 9
(assert (not (mem e13 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 10 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 10
(assert (not (mem e15 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 11 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 11
(assert (not (mem e19 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 12 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 12
(assert (not (mem e21 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 13 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 13
(assert (not (mem e23 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 14 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 14
(assert (not (mem e0 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 15 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 15
(assert (not (mem e13 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO group 16 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
; PO 1 in group 16
(assert (not (mem e15 NAT)))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)