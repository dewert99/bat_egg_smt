(set-info :smt-lib-version 2.6)
(set-logic UF)
(set-info :source |
Generated by: David Deharbe, CLEARSY
Generated on: 2019-09-09
Generator: bxml;pog;pog2smt (Atelier B)
Application: B-method
Target solver: CVC4, Z3
|)
(set-info :license "https://creativecommons.org/licenses/by-nc/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; Prelude
(declare-sort U 0)
(declare-fun |*i| (U U) U)
(declare-fun |+i| (U U) U)
(declare-fun |-i| (U U) U)
(declare-fun idiv (U U) U)
(declare-fun |*r| (U U) U)
(declare-fun |+r| (U U) U)
(declare-fun |-r| (U U) U)
(declare-fun rdiv (U U) U)
(declare-fun modulo (U U) U)
(declare-fun |<i| (U U) Bool)
(declare-fun |<=i| (U U) Bool)
(declare-fun |>i| (U U) Bool)
(declare-fun |>=i| (U U) Bool)
(declare-fun |<r| (U U) Bool)
(declare-fun |<=r| (U U) Bool)
(declare-fun |>r| (U U) Bool)
(declare-fun |>=r| (U U) Bool)
(declare-fun iuminus (U) U)
(declare-fun ruminus (U) U)
(declare-fun TRUE () U)
(declare-fun FALSE () U)
(assert (not (= TRUE FALSE)))
(declare-fun empty () U)
(declare-fun bool (Bool) U)
(declare-fun BOOL () U)
(declare-fun INT () U)
(declare-fun INTEGER () U)
(declare-fun NAT () U)
(declare-fun NAT1 () U)
(declare-fun NATURAL () U)
(declare-fun NATURAL1 () U)
(declare-fun FLOAT () U)
(declare-fun MaxInt () U)
(declare-fun MinInt () U)
(declare-fun |STRING| () U)
(declare-fun REAL () U)
(declare-fun set_prod (U U) U)
(declare-fun set_diff (U U) U)
(declare-fun mapplet (U U) U)
(declare-fun |**i| (U U) U)
(declare-fun |**r| (U U) U)
(declare-fun |+->| (U U) U)
(declare-fun |+->>| (U U) U)
(declare-fun |-->| (U U) U)
(declare-fun |-->>| (U U) U)
(declare-fun |<->| (U U) U)
(declare-fun |>+>| (U U) U)
(declare-fun |>->| (U U) U)
(declare-fun |>+>>| (U U) U)
(declare-fun |>->>| (U U) U)
(declare-fun |->| (U U) U)
(declare-fun interval (U U) U)
(declare-fun composition (U U) U)
(declare-fun binary_inter (U U) U)
(declare-fun restriction_head (U U) U)
(declare-fun semicolon (U U) U)
(declare-fun |<+| (U U) U)
(declare-fun |<-| (U U) U)
(declare-fun domain_subtraction (U U) U)
(declare-fun domain_restriction (U U) U)
(declare-fun |><| (U U) U)
(declare-fun parallel_product (U U) U)
(declare-fun binary_union (U U) U)
(declare-fun restriction_tail (U U) U)
(declare-fun concatenate (U U) U)
(declare-fun range_restriction (U U) U)
(declare-fun range_subtraction (U U) U)
(declare-fun image (U U) U)
(declare-fun apply (U U) U)
(declare-fun prj1 (U U) U)
(declare-fun prj2 (U U) U)
(declare-fun iterate (U U) U)
(declare-fun |const| (U U) U)
(declare-fun rank (U U) U)
(declare-fun father (U U) U)
(declare-fun subtree (U U) U)
(declare-fun arity (U U) U)
(declare-fun |+f| (U U) U)
(declare-fun |-f| (U U) U)
(declare-fun |*f| (U U) U)
(declare-fun |fdiv| (U U) U)
(declare-fun tbin (U U U) U)
(declare-fun son (U U U) U)
(declare-fun mem (U U) Bool)
(declare-fun subset (U U) Bool)
(declare-fun strict_subset (U U) Bool)
(declare-fun |<=f| (U U) Bool)
(declare-fun |<f| (U U) Bool)
(declare-fun |>=f| (U U) Bool)
(declare-fun |>f| (U U) Bool)
(declare-fun imax (U) U)
(declare-fun imin (U) U)
(declare-fun rmax (U) U)
(declare-fun rmin (U) U)
(declare-fun card (U) U)
(declare-fun dom (U) U)
(declare-fun ran (U) U)
(declare-fun POW (U) U)
(declare-fun POW1 (U) U)
(declare-fun FIN (U) U)
(declare-fun FIN1 (U) U)
(declare-fun union (U) U)
(declare-fun inter (U) U)
(declare-fun seq (U) U)
(declare-fun seq1 (U) U)
(declare-fun iseq (U) U)
(declare-fun iseq1 (U) U)
(declare-fun inverse (U) U)
(declare-fun size (U) U)
(declare-fun perm (U) U)
(declare-fun first (U) U)
(declare-fun last (U) U)
(declare-fun id (U) U)
(declare-fun closure (U) U)
(declare-fun closure1 (U) U)
(declare-fun tail (U) U)
(declare-fun front (U) U)
(declare-fun reverse (U) U)
(declare-fun rev (U) U)
(declare-fun conc (U) U)
(declare-fun succ (U) U)
(declare-fun pred (U) U)
(declare-fun rel (U) U)
(declare-fun fnc (U) U)
(declare-fun real (U) U)
(declare-fun floor (U) U)
(declare-fun ceiling (U) U)
(declare-fun tree (U) U)
(declare-fun btree (U) U)
(declare-fun top (U) U)
(declare-fun sons (U) U)
(declare-fun prefix (U) U)
(declare-fun postfix (U) U)
(declare-fun sizet (U) U)
(declare-fun mirror (U) U)
(declare-fun left (U) U)
(declare-fun right (U) U)
(declare-fun infix (U) U)
(declare-fun ubin (U) U)
(declare-fun SEQ (U) U)
(declare-fun SET (U) U)
; Opaque formulas
(declare-fun e0 () U)
(declare-fun e11 () U)
(declare-fun e21 () U)
(declare-fun e23 () U)
(declare-fun e22 () U)
(declare-fun e17 () U)
(declare-fun g_s0_1 () U)
(declare-fun g_s1_2 () U)
(declare-fun g_s10_12 () U)
(declare-fun g_s11_13 () U)
(declare-fun g_s12_14 () U)
(declare-fun g_s13_15 () U)
(declare-fun g_s14_16 () U)
(declare-fun g_s15_18 () U)
(declare-fun g_s16_19 () U)
(declare-fun g_s17_20 () U)
(declare-fun g_s18_24 () U)
(declare-fun g_s19_25 () U)
(declare-fun g_s19$1_36 () U)
(declare-fun g_s2_3 () U)
(declare-fun g_s20_26 () U)
(declare-fun g_s20$1_37 () U)
(declare-fun g_s21_27 () U)
(declare-fun g_s21$1_38 () U)
(declare-fun g_s22_28 () U)
(declare-fun g_s22$1_39 () U)
(declare-fun g_s23_29 () U)
(declare-fun g_s24_30 () U)
(declare-fun g_s25_31 () U)
(declare-fun g_s25$1_40 () U)
(declare-fun g_s26_32 () U)
(declare-fun g_s27_33 () U)
(declare-fun g_s28_34 () U)
(declare-fun g_s29_35 () U)
(declare-fun g_s3_4 () U)
(declare-fun g_s4_5 () U)
(declare-fun g_s5_6 () U)
(declare-fun g_s6_7 () U)
(declare-fun g_s7_8 () U)
(declare-fun g_s8_9 () U)
(declare-fun g_s9_10 () U)
; Defines
(define-fun |def_B definitions| () Bool (and (= NAT (interval e0 MaxInt)) (= INT (interval MinInt MaxInt))))
(define-fun |def_ctx| () Bool (and (= g_s0_1 (SET (mapplet g_s8_9 (mapplet g_s7_8 (mapplet g_s6_7 (mapplet g_s5_6 (mapplet g_s4_5 (mapplet g_s3_4 (mapplet g_s2_3 g_s1_2))))))))) (= g_s9_10 e0) (= g_s10_12 e11) (mem g_s11_13 NAT) (mem g_s12_14 NAT) (mem g_s13_15 NAT) (mem g_s14_16 NAT) (|<=i| e11 g_s14_16) (|<=i| g_s14_16 e17) (= g_s14_16 g_s12_14) (mem g_s15_18 NAT) (|<=i| e11 g_s15_18) (|<=i| g_s15_18 e17) (= g_s15_18 g_s12_14) (mem g_s16_19 NAT) (|<=i| e11 g_s16_19) (|<i| g_s16_19 MaxInt) (= g_s16_19 g_s13_15) (mem g_s17_20 NAT) (|<=i| e21 g_s17_20) (= g_s17_20 g_s11_13) (|<=i| (|+i| g_s17_20 g_s15_18) e22) (|<=i| (|+i| (|+i| g_s17_20 g_s14_16) g_s15_18) e23) (mem g_s18_24 NAT) (|<=i| e11 g_s18_24) (|<i| g_s18_24 e17) (= g_s18_24 g_s11_13)))
(define-fun |def_seext| () Bool true)
(define-fun |def_lprp| () Bool true)
(define-fun |def_inprp| () Bool true)
(define-fun |def_inext| () Bool true)
(define-fun |def_inv| () Bool (and (mem g_s19_25 BOOL) (mem g_s20_26 BOOL) (mem g_s21_27 BOOL) (mem g_s22_28 BOOL) (mem g_s23_29 NATURAL) (mem g_s24_30 g_s0_1) (mem g_s25_31 NATURAL) (mem g_s26_32 NATURAL) (mem g_s27_33 NATURAL) (mem g_s28_34 NATURAL) (mem g_s29_35 NATURAL)))
(define-fun |def_ass| () Bool true)
(define-fun |def_cst| () Bool true)
(define-fun |def_sets| () Bool true)
; PO group 0 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(define-fun lh_1 () Bool (mem g_s19$1_36 BOOL))
(define-fun lh_2 () Bool (mem g_s20$1_37 BOOL))
(define-fun lh_3 () Bool (mem g_s21$1_38 BOOL))
(define-fun lh_4 () Bool (mem g_s22$1_39 BOOL))
; PO 1 in group 0
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4) (mem e0 NATURAL))))
(check-sat)
(pop 1)
; PO group 1 
(push 1)
(assert |def_B definitions|)
(assert |def_ctx|)
(assert |def_cst|)
(assert |def_lprp|)
(assert |def_inprp|)
(assert |def_inext|)
(assert |def_seext|)
(assert |def_inv|)
(assert |def_ass|)
(define-fun lh_1 () Bool (= g_s24_30 g_s1_2))
(define-fun lh_2 () Bool (= g_s19_25 FALSE))
(define-fun lh_3 () Bool (= g_s20_26 TRUE))
(define-fun lh_4 () Bool (= g_s21_27 TRUE))
(define-fun lh_5 () Bool (= g_s22_28 FALSE))
(define-fun lh_6 () Bool (mem g_s25$1_40 NATURAL))
(define-fun lh_7 () Bool (= g_s19_25 TRUE))
(define-fun lh_8 () Bool (= g_s21_27 FALSE))
(define-fun lh_9 () Bool (not (and (= g_s19_25 FALSE) (= g_s20_26 TRUE) (= g_s21_27 TRUE) (= g_s22_28 FALSE))))
(define-fun lh_10 () Bool (not (and (= g_s19_25 TRUE) (= g_s20_26 TRUE) (= g_s21_27 FALSE) (= g_s22_28 FALSE))))
(define-fun lh_11 () Bool (not (and (= g_s19_25 TRUE) (= g_s20_26 TRUE) (= g_s21_27 TRUE) (= g_s22_28 FALSE))))
(define-fun lh_12 () Bool (not (and (= g_s19_25 FALSE) (= g_s20_26 TRUE) (= g_s21_27 FALSE) (= g_s22_28 FALSE))))
(define-fun lh_13 () Bool (= g_s24_30 g_s2_3))
(define-fun lh_14 () Bool (|>=i| (|-i| (|+i| g_s23_29 e11) g_s25_31) g_s18_24))
(define-fun lh_15 () Bool (= g_s24_30 g_s3_4))
(define-fun lh_16 () Bool (= g_s24_30 g_s4_5))
(define-fun lh_17 () Bool (|<=i| (|+i| (|-i| (|-i| (|+i| g_s27_33 e11) g_s26_32) e11) e11) g_s14_16))
(define-fun lh_18 () Bool (= g_s24_30 g_s5_6))
(define-fun lh_19 () Bool (= g_s24_30 g_s6_7))
(define-fun lh_20 () Bool (|<=i| (|-i| (|-i| (|+i| g_s23_29 e11) g_s28_34) e11) g_s15_18))
(define-fun lh_21 () Bool (= g_s24_30 g_s7_8))
(define-fun lh_22 () Bool (|<=i| (|+i| (|-i| (|-i| (|+i| g_s23_29 e11) g_s29_35) e11) e11) g_s17_20))
(define-fun lh_23 () Bool (= g_s24_30 g_s8_9))
(define-fun lh_24 () Bool (|<=i| (|+i| (|-i| g_s23_29 g_s29_35) e11) (|+i| g_s17_20 g_s16_19)))
(define-fun lh_25 () Bool (not (= g_s24_30 g_s1_2)))
(define-fun lh_26 () Bool (not (= g_s24_30 g_s2_3)))
(define-fun lh_27 () Bool (not (= g_s24_30 g_s3_4)))
(define-fun lh_28 () Bool (not (= g_s24_30 g_s4_5)))
(define-fun lh_29 () Bool (not (= g_s24_30 g_s5_6)))
(define-fun lh_30 () Bool (not (= g_s24_30 g_s6_7)))
(define-fun lh_31 () Bool (not (= g_s24_30 g_s7_8)))
(define-fun lh_32 () Bool (not (= g_s24_30 g_s8_9)))
; PO 1 in group 1
(push 1)
(assert (not (=> lh_19 (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 2 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_15) (mem (|+i| g_s25_31 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 3 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_15) (mem (|+i| g_s26_32 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 4 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_3 lh_5 lh_7 lh_8) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 5 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_13) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 6 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_15) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 7 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_16) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 8 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_18) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 9 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_13) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 10 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_15) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 11 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_18) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 12 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_21) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 13 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_23) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 14 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_13) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 15 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_15) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 16 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_16) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 17 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_18) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 18 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_21) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 19 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_23) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 20 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_15) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 21 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_18) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 22 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_21) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 23 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_23) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 24 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_13) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 25 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_15) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 26 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_16) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 27 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_18) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 28 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_19) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 29 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_21) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 30 in group 1
(push 1)
(assert (not (=> (and lh_9 lh_10 lh_11 lh_12 lh_23) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 31 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_4 lh_5 lh_6) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 32 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_2 lh_3 lh_5 lh_6 lh_8) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 33 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_3 lh_4 lh_5 lh_6 lh_7) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 34 in group 1
(push 1)
(assert (not (=> (and lh_1 lh_6 lh_9 lh_10 lh_11 lh_12) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 35 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_19 lh_20) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 36 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_21 lh_22) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 37 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_4 lh_5 lh_23 lh_24) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 38 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_16 lh_17) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 39 in group 1
(push 1)
(assert (not (=> (and lh_2 lh_3 lh_5 lh_8 lh_19 lh_20) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 40 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_4 lh_5 lh_7 lh_19 lh_20) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 41 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_13 lh_14) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 42 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_16 lh_17) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 43 in group 1
(push 1)
(assert (not (=> (and lh_3 lh_5 lh_7 lh_8 lh_19 lh_20) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
; PO 44 in group 1
(push 1)
(assert (not (=> (and lh_25 lh_26 lh_27 lh_28 lh_29 lh_30 lh_31 lh_32) (mem (|+i| g_s23_29 e11) NATURAL))))
(set-info :status unknown)
(check-sat)
(pop 1)
(pop 1)
(exit)