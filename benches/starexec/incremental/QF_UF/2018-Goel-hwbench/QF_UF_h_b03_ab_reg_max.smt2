(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b03
query-maker: "Z3"
query-time: 0.834000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt2 0)
(declare-sort utt3 0)
(declare-sort utt4 0)
(declare-sort utt32 0)
(declare-sort utt28 0)
(declare-fun z$n2s2 () utt2)
(declare-fun z$n1s2 () utt2)
(declare-fun z$n0s2 () utt2)
(declare-fun z$n7s3 () utt3)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n2s3 () utt3)
(declare-fun z$n4s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun z$n8s4 () utt4)
(declare-fun z$n4s4 () utt4)
(declare-fun z$n2s4 () utt4)
(declare-fun z$n1s4 () utt4)
(declare-fun z$n0s4 () utt4)
(declare-fun z$n1s32 () utt32)
(declare-fun z$n2s32 () utt32)
(declare-fun z$n4s32 () utt32)
(declare-fun z$n8s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun stato () utt2)
(declare-fun z$45 () utt2)
(declare-fun z$47 () utt2)
(declare-fun z$49 () utt2)
(declare-fun stato$next () utt2)
(declare-fun coda0 () utt3)
(declare-fun coda1 () utt3)
(declare-fun z$59 () utt3)
(declare-fun z$61 () utt3)
(declare-fun z$64 () utt3)
(declare-fun z$66 () utt3)
(declare-fun z$68 () utt3)
(declare-fun z$71 () utt3)
(declare-fun z$73 () utt3)
(declare-fun z$75 () utt3)
(declare-fun z$77 () utt3)
(declare-fun z$80 () utt3)
(declare-fun z$82 () utt3)
(declare-fun z$84 () utt3)
(declare-fun z$86 () utt3)
(declare-fun z$88 () utt3)
(declare-fun z$91 () utt3)
(declare-fun z$93 () utt3)
(declare-fun z$95 () utt3)
(declare-fun z$97 () utt3)
(declare-fun z$99 () utt3)
(declare-fun z$101 () utt3)
(declare-fun z$103 () utt3)
(declare-fun z$105 () utt3)
(declare-fun z$107 () utt3)
(declare-fun z$109 () utt3)
(declare-fun z$111 () utt3)
(declare-fun z$113 () utt3)
(declare-fun z$115 () utt3)
(declare-fun z$117 () utt3)
(declare-fun z$119 () utt3)
(declare-fun z$121 () utt3)
(declare-fun z$123 () utt3)
(declare-fun z$125 () utt3)
(declare-fun z$127 () utt3)
(declare-fun z$129 () utt3)
(declare-fun z$131 () utt3)
(declare-fun z$133 () utt3)
(declare-fun coda0$next () utt3)
(declare-fun coda2 () utt3)
(declare-fun z$137 () utt3)
(declare-fun z$139 () utt3)
(declare-fun z$141 () utt3)
(declare-fun z$143 () utt3)
(declare-fun z$145 () utt3)
(declare-fun z$147 () utt3)
(declare-fun z$149 () utt3)
(declare-fun z$151 () utt3)
(declare-fun z$153 () utt3)
(declare-fun z$155 () utt3)
(declare-fun z$157 () utt3)
(declare-fun z$159 () utt3)
(declare-fun z$161 () utt3)
(declare-fun z$163 () utt3)
(declare-fun z$165 () utt3)
(declare-fun z$167 () utt3)
(declare-fun z$169 () utt3)
(declare-fun z$171 () utt3)
(declare-fun z$173 () utt3)
(declare-fun z$175 () utt3)
(declare-fun z$177 () utt3)
(declare-fun z$179 () utt3)
(declare-fun z$181 () utt3)
(declare-fun z$183 () utt3)
(declare-fun z$185 () utt3)
(declare-fun z$187 () utt3)
(declare-fun z$189 () utt3)
(declare-fun z$191 () utt3)
(declare-fun z$193 () utt3)
(declare-fun z$195 () utt3)
(declare-fun z$197 () utt3)
(declare-fun z$199 () utt3)
(declare-fun z$201 () utt3)
(declare-fun z$203 () utt3)
(declare-fun z$205 () utt3)
(declare-fun z$207 () utt3)
(declare-fun coda1$next () utt3)
(declare-fun coda3 () utt3)
(declare-fun z$211 () utt3)
(declare-fun z$213 () utt3)
(declare-fun z$215 () utt3)
(declare-fun z$217 () utt3)
(declare-fun z$219 () utt3)
(declare-fun z$221 () utt3)
(declare-fun z$223 () utt3)
(declare-fun z$225 () utt3)
(declare-fun z$227 () utt3)
(declare-fun z$229 () utt3)
(declare-fun z$231 () utt3)
(declare-fun z$233 () utt3)
(declare-fun z$235 () utt3)
(declare-fun z$237 () utt3)
(declare-fun z$239 () utt3)
(declare-fun z$241 () utt3)
(declare-fun z$243 () utt3)
(declare-fun z$245 () utt3)
(declare-fun z$247 () utt3)
(declare-fun z$249 () utt3)
(declare-fun z$251 () utt3)
(declare-fun z$253 () utt3)
(declare-fun z$255 () utt3)
(declare-fun z$257 () utt3)
(declare-fun z$259 () utt3)
(declare-fun z$261 () utt3)
(declare-fun z$263 () utt3)
(declare-fun z$265 () utt3)
(declare-fun z$267 () utt3)
(declare-fun z$269 () utt3)
(declare-fun z$271 () utt3)
(declare-fun z$273 () utt3)
(declare-fun z$275 () utt3)
(declare-fun z$277 () utt3)
(declare-fun z$279 () utt3)
(declare-fun z$281 () utt3)
(declare-fun coda2$next () utt3)
(declare-fun z$285 () utt3)
(declare-fun z$287 () utt3)
(declare-fun z$289 () utt3)
(declare-fun z$291 () utt3)
(declare-fun z$293 () utt3)
(declare-fun z$295 () utt3)
(declare-fun z$297 () utt3)
(declare-fun z$299 () utt3)
(declare-fun z$301 () utt3)
(declare-fun z$303 () utt3)
(declare-fun z$305 () utt3)
(declare-fun z$307 () utt3)
(declare-fun z$309 () utt3)
(declare-fun z$311 () utt3)
(declare-fun z$313 () utt3)
(declare-fun z$315 () utt3)
(declare-fun z$317 () utt3)
(declare-fun z$319 () utt3)
(declare-fun z$321 () utt3)
(declare-fun z$323 () utt3)
(declare-fun z$325 () utt3)
(declare-fun z$327 () utt3)
(declare-fun z$329 () utt3)
(declare-fun z$331 () utt3)
(declare-fun z$333 () utt3)
(declare-fun z$335 () utt3)
(declare-fun z$337 () utt3)
(declare-fun z$339 () utt3)
(declare-fun z$341 () utt3)
(declare-fun z$343 () utt3)
(declare-fun z$345 () utt3)
(declare-fun z$347 () utt3)
(declare-fun z$349 () utt3)
(declare-fun z$351 () utt3)
(declare-fun z$353 () utt3)
(declare-fun z$355 () utt3)
(declare-fun coda3$next () utt3)
(declare-fun z$409 () utt4)
(declare-fun z$415 () utt4)
(declare-fun z$417 () utt4)
(declare-fun z$419 () utt4)
(declare-fun z$421 () utt4)
(declare-fun z$423 () utt4)
(declare-fun grant () utt4)
(declare-fun z$425 () utt4)
(declare-fun z$427 () utt4)
(declare-fun z$429 () utt4)
(declare-fun grant$next () utt4)
(declare-fun GRANT_O$next () utt4)
(declare-fun Concat_32_4_28 (utt4 utt28) utt32)
(declare-fun z$n0s28 () utt28)
(declare-fun z$468 () utt32)
(declare-fun GRANT_O () utt4)
(declare-fun z$435 () utt32)
(declare-fun z$37 () utt4)
(declare-fun z$36 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$32 () Bool)
(declare-fun z$51 () Bool)
(declare-fun fu2 () Bool)
(declare-fun fu1 () Bool)
(declare-fun z$53 () Bool)
(declare-fun fu3 () Bool)
(declare-fun z$55 () Bool)
(declare-fun fu4 () Bool)
(declare-fun z$57 () Bool)
(declare-fun z$13 () Bool)
(declare-fun ru1 () Bool)
(declare-fun z$15 () Bool)
(declare-fun ru2 () Bool)
(declare-fun z$17 () Bool)
(declare-fun ru3 () Bool)
(declare-fun z$19 () Bool)
(declare-fun ru4 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$209 () Bool)
(declare-fun z$283 () Bool)
(declare-fun z$357 () Bool)
(declare-fun REQUEST1 () Bool)
(declare-fun z$360 () Bool)
(declare-fun z$362 () Bool)
(declare-fun ru1$next () Bool)
(declare-fun z$364 () Bool)
(declare-fun REQUEST2 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$369 () Bool)
(declare-fun ru2$next () Bool)
(declare-fun z$371 () Bool)
(declare-fun REQUEST3 () Bool)
(declare-fun z$374 () Bool)
(declare-fun z$376 () Bool)
(declare-fun ru3$next () Bool)
(declare-fun z$378 () Bool)
(declare-fun REQUEST4 () Bool)
(declare-fun z$381 () Bool)
(declare-fun z$383 () Bool)
(declare-fun ru4$next () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$387 () Bool)
(declare-fun fu1$next () Bool)
(declare-fun z$389 () Bool)
(declare-fun z$391 () Bool)
(declare-fun fu2$next () Bool)
(declare-fun z$393 () Bool)
(declare-fun z$395 () Bool)
(declare-fun fu3$next () Bool)
(declare-fun z$397 () Bool)
(declare-fun z$399 () Bool)
(declare-fun fu4$next () Bool)
(declare-fun z$401 () Bool)
(declare-fun z$403 () Bool)
(declare-fun z$404 () Bool)
(declare-fun z$405 () Bool)
(declare-fun z$411 () Bool)
(declare-fun z$413 () Bool)
(declare-fun z$431 () Bool)
(declare-fun z$513 () Bool)
(declare-fun z$514 () Bool)
(declare-fun z$515 () Bool)
(declare-fun z$517 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$486 () Bool)
(declare-fun z$512 () Bool)
(declare-fun z$516 () Bool)
(declare-fun z$39 () Bool)
(declare-fun z$627 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$23 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$25 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$27 () Bool)
(declare-fun p$6 () Bool)
(declare-fun z$29 () Bool)
(declare-fun p$7 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$467 () Bool)
(declare-fun p$8 () Bool)
(declare-fun z$616 () Bool)
(declare-fun z$617 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$618 () Bool)
(declare-fun z$619 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$620 () Bool)
(declare-fun z$621 () Bool)
(declare-fun p$11 () Bool)
(declare-fun z$622 () Bool)
(declare-fun z$623 () Bool)
(declare-fun p$12 () Bool)
(declare-fun p$13 () Bool)
(declare-fun z$5 () Bool)
(declare-fun p$14 () Bool)
(declare-fun z$7 () Bool)
(declare-fun p$15 () Bool)
(declare-fun z$9 () Bool)
(declare-fun p$16 () Bool)
(declare-fun z$11 () Bool)
(declare-fun p$17 () Bool)
(declare-fun z$21 () Bool)
(declare-fun p$18 () Bool)
(declare-fun p$19 () Bool)
(declare-fun p$20 () Bool)
(declare-fun p$21 () Bool)
(declare-fun z$563 () Bool)
(declare-fun p$22 () Bool)
(declare-fun z$568 () Bool)
(declare-fun p$23 () Bool)
(declare-fun z$573 () Bool)
(declare-fun p$24 () Bool)
(declare-fun z$578 () Bool)
(assert
 (and (distinct z$n0s2 z$n1s2 z$n2s2) true))
(assert
 (and (distinct z$n0s3 z$n4s3 z$n2s3 z$n1s3 z$n7s3) true))
(assert
 (and (distinct z$n0s4 z$n1s4 z$n2s4 z$n4s4 z$n8s4) true))
(assert
 (and (distinct z$n0s32 z$n8s32 z$n4s32 z$n2s32 z$n1s32) true))
(assert
 (let (($x1144 (= stato z$n1s2)))
 (= z$36 $x1144)))
(assert
 (let (($x731 (= stato z$n2s2)))
 (= z$42 $x731)))
(assert
 (let (($x1147 (or z$36 z$42)))
 (= z$43 $x1147)))
(assert
 (let ((?x1149 (ite z$42 z$n1s2 z$n2s2)))
 (= z$45 ?x1149)))
(assert
 (let (($x698 (= stato z$n0s2)))
 (= z$32 $x698)))
(assert
 (let ((?x1151 (ite z$32 z$n1s2 stato)))
 (= z$47 ?x1151)))
(assert
 (let ((?x1153 (ite z$43 z$45 z$47)))
 (= z$49 ?x1153)))
(assert
 (let (($x1155 (= stato$next z$49)))
 (= z$51 $x1155)))
(assert
 (let (($x1916 (or fu1 fu2)))
 (= z$53 $x1916)))
(assert
 (let (($x1918 (or z$53 fu3)))
 (= z$55 $x1918)))
(assert
 (let (($x1933 (or z$55 fu4)))
 (= z$57 $x1933)))
(assert
 (let ((?x1625 (ite z$57 coda1 coda0)))
 (= z$59 ?x1625)))
(assert
 (let ((?x1621 (ite z$42 z$59 z$n0s3)))
 (= z$61 ?x1621)))
(assert
 (= z$13 (not fu1)))
(assert
 (let ((?x1912 (ite z$13 z$n4s3 coda0)))
 (= z$64 ?x1912)))
(assert
 (let ((?x1910 (ite ru1 z$64 z$n0s3)))
 (= z$66 ?x1910)))
(assert
 (let ((?x1906 (ite z$36 z$66 z$n0s3)))
 (= z$68 ?x1906)))
(assert
 (= z$15 (not fu2)))
(assert
 (let ((?x1900 (ite z$15 z$n2s3 coda0)))
 (= z$71 ?x1900)))
(assert
 (let ((?x1892 (ite ru2 z$71 z$n0s3)))
 (= z$73 ?x1892)))
(assert
 (let ((?x1898 (ite ru1 z$n0s3 z$73)))
 (= z$75 ?x1898)))
(assert
 (let ((?x1641 (ite z$36 z$75 z$n0s3)))
 (= z$77 ?x1641)))
(assert
 (= z$17 (not fu3)))
(assert
 (let ((?x1649 (ite z$17 z$n1s3 coda0)))
 (= z$80 ?x1649)))
(assert
 (let ((?x1888 (ite ru3 z$80 z$n0s3)))
 (= z$82 ?x1888)))
(assert
 (let ((?x1654 (ite ru2 z$n0s3 z$82)))
 (= z$84 ?x1654)))
(assert
 (let ((?x1884 (ite ru1 z$n0s3 z$84)))
 (= z$86 ?x1884)))
(assert
 (let ((?x1876 (ite z$36 z$86 z$n0s3)))
 (= z$88 ?x1876)))
(assert
 (= z$19 (not fu4)))
(assert
 (let ((?x1869 (ite z$19 z$n7s3 coda0)))
 (= z$91 ?x1869)))
(assert
 (let ((?x1865 (ite ru4 z$91 z$n0s3)))
 (= z$93 ?x1865)))
(assert
 (let ((?x1857 (ite ru3 z$n0s3 z$93)))
 (= z$95 ?x1857)))
(assert
 (let ((?x1853 (ite ru2 z$n0s3 z$95)))
 (= z$97 ?x1853)))
(assert
 (let ((?x1852 (ite ru1 z$n0s3 z$97)))
 (= z$99 ?x1852)))
(assert
 (let ((?x1844 (ite z$36 z$99 z$n0s3)))
 (= z$101 ?x1844)))
(assert
 (let ((?x1840 (ite ru4 z$101 coda0)))
 (= z$103 ?x1840)))
(assert
 (let ((?x1835 (ite ru3 z$n0s3 z$103)))
 (= z$105 ?x1835)))
(assert
 (let ((?x1834 (ite ru2 z$n0s3 z$105)))
 (= z$107 ?x1834)))
(assert
 (let ((?x1830 (ite ru1 z$n0s3 z$107)))
 (= z$109 ?x1830)))
(assert
 (let ((?x1823 (ite z$36 z$109 z$n0s3)))
 (= z$111 ?x1823)))
(assert
 (let ((?x1819 (ite ru3 z$88 z$111)))
 (= z$113 ?x1819)))
(assert
 (let ((?x1818 (ite ru2 z$n0s3 z$113)))
 (= z$115 ?x1818)))
(assert
 (let ((?x1807 (ite ru1 z$n0s3 z$115)))
 (= z$117 ?x1807)))
(assert
 (let ((?x1803 (ite z$36 z$117 z$n0s3)))
 (= z$119 ?x1803)))
(assert
 (let ((?x1798 (ite ru2 z$77 z$119)))
 (= z$121 ?x1798)))
(assert
 (let ((?x1791 (ite ru1 z$n0s3 z$121)))
 (= z$123 ?x1791)))
(assert
 (let ((?x1787 (ite z$36 z$123 z$n0s3)))
 (= z$125 ?x1787)))
(assert
 (let ((?x1804 (ite ru1 z$68 z$125)))
 (= z$127 ?x1804)))
(assert
 (let ((?x1783 (ite z$36 z$127 z$n0s3)))
 (= z$129 ?x1783)))
(assert
 (let ((?x1779 (ite z$36 z$129 coda0)))
 (= z$131 ?x1779)))
(assert
 (let ((?x1775 (ite z$42 z$61 z$131)))
 (= z$133 ?x1775)))
(assert
 (let (($x1771 (= coda0$next z$133)))
 (= z$135 $x1771)))
(assert
 (let ((?x1766 (ite z$57 coda2 coda1)))
 (= z$137 ?x1766)))
(assert
 (let ((?x1759 (ite z$42 z$137 z$n0s3)))
 (= z$139 ?x1759)))
(assert
 (let ((?x1758 (ite z$13 coda0 coda1)))
 (= z$141 ?x1758)))
(assert
 (let ((?x1747 (ite ru1 z$141 z$n0s3)))
 (= z$143 ?x1747)))
(assert
 (let ((?x1743 (ite z$36 z$143 z$n0s3)))
 (= z$145 ?x1743)))
(assert
 (let ((?x1739 (ite z$15 coda0 coda1)))
 (= z$147 ?x1739)))
(assert
 (let ((?x1752 (ite ru2 z$147 z$n0s3)))
 (= z$149 ?x1752)))
(assert
 (let ((?x1760 (ite ru1 z$n0s3 z$149)))
 (= z$151 ?x1760)))
(assert
 (let ((?x1731 (ite z$36 z$151 z$n0s3)))
 (= z$153 ?x1731)))
(assert
 (let ((?x1727 (ite z$17 coda0 coda1)))
 (= z$155 ?x1727)))
(assert
 (let ((?x1726 (ite ru3 z$155 z$n0s3)))
 (= z$157 ?x1726)))
(assert
 (let ((?x1715 (ite ru2 z$n0s3 z$157)))
 (= z$159 ?x1715)))
(assert
 (let ((?x1711 (ite ru1 z$n0s3 z$159)))
 (= z$161 ?x1711)))
(assert
 (let ((?x1704 (ite z$36 z$161 z$n0s3)))
 (= z$163 ?x1704)))
(assert
 (let ((?x1697 (ite z$19 coda0 coda1)))
 (= z$165 ?x1697)))
(assert
 (let ((?x1691 (ite ru4 z$165 z$n0s3)))
 (= z$167 ?x1691)))
(assert
 (let ((?x1688 (ite ru3 z$n0s3 z$167)))
 (= z$169 ?x1688)))
(assert
 (let ((?x1682 (ite ru2 z$n0s3 z$169)))
 (= z$171 ?x1682)))
(assert
 (let ((?x1698 (ite ru1 z$n0s3 z$171)))
 (= z$173 ?x1698)))
(assert
 (let ((?x1674 (ite z$36 z$173 z$n0s3)))
 (= z$175 ?x1674)))
(assert
 (let ((?x1633 (ite ru4 z$175 coda1)))
 (= z$177 ?x1633)))
(assert
 (let ((?x1929 (ite ru3 z$n0s3 z$177)))
 (= z$179 ?x1929)))
(assert
 (let ((?x1623 (ite ru2 z$n0s3 z$179)))
 (= z$181 ?x1623)))
(assert
 (let ((?x1638 (ite ru1 z$n0s3 z$181)))
 (= z$183 ?x1638)))
(assert
 (let ((?x1837 (ite z$36 z$183 z$n0s3)))
 (= z$185 ?x1837)))
(assert
 (let ((?x1705 (ite ru3 z$163 z$185)))
 (= z$187 ?x1705)))
(assert
 (let ((?x1646 (ite ru2 z$n0s3 z$187)))
 (= z$189 ?x1646)))
(assert
 (let ((?x1677 (ite ru1 z$n0s3 z$189)))
 (= z$191 ?x1677)))
(assert
 (let ((?x1642 (ite z$36 z$191 z$n0s3)))
 (= z$193 ?x1642)))
(assert
 (let ((?x1893 (ite ru2 z$153 z$193)))
 (= z$195 ?x1893)))
(assert
 (let ((?x1624 (ite ru1 z$n0s3 z$195)))
 (= z$197 ?x1624)))
(assert
 (let ((?x1672 (ite z$36 z$197 z$n0s3)))
 (= z$199 ?x1672)))
(assert
 (let ((?x1714 (ite ru1 z$145 z$199)))
 (= z$201 ?x1714)))
(assert
 (let ((?x1764 (ite z$36 z$201 z$n0s3)))
 (= z$203 ?x1764)))
(assert
 (let ((?x1814 (ite z$36 z$203 coda1)))
 (= z$205 ?x1814)))
(assert
 (let ((?x1862 (ite z$42 z$139 z$205)))
 (= z$207 ?x1862)))
(assert
 (let (($x1874 (= coda1$next z$207)))
 (= z$209 $x1874)))
(assert
 (let ((?x1657 (ite z$57 coda3 coda2)))
 (= z$211 ?x1657)))
(assert
 (let ((?x1661 (ite z$42 z$211 z$n0s3)))
 (= z$213 ?x1661)))
(assert
 (let ((?x1939 (ite z$13 coda1 coda2)))
 (= z$215 ?x1939)))
(assert
 (let ((?x1666 (ite ru1 z$215 z$n0s3)))
 (= z$217 ?x1666)))
(assert
 (let ((?x1942 (ite z$36 z$217 z$n0s3)))
 (= z$219 ?x1942)))
(assert
 (let ((?x1946 (ite z$15 coda1 coda2)))
 (= z$221 ?x1946)))
(assert
 (let ((?x1950 (ite ru2 z$221 z$n0s3)))
 (= z$223 ?x1950)))
(assert
 (let ((?x1954 (ite ru1 z$n0s3 z$223)))
 (= z$225 ?x1954)))
(assert
 (let ((?x1958 (ite z$36 z$225 z$n0s3)))
 (= z$227 ?x1958)))
(assert
 (let ((?x1962 (ite z$17 coda1 coda2)))
 (= z$229 ?x1962)))
(assert
 (let ((?x1966 (ite ru3 z$229 z$n0s3)))
 (= z$231 ?x1966)))
(assert
 (let ((?x1970 (ite ru2 z$n0s3 z$231)))
 (= z$233 ?x1970)))
(assert
 (let ((?x1974 (ite ru1 z$n0s3 z$233)))
 (= z$235 ?x1974)))
(assert
 (let ((?x1978 (ite z$36 z$235 z$n0s3)))
 (= z$237 ?x1978)))
(assert
 (let ((?x1982 (ite z$19 coda1 coda2)))
 (= z$239 ?x1982)))
(assert
 (let ((?x1986 (ite ru4 z$239 z$n0s3)))
 (= z$241 ?x1986)))
(assert
 (let ((?x1990 (ite ru3 z$n0s3 z$241)))
 (= z$243 ?x1990)))
(assert
 (let ((?x1994 (ite ru2 z$n0s3 z$243)))
 (= z$245 ?x1994)))
(assert
 (let ((?x1998 (ite ru1 z$n0s3 z$245)))
 (= z$247 ?x1998)))
(assert
 (let ((?x2002 (ite z$36 z$247 z$n0s3)))
 (= z$249 ?x2002)))
(assert
 (let ((?x2006 (ite ru4 z$249 coda2)))
 (= z$251 ?x2006)))
(assert
 (let ((?x2010 (ite ru3 z$n0s3 z$251)))
 (= z$253 ?x2010)))
(assert
 (let ((?x2014 (ite ru2 z$n0s3 z$253)))
 (= z$255 ?x2014)))
(assert
 (let ((?x2018 (ite ru1 z$n0s3 z$255)))
 (= z$257 ?x2018)))
(assert
 (let ((?x2022 (ite z$36 z$257 z$n0s3)))
 (= z$259 ?x2022)))
(assert
 (let ((?x2026 (ite ru3 z$237 z$259)))
 (= z$261 ?x2026)))
(assert
 (let ((?x2030 (ite ru2 z$n0s3 z$261)))
 (= z$263 ?x2030)))
(assert
 (let ((?x2034 (ite ru1 z$n0s3 z$263)))
 (= z$265 ?x2034)))
(assert
 (let ((?x2038 (ite z$36 z$265 z$n0s3)))
 (= z$267 ?x2038)))
(assert
 (let ((?x2042 (ite ru2 z$227 z$267)))
 (= z$269 ?x2042)))
(assert
 (let ((?x2046 (ite ru1 z$n0s3 z$269)))
 (= z$271 ?x2046)))
(assert
 (let ((?x2050 (ite z$36 z$271 z$n0s3)))
 (= z$273 ?x2050)))
(assert
 (let ((?x2054 (ite ru1 z$219 z$273)))
 (= z$275 ?x2054)))
(assert
 (let ((?x2058 (ite z$36 z$275 z$n0s3)))
 (= z$277 ?x2058)))
(assert
 (let ((?x2062 (ite z$36 z$277 coda2)))
 (= z$279 ?x2062)))
(assert
 (let ((?x2066 (ite z$42 z$213 z$279)))
 (= z$281 ?x2066)))
(assert
 (let (($x2070 (= coda2$next z$281)))
 (= z$283 $x2070)))
(assert
 (let ((?x2074 (ite z$57 z$n0s3 coda3)))
 (= z$285 ?x2074)))
(assert
 (let ((?x2078 (ite z$42 z$285 z$n0s3)))
 (= z$287 ?x2078)))
(assert
 (let ((?x2082 (ite z$13 coda2 coda3)))
 (= z$289 ?x2082)))
(assert
 (let ((?x2086 (ite ru1 z$289 z$n0s3)))
 (= z$291 ?x2086)))
(assert
 (let ((?x2090 (ite z$36 z$291 z$n0s3)))
 (= z$293 ?x2090)))
(assert
 (let ((?x2094 (ite z$15 coda2 coda3)))
 (= z$295 ?x2094)))
(assert
 (let ((?x2098 (ite ru2 z$295 z$n0s3)))
 (= z$297 ?x2098)))
(assert
 (let ((?x2102 (ite ru1 z$n0s3 z$297)))
 (= z$299 ?x2102)))
(assert
 (let ((?x2106 (ite z$36 z$299 z$n0s3)))
 (= z$301 ?x2106)))
(assert
 (let ((?x2110 (ite z$17 coda2 coda3)))
 (= z$303 ?x2110)))
(assert
 (let ((?x2114 (ite ru3 z$303 z$n0s3)))
 (= z$305 ?x2114)))
(assert
 (let ((?x2118 (ite ru2 z$n0s3 z$305)))
 (= z$307 ?x2118)))
(assert
 (let ((?x2122 (ite ru1 z$n0s3 z$307)))
 (= z$309 ?x2122)))
(assert
 (let ((?x2126 (ite z$36 z$309 z$n0s3)))
 (= z$311 ?x2126)))
(assert
 (let ((?x2130 (ite z$19 coda2 coda3)))
 (= z$313 ?x2130)))
(assert
 (let ((?x2134 (ite ru4 z$313 z$n0s3)))
 (= z$315 ?x2134)))
(assert
 (let ((?x2138 (ite ru3 z$n0s3 z$315)))
 (= z$317 ?x2138)))
(assert
 (let ((?x2142 (ite ru2 z$n0s3 z$317)))
 (= z$319 ?x2142)))
(assert
 (let ((?x2146 (ite ru1 z$n0s3 z$319)))
 (= z$321 ?x2146)))
(assert
 (let ((?x2150 (ite z$36 z$321 z$n0s3)))
 (= z$323 ?x2150)))
(assert
 (let ((?x2154 (ite ru4 z$323 coda3)))
 (= z$325 ?x2154)))
(assert
 (let ((?x2158 (ite ru3 z$n0s3 z$325)))
 (= z$327 ?x2158)))
(assert
 (let ((?x2162 (ite ru2 z$n0s3 z$327)))
 (= z$329 ?x2162)))
(assert
 (let ((?x2166 (ite ru1 z$n0s3 z$329)))
 (= z$331 ?x2166)))
(assert
 (let ((?x2170 (ite z$36 z$331 z$n0s3)))
 (= z$333 ?x2170)))
(assert
 (let ((?x2174 (ite ru3 z$311 z$333)))
 (= z$335 ?x2174)))
(assert
 (let ((?x2178 (ite ru2 z$n0s3 z$335)))
 (= z$337 ?x2178)))
(assert
 (let ((?x2182 (ite ru1 z$n0s3 z$337)))
 (= z$339 ?x2182)))
(assert
 (let ((?x2186 (ite z$36 z$339 z$n0s3)))
 (= z$341 ?x2186)))
(assert
 (let ((?x2190 (ite ru2 z$301 z$341)))
 (= z$343 ?x2190)))
(assert
 (let ((?x2194 (ite ru1 z$n0s3 z$343)))
 (= z$345 ?x2194)))
(assert
 (let ((?x2198 (ite z$36 z$345 z$n0s3)))
 (= z$347 ?x2198)))
(assert
 (let ((?x2202 (ite ru1 z$293 z$347)))
 (= z$349 ?x2202)))
(assert
 (let ((?x2206 (ite z$36 z$349 z$n0s3)))
 (= z$351 ?x2206)))
(assert
 (let ((?x2210 (ite z$36 z$351 coda3)))
 (= z$353 ?x2210)))
(assert
 (let ((?x2214 (ite z$42 z$287 z$353)))
 (= z$355 ?x2214)))
(assert
 (let (($x2218 (= coda3$next z$355)))
 (= z$357 $x2218)))
(assert
 (let (($x2223 (ite z$32 REQUEST1 ru1)))
 (= z$360 $x2223)))
(assert
 (let (($x2227 (ite z$42 REQUEST1 z$360)))
 (= z$362 $x2227)))
(assert
 (= z$364 (= ru1$next z$362)))
(assert
 (let (($x2236 (ite z$32 REQUEST2 ru2)))
 (= z$367 $x2236)))
(assert
 (let (($x2240 (ite z$42 REQUEST2 z$367)))
 (= z$369 $x2240)))
(assert
 (= z$371 (= ru2$next z$369)))
(assert
 (let (($x2249 (ite z$32 REQUEST3 ru3)))
 (= z$374 $x2249)))
(assert
 (let (($x2253 (ite z$42 REQUEST3 z$374)))
 (= z$376 $x2253)))
(assert
 (= z$378 (= ru3$next z$376)))
(assert
 (let (($x2262 (ite z$32 REQUEST4 ru4)))
 (= z$381 $x2262)))
(assert
 (let (($x2266 (ite z$42 REQUEST4 z$381)))
 (= z$383 $x2266)))
(assert
 (= z$385 (= ru4$next z$383)))
(assert
 (let (($x2274 (ite z$36 ru1 fu1)))
 (= z$387 $x2274)))
(assert
 (= z$389 (= fu1$next z$387)))
(assert
 (let (($x2282 (ite z$36 ru2 fu2)))
 (= z$391 $x2282)))
(assert
 (= z$393 (= fu2$next z$391)))
(assert
 (let (($x2290 (ite z$36 ru3 fu3)))
 (= z$395 $x2290)))
(assert
 (= z$397 (= fu3$next z$395)))
(assert
 (let (($x2298 (ite z$36 ru4 fu4)))
 (= z$399 $x2298)))
(assert
 (= z$401 (= fu4$next z$399)))
(assert
 (let (($x2306 (= coda0 z$n1s3)))
 (= z$403 $x2306)))
(assert
 (let (($x2309 (= coda0 z$n7s3)))
 (= z$404 $x2309)))
(assert
 (let (($x2312 (or z$403 z$404)))
 (= z$405 $x2312)))
(assert
 (let ((?x2316 (ite z$404 z$n1s4 z$n2s4)))
 (= z$409 ?x2316)))
(assert
 (let (($x2320 (= coda0 z$n2s3)))
 (= z$411 $x2320)))
(assert
 (let (($x2323 (= coda0 z$n4s3)))
 (= z$413 $x2323)))
(assert
 (let ((?x2326 (ite z$413 z$n8s4 z$n0s4)))
 (= z$415 ?x2326)))
(assert
 (let ((?x2330 (ite z$411 z$n4s4 z$415)))
 (= z$417 ?x2330)))
(assert
 (let ((?x2334 (ite z$405 z$409 z$417)))
 (= z$419 ?x2334)))
(assert
 (let ((?x2338 (ite z$57 z$419 z$n0s4)))
 (= z$421 ?x2338)))
(assert
 (let ((?x2342 (ite z$42 z$421 z$n0s4)))
 (= z$423 ?x2342)))
(assert
 (let ((?x2346 (ite z$57 z$423 grant)))
 (= z$425 ?x2346)))
(assert
 (let ((?x2350 (ite z$42 z$425 z$n0s4)))
 (= z$427 ?x2350)))
(assert
 (let ((?x2354 (ite z$42 z$427 grant)))
 (= z$429 ?x2354)))
(assert
 (let (($x2358 (= grant$next z$429)))
 (= z$431 $x2358)))
(assert
 (let (($x655 (= GRANT_O$next z$n0s4)))
 (= z$513 $x655)))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (= z$468 ?x135)))
(assert
 (= z$514 (and (distinct z$468 z$n0s32) true)))
(assert
 (= z$515 (and z$513 z$514)))
(assert
 (= z$517 (not z$515)))
(assert
 (let (($x661 (= GRANT_O z$n0s4)))
 (= z$2 $x661)))
(assert
 (let ((?x292 (Concat_32_4_28 GRANT_O z$n0s28)))
 (= z$435 ?x292)))
(assert
 (= z$486 (and (distinct z$435 z$n0s32) true)))
(assert
 (= z$512 (and z$2 z$486)))
(assert
 (= z$516 (not z$512)))
(assert
 (let ((?x2361 (ite z$36 grant GRANT_O)))
 (= z$37 ?x2361)))
(assert
 (let (($x2365 (= GRANT_O$next z$37)))
 (= z$39 $x2365)))
(assert
 (let (($x2368 (and z$51 z$135 z$209 z$283 z$357 z$364 z$371 z$378 z$385 z$389 z$393 z$397 z$401 z$431 z$517 z$516 z$39)))
 (= z$627 $x2368)))
(assert
 z$627)
(assert
 (let (($x1077 (= z$13 (not fu1))))
 (=> p$0 $x1077)))
(assert
 (=> p$0 z$13))
(assert
 (let (($x1079 (= z$15 (not fu2))))
 (=> p$1 $x1079)))
(assert
 (=> p$1 z$15))
(assert
 (let (($x1081 (= z$17 (not fu3))))
 (=> p$2 $x1081)))
(assert
 (=> p$2 z$17))
(assert
 (let (($x1083 (= z$19 (not fu4))))
 (=> p$3 $x1083)))
(assert
 (=> p$3 z$19))
(assert
 (let (($x1127 (= z$23 (not ru1))))
 (=> p$4 $x1127)))
(assert
 (=> p$4 z$23))
(assert
 (let (($x1129 (= z$25 (not ru2))))
 (=> p$5 $x1129)))
(assert
 (=> p$5 z$25))
(assert
 (let (($x1131 (= z$27 (not ru3))))
 (=> p$6 $x1131)))
(assert
 (=> p$6 z$27))
(assert
 (let (($x402 (= z$29 (not ru4))))
 (=> p$7 $x402)))
(assert
 (=> p$7 z$29))
(assert
 (let (($x2863 (= z$467 (not prop$next))))
 (=> p$8 $x2863)))
(assert
 (=> p$8 z$467))
(assert
 (let (($x2827 (= z$617 (not z$616))))
 (=> p$9 $x2827)))
(assert
 (=> p$9 z$617))
(assert
 (let (($x2837 (= z$619 (not z$618))))
 (=> p$10 $x2837)))
(assert
 (=> p$10 z$619))
(assert
 (let (($x2846 (= z$621 (not z$620))))
 (=> p$11 $x2846)))
(assert
 (=> p$11 z$621))
(assert
 (let (($x2855 (= z$623 (not z$622))))
 (=> p$12 $x2855)))
(assert
 (=> p$12 z$623))
(assert
 (let (($x661 (= GRANT_O z$n0s4)))
 (let (($x401 (= z$2 $x661)))
 (=> p$13 $x401))))
(assert
 (=> p$13 z$2))
(assert
 (let (($x691 (= coda0 z$n0s3)))
 (let (($x1069 (= z$5 $x691)))
 (=> p$14 $x1069))))
(assert
 (=> p$14 z$5))
(assert
 (let (($x689 (= coda1 z$n0s3)))
 (let (($x1071 (= z$7 $x689)))
 (=> p$15 $x1071))))
(assert
 (=> p$15 z$7))
(assert
 (let (($x687 (= coda2 z$n0s3)))
 (let (($x1073 (= z$9 $x687)))
 (=> p$16 $x1073))))
(assert
 (=> p$16 z$9))
(assert
 (let (($x685 (= coda3 z$n0s3)))
 (let (($x1075 (= z$11 $x685)))
 (=> p$17 $x1075))))
(assert
 (=> p$17 z$11))
(assert
 (let (($x675 (= grant z$n0s4)))
 (let (($x1125 (= z$21 $x675)))
 (=> p$18 $x1125))))
(assert
 (=> p$18 z$21))
(assert
 (let (($x1144 (= stato z$n1s2)))
 (let (($x732 (= z$36 $x1144)))
 (=> p$19 $x732))))
(assert
 (=> p$19 z$36))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (let (($x134 (= z$468 ?x135)))
 (=> p$20 $x134))))
(assert
 (let (($x657 (= z$514 (and (distinct z$468 z$n0s32) true))))
 (=> p$20 $x657)))
(assert
 (=> p$20 z$514))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (let (($x134 (= z$468 ?x135)))
 (=> p$21 $x134))))
(assert
 (let (($x2877 (= z$563 (and (distinct z$468 z$n8s32) true))))
 (=> p$21 $x2877)))
(assert
 (=> p$21 z$563))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (let (($x134 (= z$468 ?x135)))
 (=> p$22 $x134))))
(assert
 (let (($x2886 (= z$568 (and (distinct z$468 z$n4s32) true))))
 (=> p$22 $x2886)))
(assert
 (=> p$22 z$568))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (let (($x134 (= z$468 ?x135)))
 (=> p$23 $x134))))
(assert
 (let (($x2895 (= z$573 (and (distinct z$468 z$n2s32) true))))
 (=> p$23 $x2895)))
(assert
 (=> p$23 z$573))
(assert
 (let ((?x135 (Concat_32_4_28 GRANT_O$next z$n0s28)))
 (let (($x134 (= z$468 ?x135)))
 (=> p$24 $x134))))
(assert
 (let (($x2904 (= z$578 (and (distinct z$468 z$n1s32) true))))
 (=> p$24 $x2904)))
(assert
 (=> p$24 z$578))
(check-sat)
(assert p$20)
(assert p$18)
(set-info :status sat)
(check-sat)
(exit)
