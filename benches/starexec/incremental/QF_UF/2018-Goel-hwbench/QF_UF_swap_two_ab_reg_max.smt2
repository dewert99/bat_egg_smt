(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: swap_two
query-maker: "Z3"
query-time: 0.212000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt20 0)
(declare-sort utt32 0)
(declare-sort utt12 0)
(declare-fun z$n201s20 () utt20)
(declare-fun z$n200s20 () utt20)
(declare-fun z$n100s20 () utt20)
(declare-fun z$n201s32 () utt32)
(declare-fun z$n200s32 () utt32)
(declare-fun z$n100s32 () utt32)
(declare-fun a () utt20)
(declare-fun b$next () utt20)
(declare-fun a$next () utt20)
(declare-fun Concat_32_20_12 (utt20 utt12) utt32)
(declare-fun z$n0s12 () utt12)
(declare-fun z$31 () utt32)
(declare-fun z$14 () utt32)
(declare-fun b () utt20)
(declare-fun z$8 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$53 () Bool)
(declare-fun z$54 () Bool)
(declare-fun z$56 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$51 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$114 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$30 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$109 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$111 () Bool)
(declare-fun p$6 () Bool)
(assert
 (and (distinct z$n100s20 z$n200s20 z$n201s20) true))
(assert
 (and (distinct z$n100s32 z$n200s32 z$n201s32) true))
(assert
 (let (($x291 (= b$next a)))
 (= z$8 $x291)))
(assert
 (let (($x501 (= a$next z$n100s20)))
 (= z$52 $x501)))
(assert
 (let ((?x356 (Concat_32_20_12 a$next z$n0s12)))
 (= z$31 ?x356)))
(assert
 (= z$53 (and (distinct z$31 z$n100s32) true)))
(assert
 (= z$54 (and z$52 z$53)))
(assert
 (= z$56 (not z$54)))
(assert
 (let (($x174 (= a z$n100s20)))
 (= z$2 $x174)))
(assert
 (let ((?x285 (Concat_32_20_12 a z$n0s12)))
 (= z$14 ?x285)))
(assert
 (= z$40 (and (distinct z$14 z$n100s32) true)))
(assert
 (= z$51 (and z$2 z$40)))
(assert
 (= z$55 (not z$51)))
(assert
 (let (($x335 (= a$next b)))
 (= z$10 $x335)))
(assert
 (let (($x176 (= b z$n200s20)))
 (= z$5 $x176)))
(assert
 (= z$75 (and (distinct z$31 z$n200s32) true)))
(assert
 (= z$85 (and z$10 z$5 z$75)))
(assert
 (= z$86 (not z$85)))
(assert
 (= z$114 (and z$8 z$56 z$55 z$86 z$10)))
(assert
 z$114)
(assert
 (let (($x545 (= z$30 (not prop$next))))
 (=> p$0 $x545)))
(assert
 (=> p$0 z$30))
(assert
 (=> p$1 true))
(assert
 (=> p$2 true))
(assert
 (let ((?x356 (Concat_32_20_12 a$next z$n0s12)))
 (let (($x562 (= z$31 ?x356)))
 (=> p$3 $x562))))
(assert
 (let (($x173 (= z$53 (and (distinct z$31 z$n100s32) true))))
 (=> p$3 $x173)))
(assert
 (=> p$3 z$53))
(assert
 (let ((?x356 (Concat_32_20_12 a$next z$n0s12)))
 (let (($x562 (= z$31 ?x356)))
 (=> p$4 $x562))))
(assert
 (let (($x497 (= z$75 (and (distinct z$31 z$n200s32) true))))
 (=> p$4 $x497)))
(assert
 (=> p$4 z$75))
(assert
 (let (($x790 (= b z$n100s20)))
 (let (($x788 (= z$109 $x790)))
 (=> p$5 $x788))))
(assert
 (=> p$5 z$109))
(assert
 (let (($x527 (= a z$n200s20)))
 (let (($x440 (= z$111 $x527)))
 (=> p$6 $x440))))
(assert
 (=> p$6 z$111))
(check-sat)
(assert p$5)
(set-info :status sat)
(check-sat)
(exit)
