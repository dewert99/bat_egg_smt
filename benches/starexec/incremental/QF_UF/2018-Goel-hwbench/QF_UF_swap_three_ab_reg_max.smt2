(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: swap_three
query-maker: "Z3"
query-time: 0.224000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt20 0)
(declare-sort utt32 0)
(declare-sort utt12 0)
(declare-fun z$n6s20 () utt20)
(declare-fun z$n7s20 () utt20)
(declare-fun z$n5s20 () utt20)
(declare-fun z$n1s20 () utt20)
(declare-fun z$n6s32 () utt32)
(declare-fun z$n7s32 () utt32)
(declare-fun z$n5s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun c () utt20)
(declare-fun b$next () utt20)
(declare-fun a () utt20)
(declare-fun c$next () utt20)
(declare-fun a$next () utt20)
(declare-fun Concat_32_20_12 (utt20 utt12) utt32)
(declare-fun z$n0s12 () utt12)
(declare-fun z$40 () utt32)
(declare-fun z$19 () utt32)
(declare-fun b () utt20)
(declare-fun z$13 () Bool)
(declare-fun z$15 () Bool)
(declare-fun z$69 () Bool)
(declare-fun z$70 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$68 () Bool)
(declare-fun z$72 () Bool)
(declare-fun z$11 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$92 () Bool)
(declare-fun z$107 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$140 () Bool)
(declare-fun z$199 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$39 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$143 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$193 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$195 () Bool)
(declare-fun p$6 () Bool)
(declare-fun z$197 () Bool)
(declare-fun p$7 () Bool)
(assert
 (and (distinct z$n1s20 z$n5s20 z$n7s20 z$n6s20) true))
(assert
 (and (distinct z$n1s32 z$n5s32 z$n7s32 z$n6s32) true))
(assert
 (let (($x904 (= b$next c)))
 (= z$13 $x904)))
(assert
 (let (($x1584 (= c$next a)))
 (= z$15 $x1584)))
(assert
 (let (($x742 (= a$next z$n1s20)))
 (= z$69 $x742)))
(assert
 (let ((?x478 (Concat_32_20_12 a$next z$n0s12)))
 (= z$40 ?x478)))
(assert
 (= z$70 (and (distinct z$40 z$n1s32) true)))
(assert
 (= z$71 (and z$69 z$70)))
(assert
 (= z$73 (not z$71)))
(assert
 (let (($x421 (= a z$n1s20)))
 (= z$2 $x421)))
(assert
 (let ((?x29 (Concat_32_20_12 a z$n0s12)))
 (= z$19 ?x29)))
(assert
 (= z$52 (and (distinct z$19 z$n1s32) true)))
(assert
 (= z$68 (and z$2 z$52)))
(assert
 (= z$72 (not z$68)))
(assert
 (let (($x346 (= a$next b)))
 (= z$11 $x346)))
(assert
 (let (($x164 (= b z$n5s20)))
 (= z$5 $x164)))
(assert
 (= z$92 (and (distinct z$40 z$n5s32) true)))
(assert
 (= z$107 (and z$11 z$5 z$92)))
(assert
 (= z$108 (not z$107)))
(assert
 (let (($x248 (= b z$n7s20)))
 (= z$133 $x248)))
(assert
 (= z$97 (and (distinct z$40 z$n7s32) true)))
(assert
 (= z$139 (and z$133 z$97 z$11)))
(assert
 (= z$140 (not z$139)))
(assert
 (= z$199 (and z$13 z$15 z$73 z$72 z$108 z$140 z$11)))
(assert
 z$199)
(assert
 (let (($x1705 (= z$39 (not prop$next))))
 (=> p$0 $x1705)))
(assert
 (=> p$0 z$39))
(assert
 (let ((?x478 (Concat_32_20_12 a$next z$n0s12)))
 (let (($x913 (= z$40 ?x478)))
 (=> p$1 $x913))))
(assert
 (let (($x745 (= z$70 (and (distinct z$40 z$n1s32) true))))
 (=> p$1 $x745)))
(assert
 (=> p$1 z$70))
(assert
 (let ((?x478 (Concat_32_20_12 a$next z$n0s12)))
 (let (($x913 (= z$40 ?x478)))
 (=> p$2 $x913))))
(assert
 (let (($x290 (= z$92 (and (distinct z$40 z$n5s32) true))))
 (=> p$2 $x290)))
(assert
 (=> p$2 z$92))
(assert
 (let ((?x478 (Concat_32_20_12 a$next z$n0s12)))
 (let (($x913 (= z$40 ?x478)))
 (=> p$3 $x913))))
(assert
 (let (($x849 (= z$97 (and (distinct z$40 z$n7s32) true))))
 (=> p$3 $x849)))
(assert
 (=> p$3 z$97))
(assert
 (let (($x599 (= z$143 (and (distinct b z$n7s20) true))))
 (=> p$4 $x599)))
(assert
 (=> p$4 z$143))
(assert
 (let (($x1350 (= b z$n1s20)))
 (let (($x1086 (= z$193 $x1350)))
 (=> p$5 $x1086))))
(assert
 (=> p$5 z$193))
(assert
 (let (($x1477 (= a z$n7s20)))
 (let (($x233 (= z$195 $x1477)))
 (=> p$6 $x233))))
(assert
 (=> p$6 z$195))
(assert
 (let (($x678 (= c z$n5s20)))
 (let (($x968 (= z$197 $x678)))
 (=> p$7 $x968))))
(assert
 (=> p$7 z$197))
(check-sat)
(assert p$1)
(set-info :status sat)
(check-sat)
(exit)
