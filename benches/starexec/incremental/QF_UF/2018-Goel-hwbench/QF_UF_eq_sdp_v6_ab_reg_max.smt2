(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v6
query-maker: "Z3"
query-time: 3.815000 ms
query-class: abstract
query-category: assume
query-type: regular
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt8 0)
(declare-fun z$n66s8 () utt8)
(declare-fun z$n193s8 () utt8)
(declare-fun z$n126s8 () utt8)
(declare-fun z$n132s8 () utt8)
(declare-fun z$n14s8 () utt8)
(declare-fun z$n131s8 () utt8)
(declare-fun z$n161s8 () utt8)
(declare-fun z$n64s8 () utt8)
(declare-fun z$n238s8 () utt8)
(declare-fun z$n110s8 () utt8)
(declare-fun z$n192s8 () utt8)
(declare-fun z$n223s8 () utt8)
(declare-fun z$n28s8 () utt8)
(declare-fun z$n127s8 () utt8)
(declare-fun z$n142s8 () utt8)
(declare-fun z$n24s8 () utt8)
(declare-fun z$n33s8 () utt8)
(declare-fun z$n89s8 () utt8)
(declare-fun z$n255s8 () utt8)
(declare-fun z$n194s8 () utt8)
(declare-fun z$n217s8 () utt8)
(declare-fun z$n17s8 () utt8)
(declare-fun z$n124s8 () utt8)
(declare-fun z$n242s8 () utt8)
(declare-fun z$n134s8 () utt8)
(declare-fun z$n41s8 () utt8)
(declare-fun z$n129s8 () utt8)
(declare-fun z$n144s8 () utt8)
(declare-fun z$n72s8 () utt8)
(declare-fun z$n65s8 () utt8)
(declare-fun z$n138s8 () utt8)
(declare-fun z$n128s8 () utt8)
(declare-fun z$n141s8 () utt8)
(declare-fun z$n13s8 () utt8)
(declare-fun z$n204s8 () utt8)
(declare-fun z$n6s8 () utt8)
(declare-fun z$n3s8 () utt8)
(declare-fun z$n16s8 () utt8)
(declare-fun z$n4s8 () utt8)
(declare-fun z$n248s8 () utt8)
(declare-fun z$n98s8 () utt8)
(declare-fun z$n252s8 () utt8)
(declare-fun z$n96s8 () utt8)
(declare-fun z$n254s8 () utt8)
(declare-fun z$n100s8 () utt8)
(declare-fun z$n10s8 () utt8)
(declare-fun z$n97s8 () utt8)
(declare-fun z$n8s8 () utt8)
(declare-fun z$n231s8 () utt8)
(declare-fun z$n7s8 () utt8)
(declare-fun z$n5s8 () utt8)
(declare-fun z$n2s8 () utt8)
(declare-fun z$n140s8 () utt8)
(declare-fun z$n123s8 () utt8)
(declare-fun z$n26s8 () utt8)
(declare-fun z$n158s8 () utt8)
(declare-fun z$n196s8 () utt8)
(declare-fun z$n48s8 () utt8)
(declare-fun z$n137s8 () utt8)
(declare-fun z$n1s8 () utt8)
(declare-fun z$n0s8 () utt8)
(declare-fun rb1 () utt8)
(declare-fun z$44 () utt8)
(declare-fun rb2$next () utt8)
(declare-fun c () utt8)
(declare-fun z$53 () utt8)
(declare-fun rc1$next () utt8)
(declare-fun rc1 () utt8)
(declare-fun z$57 () utt8)
(declare-fun rc2$next () utt8)
(declare-fun a () utt8)
(declare-fun z$80 () utt8)
(declare-fun ra1$next () utt8)
(declare-fun ra1 () utt8)
(declare-fun z$84 () utt8)
(declare-fun ra2$next () utt8)
(declare-fun b () utt8)
(declare-fun z$93 () utt8)
(declare-fun rb1$next () utt8)
(declare-fun im.p1_a$next () utt8)
(declare-fun im.p1_b$next () utt8)
(declare-fun im.p1_c$next () utt8)
(declare-fun BitWiseAnd_8_8_8 (utt8 utt8) utt8)
(declare-fun im.p1_a () utt8)
(declare-fun z$110 () utt8)
(declare-fun Add_8_8_8 (utt8 utt8) utt8)
(declare-fun im.p1_b () utt8)
(declare-fun z$113 () utt8)
(declare-fun Sub_8_8_8 (utt8 utt8) utt8)
(declare-fun z$115 () utt8)
(declare-fun z$117 () utt8)
(declare-fun z$119 () utt8)
(declare-fun im.p2_m$next () utt8)
(declare-fun im.p1_c () utt8)
(declare-fun z$123 () utt8)
(declare-fun im.p2_c$next () utt8)
(declare-fun rb3$next () utt8)
(declare-fun ra3$next () utt8)
(declare-fun z$170 () utt8)
(declare-fun rb3 () utt8)
(declare-fun ra3 () utt8)
(declare-fun z$142 () utt8)
(declare-fun z$350 () utt8)
(declare-fun im.p3_n$next () utt8)
(declare-fun im.p3_n () utt8)
(declare-fun rb2 () utt8)
(declare-fun ra2 () utt8)
(declare-fun z$718 () utt8)
(declare-fun im.p2_m () utt8)
(declare-fun rc2 () utt8)
(declare-fun im.p2_c () utt8)
(declare-fun z$168 () utt8)
(declare-fun z$172 () utt8)
(declare-fun rc3$next () utt8)
(declare-fun z$176 () utt8)
(declare-fun z$48 () utt8)
(declare-fun z$61 () utt8)
(declare-fun z$88 () utt8)
(declare-fun z$127 () utt8)
(declare-fun z$129 () utt8)
(declare-fun z$131 () utt8)
(declare-fun z$133 () utt8)
(declare-fun z$362 () utt8)
(declare-fun z$958 () utt8)
(declare-fun z$747 () utt8)
(declare-fun z$174 () utt8)
(declare-fun z$140 () utt8)
(declare-fun z$144 () utt8)
(declare-fun rc3 () utt8)
(declare-fun z$148 () utt8)
(declare-fun z$146 () utt8)
(declare-fun z$1352 () utt8)
(declare-fun z$178 () utt8)
(declare-fun z$1409 () utt8)
(declare-fun z$1401 () utt8)
(declare-fun z$1406 () utt8)
(declare-fun z$1436 () utt8)
(declare-fun z$1441 () utt8)
(declare-fun z$1446 () utt8)
(declare-fun z$1449 () utt8)
(declare-fun z$1465 () utt8)
(declare-fun z$1434 () utt8)
(declare-fun im.reset () Bool)
(declare-fun z$46 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$59 () Bool)
(declare-fun ctl_b () Bool)
(declare-fun z$67 () Bool)
(declare-fun ctl_b1$next () Bool)
(declare-fun z$69 () Bool)
(declare-fun ctl_b1 () Bool)
(declare-fun z$71 () Bool)
(declare-fun ctl_b2$next () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$82 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$95 () Bool)
(declare-fun im.p1_ctl_2$next () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$99 () Bool)
(declare-fun z$101 () Bool)
(declare-fun z$103 () Bool)
(declare-fun im.p1_ctl_2 () Bool)
(declare-fun z$105 () Bool)
(declare-fun im.p2_ctl_2$next () Bool)
(declare-fun z$107 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$121 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$197 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$199 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$34 () Bool)
(declare-fun z$28 () Bool)
(declare-fun z$196 () Bool)
(declare-fun z$201 () Bool)
(declare-fun Extract_1_0_0_8 (utt8) Bool)
(declare-fun z$166 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$138 () Bool)
(declare-fun z$233 () Bool)
(declare-fun z$235 () Bool)
(declare-fun z$361 () Bool)
(declare-fun z$386 () Bool)
(declare-fun z$387 () Bool)
(declare-fun z$389 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$388 () Bool)
(declare-fun z$410 () Bool)
(declare-fun z$422 () Bool)
(declare-fun z$451 () Bool)
(declare-fun z$455 () Bool)
(declare-fun z$452 () Bool)
(declare-fun z$453 () Bool)
(declare-fun z$454 () Bool)
(declare-fun z$459 () Bool)
(declare-fun z$719 () Bool)
(declare-fun z$324 () Bool)
(declare-fun im.p2_ctl_2 () Bool)
(declare-fun z$18 () Bool)
(declare-fun z$237 () Bool)
(declare-fun z$275 () Bool)
(declare-fun z$50 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$90 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$721 () Bool)
(declare-fun z$722 () Bool)
(declare-fun z$498 () Bool)
(declare-fun z$253 () Bool)
(declare-fun z$30 () Bool)
(declare-fun z$790 () Bool)
(declare-fun z$793 () Bool)
(declare-fun z$533 () Bool)
(declare-fun z$392 () Bool)
(declare-fun z$791 () Bool)
(declare-fun z$792 () Bool)
(declare-fun z$803 () Bool)
(declare-fun z$755 () Bool)
(declare-fun z$830 () Bool)
(declare-fun z$831 () Bool)
(declare-fun z$833 () Bool)
(declare-fun z$752 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$829 () Bool)
(declare-fun z$832 () Bool)
(declare-fun z$959 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$961 () Bool)
(declare-fun z$962 () Bool)
(declare-fun z$748 () Bool)
(declare-fun z$1027 () Bool)
(declare-fun z$1028 () Bool)
(declare-fun z$443 () Bool)
(declare-fun z$336 () Bool)
(declare-fun z$1099 () Bool)
(declare-fun z$1103 () Bool)
(declare-fun z$1100 () Bool)
(declare-fun z$1101 () Bool)
(declare-fun z$1102 () Bool)
(declare-fun z$1108 () Bool)
(declare-fun z$1045 () Bool)
(declare-fun z$326 () Bool)
(declare-fun z$1127 () Bool)
(declare-fun z$1131 () Bool)
(declare-fun z$1128 () Bool)
(declare-fun z$1129 () Bool)
(declare-fun z$1130 () Bool)
(declare-fun z$1136 () Bool)
(declare-fun z$273 () Bool)
(declare-fun z$468 () Bool)
(declare-fun z$286 () Bool)
(declare-fun z$316 () Bool)
(declare-fun z$1155 () Bool)
(declare-fun z$1156 () Bool)
(declare-fun z$266 () Bool)
(declare-fun z$467 () Bool)
(declare-fun z$1183 () Bool)
(declare-fun z$1187 () Bool)
(declare-fun z$1141 () Bool)
(declare-fun z$1184 () Bool)
(declare-fun z$1185 () Bool)
(declare-fun z$1186 () Bool)
(declare-fun z$1191 () Bool)
(declare-fun z$1134 () Bool)
(declare-fun z$1206 () Bool)
(declare-fun z$1208 () Bool)
(declare-fun z$1139 () Bool)
(declare-fun z$1207 () Bool)
(declare-fun z$1211 () Bool)
(declare-fun z$1161 () Bool)
(declare-fun z$280 () Bool)
(declare-fun z$1224 () Bool)
(declare-fun z$1225 () Bool)
(declare-fun z$1073 () Bool)
(declare-fun z$1249 () Bool)
(declare-fun z$1250 () Bool)
(declare-fun z$1307 () Bool)
(declare-fun z$1353 () Bool)
(declare-fun z$1253 () Bool)
(declare-fun z$444 () Bool)
(declare-fun z$1355 () Bool)
(declare-fun z$1356 () Bool)
(declare-fun ctl_b2 () Bool)
(declare-fun z$75 () Bool)
(declare-fun ctl_b3$next () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$1479 () Bool)
(declare-fun z$1 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$3 () Bool)
(declare-fun p$1 () Bool)
(declare-fun ctl_b3 () Bool)
(declare-fun z$5 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$14 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$165 () Bool)
(declare-fun p$5 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$249 () Bool)
(declare-fun p$8 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$257 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$267 () Bool)
(declare-fun p$11 () Bool)
(declare-fun z$268 () Bool)
(declare-fun p$12 () Bool)
(declare-fun z$270 () Bool)
(declare-fun p$13 () Bool)
(declare-fun z$271 () Bool)
(declare-fun p$14 () Bool)
(declare-fun p$15 () Bool)
(declare-fun z$277 () Bool)
(declare-fun p$16 () Bool)
(declare-fun z$279 () Bool)
(declare-fun p$17 () Bool)
(declare-fun p$18 () Bool)
(declare-fun p$19 () Bool)
(declare-fun z$287 () Bool)
(declare-fun p$20 () Bool)
(declare-fun z$290 () Bool)
(declare-fun p$21 () Bool)
(declare-fun p$22 () Bool)
(declare-fun p$23 () Bool)
(declare-fun p$24 () Bool)
(declare-fun z$427 () Bool)
(declare-fun p$25 () Bool)
(declare-fun z$428 () Bool)
(declare-fun p$26 () Bool)
(declare-fun p$27 () Bool)
(declare-fun p$28 () Bool)
(declare-fun z$445 () Bool)
(declare-fun p$29 () Bool)
(declare-fun z$725 () Bool)
(declare-fun p$30 () Bool)
(declare-fun p$31 () Bool)
(declare-fun z$1046 () Bool)
(declare-fun p$32 () Bool)
(declare-fun z$1048 () Bool)
(declare-fun p$33 () Bool)
(declare-fun z$1114 () Bool)
(declare-fun p$34 () Bool)
(declare-fun z$1115 () Bool)
(declare-fun p$35 () Bool)
(declare-fun z$1168 () Bool)
(declare-fun p$36 () Bool)
(declare-fun z$1199 () Bool)
(declare-fun p$37 () Bool)
(declare-fun z$1200 () Bool)
(declare-fun p$38 () Bool)
(declare-fun z$1215 () Bool)
(declare-fun p$39 () Bool)
(declare-fun z$1399 () Bool)
(declare-fun z$1400 () Bool)
(declare-fun p$40 () Bool)
(declare-fun z$1404 () Bool)
(declare-fun z$1405 () Bool)
(declare-fun p$41 () Bool)
(declare-fun z$1426 () Bool)
(declare-fun z$1427 () Bool)
(declare-fun p$42 () Bool)
(declare-fun z$1429 () Bool)
(declare-fun p$43 () Bool)
(declare-fun z$1431 () Bool)
(declare-fun p$44 () Bool)
(declare-fun z$1433 () Bool)
(declare-fun p$45 () Bool)
(declare-fun p$46 () Bool)
(declare-fun z$1438 () Bool)
(declare-fun z$1440 () Bool)
(declare-fun p$47 () Bool)
(declare-fun z$1443 () Bool)
(declare-fun p$48 () Bool)
(declare-fun z$1444 () Bool)
(declare-fun z$1445 () Bool)
(declare-fun p$49 () Bool)
(declare-fun z$1448 () Bool)
(declare-fun p$50 () Bool)
(declare-fun z$1451 () Bool)
(declare-fun p$51 () Bool)
(declare-fun z$1453 () Bool)
(declare-fun p$52 () Bool)
(declare-fun z$1455 () Bool)
(declare-fun p$53 () Bool)
(declare-fun z$1457 () Bool)
(declare-fun p$54 () Bool)
(declare-fun p$55 () Bool)
(declare-fun z$1467 () Bool)
(declare-fun p$56 () Bool)
(declare-fun z$1468 () Bool)
(declare-fun p$57 () Bool)
(declare-fun z$1469 () Bool)
(declare-fun p$58 () Bool)
(declare-fun z$1470 () Bool)
(declare-fun z$1471 () Bool)
(declare-fun p$59 () Bool)
(declare-fun z$1472 () Bool)
(declare-fun p$60 () Bool)
(declare-fun p$61 () Bool)
(declare-fun z$1473 () Bool)
(declare-fun z$1474 () Bool)
(declare-fun p$62 () Bool)
(declare-fun p$63 () Bool)
(declare-fun z$1475 () Bool)
(declare-fun p$64 () Bool)
(declare-fun z$1476 () Bool)
(declare-fun z$22 () Bool)
(declare-fun p$65 () Bool)
(declare-fun p$66 () Bool)
(declare-fun p$67 () Bool)
(declare-fun z$40 () Bool)
(declare-fun p$68 () Bool)
(declare-fun p$69 () Bool)
(declare-fun p$70 () Bool)
(declare-fun z$1359 () Bool)
(declare-fun p$71 () Bool)
(declare-fun p$72 () Bool)
(declare-fun z$1361 () Bool)
(declare-fun p$73 () Bool)
(declare-fun z$1435 () Bool)
(declare-fun p$74 () Bool)
(declare-fun z$1461 () Bool)
(declare-fun z$1462 () Bool)
(declare-fun p$75 () Bool)
(declare-fun z$1463 () Bool)
(declare-fun p$76 () Bool)
(declare-fun z$1464 () Bool)
(declare-fun p$77 () Bool)
(declare-fun p$78 () Bool)
(declare-fun z$1466 () Bool)
(assert
 (and (distinct z$n0s8 z$n1s8 z$n137s8 z$n48s8 z$n196s8 z$n158s8 z$n26s8 z$n123s8 z$n140s8 z$n2s8 z$n5s8 z$n7s8 z$n231s8 z$n8s8 z$n97s8 z$n10s8 z$n100s8 z$n254s8 z$n96s8 z$n252s8 z$n98s8 z$n248s8 z$n4s8 z$n16s8 z$n3s8 z$n6s8 z$n204s8 z$n13s8 z$n141s8 z$n128s8 z$n138s8 z$n65s8 z$n72s8 z$n144s8 z$n129s8 z$n41s8 z$n134s8 z$n242s8 z$n124s8 z$n17s8 z$n217s8 z$n194s8 z$n255s8 z$n89s8 z$n33s8 z$n24s8 z$n142s8 z$n127s8 z$n28s8 z$n223s8 z$n192s8 z$n110s8 z$n238s8 z$n64s8 z$n161s8 z$n131s8 z$n14s8 z$n132s8 z$n126s8 z$n193s8 z$n66s8) true))
(assert
 (let ((?x1177 (ite im.reset z$n0s8 rb1)))
 (= z$44 ?x1177)))
(assert
 (let (($x437 (= rb2$next z$44)))
 (= z$46 $x437)))
(assert
 (let ((?x1366 (ite im.reset z$n0s8 c)))
 (= z$53 ?x1366)))
(assert
 (let (($x1836 (= rc1$next z$53)))
 (= z$55 $x1836)))
(assert
 (let ((?x1190 (ite im.reset z$n0s8 rc1)))
 (= z$57 ?x1190)))
(assert
 (let (($x1032 (= rc2$next z$57)))
 (= z$59 $x1032)))
(assert
 (= z$67 (ite im.reset false ctl_b)))
(assert
 (= z$69 (= ctl_b1$next z$67)))
(assert
 (= z$71 (ite im.reset false ctl_b1)))
(assert
 (= z$73 (= ctl_b2$next z$71)))
(assert
 (let ((?x1924 (ite im.reset z$n0s8 a)))
 (= z$80 ?x1924)))
(assert
 (let (($x1919 (= ra1$next z$80)))
 (= z$82 $x1919)))
(assert
 (let ((?x847 (ite im.reset z$n0s8 ra1)))
 (= z$84 ?x847)))
(assert
 (let (($x1703 (= ra2$next z$84)))
 (= z$86 $x1703)))
(assert
 (let ((?x3324 (ite im.reset z$n0s8 b)))
 (= z$93 ?x3324)))
(assert
 (let (($x1195 (= rb1$next z$93)))
 (= z$95 $x1195)))
(assert
 (= z$97 (= im.p1_ctl_2$next z$67)))
(assert
 (let (($x816 (= im.p1_a$next z$80)))
 (= z$99 $x816)))
(assert
 (let (($x542 (= im.p1_b$next z$93)))
 (= z$101 $x542)))
(assert
 (let (($x1152 (= im.p1_c$next z$53)))
 (= z$103 $x1152)))
(assert
 (= z$105 (ite im.reset false im.p1_ctl_2)))
(assert
 (= z$107 (= im.p2_ctl_2$next z$105)))
(assert
 (let ((?x1632 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (= z$110 ?x1632)))
(assert
 (let (($x523 (= z$110 z$n1s8)))
 (= z$112 $x523)))
(assert
 (let ((?x937 (Add_8_8_8 im.p1_a im.p1_b)))
 (= z$113 ?x937)))
(assert
 (let ((?x799 (Sub_8_8_8 im.p1_a im.p1_b)))
 (= z$115 ?x799)))
(assert
 (let ((?x1705 (ite z$112 z$113 z$115)))
 (= z$117 ?x1705)))
(assert
 (let ((?x1224 (ite im.reset z$n0s8 z$117)))
 (= z$119 ?x1224)))
(assert
 (let (($x893 (= im.p2_m$next z$119)))
 (= z$121 $x893)))
(assert
 (let ((?x889 (ite im.reset z$n0s8 im.p1_c)))
 (= z$123 ?x889)))
(assert
 (let (($x885 (= im.p2_c$next z$123)))
 (= z$125 $x885)))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (= z$170 ?x513)))
(assert
 (= z$197 (and (distinct z$170 z$n0s8) true)))
(assert
 (let (($x111 (= rb3$next z$n0s8)))
 (= z$198 $x111)))
(assert
 (let (($x115 (= ra3$next z$n0s8)))
 (= z$199 $x115)))
(assert
 (= z$200 (and z$197 z$198 z$199)))
(assert
 (= z$202 (not z$200)))
(assert
 (let ((?x429 (Sub_8_8_8 ra3 rb3)))
 (= z$142 ?x429)))
(assert
 (= z$191 (and (distinct z$142 z$n0s8) true)))
(assert
 (let (($x147 (= rb3 z$n0s8)))
 (= z$34 $x147)))
(assert
 (let (($x150 (= ra3 z$n0s8)))
 (= z$28 $x150)))
(assert
 (= z$196 (and z$191 z$34 z$28)))
(assert
 (= z$201 (not z$196)))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (= z$166 $x382)))
(assert
 (= z$234 (and z$166 z$199)))
(assert
 (= z$236 (not z$234)))
(assert
 (let (($x181 (Extract_1_0_0_8 ra3)))
 (= z$138 $x181)))
(assert
 (= z$233 (and z$138 z$28)))
(assert
 (= z$235 (not z$233)))
(assert
 (let ((?x2199 (BitWiseAnd_8_8_8 im.p1_a$next z$n1s8)))
 (= z$350 ?x2199)))
(assert
 (let (($x1674 (= z$350 z$n1s8)))
 (= z$361 $x1674)))
(assert
 (let (($x1667 (= im.p1_a$next z$n0s8)))
 (= z$386 $x1667)))
(assert
 (= z$387 (and z$361 z$386)))
(assert
 (= z$389 (not z$387)))
(assert
 (let (($x301 (= im.p1_a z$n0s8)))
 (= z$8 $x301)))
(assert
 (= z$385 (and z$112 z$8)))
(assert
 (= z$388 (not z$385)))
(assert
 (let (($x1622 (= z$170 im.p3_n$next)))
 (= z$410 $x1622)))
(assert
 (let (($x2980 (= rb3$next im.p3_n$next)))
 (= z$422 $x2980)))
(assert
 (= z$451 (and z$166 z$410 z$422)))
(assert
 (= z$455 (not z$451)))
(assert
 (let (($x1749 (= z$142 im.p3_n)))
 (= z$452 $x1749)))
(assert
 (let (($x1107 (= rb3 im.p3_n)))
 (= z$453 $x1107)))
(assert
 (= z$454 (and z$138 z$452 z$453)))
(assert
 (= z$459 (not z$454)))
(assert
 (let ((?x5742 (Sub_8_8_8 ra2 rb2)))
 (= z$718 ?x5742)))
(assert
 (let (($x5101 (= im.p2_m z$718)))
 (= z$719 $x5101)))
(assert
 (let (($x1487 (= im.p2_c rc2)))
 (= z$324 $x1487)))
(assert
 (= z$18 (not im.p2_ctl_2)))
(assert
 (let (($x2736 (not z$166)))
 (= z$237 $x2736)))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (= z$168 ?x903)))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (= z$172 ?x879)))
(assert
 (let ((?x852 (Sub_8_8_8 z$172 rc3$next)))
 (= z$176 ?x852)))
(assert
 (= z$275 (and (distinct im.p3_n$next z$176) true)))
(assert
 (let ((?x3206 (ite im.reset z$n0s8 rb2)))
 (= z$48 ?x3206)))
(assert
 (let (($x2515 (= rb3$next z$48)))
 (= z$50 $x2515)))
(assert
 (let ((?x1607 (ite im.reset z$n0s8 rc2)))
 (= z$61 ?x1607)))
(assert
 (let (($x2344 (= rc3$next z$61)))
 (= z$63 $x2344)))
(assert
 (let ((?x3164 (ite im.reset z$n0s8 ra2)))
 (= z$88 ?x3164)))
(assert
 (let (($x3163 (= ra3$next z$88)))
 (= z$90 $x3163)))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (= z$127 ?x3393)))
(assert
 (let ((?x2755 (Sub_8_8_8 im.p2_m im.p2_c)))
 (= z$129 ?x2755)))
(assert
 (let ((?x1558 (ite im.p2_ctl_2 z$127 z$129)))
 (= z$131 ?x1558)))
(assert
 (let ((?x2813 (ite im.reset z$n0s8 z$131)))
 (= z$133 ?x2813)))
(assert
 (let (($x619 (= im.p3_n$next z$133)))
 (= z$135 $x619)))
(assert
 (let (($x5361 (and z$719 z$324 z$18 z$237 z$275 z$50 z$63 z$90 z$135)))
 (= z$721 $x5361)))
(assert
 (= z$722 (not z$721)))
(assert
 (= z$498 (and (distinct z$110 rb1) true)))
(assert
 (= z$253 (and (distinct z$110 z$n1s8) true)))
(assert
 (let (($x1161 (= rb1 z$n0s8)))
 (= z$30 $x1161)))
(assert
 (= z$790 (and z$498 z$253 z$30)))
(assert
 (= z$793 (not z$790)))
(assert
 (= z$533 (and (distinct z$350 rb1$next) true)))
(assert
 (= z$392 (and (distinct z$350 z$n1s8) true)))
(assert
 (let (($x5639 (= rb1$next z$n0s8)))
 (= z$791 $x5639)))
(assert
 (= z$792 (and z$533 z$392 z$791)))
(assert
 (= z$803 (not z$792)))
(assert
 (let ((?x1162 (Add_8_8_8 im.p1_a$next im.p1_b$next)))
 (= z$362 ?x1162)))
(assert
 (= z$755 (and (distinct rb1$next z$362) true)))
(assert
 (let (($x6587 (= im.p1_b$next z$n0s8)))
 (= z$830 $x6587)))
(assert
 (= z$831 (and z$755 z$386 z$830 z$791)))
(assert
 (= z$833 (not z$831)))
(assert
 (= z$752 (and (distinct rb1 z$113) true)))
(assert
 (let (($x318 (= im.p1_b z$n0s8)))
 (= z$10 $x318)))
(assert
 (= z$829 (and z$752 z$8 z$10 z$30)))
(assert
 (= z$832 (not z$829)))
(assert
 (let ((?x6789 (BitWiseAnd_8_8_8 ra2 z$n1s8)))
 (= z$958 ?x6789)))
(assert
 (let (($x4667 (= z$958 z$n1s8)))
 (= z$959 $x4667)))
(assert
 (let (($x516 (not im.reset)))
 (= z$245 $x516)))
(assert
 (= z$961 (and z$959 z$245 z$237 z$90)))
(assert
 (= z$962 (not z$961)))
(assert
 (let ((?x1333 (Sub_8_8_8 ra2$next rb2$next)))
 (= z$747 ?x1333)))
(assert
 (= z$748 (and (distinct im.p2_m$next z$747) true)))
(assert
 (= z$1027 (and im.reset z$748 z$46 z$86 z$121)))
(assert
 (= z$1028 (not z$1027)))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (= z$174 ?x1497)))
(assert
 (let (($x4298 (= z$176 z$174)))
 (= z$443 $x4298)))
(assert
 (let (($x7031 (= rc3$next ra3$next)))
 (= z$336 $x7031)))
(assert
 (= z$1099 (and z$166 z$443 z$336)))
(assert
 (= z$1103 (not z$1099)))
(assert
 (let ((?x259 (Add_8_8_8 ra3 rb3)))
 (= z$140 ?x259)))
(assert
 (let ((?x408 (ite z$138 z$140 z$142)))
 (= z$144 ?x408)))
(assert
 (let ((?x1062 (Sub_8_8_8 z$144 rc3)))
 (= z$148 ?x1062)))
(assert
 (let ((?x1113 (Add_8_8_8 z$144 rc3)))
 (= z$146 ?x1113)))
(assert
 (let (($x6051 (= z$148 z$146)))
 (= z$1100 $x6051)))
(assert
 (let (($x5748 (= rc3 ra3)))
 (= z$1101 $x5748)))
(assert
 (= z$1102 (and z$138 z$1100 z$1101)))
(assert
 (= z$1108 (not z$1102)))
(assert
 (= z$1045 (and (distinct ra3$next z$174) true)))
(assert
 (let (($x3228 (= rb3$next rc3$next)))
 (= z$326 $x3228)))
(assert
 (= z$1127 (and z$1045 z$326 z$443)))
(assert
 (= z$1131 (not z$1127)))
(assert
 (= z$1128 (and (distinct ra3 z$146) true)))
(assert
 (let (($x5985 (= rb3 rc3)))
 (= z$1129 $x5985)))
(assert
 (= z$1130 (and z$1128 z$1129 z$1100)))
(assert
 (= z$1136 (not z$1130)))
(assert
 (= z$273 (and (distinct ra3$next im.p3_n$next) true)))
(assert
 (let (($x4728 (= z$168 im.p3_n$next)))
 (= z$468 $x4728)))
(assert
 (= z$286 (and (distinct ra2 im.p2_m) true)))
(assert
 (let (($x479 (= im.p2_c rb2)))
 (= z$316 $x479)))
(assert
 (= z$1155 (and z$135 z$90 z$50 z$273 z$468 z$286 z$410 z$316)))
(assert
 (= z$1156 (not z$1155)))
(assert
 (= z$266 (and (distinct rb3$next rc3$next) true)))
(assert
 (let (($x3935 (= z$176 ra3$next)))
 (= z$467 $x3935)))
(assert
 (= z$1183 (and z$266 z$410 z$467 z$468)))
(assert
 (= z$1187 (not z$1183)))
(assert
 (= z$1141 (and (distinct rb3 rc3) true)))
(assert
 (let (($x4621 (= z$148 ra3)))
 (= z$1184 $x4621)))
(assert
 (let (($x6928 (= z$140 im.p3_n)))
 (= z$1185 $x6928)))
(assert
 (= z$1186 (and z$1141 z$452 z$1184 z$1185)))
(assert
 (= z$1191 (not z$1186)))
(assert
 (let (($x6310 (= ra3$next z$174)))
 (= z$1134 $x6310)))
(assert
 (= z$1206 (and z$1134 z$467 z$266)))
(assert
 (= z$1208 (not z$1206)))
(assert
 (let (($x2161 (= ra3 z$146)))
 (= z$1139 $x2161)))
(assert
 (= z$1207 (and z$1139 z$1184 z$1141)))
(assert
 (= z$1211 (not z$1207)))
(assert
 (let (($x4223 (= im.p2_m ra2)))
 (= z$1161 $x4223)))
(assert
 (= z$280 (and (distinct rb2 im.p2_c) true)))
(assert
 (let (($x3903 (and z$135 z$90 z$63 z$50 z$1161 z$443 z$410 z$324 z$280 z$245)))
 (= z$1224 $x3903)))
(assert
 (= z$1225 (not z$1224)))
(assert
 (= z$1073 (and (distinct z$127 z$129) true)))
(assert
 (= z$1249 (and z$63 z$1073 z$443 z$324 z$245)))
(assert
 (= z$1250 (not z$1249)))
(assert
 (let (($x8020 (= rb2 z$n1s8)))
 (= z$1307 $x8020)))
(assert
 (let ((?x3893 (Add_8_8_8 ra2 z$n1s8)))
 (= z$1352 ?x3893)))
(assert
 (let (($x7485 (= im.p2_m z$1352)))
 (= z$1353 $x7485)))
(assert
 (let (($x632 (= z$127 z$129)))
 (= z$1253 $x632)))
(assert
 (= z$444 (and (distinct im.p3_n$next z$174) true)))
(assert
 (let (($x8394 (and z$1307 z$1353 z$1253 z$324 z$166 z$444 z$50 z$63 z$90 z$135)))
 (= z$1355 $x8394)))
(assert
 (= z$1356 (not z$1355)))
(assert
 (= z$75 (ite im.reset false ctl_b2)))
(assert
 (= z$77 (= ctl_b3$next z$75)))
(assert
 (let (($x4094 (and z$46 z$55 z$59 z$69 z$73 z$82 z$86 z$95 z$97 z$99 z$101 z$103 z$107 z$121 z$125 z$202 z$201 z$236 z$235 z$389 z$388 z$455 z$459 z$722 z$793 z$803 z$833 z$832 z$962 z$1028 z$1103 z$1108 z$1131 z$1136 z$1156 z$1187 z$1191 z$1208 z$1211 z$1225 z$1250 z$1356 z$50 z$63 z$77 z$90 z$135)))
 (= z$1479 $x4094)))
(assert
 z$1479)
(assert
 (let (($x251 (not ctl_b1)))
 (let (($x252 (= z$1 $x251)))
 (=> p$0 $x252))))
(assert
 (=> p$0 z$1))
(assert
 (let (($x281 (not ctl_b2)))
 (let (($x282 (= z$3 $x281)))
 (=> p$1 $x282))))
(assert
 (=> p$1 z$3))
(assert
 (let (($x291 (= z$5 (not ctl_b3))))
 (=> p$2 $x291)))
(assert
 (=> p$2 z$5))
(assert
 (let (($x340 (not im.p1_ctl_2)))
 (let (($x341 (= z$14 $x340)))
 (=> p$3 $x341))))
(assert
 (=> p$3 z$14))
(assert
 (let (($x349 (= z$18 (not im.p2_ctl_2))))
 (=> p$4 $x349)))
(assert
 (=> p$4 z$18))
(assert
 (let (($x5560 (= z$165 (not prop$next))))
 (=> p$5 $x5560)))
(assert
 (=> p$5 z$165))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$6 $x909))))
(assert
 (=> p$6 z$166))
(assert
 (let (($x516 (not im.reset)))
 (let (($x5385 (= z$245 $x516)))
 (=> p$7 $x5385))))
(assert
 (=> p$7 z$245))
(assert
 (let (($x5674 (= z$249 (not ctl_b3$next))))
 (=> p$8 $x5674)))
(assert
 (=> p$8 z$249))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$9 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$9 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$9 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$9 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$9 $x850))))
(assert
 (let ((?x852 (Sub_8_8_8 z$172 rc3$next)))
 (let (($x853 (= z$176 ?x852)))
 (=> p$9 $x853))))
(assert
 (let ((?x17 (ite ctl_b3$next z$174 z$176)))
 (let (($x25 (= z$178 ?x17)))
 (=> p$9 $x25))))
(assert
 (let (($x5487 (= z$257 (and (distinct im.p3_n$next z$178) true))))
 (=> p$9 $x5487)))
(assert
 (=> p$9 z$257))
(assert
 (let (($x5652 (= z$266 (and (distinct rb3$next rc3$next) true))))
 (=> p$10 $x5652)))
(assert
 (=> p$10 z$266))
(assert
 (let (($x5631 (= z$267 (and (distinct rb3$next ra3$next) true))))
 (=> p$11 $x5631)))
(assert
 (=> p$11 z$267))
(assert
 (let (($x5710 (= z$268 (and (distinct rb3$next im.p3_n$next) true))))
 (=> p$12 $x5710)))
(assert
 (=> p$12 z$268))
(assert
 (let (($x5664 (= z$270 (and (distinct rc3$next ra3$next) true))))
 (=> p$13 $x5664)))
(assert
 (=> p$13 z$270))
(assert
 (let (($x5623 (= z$271 (and (distinct rc3$next im.p3_n$next) true))))
 (=> p$14 $x5623)))
(assert
 (=> p$14 z$271))
(assert
 (let (($x5750 (= z$273 (and (distinct ra3$next im.p3_n$next) true))))
 (=> p$15 $x5750)))
(assert
 (=> p$15 z$273))
(assert
 (let (($x3264 (= z$277 (and (distinct rb2 ra2) true))))
 (=> p$16 $x3264)))
(assert
 (=> p$16 z$277))
(assert
 (let (($x794 (= z$279 (and (distinct rb2 im.p2_m) true))))
 (=> p$17 $x794)))
(assert
 (=> p$17 z$279))
(assert
 (let (($x631 (= z$280 (and (distinct rb2 im.p2_c) true))))
 (=> p$18 $x631)))
(assert
 (=> p$18 z$280))
(assert
 (let (($x2851 (= z$286 (and (distinct ra2 im.p2_m) true))))
 (=> p$19 $x2851)))
(assert
 (=> p$19 z$286))
(assert
 (let (($x2958 (= z$287 (and (distinct ra2 im.p2_c) true))))
 (=> p$20 $x2958)))
(assert
 (=> p$20 z$287))
(assert
 (let (($x3606 (= z$290 (and (distinct im.p2_m im.p2_c) true))))
 (=> p$21 $x3606)))
(assert
 (=> p$21 z$290))
(assert
 (let (($x1487 (= im.p2_c rc2)))
 (let (($x480 (= z$324 $x1487)))
 (=> p$22 $x480))))
(assert
 (=> p$22 z$324))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$23 $x877))))
(assert
 (let (($x1622 (= z$170 im.p3_n$next)))
 (let (($x1934 (= z$410 $x1622)))
 (=> p$23 $x1934))))
(assert
 (=> p$23 z$410))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$24 $x902))))
(assert
 (let (($x1972 (= z$427 (and (distinct im.p3_n$next z$168) true))))
 (=> p$24 $x1972)))
(assert
 (=> p$24 z$427))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (let (($x3427 (= z$127 ?x3393)))
 (=> p$25 $x3427))))
(assert
 (let (($x7673 (= z$428 (and (distinct im.p2_c z$127) true))))
 (=> p$25 $x7673)))
(assert
 (=> p$25 z$428))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$26 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$26 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$26 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$26 $x880))))
(assert
 (let ((?x852 (Sub_8_8_8 z$172 rc3$next)))
 (let (($x853 (= z$176 ?x852)))
 (=> p$26 $x853))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$26 $x850))))
(assert
 (let (($x4298 (= z$176 z$174)))
 (let (($x6773 (= z$443 $x4298)))
 (=> p$26 $x6773))))
(assert
 (=> p$26 z$443))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$27 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$27 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$27 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$27 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$27 $x850))))
(assert
 (let (($x2215 (= z$444 (and (distinct im.p3_n$next z$174) true))))
 (=> p$27 $x2215)))
(assert
 (=> p$27 z$444))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$28 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$28 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$28 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$28 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$28 $x850))))
(assert
 (let (($x8251 (= z$445 (and (distinct z$174 z$168) true))))
 (=> p$28 $x8251)))
(assert
 (=> p$28 z$445))
(assert
 (let ((?x5742 (Sub_8_8_8 ra2 rb2)))
 (let (($x5716 (= z$718 ?x5742)))
 (=> p$29 $x5716))))
(assert
 (let (($x1085 (= z$725 (and (distinct im.p2_m z$718) true))))
 (=> p$29 $x1085)))
(assert
 (=> p$29 z$725))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$30 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$30 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$30 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$30 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$30 $x850))))
(assert
 (let (($x6213 (= z$1045 (and (distinct ra3$next z$174) true))))
 (=> p$30 $x6213)))
(assert
 (=> p$30 z$1045))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$31 $x902))))
(assert
 (let (($x6921 (= z$1046 (and (distinct ra3$next z$168) true))))
 (=> p$31 $x6921)))
(assert
 (=> p$31 z$1046))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (let (($x3427 (= z$127 ?x3393)))
 (=> p$32 $x3427))))
(assert
 (let (($x7890 (= z$1048 (and (distinct z$127 im.p2_m) true))))
 (=> p$32 $x7890)))
(assert
 (=> p$32 z$1048))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$33 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$33 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$33 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$33 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$33 $x850))))
(assert
 (let (($x7888 (= z$1114 (and (distinct rc3$next z$174) true))))
 (=> p$33 $x7888)))
(assert
 (=> p$33 z$1114))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (let (($x3427 (= z$127 ?x3393)))
 (=> p$34 $x3427))))
(assert
 (let (($x7023 (= z$1115 (and (distinct z$127 ra2) true))))
 (=> p$34 $x7023)))
(assert
 (=> p$34 z$1115))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (let (($x3427 (= z$127 ?x3393)))
 (=> p$35 $x3427))))
(assert
 (let (($x8331 (= z$1168 (and (distinct z$127 rb2) true))))
 (=> p$35 $x8331)))
(assert
 (=> p$35 z$1168))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$36 $x902))))
(assert
 (let (($x6705 (= z$1199 (and (distinct rc3$next z$168) true))))
 (=> p$36 $x6705)))
(assert
 (=> p$36 z$1199))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$37 $x902))))
(assert
 (let (($x2251 (= z$1200 (and (distinct rb3$next z$168) true))))
 (=> p$37 $x2251)))
(assert
 (=> p$37 z$1200))
(assert
 (let (($x382 (Extract_1_0_0_8 ra3$next)))
 (let (($x909 (= z$166 $x382)))
 (=> p$38 $x909))))
(assert
 (let ((?x903 (Add_8_8_8 ra3$next rb3$next)))
 (let (($x902 (= z$168 ?x903)))
 (=> p$38 $x902))))
(assert
 (let ((?x513 (Sub_8_8_8 ra3$next rb3$next)))
 (let (($x877 (= z$170 ?x513)))
 (=> p$38 $x877))))
(assert
 (let ((?x879 (ite z$166 z$168 z$170)))
 (let (($x880 (= z$172 ?x879)))
 (=> p$38 $x880))))
(assert
 (let ((?x1497 (Add_8_8_8 z$172 rc3$next)))
 (let (($x850 (= z$174 ?x1497)))
 (=> p$38 $x850))))
(assert
 (let (($x4501 (= z$1215 (and (distinct rb3$next z$174) true))))
 (=> p$38 $x4501)))
(assert
 (=> p$38 z$1215))
(assert
 (let ((?x3393 (Add_8_8_8 im.p2_m im.p2_c)))
 (let (($x3427 (= z$127 ?x3393)))
 (=> p$39 $x3427))))
(assert
 (let ((?x2755 (Sub_8_8_8 im.p2_m im.p2_c)))
 (let (($x2584 (= z$129 ?x2755)))
 (=> p$39 $x2584))))
(assert
 (let (($x632 (= z$127 z$129)))
 (let (($x7413 (= z$1253 $x632)))
 (=> p$39 $x7413))))
(assert
 (=> p$39 z$1253))
(assert
 (let (($x10234 (= z$1400 (not z$1399))))
 (=> p$40 $x10234)))
(assert
 (=> p$40 z$1400))
(assert
 (let (($x10142 (= z$1405 (not z$1404))))
 (=> p$41 $x10142)))
(assert
 (=> p$41 z$1405))
(assert
 (let (($x10182 (= z$1427 (not z$1426))))
 (=> p$42 $x10182)))
(assert
 (=> p$42 z$1427))
(assert
 (let (($x9971 (= rb2 z$1409)))
 (let (($x9993 (= z$1429 $x9971)))
 (=> p$43 $x9993))))
(assert
 (=> p$43 z$1429))
(assert
 (let (($x9642 (= rc2 z$1401)))
 (let (($x9677 (= z$1431 $x9642)))
 (=> p$44 $x9677))))
(assert
 (=> p$44 z$1431))
(assert
 (let (($x9932 (= ra2 z$1406)))
 (let (($x9959 (= z$1433 $x9932)))
 (=> p$45 $x9959))))
(assert
 (=> p$45 z$1433))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$46 $x10299))))
(assert
 (let (($x9918 (= im.p2_m z$1436)))
 (let (($x9915 (= z$1438 $x9918)))
 (=> p$46 $x9915))))
(assert
 (=> p$46 z$1438))
(assert
 (let (($x9905 (= im.p2_c z$1401)))
 (let (($x9906 (= z$1440 $x9905)))
 (=> p$47 $x9906))))
(assert
 (=> p$47 z$1440))
(assert
 (let (($x9576 (= rc1 z$1441)))
 (let (($x9674 (= z$1443 $x9576)))
 (=> p$48 $x9674))))
(assert
 (=> p$48 z$1443))
(assert
 (let (($x10246 (= z$1445 (not z$1444))))
 (=> p$49 $x10246)))
(assert
 (=> p$49 z$1445))
(assert
 (let (($x9843 (= ra1 z$1446)))
 (let (($x9844 (= z$1448 $x9843)))
 (=> p$50 $x9844))))
(assert
 (=> p$50 z$1448))
(assert
 (let (($x9841 (= rb1 z$1449)))
 (let (($x9030 (= z$1451 $x9841)))
 (=> p$51 $x9030))))
(assert
 (=> p$51 z$1451))
(assert
 (let (($x9958 (= im.p1_a z$1446)))
 (let (($x9963 (= z$1453 $x9958)))
 (=> p$52 $x9963))))
(assert
 (=> p$52 z$1453))
(assert
 (let (($x7642 (= im.p1_b z$1449)))
 (let (($x9921 (= z$1455 $x7642)))
 (=> p$53 $x9921))))
(assert
 (=> p$53 z$1455))
(assert
 (let (($x2298 (= im.p1_c z$1441)))
 (let (($x5916 (= z$1457 $x2298)))
 (=> p$54 $x5916))))
(assert
 (=> p$54 z$1457))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$55 $x10299))))
(assert
 (let (($x10209 (= z$1467 (and (distinct z$1406 z$1436) true))))
 (=> p$55 $x10209)))
(assert
 (=> p$55 z$1467))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$56 $x10299))))
(assert
 (let (($x10296 (= z$1468 (and (distinct z$1409 z$1436) true))))
 (=> p$56 $x10296)))
(assert
 (=> p$56 z$1468))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$57 $x10299))))
(assert
 (let (($x10075 (= z$1469 (and (distinct z$1401 z$1436) true))))
 (=> p$57 $x10075)))
(assert
 (=> p$57 z$1469))
(assert
 (let ((?x10287 (Sub_8_8_8 z$1406 z$1409)))
 (let (($x10288 (= z$1465 ?x10287)))
 (=> p$58 $x10288))))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$58 $x10299))))
(assert
 (let (($x10084 (= z$1470 (and (distinct z$1465 z$1436) true))))
 (=> p$58 $x10084)))
(assert
 (=> p$58 z$1470))
(assert
 (let (($x10204 (= z$1471 (and (distinct z$1409 z$1406) true))))
 (=> p$59 $x10204)))
(assert
 (=> p$59 z$1471))
(assert
 (let (($x10097 (= z$1472 (and (distinct z$1401 z$1406) true))))
 (=> p$60 $x10097)))
(assert
 (=> p$60 z$1472))
(assert
 (let ((?x10287 (Sub_8_8_8 z$1406 z$1409)))
 (let (($x10288 (= z$1465 ?x10287)))
 (=> p$61 $x10288))))
(assert
 (let (($x9205 (= z$1473 (and (distinct z$1465 z$1406) true))))
 (=> p$61 $x9205)))
(assert
 (=> p$61 z$1473))
(assert
 (let (($x10180 (= z$1474 (and (distinct z$1409 z$1401) true))))
 (=> p$62 $x10180)))
(assert
 (=> p$62 z$1474))
(assert
 (let ((?x10287 (Sub_8_8_8 z$1406 z$1409)))
 (let (($x10288 (= z$1465 ?x10287)))
 (=> p$63 $x10288))))
(assert
 (let (($x10289 (= z$1475 (and (distinct z$1409 z$1465) true))))
 (=> p$63 $x10289)))
(assert
 (=> p$63 z$1475))
(assert
 (let ((?x10287 (Sub_8_8_8 z$1406 z$1409)))
 (let (($x10288 (= z$1465 ?x10287)))
 (=> p$64 $x10288))))
(assert
 (let (($x10073 (= z$1476 (and (distinct z$1401 z$1465) true))))
 (=> p$64 $x10073)))
(assert
 (=> p$64 z$1476))
(assert
 (let (($x159 (= im.p3_n z$n0s8)))
 (let (($x201 (= z$22 $x159)))
 (=> p$65 $x201))))
(assert
 (=> p$65 z$22))
(assert
 (let (($x150 (= ra3 z$n0s8)))
 (let (($x151 (= z$28 $x150)))
 (=> p$66 $x151))))
(assert
 (=> p$66 z$28))
(assert
 (let (($x147 (= rb3 z$n0s8)))
 (let (($x148 (= z$34 $x147)))
 (=> p$67 $x148))))
(assert
 (=> p$67 z$34))
(assert
 (let (($x433 (= rc3 z$n0s8)))
 (let (($x1076 (= z$40 $x433)))
 (=> p$68 $x1076))))
(assert
 (=> p$68 z$40))
(assert
 (=> p$69 true))
(assert
 (let ((?x6789 (BitWiseAnd_8_8_8 ra2 z$n1s8)))
 (let (($x1859 (= z$958 ?x6789)))
 (=> p$70 $x1859))))
(assert
 (let (($x4667 (= z$958 z$n1s8)))
 (let (($x671 (= z$959 $x4667)))
 (=> p$70 $x671))))
(assert
 (=> p$70 z$959))
(assert
 (let (($x10265 (= z$1359 (and (distinct rb2 z$n1s8) true))))
 (=> p$71 $x10265)))
(assert
 (=> p$71 z$1359))
(assert
 (let ((?x3893 (Add_8_8_8 ra2 z$n1s8)))
 (let (($x6947 (= z$1352 ?x3893)))
 (=> p$72 $x6947))))
(assert
 (let (($x10116 (= z$1361 (and (distinct im.p2_m z$1352) true))))
 (=> p$72 $x10116)))
(assert
 (=> p$72 z$1361))
(assert
 (let ((?x9847 (BitWiseAnd_8_8_8 z$1406 z$n1s8)))
 (let (($x9848 (= z$1434 ?x9847)))
 (=> p$73 $x9848))))
(assert
 (let (($x9852 (= z$1434 z$n1s8)))
 (let (($x9853 (= z$1435 $x9852)))
 (=> p$73 $x9853))))
(assert
 (=> p$73 z$1435))
(assert
 (let ((?x10220 (Add_8_8_8 z$1406 z$1409)))
 (let (($x10299 (= z$1436 ?x10220)))
 (=> p$74 $x10299))))
(assert
 (let (($x10310 (= z$1461 (and (distinct z$1436 z$n1s8) true))))
 (=> p$74 $x10310)))
(assert
 (=> p$74 z$1461))
(assert
 (let (($x3728 (= z$1462 (and (distinct z$1406 z$n1s8) true))))
 (=> p$75 $x3728)))
(assert
 (=> p$75 z$1462))
(assert
 (let (($x10135 (= z$1463 (and (distinct z$1409 z$n1s8) true))))
 (=> p$76 $x10135)))
(assert
 (=> p$76 z$1463))
(assert
 (let (($x10162 (= z$1464 (and (distinct z$1401 z$n1s8) true))))
 (=> p$77 $x10162)))
(assert
 (=> p$77 z$1464))
(assert
 (let ((?x10287 (Sub_8_8_8 z$1406 z$1409)))
 (let (($x10288 (= z$1465 ?x10287)))
 (=> p$78 $x10288))))
(assert
 (let (($x10189 (= z$1466 (and (distinct z$1465 z$n1s8) true))))
 (=> p$78 $x10189)))
(assert
 (=> p$78 z$1466))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(assert p$5)
(assert p$6)
(assert p$7)
(assert p$8)
(assert p$9)
(assert p$10)
(assert p$11)
(assert p$12)
(assert p$13)
(assert p$14)
(assert p$15)
(assert p$16)
(assert p$17)
(assert p$18)
(assert p$19)
(assert p$20)
(assert p$21)
(assert p$22)
(assert p$23)
(assert p$24)
(assert p$25)
(assert p$26)
(assert p$27)
(assert p$28)
(assert p$29)
(assert p$30)
(assert p$31)
(assert p$32)
(assert p$33)
(assert p$34)
(assert p$35)
(assert p$36)
(assert p$37)
(assert p$38)
(assert p$39)
(assert p$40)
(assert p$41)
(assert p$42)
(assert p$43)
(assert p$44)
(assert p$45)
(assert p$46)
(assert p$47)
(assert p$48)
(assert p$49)
(assert p$50)
(assert p$51)
(assert p$52)
(assert p$53)
(assert p$54)
(assert p$55)
(assert p$56)
(assert p$57)
(assert p$58)
(assert p$59)
(assert p$60)
(assert p$61)
(assert p$62)
(assert p$63)
(assert p$64)
(assert p$65)
(assert p$66)
(assert p$67)
(assert p$68)
(assert p$69)
(assert p$70)
(assert p$71)
(assert p$72)
(assert p$73)
(assert p$74)
(assert p$75)
(assert p$76)
(assert p$77)
(assert p$78)
(set-info :status unsat)
(check-sat)
(exit)
