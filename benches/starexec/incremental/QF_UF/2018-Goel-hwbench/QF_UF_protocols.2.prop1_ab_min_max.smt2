(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: protocols.2.prop1
query-maker: "Z3"
query-time: 0.398000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt8 0)
(declare-fun z$n1s8 () utt8)
(declare-fun z$n0s8 () utt8)
(declare-fun v_ack () utt8)
(declare-fun v_rab () utt8)
(declare-fun v_sab () utt8)
(declare-fun v_v_channel_K () utt8)
(declare-fun v_v_channel_L () utt8)
(declare-fun v_value_Consumer () utt8)
(declare-fun v_value_Receiver () utt8)
(declare-fun v_value_Sender () utt8)
(declare-fun z$71 () utt8)
(declare-fun v_value_Consumer$next () utt8)
(declare-fun a_consume0 () Bool)
(declare-fun z$1 () Bool)
(declare-fun a_consume1 () Bool)
(declare-fun z$3 () Bool)
(declare-fun a_dataOK () Bool)
(declare-fun z$5 () Bool)
(declare-fun a_data_lost () Bool)
(declare-fun z$7 () Bool)
(declare-fun a_got_msg_Consumer () Bool)
(declare-fun z$9 () Bool)
(declare-fun a_got_msg_Receiver () Bool)
(declare-fun z$11 () Bool)
(declare-fun a_produce0 () Bool)
(declare-fun z$13 () Bool)
(declare-fun a_produce1 () Bool)
(declare-fun z$15 () Bool)
(declare-fun a_ready_Consumer () Bool)
(declare-fun z$17 () Bool)
(declare-fun a_ready_Producer () Bool)
(declare-fun z$19 () Bool)
(declare-fun a_ready_Sender () Bool)
(declare-fun z$21 () Bool)
(declare-fun a_ready_channel_K () Bool)
(declare-fun z$23 () Bool)
(declare-fun a_ready_channel_L () Bool)
(declare-fun z$25 () Bool)
(declare-fun a_sending () Bool)
(declare-fun z$27 () Bool)
(declare-fun a_tr_channel_K () Bool)
(declare-fun z$29 () Bool)
(declare-fun a_tr_channel_L () Bool)
(declare-fun z$31 () Bool)
(declare-fun a_wait_ack () Bool)
(declare-fun z$33 () Bool)
(declare-fun a_wait_msg () Bool)
(declare-fun z$35 () Bool)
(declare-fun dve_invalid () Bool)
(declare-fun z$37 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$46 () Bool)
(declare-fun z$48 () Bool)
(declare-fun z$50 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$54 () Bool)
(declare-fun z$871 () Bool)
(declare-fun z$873 () Bool)
(declare-fun z$874 () Bool)
(declare-fun z$876 () Bool)
(declare-fun prop () Bool)
(declare-fun z$877 () Bool)
(declare-fun dve_invalid$next () Bool)
(declare-fun z$903 () Bool)
(declare-fun a_consume0$next () Bool)
(declare-fun z$904 () Bool)
(declare-fun a_consume1$next () Bool)
(declare-fun z$905 () Bool)
(declare-fun z$906 () Bool)
(declare-fun z$908 () Bool)
(declare-fun z$909 () Bool)
(declare-fun z$911 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$912 () Bool)
(declare-fun f16 () Bool)
(declare-fun z$73 () Bool)
(declare-fun f00 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$120 () Bool)
(declare-fun z$122 () Bool)
(declare-fun f10 () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$124 () Bool)
(declare-fun z$126 () Bool)
(declare-fun f11 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$128 () Bool)
(declare-fun z$130 () Bool)
(declare-fun z$131 () Bool)
(declare-fun a_ready_channel_K$next () Bool)
(declare-fun z$132 () Bool)
(declare-fun z$134 () Bool)
(declare-fun z$136 () Bool)
(declare-fun z$137 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$140 () Bool)
(declare-fun a_tr_channel_K$next () Bool)
(declare-fun z$142 () Bool)
(declare-fun a_data_lost$next () Bool)
(declare-fun z$144 () Bool)
(declare-fun f01 () Bool)
(declare-fun z$147 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$150 () Bool)
(declare-fun f12 () Bool)
(declare-fun z$151 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$154 () Bool)
(declare-fun f13 () Bool)
(declare-fun z$155 () Bool)
(declare-fun z$156 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$159 () Bool)
(declare-fun a_ready_channel_L$next () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$165 () Bool)
(declare-fun z$167 () Bool)
(declare-fun z$168 () Bool)
(declare-fun a_tr_channel_L$next () Bool)
(declare-fun z$170 () Bool)
(declare-fun a_dataOK$next () Bool)
(declare-fun z$172 () Bool)
(declare-fun f02 () Bool)
(declare-fun z$175 () Bool)
(declare-fun z$176 () Bool)
(declare-fun f03 () Bool)
(declare-fun z$179 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$182 () Bool)
(declare-fun f14 () Bool)
(declare-fun z$183 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$187 () Bool)
(declare-fun f15 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$189 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$192 () Bool)
(declare-fun a_ready_Producer$next () Bool)
(declare-fun z$193 () Bool)
(declare-fun z$195 () Bool)
(declare-fun z$197 () Bool)
(declare-fun z$198 () Bool)
(declare-fun a_produce0$next () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$205 () Bool)
(declare-fun a_produce1$next () Bool)
(declare-fun z$207 () Bool)
(declare-fun f06 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$211 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$214 () Bool)
(declare-fun f07 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$217 () Bool)
(declare-fun z$219 () Bool)
(declare-fun z$220 () Bool)
(declare-fun z$221 () Bool)
(declare-fun z$223 () Bool)
(declare-fun a_ready_Consumer$next () Bool)
(declare-fun z$224 () Bool)
(declare-fun f04 () Bool)
(declare-fun z$227 () Bool)
(declare-fun z$228 () Bool)
(declare-fun f05 () Bool)
(declare-fun z$231 () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$235 () Bool)
(declare-fun z$237 () Bool)
(declare-fun a_got_msg_Consumer$next () Bool)
(declare-fun z$238 () Bool)
(declare-fun z$240 () Bool)
(declare-fun z$242 () Bool)
(declare-fun z$243 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$249 () Bool)
(declare-fun z$250 () Bool)
(declare-fun z$252 () Bool)
(declare-fun f09 () Bool)
(declare-fun z$254 () Bool)
(declare-fun z$255 () Bool)
(declare-fun z$257 () Bool)
(declare-fun z$258 () Bool)
(declare-fun z$260 () Bool)
(declare-fun z$262 () Bool)
(declare-fun a_ready_Sender$next () Bool)
(declare-fun z$263 () Bool)
(declare-fun f08 () Bool)
(declare-fun z$266 () Bool)
(declare-fun z$267 () Bool)
(declare-fun z$269 () Bool)
(declare-fun z$270 () Bool)
(declare-fun z$272 () Bool)
(declare-fun z$273 () Bool)
(declare-fun z$275 () Bool)
(declare-fun z$276 () Bool)
(declare-fun z$277 () Bool)
(declare-fun z$279 () Bool)
(declare-fun a_sending$next () Bool)
(declare-fun z$280 () Bool)
(declare-fun z$282 () Bool)
(declare-fun z$284 () Bool)
(declare-fun z$286 () Bool)
(declare-fun z$287 () Bool)
(declare-fun z$289 () Bool)
(declare-fun a_wait_ack$next () Bool)
(declare-fun z$290 () Bool)
(declare-fun z$292 () Bool)
(declare-fun z$294 () Bool)
(declare-fun z$295 () Bool)
(declare-fun z$297 () Bool)
(declare-fun z$298 () Bool)
(declare-fun a_wait_msg$next () Bool)
(declare-fun z$299 () Bool)
(declare-fun z$301 () Bool)
(declare-fun z$303 () Bool)
(declare-fun z$304 () Bool)
(declare-fun a_got_msg_Receiver$next () Bool)
(declare-fun z$306 () Bool)
(declare-fun z$308 () Bool)
(declare-fun z$310 () Bool)
(declare-fun z$311 () Bool)
(declare-fun z$313 () Bool)
(declare-fun z$314 () Bool)
(declare-fun z$316 () Bool)
(declare-fun z$318 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$321 () Bool)
(declare-fun z$323 () Bool)
(declare-fun z$324 () Bool)
(declare-fun z$326 () Bool)
(declare-fun z$328 () Bool)
(declare-fun z$329 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$334 () Bool)
(declare-fun z$335 () Bool)
(declare-fun z$337 () Bool)
(declare-fun z$338 () Bool)
(declare-fun z$340 () Bool)
(declare-fun z$341 () Bool)
(declare-fun z$343 () Bool)
(declare-fun z$345 () Bool)
(declare-fun z$346 () Bool)
(declare-fun z$348 () Bool)
(declare-fun z$350 () Bool)
(declare-fun z$351 () Bool)
(declare-fun z$355 () Bool)
(declare-fun z$356 () Bool)
(declare-fun z$358 () Bool)
(declare-fun z$359 () Bool)
(declare-fun z$361 () Bool)
(declare-fun z$362 () Bool)
(declare-fun z$353 () Bool)
(declare-fun z$364 () Bool)
(declare-fun z$366 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$369 () Bool)
(declare-fun z$370 () Bool)
(declare-fun z$372 () Bool)
(declare-fun z$374 () Bool)
(declare-fun z$375 () Bool)
(declare-fun z$377 () Bool)
(declare-fun z$378 () Bool)
(declare-fun z$380 () Bool)
(declare-fun z$382 () Bool)
(declare-fun z$383 () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$386 () Bool)
(declare-fun z$388 () Bool)
(declare-fun z$390 () Bool)
(declare-fun z$391 () Bool)
(declare-fun z$393 () Bool)
(declare-fun z$394 () Bool)
(declare-fun z$396 () Bool)
(declare-fun z$398 () Bool)
(declare-fun z$399 () Bool)
(declare-fun z$401 () Bool)
(declare-fun z$402 () Bool)
(declare-fun z$404 () Bool)
(declare-fun z$406 () Bool)
(declare-fun z$407 () Bool)
(declare-fun z$409 () Bool)
(declare-fun z$410 () Bool)
(declare-fun z$412 () Bool)
(declare-fun z$414 () Bool)
(declare-fun z$415 () Bool)
(declare-fun z$417 () Bool)
(declare-fun z$418 () Bool)
(declare-fun z$420 () Bool)
(declare-fun z$422 () Bool)
(declare-fun z$423 () Bool)
(declare-fun z$425 () Bool)
(declare-fun z$426 () Bool)
(declare-fun z$428 () Bool)
(declare-fun z$430 () Bool)
(declare-fun z$431 () Bool)
(declare-fun z$432 () Bool)
(declare-fun z$434 () Bool)
(declare-fun z$435 () Bool)
(declare-fun z$436 () Bool)
(declare-fun z$438 () Bool)
(declare-fun z$439 () Bool)
(declare-fun z$440 () Bool)
(declare-fun z$442 () Bool)
(declare-fun z$443 () Bool)
(declare-fun z$444 () Bool)
(declare-fun z$446 () Bool)
(declare-fun z$447 () Bool)
(declare-fun z$448 () Bool)
(declare-fun z$450 () Bool)
(declare-fun z$451 () Bool)
(declare-fun z$452 () Bool)
(declare-fun z$454 () Bool)
(declare-fun z$455 () Bool)
(declare-fun z$456 () Bool)
(declare-fun z$458 () Bool)
(declare-fun z$459 () Bool)
(declare-fun z$460 () Bool)
(declare-fun z$462 () Bool)
(declare-fun z$463 () Bool)
(declare-fun z$464 () Bool)
(declare-fun z$466 () Bool)
(declare-fun z$467 () Bool)
(declare-fun z$468 () Bool)
(declare-fun z$470 () Bool)
(declare-fun z$471 () Bool)
(declare-fun z$472 () Bool)
(declare-fun z$474 () Bool)
(declare-fun z$475 () Bool)
(declare-fun z$476 () Bool)
(declare-fun z$478 () Bool)
(declare-fun z$479 () Bool)
(declare-fun z$480 () Bool)
(declare-fun z$482 () Bool)
(declare-fun z$483 () Bool)
(declare-fun z$484 () Bool)
(declare-fun z$486 () Bool)
(declare-fun z$487 () Bool)
(declare-fun z$488 () Bool)
(declare-fun z$490 () Bool)
(declare-fun z$491 () Bool)
(declare-fun z$493 () Bool)
(declare-fun z$495 () Bool)
(declare-fun z$496 () Bool)
(declare-fun z$498 () Bool)
(declare-fun z$499 () Bool)
(declare-fun z$501 () Bool)
(declare-fun z$502 () Bool)
(declare-fun z$503 () Bool)
(declare-fun z$505 () Bool)
(declare-fun z$506 () Bool)
(declare-fun z$508 () Bool)
(declare-fun z$509 () Bool)
(declare-fun z$510 () Bool)
(declare-fun z$512 () Bool)
(declare-fun z$513 () Bool)
(declare-fun z$515 () Bool)
(declare-fun z$516 () Bool)
(declare-fun z$517 () Bool)
(declare-fun z$519 () Bool)
(declare-fun z$520 () Bool)
(declare-fun z$522 () Bool)
(declare-fun z$523 () Bool)
(declare-fun z$524 () Bool)
(declare-fun z$526 () Bool)
(declare-fun z$527 () Bool)
(declare-fun z$529 () Bool)
(declare-fun z$530 () Bool)
(declare-fun z$531 () Bool)
(declare-fun z$533 () Bool)
(declare-fun z$534 () Bool)
(declare-fun z$536 () Bool)
(declare-fun z$537 () Bool)
(declare-fun z$538 () Bool)
(declare-fun z$540 () Bool)
(declare-fun z$541 () Bool)
(declare-fun z$543 () Bool)
(declare-fun z$544 () Bool)
(declare-fun z$545 () Bool)
(declare-fun z$547 () Bool)
(declare-fun z$548 () Bool)
(declare-fun z$550 () Bool)
(declare-fun z$551 () Bool)
(declare-fun z$552 () Bool)
(declare-fun z$554 () Bool)
(declare-fun z$555 () Bool)
(declare-fun z$557 () Bool)
(declare-fun z$558 () Bool)
(declare-fun z$559 () Bool)
(declare-fun z$561 () Bool)
(declare-fun z$562 () Bool)
(declare-fun z$564 () Bool)
(declare-fun z$565 () Bool)
(declare-fun z$566 () Bool)
(declare-fun z$568 () Bool)
(declare-fun z$569 () Bool)
(declare-fun z$571 () Bool)
(declare-fun z$572 () Bool)
(declare-fun z$573 () Bool)
(declare-fun z$575 () Bool)
(declare-fun z$576 () Bool)
(declare-fun z$578 () Bool)
(declare-fun z$579 () Bool)
(declare-fun z$580 () Bool)
(declare-fun z$582 () Bool)
(declare-fun z$583 () Bool)
(declare-fun z$585 () Bool)
(declare-fun z$586 () Bool)
(declare-fun z$587 () Bool)
(declare-fun z$589 () Bool)
(declare-fun z$590 () Bool)
(declare-fun z$592 () Bool)
(declare-fun z$593 () Bool)
(declare-fun z$594 () Bool)
(declare-fun z$596 () Bool)
(declare-fun z$597 () Bool)
(declare-fun z$599 () Bool)
(declare-fun z$600 () Bool)
(declare-fun z$601 () Bool)
(declare-fun z$603 () Bool)
(declare-fun z$605 () Bool)
(declare-fun z$606 () Bool)
(declare-fun z$608 () Bool)
(declare-fun z$609 () Bool)
(declare-fun z$611 () Bool)
(declare-fun z$612 () Bool)
(declare-fun z$614 () Bool)
(declare-fun z$615 () Bool)
(declare-fun z$616 () Bool)
(declare-fun z$617 () Bool)
(declare-fun z$619 () Bool)
(declare-fun z$620 () Bool)
(declare-fun z$622 () Bool)
(declare-fun z$624 () Bool)
(declare-fun z$625 () Bool)
(declare-fun z$627 () Bool)
(declare-fun z$628 () Bool)
(declare-fun z$630 () Bool)
(declare-fun z$631 () Bool)
(declare-fun z$633 () Bool)
(declare-fun z$634 () Bool)
(declare-fun z$635 () Bool)
(declare-fun z$637 () Bool)
(declare-fun z$638 () Bool)
(declare-fun z$640 () Bool)
(declare-fun z$641 () Bool)
(declare-fun z$643 () Bool)
(declare-fun z$645 () Bool)
(declare-fun z$646 () Bool)
(declare-fun z$648 () Bool)
(declare-fun z$649 () Bool)
(declare-fun z$651 () Bool)
(declare-fun z$652 () Bool)
(declare-fun z$654 () Bool)
(declare-fun z$655 () Bool)
(declare-fun z$656 () Bool)
(declare-fun z$658 () Bool)
(declare-fun z$659 () Bool)
(declare-fun z$661 () Bool)
(declare-fun z$662 () Bool)
(declare-fun z$664 () Bool)
(declare-fun z$666 () Bool)
(declare-fun z$667 () Bool)
(declare-fun z$669 () Bool)
(declare-fun z$670 () Bool)
(declare-fun z$672 () Bool)
(declare-fun z$673 () Bool)
(declare-fun z$675 () Bool)
(declare-fun z$676 () Bool)
(declare-fun z$677 () Bool)
(declare-fun z$678 () Bool)
(declare-fun z$680 () Bool)
(declare-fun z$681 () Bool)
(declare-fun z$683 () Bool)
(declare-fun z$684 () Bool)
(declare-fun z$686 () Bool)
(declare-fun z$687 () Bool)
(declare-fun z$688 () Bool)
(declare-fun z$690 () Bool)
(declare-fun z$691 () Bool)
(declare-fun z$693 () Bool)
(declare-fun z$694 () Bool)
(declare-fun z$696 () Bool)
(declare-fun z$698 () Bool)
(declare-fun z$699 () Bool)
(declare-fun z$701 () Bool)
(declare-fun z$702 () Bool)
(declare-fun z$704 () Bool)
(declare-fun z$705 () Bool)
(declare-fun z$707 () Bool)
(declare-fun z$708 () Bool)
(declare-fun z$709 () Bool)
(declare-fun z$711 () Bool)
(declare-fun z$712 () Bool)
(declare-fun z$714 () Bool)
(declare-fun z$715 () Bool)
(declare-fun z$717 () Bool)
(declare-fun z$719 () Bool)
(declare-fun z$720 () Bool)
(declare-fun z$722 () Bool)
(declare-fun z$724 () Bool)
(declare-fun z$725 () Bool)
(declare-fun z$727 () Bool)
(declare-fun z$729 () Bool)
(declare-fun z$731 () Bool)
(declare-fun z$732 () Bool)
(declare-fun z$733 () Bool)
(declare-fun z$735 () Bool)
(declare-fun z$736 () Bool)
(declare-fun z$738 () Bool)
(declare-fun z$739 () Bool)
(declare-fun z$741 () Bool)
(declare-fun z$742 () Bool)
(declare-fun z$743 () Bool)
(declare-fun z$744 () Bool)
(declare-fun z$746 () Bool)
(declare-fun z$747 () Bool)
(declare-fun z$749 () Bool)
(declare-fun z$751 () Bool)
(declare-fun z$752 () Bool)
(declare-fun z$753 () Bool)
(declare-fun z$755 () Bool)
(declare-fun z$756 () Bool)
(declare-fun z$758 () Bool)
(declare-fun z$759 () Bool)
(declare-fun z$761 () Bool)
(declare-fun z$762 () Bool)
(declare-fun z$763 () Bool)
(declare-fun z$765 () Bool)
(declare-fun z$766 () Bool)
(declare-fun z$768 () Bool)
(declare-fun z$769 () Bool)
(declare-fun z$771 () Bool)
(declare-fun z$773 () Bool)
(declare-fun z$774 () Bool)
(declare-fun z$775 () Bool)
(declare-fun z$777 () Bool)
(declare-fun z$778 () Bool)
(declare-fun z$780 () Bool)
(declare-fun z$781 () Bool)
(declare-fun z$783 () Bool)
(declare-fun z$784 () Bool)
(declare-fun z$785 () Bool)
(declare-fun z$787 () Bool)
(declare-fun z$788 () Bool)
(declare-fun z$789 () Bool)
(declare-fun z$791 () Bool)
(declare-fun z$792 () Bool)
(declare-fun z$794 () Bool)
(declare-fun z$796 () Bool)
(declare-fun z$797 () Bool)
(declare-fun z$798 () Bool)
(declare-fun z$800 () Bool)
(declare-fun z$801 () Bool)
(declare-fun z$803 () Bool)
(declare-fun z$804 () Bool)
(declare-fun z$806 () Bool)
(declare-fun z$807 () Bool)
(declare-fun z$808 () Bool)
(declare-fun z$809 () Bool)
(declare-fun z$810 () Bool)
(declare-fun z$812 () Bool)
(declare-fun z$813 () Bool)
(declare-fun z$815 () Bool)
(declare-fun z$816 () Bool)
(declare-fun z$818 () Bool)
(declare-fun z$819 () Bool)
(declare-fun z$820 () Bool)
(declare-fun z$822 () Bool)
(declare-fun z$823 () Bool)
(declare-fun z$824 () Bool)
(declare-fun z$826 () Bool)
(declare-fun z$827 () Bool)
(declare-fun z$829 () Bool)
(declare-fun z$831 () Bool)
(declare-fun z$832 () Bool)
(declare-fun z$833 () Bool)
(declare-fun z$835 () Bool)
(declare-fun z$836 () Bool)
(declare-fun z$838 () Bool)
(declare-fun z$839 () Bool)
(declare-fun z$841 () Bool)
(declare-fun z$842 () Bool)
(declare-fun z$843 () Bool)
(declare-fun z$845 () Bool)
(declare-fun z$846 () Bool)
(declare-fun z$847 () Bool)
(declare-fun z$849 () Bool)
(declare-fun z$850 () Bool)
(declare-fun z$852 () Bool)
(declare-fun z$854 () Bool)
(declare-fun z$855 () Bool)
(declare-fun z$857 () Bool)
(declare-fun z$858 () Bool)
(declare-fun z$860 () Bool)
(declare-fun z$861 () Bool)
(declare-fun z$863 () Bool)
(declare-fun z$865 () Bool)
(declare-fun z$867 () Bool)
(declare-fun z$868 () Bool)
(declare-fun z$962 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(assert
 (and (distinct z$n0s8 z$n1s8) true))
(assert
 (let (($x37 (not a_consume0)))
 (= z$1 $x37)))
(assert
 (let (($x41 (not a_consume1)))
 (= z$3 $x41)))
(assert
 (let (($x95 (not a_dataOK)))
 (= z$5 $x95)))
(assert
 (let (($x99 (not a_data_lost)))
 (= z$7 $x99)))
(assert
 (let (($x103 (not a_got_msg_Consumer)))
 (= z$9 $x103)))
(assert
 (let (($x107 (not a_got_msg_Receiver)))
 (= z$11 $x107)))
(assert
 (let (($x111 (not a_produce0)))
 (= z$13 $x111)))
(assert
 (let (($x115 (not a_produce1)))
 (= z$15 $x115)))
(assert
 (let (($x119 (not a_ready_Consumer)))
 (= z$17 $x119)))
(assert
 (let (($x123 (not a_ready_Producer)))
 (= z$19 $x123)))
(assert
 (let (($x127 (not a_ready_Sender)))
 (= z$21 $x127)))
(assert
 (let (($x131 (not a_ready_channel_K)))
 (= z$23 $x131)))
(assert
 (let (($x135 (not a_ready_channel_L)))
 (= z$25 $x135)))
(assert
 (let (($x139 (not a_sending)))
 (= z$27 $x139)))
(assert
 (let (($x143 (not a_tr_channel_K)))
 (= z$29 $x143)))
(assert
 (let (($x147 (not a_tr_channel_L)))
 (= z$31 $x147)))
(assert
 (let (($x151 (not a_wait_ack)))
 (= z$33 $x151)))
(assert
 (let (($x155 (not a_wait_msg)))
 (= z$35 $x155)))
(assert
 (= z$37 (not dve_invalid)))
(assert
 (let (($x159 (= v_ack z$n0s8)))
 (= z$40 $x159)))
(assert
 (let (($x163 (= v_rab z$n0s8)))
 (= z$42 $x163)))
(assert
 (let (($x167 (= v_sab z$n0s8)))
 (= z$44 $x167)))
(assert
 (let (($x171 (= v_v_channel_K z$n0s8)))
 (= z$46 $x171)))
(assert
 (let (($x175 (= v_v_channel_L z$n0s8)))
 (= z$48 $x175)))
(assert
 (let (($x179 (= v_value_Consumer z$n0s8)))
 (= z$50 $x179)))
(assert
 (let (($x183 (= v_value_Receiver z$n0s8)))
 (= z$52 $x183)))
(assert
 (let (($x187 (= v_value_Sender z$n0s8)))
 (= z$54 $x187)))
(assert
 (= z$871 (and z$1 z$3)))
(assert
 (= z$873 (not z$871)))
(assert
 (= z$874 (and z$37 z$873)))
(assert
 (= z$876 (not z$874)))
(assert
 (= z$877 (= prop z$876)))
(assert
 (= z$903 (not dve_invalid$next)))
(assert
 (= z$904 (not a_consume0$next)))
(assert
 (= z$905 (not a_consume1$next)))
(assert
 (= z$906 (and z$904 z$905)))
(assert
 (= z$908 (not z$906)))
(assert
 (= z$909 (and z$903 z$908)))
(assert
 (= z$911 (not z$909)))
(assert
 (= z$912 (= prop$next z$911)))
(assert
 (let ((?x195 (ite f16 v_value_Receiver v_value_Consumer)))
 (= z$71 ?x195)))
(assert
 (let (($x199 (= v_value_Consumer$next z$71)))
 (= z$73 $x199)))
(assert
 (let (($x204 (not f00)))
 (= z$119 $x204)))
(assert
 (= z$120 (and a_ready_channel_K z$119)))
(assert
 (= z$122 (not z$120)))
(assert
 (let (($x215 (not f10)))
 (= z$123 $x215)))
(assert
 (= z$124 (and z$122 z$123)))
(assert
 (= z$126 (not z$124)))
(assert
 (let (($x226 (not f11)))
 (= z$127 $x226)))
(assert
 (= z$128 (and z$126 z$127)))
(assert
 (= z$130 (not z$128)))
(assert
 (let (($x236 (not z$130)))
 (= z$131 $x236)))
(assert
 (= z$132 (= a_ready_channel_K$next z$131)))
(assert
 (= z$134 (and a_tr_channel_K z$119)))
(assert
 (= z$136 (not z$134)))
(assert
 (= z$137 (and z$136 z$123)))
(assert
 (= z$139 (not z$137)))
(assert
 (= z$140 (and z$139 z$127)))
(assert
 (= z$142 (= a_tr_channel_K$next z$140)))
(assert
 (= z$144 (= a_data_lost$next a_data_lost)))
(assert
 (let (($x270 (not f01)))
 (= z$147 $x270)))
(assert
 (= z$148 (and a_ready_channel_L z$147)))
(assert
 (= z$150 (not z$148)))
(assert
 (let (($x281 (not f12)))
 (= z$151 $x281)))
(assert
 (= z$152 (and z$150 z$151)))
(assert
 (= z$154 (not z$152)))
(assert
 (let (($x292 (not f13)))
 (= z$155 $x292)))
(assert
 (= z$156 (and z$154 z$155)))
(assert
 (= z$158 (not z$156)))
(assert
 (let (($x302 (not z$158)))
 (= z$159 $x302)))
(assert
 (= z$160 (= a_ready_channel_L$next z$159)))
(assert
 (= z$162 (and a_tr_channel_L z$147)))
(assert
 (= z$164 (not z$162)))
(assert
 (= z$165 (and z$164 z$151)))
(assert
 (= z$167 (not z$165)))
(assert
 (= z$168 (and z$167 z$155)))
(assert
 (= z$170 (= a_tr_channel_L$next z$168)))
(assert
 (= z$172 (= a_dataOK$next a_dataOK)))
(assert
 (let (($x336 (not f02)))
 (= z$175 $x336)))
(assert
 (= z$176 (and z$19 z$175)))
(assert
 (let (($x344 (not f03)))
 (= z$179 $x344)))
(assert
 (= z$180 (and z$176 z$179)))
(assert
 (= z$182 (not z$180)))
(assert
 (let (($x355 (not f14)))
 (= z$183 $x355)))
(assert
 (= z$184 (and z$182 z$183)))
(assert
 (= z$186 (not z$184)))
(assert
 (= z$187 (not z$186)))
(assert
 (let (($x369 (not f15)))
 (= z$188 $x369)))
(assert
 (= z$189 (and z$187 z$188)))
(assert
 (= z$191 (not z$189)))
(assert
 (let (($x379 (not z$191)))
 (= z$192 $x379)))
(assert
 (= z$193 (= a_ready_Producer$next z$192)))
(assert
 (= z$195 (and z$13 z$175)))
(assert
 (= z$197 (not z$195)))
(assert
 (= z$198 (and z$197 z$183)))
(assert
 (= z$200 (= a_produce0$next z$198)))
(assert
 (= z$202 (and z$15 z$179)))
(assert
 (= z$204 (not z$202)))
(assert
 (= z$205 (and z$204 z$188)))
(assert
 (= z$207 (= a_produce1$next z$205)))
(assert
 (let (($x417 (not f06)))
 (= z$210 $x417)))
(assert
 (= z$211 (and a_ready_Consumer z$210)))
(assert
 (= z$213 (not z$211)))
(assert
 (= z$214 (not z$213)))
(assert
 (let (($x431 (not f07)))
 (= z$216 $x431)))
(assert
 (= z$217 (and z$214 z$216)))
(assert
 (= z$219 (not z$217)))
(assert
 (let (($x441 (not f16)))
 (= z$220 $x441)))
(assert
 (= z$221 (and z$219 z$220)))
(assert
 (let (($x448 (not z$221)))
 (= z$223 $x448)))
(assert
 (= z$224 (= a_ready_Consumer$next z$223)))
(assert
 (let (($x456 (not f04)))
 (= z$227 $x456)))
(assert
 (= z$228 (and a_got_msg_Consumer z$227)))
(assert
 (let (($x464 (not f05)))
 (= z$231 $x464)))
(assert
 (= z$232 (and z$228 z$231)))
(assert
 (= z$234 (not z$232)))
(assert
 (= z$235 (and z$234 z$220)))
(assert
 (= z$237 (not z$235)))
(assert
 (= z$238 (= a_got_msg_Consumer$next z$237)))
(assert
 (= z$240 (and z$1 z$227)))
(assert
 (= z$242 (not z$240)))
(assert
 (= z$243 (and z$242 z$210)))
(assert
 (= z$245 (= a_consume0$next z$243)))
(assert
 (= z$247 (and z$3 z$231)))
(assert
 (= z$249 (not z$247)))
(assert
 (= z$250 (and z$249 z$216)))
(assert
 (= z$252 (= a_consume1$next z$250)))
(assert
 (let (($x514 (not f09)))
 (= z$254 $x514)))
(assert
 (= z$255 (and a_ready_Sender z$254)))
(assert
 (= z$257 (not z$255)))
(assert
 (= z$258 (and z$257 z$183)))
(assert
 (= z$260 (and z$258 z$188)))
(assert
 (let (($x532 (not z$260)))
 (= z$262 $x532)))
(assert
 (= z$263 (= a_ready_Sender$next z$262)))
(assert
 (let (($x540 (not f08)))
 (= z$266 $x540)))
(assert
 (= z$267 (and z$27 z$266)))
(assert
 (= z$269 (not z$267)))
(assert
 (= z$270 (and z$269 z$155)))
(assert
 (= z$272 (not z$270)))
(assert
 (= z$273 (and z$272 z$183)))
(assert
 (= z$275 (not z$273)))
(assert
 (= z$276 (not z$275)))
(assert
 (= z$277 (and z$276 z$188)))
(assert
 (= z$279 (not z$277)))
(assert
 (= z$280 (= a_sending$next z$279)))
(assert
 (= z$282 (and a_wait_ack z$266)))
(assert
 (= z$284 (and z$282 z$254)))
(assert
 (= z$286 (not z$284)))
(assert
 (= z$287 (and z$286 z$155)))
(assert
 (= z$289 (not z$287)))
(assert
 (= z$290 (= a_wait_ack$next z$289)))
(assert
 (= z$292 (and z$35 z$127)))
(assert
 (= z$294 (not z$292)))
(assert
 (= z$295 (and z$294 z$220)))
(assert
 (= z$297 (not z$295)))
(assert
 (let (($x614 (not z$297)))
 (= z$298 $x614)))
(assert
 (= z$299 (= a_wait_msg$next z$298)))
(assert
 (= z$301 (and z$11 z$127)))
(assert
 (= z$303 (not z$301)))
(assert
 (= z$304 (and z$303 z$220)))
(assert
 (= z$306 (= a_got_msg_Receiver$next z$304)))
(assert
 (= z$308 (and z$29 f00)))
(assert
 (= z$310 (not z$308)))
(assert
 (= z$311 (and z$31 f01)))
(assert
 (= z$313 (not z$311)))
(assert
 (= z$314 (and z$310 z$313)))
(assert
 (= z$316 (and a_ready_Producer f02)))
(assert
 (= z$318 (not z$316)))
(assert
 (= z$319 (and z$314 z$318)))
(assert
 (= z$321 (and a_ready_Producer f03)))
(assert
 (= z$323 (not z$321)))
(assert
 (= z$324 (and z$319 z$323)))
(assert
 (= z$326 (and a_got_msg_Consumer z$50)))
(assert
 (= z$328 (not z$326)))
(assert
 (= z$329 (and f04 z$328)))
(assert
 (= z$331 (not z$329)))
(assert
 (= z$332 (and z$324 z$331)))
(assert
 (let (($x693 (= z$n1s8 v_value_Consumer)))
 (= z$334 $x693)))
(assert
 (= z$335 (and a_got_msg_Consumer z$334)))
(assert
 (= z$337 (not z$335)))
(assert
 (= z$338 (and f05 z$337)))
(assert
 (= z$340 (not z$338)))
(assert
 (= z$341 (and z$332 z$340)))
(assert
 (= z$343 (and z$1 f06)))
(assert
 (= z$345 (not z$343)))
(assert
 (= z$346 (and z$341 z$345)))
(assert
 (= z$348 (and z$3 f07)))
(assert
 (= z$350 (not z$348)))
(assert
 (= z$351 (and z$346 z$350)))
(assert
 (= z$355 (and (distinct v_ack v_sab) true)))
(assert
 (= z$356 (and a_wait_ack z$355)))
(assert
 (= z$358 (not z$356)))
(assert
 (= z$359 (and f08 z$358)))
(assert
 (= z$361 (not z$359)))
(assert
 (= z$362 (and z$351 z$361)))
(assert
 (let (($x757 (= v_ack v_sab)))
 (= z$353 $x757)))
(assert
 (= z$364 (and a_wait_ack z$353)))
(assert
 (= z$366 (not z$364)))
(assert
 (= z$367 (and f09 z$366)))
(assert
 (= z$369 (not z$367)))
(assert
 (= z$370 (and z$362 z$369)))
(assert
 (= z$372 (and z$23 a_sending)))
(assert
 (= z$374 (not z$372)))
(assert
 (= z$375 (and f10 z$374)))
(assert
 (= z$377 (not z$375)))
(assert
 (= z$378 (and z$370 z$377)))
(assert
 (= z$380 (and a_tr_channel_K z$35)))
(assert
 (= z$382 (not z$380)))
(assert
 (= z$383 (and f11 z$382)))
(assert
 (= z$385 (not z$383)))
(assert
 (= z$386 (and z$378 z$385)))
(assert
 (= z$388 (and z$25 z$35)))
(assert
 (= z$390 (not z$388)))
(assert
 (= z$391 (and f12 z$390)))
(assert
 (= z$393 (not z$391)))
(assert
 (= z$394 (and z$386 z$393)))
(assert
 (= z$396 (and a_tr_channel_L a_sending)))
(assert
 (= z$398 (not z$396)))
(assert
 (= z$399 (and f13 z$398)))
(assert
 (= z$401 (not z$399)))
(assert
 (= z$402 (and z$394 z$401)))
(assert
 (= z$404 (and a_produce0 z$21)))
(assert
 (= z$406 (not z$404)))
(assert
 (= z$407 (and f14 z$406)))
(assert
 (= z$409 (not z$407)))
(assert
 (= z$410 (and z$402 z$409)))
(assert
 (= z$412 (and a_produce1 z$21)))
(assert
 (= z$414 (not z$412)))
(assert
 (= z$415 (and f15 z$414)))
(assert
 (= z$417 (not z$415)))
(assert
 (= z$418 (and z$410 z$417)))
(assert
 (= z$420 (and z$17 a_got_msg_Receiver)))
(assert
 (= z$422 (not z$420)))
(assert
 (= z$423 (and f16 z$422)))
(assert
 (= z$425 (not z$423)))
(assert
 (= z$426 (and z$418 z$425)))
(assert
 (= z$428 (and z$119 z$147)))
(assert
 (= z$430 (not z$428)))
(assert
 (let (($x911 (not z$430)))
 (= z$431 $x911)))
(assert
 (= z$432 (and z$175 z$431)))
(assert
 (= z$434 (not z$432)))
(assert
 (let (($x921 (not z$434)))
 (= z$435 $x921)))
(assert
 (= z$436 (and z$179 z$435)))
(assert
 (= z$438 (not z$436)))
(assert
 (let (($x931 (not z$438)))
 (= z$439 $x931)))
(assert
 (= z$440 (and z$227 z$439)))
(assert
 (= z$442 (not z$440)))
(assert
 (let (($x941 (not z$442)))
 (= z$443 $x941)))
(assert
 (= z$444 (and z$231 z$443)))
(assert
 (= z$446 (not z$444)))
(assert
 (let (($x951 (not z$446)))
 (= z$447 $x951)))
(assert
 (= z$448 (and z$210 z$447)))
(assert
 (= z$450 (not z$448)))
(assert
 (let (($x961 (not z$450)))
 (= z$451 $x961)))
(assert
 (= z$452 (and z$216 z$451)))
(assert
 (= z$454 (not z$452)))
(assert
 (let (($x971 (not z$454)))
 (= z$455 $x971)))
(assert
 (= z$456 (and z$266 z$455)))
(assert
 (= z$458 (not z$456)))
(assert
 (let (($x981 (not z$458)))
 (= z$459 $x981)))
(assert
 (= z$460 (and z$254 z$459)))
(assert
 (= z$462 (not z$460)))
(assert
 (let (($x991 (not z$462)))
 (= z$463 $x991)))
(assert
 (= z$464 (and z$123 z$463)))
(assert
 (= z$466 (not z$464)))
(assert
 (let (($x1001 (not z$466)))
 (= z$467 $x1001)))
(assert
 (= z$468 (and z$127 z$467)))
(assert
 (= z$470 (not z$468)))
(assert
 (let (($x1011 (not z$470)))
 (= z$471 $x1011)))
(assert
 (= z$472 (and z$151 z$471)))
(assert
 (= z$474 (not z$472)))
(assert
 (let (($x1021 (not z$474)))
 (= z$475 $x1021)))
(assert
 (= z$476 (and z$155 z$475)))
(assert
 (= z$478 (not z$476)))
(assert
 (let (($x1031 (not z$478)))
 (= z$479 $x1031)))
(assert
 (= z$480 (and z$183 z$479)))
(assert
 (= z$482 (not z$480)))
(assert
 (let (($x1041 (not z$482)))
 (= z$483 $x1041)))
(assert
 (= z$484 (and z$188 z$483)))
(assert
 (= z$486 (not z$484)))
(assert
 (let (($x1051 (not z$486)))
 (= z$487 $x1051)))
(assert
 (= z$488 (and z$220 z$487)))
(assert
 (= z$490 (not z$488)))
(assert
 (= z$491 (and z$426 z$490)))
(assert
 (= z$493 (and f00 f01)))
(assert
 (= z$495 (not z$493)))
(assert
 (= z$496 (and f02 z$430)))
(assert
 (= z$498 (not z$496)))
(assert
 (= z$499 (and z$495 z$498)))
(assert
 (= z$501 (not z$499)))
(assert
 (= z$502 (not z$501)))
(assert
 (= z$503 (and f03 z$434)))
(assert
 (= z$505 (not z$503)))
(assert
 (= z$506 (and z$502 z$505)))
(assert
 (= z$508 (not z$506)))
(assert
 (= z$509 (not z$508)))
(assert
 (= z$510 (and f04 z$438)))
(assert
 (= z$512 (not z$510)))
(assert
 (= z$513 (and z$509 z$512)))
(assert
 (= z$515 (not z$513)))
(assert
 (= z$516 (not z$515)))
(assert
 (= z$517 (and f05 z$442)))
(assert
 (= z$519 (not z$517)))
(assert
 (= z$520 (and z$516 z$519)))
(assert
 (= z$522 (not z$520)))
(assert
 (= z$523 (not z$522)))
(assert
 (= z$524 (and f06 z$446)))
(assert
 (= z$526 (not z$524)))
(assert
 (= z$527 (and z$523 z$526)))
(assert
 (= z$529 (not z$527)))
(assert
 (= z$530 (not z$529)))
(assert
 (= z$531 (and f07 z$450)))
(assert
 (= z$533 (not z$531)))
(assert
 (= z$534 (and z$530 z$533)))
(assert
 (= z$536 (not z$534)))
(assert
 (= z$537 (not z$536)))
(assert
 (= z$538 (and f08 z$454)))
(assert
 (= z$540 (not z$538)))
(assert
 (= z$541 (and z$537 z$540)))
(assert
 (= z$543 (not z$541)))
(assert
 (= z$544 (not z$543)))
(assert
 (= z$545 (and f09 z$458)))
(assert
 (= z$547 (not z$545)))
(assert
 (= z$548 (and z$544 z$547)))
(assert
 (= z$550 (not z$548)))
(assert
 (= z$551 (not z$550)))
(assert
 (= z$552 (and f10 z$462)))
(assert
 (= z$554 (not z$552)))
(assert
 (= z$555 (and z$551 z$554)))
(assert
 (= z$557 (not z$555)))
(assert
 (= z$558 (not z$557)))
(assert
 (= z$559 (and f11 z$466)))
(assert
 (= z$561 (not z$559)))
(assert
 (= z$562 (and z$558 z$561)))
(assert
 (= z$564 (not z$562)))
(assert
 (= z$565 (not z$564)))
(assert
 (= z$566 (and f12 z$470)))
(assert
 (= z$568 (not z$566)))
(assert
 (= z$569 (and z$565 z$568)))
(assert
 (= z$571 (not z$569)))
(assert
 (= z$572 (not z$571)))
(assert
 (= z$573 (and f13 z$474)))
(assert
 (= z$575 (not z$573)))
(assert
 (= z$576 (and z$572 z$575)))
(assert
 (= z$578 (not z$576)))
(assert
 (= z$579 (not z$578)))
(assert
 (= z$580 (and f14 z$478)))
(assert
 (= z$582 (not z$580)))
(assert
 (= z$583 (and z$579 z$582)))
(assert
 (= z$585 (not z$583)))
(assert
 (= z$586 (not z$585)))
(assert
 (= z$587 (and f15 z$482)))
(assert
 (= z$589 (not z$587)))
(assert
 (= z$590 (and z$586 z$589)))
(assert
 (= z$592 (not z$590)))
(assert
 (= z$593 (not z$592)))
(assert
 (= z$594 (and f16 z$486)))
(assert
 (= z$596 (not z$594)))
(assert
 (= z$597 (and z$593 z$596)))
(assert
 (= z$599 (not z$597)))
(assert
 (= z$600 (not z$599)))
(assert
 (= z$601 (and z$491 z$600)))
(assert
 (= z$603 (and z$23 a_tr_channel_K)))
(assert
 (= z$605 (not z$603)))
(assert
 (= z$606 (and a_ready_channel_K z$29)))
(assert
 (= z$608 (not z$606)))
(assert
 (= z$609 (and a_data_lost z$608)))
(assert
 (= z$611 (not z$609)))
(assert
 (= z$612 (and z$605 z$611)))
(assert
 (= z$614 (not z$612)))
(assert
 (= z$615 (not z$614)))
(assert
 (let (($x1362 (not z$608)))
 (= z$616 $x1362)))
(assert
 (= z$617 (and z$7 z$616)))
(assert
 (= z$619 (not z$617)))
(assert
 (= z$620 (and z$615 z$619)))
(assert
 (= z$622 (and z$25 a_tr_channel_L)))
(assert
 (= z$624 (not z$622)))
(assert
 (= z$625 (and a_ready_channel_L z$31)))
(assert
 (= z$627 (not z$625)))
(assert
 (= z$628 (and a_dataOK z$627)))
(assert
 (= z$630 (not z$628)))
(assert
 (= z$631 (and z$624 z$630)))
(assert
 (= z$633 (not z$631)))
(assert
 (= z$634 (not z$633)))
(assert
 (= z$635 (and z$620 z$634)))
(assert
 (let (($x1411 (not z$627)))
 (= z$637 $x1411)))
(assert
 (= z$638 (and z$5 z$637)))
(assert
 (= z$640 (not z$638)))
(assert
 (= z$641 (and z$635 z$640)))
(assert
 (= z$643 (and z$19 a_produce0)))
(assert
 (= z$645 (not z$643)))
(assert
 (= z$646 (and a_ready_Producer z$13)))
(assert
 (= z$648 (not z$646)))
(assert
 (= z$649 (and a_produce1 z$648)))
(assert
 (= z$651 (not z$649)))
(assert
 (= z$652 (and z$645 z$651)))
(assert
 (= z$654 (not z$652)))
(assert
 (= z$655 (not z$654)))
(assert
 (= z$656 (and z$641 z$655)))
(assert
 (let (($x1460 (not z$648)))
 (= z$658 $x1460)))
(assert
 (= z$659 (and z$15 z$658)))
(assert
 (= z$661 (not z$659)))
(assert
 (= z$662 (and z$656 z$661)))
(assert
 (= z$664 (and z$17 a_got_msg_Consumer)))
(assert
 (= z$666 (not z$664)))
(assert
 (= z$667 (and a_ready_Consumer z$9)))
(assert
 (= z$669 (not z$667)))
(assert
 (= z$670 (and a_consume0 z$669)))
(assert
 (= z$672 (not z$670)))
(assert
 (= z$673 (and z$666 z$672)))
(assert
 (= z$675 (not z$673)))
(assert
 (= z$676 (not z$675)))
(assert
 (let (($x1505 (not z$669)))
 (= z$677 $x1505)))
(assert
 (= z$678 (and z$1 z$677)))
(assert
 (= z$680 (not z$678)))
(assert
 (= z$681 (and a_consume1 z$680)))
(assert
 (= z$683 (not z$681)))
(assert
 (= z$684 (and z$676 z$683)))
(assert
 (= z$686 (not z$684)))
(assert
 (= z$687 (not z$686)))
(assert
 (= z$688 (and z$662 z$687)))
(assert
 (let (($x1536 (not z$680)))
 (= z$690 $x1536)))
(assert
 (= z$691 (and z$3 z$690)))
(assert
 (= z$693 (not z$691)))
(assert
 (= z$694 (and z$688 z$693)))
(assert
 (= z$696 (and z$21 a_sending)))
(assert
 (= z$698 (not z$696)))
(assert
 (= z$699 (and a_ready_Sender z$27)))
(assert
 (= z$701 (not z$699)))
(assert
 (= z$702 (and a_wait_ack z$701)))
(assert
 (= z$704 (not z$702)))
(assert
 (= z$705 (and z$698 z$704)))
(assert
 (= z$707 (not z$705)))
(assert
 (= z$708 (not z$707)))
(assert
 (= z$709 (and z$694 z$708)))
(assert
 (let (($x1585 (not z$701)))
 (= z$711 $x1585)))
(assert
 (= z$712 (and z$33 z$711)))
(assert
 (= z$714 (not z$712)))
(assert
 (= z$715 (and z$709 z$714)))
(assert
 (= z$717 (and z$35 a_got_msg_Receiver)))
(assert
 (= z$719 (not z$717)))
(assert
 (= z$720 (and z$715 z$719)))
(assert
 (= z$722 (and a_wait_msg z$11)))
(assert
 (= z$724 (not z$722)))
(assert
 (= z$725 (and z$720 z$724)))
(assert
 (= z$727 (and z$601 z$725)))
(assert
 (= z$729 (and z$130 z$140)))
(assert
 (= z$731 (not z$729)))
(assert
 (let (($x1632 (not z$140)))
 (= z$732 $x1632)))
(assert
 (= z$733 (and z$131 z$732)))
(assert
 (= z$735 (not z$733)))
(assert
 (= z$736 (and a_data_lost z$735)))
(assert
 (= z$738 (not z$736)))
(assert
 (= z$739 (and z$731 z$738)))
(assert
 (= z$741 (not z$739)))
(assert
 (= z$742 (not z$741)))
(assert
 (let (($x1659 (not z$735)))
 (= z$743 $x1659)))
(assert
 (= z$744 (and z$7 z$743)))
(assert
 (= z$746 (not z$744)))
(assert
 (= z$747 (and z$742 z$746)))
(assert
 (= z$749 (and z$158 z$168)))
(assert
 (= z$751 (not z$749)))
(assert
 (let (($x1680 (not z$168)))
 (= z$752 $x1680)))
(assert
 (= z$753 (and z$159 z$752)))
(assert
 (= z$755 (not z$753)))
(assert
 (= z$756 (and a_dataOK z$755)))
(assert
 (= z$758 (not z$756)))
(assert
 (= z$759 (and z$751 z$758)))
(assert
 (= z$761 (not z$759)))
(assert
 (= z$762 (not z$761)))
(assert
 (= z$763 (and z$747 z$762)))
(assert
 (let (($x1711 (not z$755)))
 (= z$765 $x1711)))
(assert
 (= z$766 (and z$5 z$765)))
(assert
 (= z$768 (not z$766)))
(assert
 (= z$769 (and z$763 z$768)))
(assert
 (= z$771 (and z$198 z$191)))
(assert
 (= z$773 (not z$771)))
(assert
 (let (($x1732 (not z$198)))
 (= z$774 $x1732)))
(assert
 (= z$775 (and z$774 z$192)))
(assert
 (= z$777 (not z$775)))
(assert
 (= z$778 (and z$205 z$777)))
(assert
 (= z$780 (not z$778)))
(assert
 (= z$781 (and z$773 z$780)))
(assert
 (= z$783 (not z$781)))
(assert
 (= z$784 (not z$783)))
(assert
 (= z$785 (and z$769 z$784)))
(assert
 (let (($x1763 (not z$205)))
 (= z$787 $x1763)))
(assert
 (let (($x1766 (not z$777)))
 (= z$788 $x1766)))
(assert
 (= z$789 (and z$787 z$788)))
(assert
 (= z$791 (not z$789)))
(assert
 (= z$792 (and z$785 z$791)))
(assert
 (= z$794 (and z$221 z$237)))
(assert
 (= z$796 (not z$794)))
(assert
 (let (($x1787 (not z$237)))
 (= z$797 $x1787)))
(assert
 (= z$798 (and z$223 z$797)))
(assert
 (= z$800 (not z$798)))
(assert
 (= z$801 (and z$243 z$800)))
(assert
 (= z$803 (not z$801)))
(assert
 (= z$804 (and z$796 z$803)))
(assert
 (= z$806 (not z$804)))
(assert
 (= z$807 (not z$806)))
(assert
 (let (($x1814 (not z$243)))
 (= z$808 $x1814)))
(assert
 (let (($x1817 (not z$800)))
 (= z$809 $x1817)))
(assert
 (= z$810 (and z$808 z$809)))
(assert
 (= z$812 (not z$810)))
(assert
 (= z$813 (and z$250 z$812)))
(assert
 (= z$815 (not z$813)))
(assert
 (= z$816 (and z$807 z$815)))
(assert
 (= z$818 (not z$816)))
(assert
 (= z$819 (not z$818)))
(assert
 (= z$820 (and z$792 z$819)))
(assert
 (let (($x1848 (not z$250)))
 (= z$822 $x1848)))
(assert
 (let (($x1851 (not z$812)))
 (= z$823 $x1851)))
(assert
 (= z$824 (and z$822 z$823)))
(assert
 (= z$826 (not z$824)))
(assert
 (= z$827 (and z$820 z$826)))
(assert
 (= z$829 (and z$260 z$279)))
(assert
 (= z$831 (not z$829)))
(assert
 (let (($x1872 (not z$279)))
 (= z$832 $x1872)))
(assert
 (= z$833 (and z$262 z$832)))
(assert
 (= z$835 (not z$833)))
(assert
 (= z$836 (and z$289 z$835)))
(assert
 (= z$838 (not z$836)))
(assert
 (= z$839 (and z$831 z$838)))
(assert
 (= z$841 (not z$839)))
(assert
 (= z$842 (not z$841)))
(assert
 (= z$843 (and z$827 z$842)))
(assert
 (let (($x1903 (not z$289)))
 (= z$845 $x1903)))
(assert
 (let (($x1906 (not z$835)))
 (= z$846 $x1906)))
(assert
 (= z$847 (and z$845 z$846)))
(assert
 (= z$849 (not z$847)))
(assert
 (= z$850 (and z$843 z$849)))
(assert
 (= z$852 (and z$297 z$304)))
(assert
 (= z$854 (not z$852)))
(assert
 (= z$855 (and z$850 z$854)))
(assert
 (let (($x1931 (not z$304)))
 (= z$857 $x1931)))
(assert
 (= z$858 (and z$298 z$857)))
(assert
 (= z$860 (not z$858)))
(assert
 (= z$861 (and z$855 z$860)))
(assert
 (= z$863 (and z$727 z$861)))
(assert
 (= z$865 (and z$863 z$37)))
(assert
 (= z$867 (not z$865)))
(assert
 (= z$868 (= dve_invalid$next z$867)))
(assert
 (let (($x2173 (and z$1 z$3 z$5 z$7 z$9 z$11 z$13 z$15 z$17 z$19 z$21 z$23 z$25 z$27 z$29 z$31 z$33 z$35 z$37 z$40 z$42 z$44 z$46 z$48 z$50 z$52 z$54 z$877 prop z$912 z$73 z$132 z$142 z$144 z$160 z$170 z$172 z$193 z$200 z$207 z$224 z$238 z$245 z$252 z$263 z$280 z$290 z$299 z$306 z$868)))
 (= z$962 $x2173)))
(assert
 z$962)
(assert
 (=> p$0 a_ready_Consumer$next))
(assert
 (let (($x64 (= z$903 (not dve_invalid$next))))
 (=> p$1 $x64)))
(assert
 (=> p$1 z$903))
(check-sat)
(assert p$0)
(set-info :status sat)
(check-sat)
(exit)
