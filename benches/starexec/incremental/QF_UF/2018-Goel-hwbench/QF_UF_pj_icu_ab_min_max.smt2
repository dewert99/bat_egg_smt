(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: pj_icu
query-maker: "Z3"
query-time: 0.533000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt7 0)
(declare-sort utt2 0)
(declare-sort utt4 0)
(declare-fun z$n4s7 () utt7)
(declare-fun z$n2s7 () utt7)
(declare-fun z$n64s7 () utt7)
(declare-fun z$n32s7 () utt7)
(declare-fun z$n16s7 () utt7)
(declare-fun z$n8s7 () utt7)
(declare-fun z$n0s7 () utt7)
(declare-fun z$n1s7 () utt7)
(declare-fun miss_state.miss_state_output () utt7)
(declare-fun tmp_ic_miss_state () utt7)
(declare-fun tmp_ic_miss_state$next () utt7)
(declare-fun miss_state.miss_state_output$next () utt7)
(declare-fun z$100 () utt7)
(declare-fun z$102 () utt7)
(declare-fun z$104 () utt7)
(declare-fun biu_icu_ack () utt2)
(declare-fun z$106 () utt7)
(declare-fun z$108 () utt7)
(declare-fun z$110 () utt7)
(declare-fun z$112 () utt7)
(declare-fun z$114 () utt7)
(declare-fun z$116 () utt7)
(declare-fun z$118 () utt7)
(declare-fun z$120 () utt7)
(declare-fun z$122 () utt7)
(declare-fun z$124 () utt7)
(declare-fun z$126 () utt7)
(declare-fun z$128 () utt7)
(declare-fun z$130 () utt7)
(declare-fun z$132 () utt7)
(declare-fun z$134 () utt7)
(declare-fun z$136 () utt7)
(declare-fun z$138 () utt7)
(declare-fun z$140 () utt7)
(declare-fun z$148 () utt7)
(declare-fun z$150 () utt7)
(declare-fun z$152 () utt7)
(declare-fun z$154 () utt7)
(declare-fun z$156 () utt7)
(declare-fun z$158 () utt7)
(declare-fun z$160 () utt7)
(declare-fun z$162 () utt7)
(declare-fun iu_ic_diag_e () utt4)
(declare-fun z$235 () utt7)
(declare-fun z$237 () utt7)
(declare-fun z$239 () utt7)
(declare-fun z$241 () utt7)
(declare-fun z$243 () utt7)
(declare-fun z$245 () utt7)
(declare-fun z$247 () utt7)
(declare-fun z$249 () utt7)
(declare-fun z$251 () utt7)
(declare-fun z$253 () utt7)
(declare-fun z$255 () utt7)
(declare-fun z$257 () utt7)
(declare-fun z$259 () utt7)
(declare-fun z$261 () utt7)
(declare-fun z$263 () utt7)
(declare-fun z$265 () utt7)
(declare-fun z$267 () utt7)
(declare-fun z$269 () utt7)
(declare-fun z$271 () utt7)
(declare-fun z$273 () utt7)
(declare-fun z$275 () utt7)
(declare-fun z$277 () utt7)
(declare-fun z$279 () utt7)
(declare-fun z$498 () Bool)
(declare-fun z$502 () Bool)
(declare-fun z$504 () Bool)
(declare-fun z$506 () Bool)
(declare-fun z$576 () Bool)
(declare-fun z$577 () Bool)
(declare-fun z$24 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$320 () Bool)
(declare-fun z$322 () Bool)
(declare-fun z$323 () Bool)
(declare-fun z$325 () Bool)
(declare-fun z$326 () Bool)
(declare-fun z$328 () Bool)
(declare-fun z$329 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$334 () Bool)
(declare-fun z$335 () Bool)
(declare-fun z$337 () Bool)
(declare-fun z$338 () Bool)
(declare-fun z$84 () Bool)
(declare-fun z$12 () Bool)
(declare-fun z$340 () Bool)
(declare-fun z$342 () Bool)
(declare-fun z$343 () Bool)
(declare-fun z$145 () Bool)
(declare-fun z$345 () Bool)
(declare-fun z$347 () Bool)
(declare-fun z$349 () Bool)
(declare-fun z$351 () Bool)
(declare-fun z$353 () Bool)
(declare-fun z$355 () Bool)
(declare-fun z$357 () Bool)
(declare-fun z$359 () Bool)
(declare-fun z$361 () Bool)
(declare-fun z$364 () Bool)
(declare-fun z$365 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$369 () Bool)
(declare-fun z$143 () Bool)
(declare-fun z$371 () Bool)
(declare-fun z$373 () Bool)
(declare-fun z$90 () Bool)
(declare-fun z$375 () Bool)
(declare-fun z$377 () Bool)
(declare-fun z$380 () Bool)
(declare-fun z$381 () Bool)
(declare-fun z$383 () Bool)
(declare-fun prop () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$409 () Bool)
(declare-fun z$410 () Bool)
(declare-fun z$411 () Bool)
(declare-fun z$413 () Bool)
(declare-fun z$414 () Bool)
(declare-fun z$416 () Bool)
(declare-fun z$417 () Bool)
(declare-fun z$419 () Bool)
(declare-fun z$420 () Bool)
(declare-fun z$422 () Bool)
(declare-fun z$423 () Bool)
(declare-fun z$425 () Bool)
(declare-fun z$426 () Bool)
(declare-fun z$428 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$431 () Bool)
(declare-fun z$432 () Bool)
(declare-fun z$433 () Bool)
(declare-fun z$435 () Bool)
(declare-fun z$436 () Bool)
(declare-fun z$438 () Bool)
(declare-fun z$439 () Bool)
(declare-fun z$441 () Bool)
(declare-fun z$443 () Bool)
(declare-fun z$445 () Bool)
(declare-fun z$447 () Bool)
(declare-fun z$449 () Bool)
(declare-fun z$451 () Bool)
(declare-fun z$453 () Bool)
(declare-fun z$455 () Bool)
(declare-fun z$457 () Bool)
(declare-fun z$458 () Bool)
(declare-fun z$460 () Bool)
(declare-fun z$462 () Bool)
(declare-fun z$464 () Bool)
(declare-fun z$465 () Bool)
(declare-fun z$467 () Bool)
(declare-fun z$469 () Bool)
(declare-fun z$470 () Bool)
(declare-fun z$472 () Bool)
(declare-fun z$474 () Bool)
(declare-fun z$475 () Bool)
(declare-fun z$477 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$479 () Bool)
(declare-fun reset_l () Bool)
(declare-fun z$32 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$91 () Bool)
(declare-fun z$93 () Bool)
(declare-fun pcsu_powerdown () Bool)
(declare-fun z$96 () Bool)
(declare-fun iu_brtaken_e () Bool)
(declare-fun z$98 () Bool)
(declare-fun Extract_1_0_0_2 (utt2) Bool)
(declare-fun z$48 () Bool)
(declare-fun Extract_1_1_1_2 (utt2) Bool)
(declare-fun z$50 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$53 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$165 () Bool)
(declare-fun iu_psr_ice () Bool)
(declare-fun iu_flush_e () Bool)
(declare-fun z$168 () Bool)
(declare-fun Extract_1_0_0_7 (utt7) Bool)
(declare-fun z$37 () Bool)
(declare-fun z$170 () Bool)
(declare-fun Extract_1_3_3_4 (utt4) Bool)
(declare-fun z$172 () Bool)
(declare-fun z$174 () Bool)
(declare-fun Extract_1_2_2_4 (utt4) Bool)
(declare-fun z$35 () Bool)
(declare-fun z$176 () Bool)
(declare-fun Extract_1_1_1_4 (utt4) Bool)
(declare-fun z$178 () Bool)
(declare-fun z$180 () Bool)
(declare-fun Extract_1_0_0_4 (utt4) Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun valid_diag_c_reg.out () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$189 () Bool)
(declare-fun ibuf_full () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$194 () Bool)
(declare-fun ice_line_align () Bool)
(declare-fun z$197 () Bool)
(declare-fun z$26 () Bool)
(declare-fun z$199 () Bool)
(declare-fun nc_fill_cyc_flop.out () Bool)
(declare-fun z$14 () Bool)
(declare-fun z$201 () Bool)
(declare-fun fourth_fill_cyc_flop.out () Bool)
(declare-fun z$3 () Bool)
(declare-fun z$203 () Bool)
(declare-fun qual_iu_psr_ice_reg.out () Bool)
(declare-fun iu_psr_ice_reg.mj_s_ff_snre_d_0.out () Bool)
(declare-fun z$205 () Bool)
(declare-fun z$207 () Bool)
(declare-fun iu_psr_bm8 () Bool)
(declare-fun z$209 () Bool)
(declare-fun icu_hit () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$215 () Bool)
(declare-fun z$217 () Bool)
(declare-fun z$219 () Bool)
(declare-fun z$221 () Bool)
(declare-fun ic_drty () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$225 () Bool)
(declare-fun z$227 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$230 () Bool)
(declare-fun z$231 () Bool)
(declare-fun z$233 () Bool)
(declare-fun z$281 () Bool)
(declare-fun z$585 () Bool)
(declare-fun z$550 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$551 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$552 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$553 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$555 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$556 () Bool)
(declare-fun p$5 () Bool)
(assert
 (and (distinct z$n1s7 z$n0s7 z$n8s7 z$n16s7 z$n32s7 z$n64s7 z$n2s7 z$n4s7) true))
(assert
 (= z$498 (and (distinct miss_state.miss_state_output z$n1s7) true)))
(assert
 (= z$502 (and (distinct miss_state.miss_state_output z$n4s7) true)))
(assert
 (= z$504 (and (distinct miss_state.miss_state_output z$n2s7) true)))
(assert
 (= z$506 (and (distinct miss_state.miss_state_output z$n64s7) true)))
(assert
 (= z$576 (and z$498 z$502 z$504 z$506)))
(assert
 (= z$577 (not z$576)))
(assert
 (let (($x39 (= tmp_ic_miss_state z$n1s7)))
 (= z$24 $x39)))
(assert
 (let (($x42 (= tmp_ic_miss_state z$n2s7)))
 (= z$319 $x42)))
(assert
 (let (($x45 (or z$24 z$319)))
 (= z$320 $x45)))
(assert
 (let (($x49 (= tmp_ic_miss_state z$n4s7)))
 (= z$322 $x49)))
(assert
 (let (($x52 (or z$320 z$322)))
 (= z$323 $x52)))
(assert
 (let (($x56 (= tmp_ic_miss_state z$n8s7)))
 (= z$325 $x56)))
(assert
 (let (($x59 (or z$323 z$325)))
 (= z$326 $x59)))
(assert
 (let (($x63 (= tmp_ic_miss_state z$n16s7)))
 (= z$328 $x63)))
(assert
 (let (($x66 (or z$326 z$328)))
 (= z$329 $x66)))
(assert
 (let (($x70 (= tmp_ic_miss_state z$n32s7)))
 (= z$331 $x70)))
(assert
 (let (($x73 (or z$329 z$331)))
 (= z$332 $x73)))
(assert
 (let (($x77 (= tmp_ic_miss_state z$n64s7)))
 (= z$334 $x77)))
(assert
 (let (($x80 (or z$332 z$334)))
 (= z$335 $x80)))
(assert
 (let (($x84 (= tmp_ic_miss_state z$n0s7)))
 (= z$337 $x84)))
(assert
 (let (($x87 (or z$335 z$337)))
 (= z$338 $x87)))
(assert
 (let (($x92 (= miss_state.miss_state_output z$n8s7)))
 (= z$84 $x92)))
(assert
 (let (($x95 (= miss_state.miss_state_output z$n1s7)))
 (= z$12 $x95)))
(assert
 (let (($x98 (or z$84 z$12)))
 (= z$340 $x98)))
(assert
 (let (($x102 (= miss_state.miss_state_output z$n0s7)))
 (= z$342 $x102)))
(assert
 (let (($x105 (or z$340 z$342)))
 (= z$343 $x105)))
(assert
 (let (($x109 (= miss_state.miss_state_output z$n4s7)))
 (= z$145 $x109)))
(assert
 (let (($x112 (or z$343 z$145)))
 (= z$345 $x112)))
(assert
 (= z$347 (and z$322 z$345)))
(assert
 (let (($x120 (or z$320 z$347)))
 (= z$349 $x120)))
(assert
 (let (($x124 (or z$349 z$325)))
 (= z$351 $x124)))
(assert
 (let (($x128 (or z$351 z$328)))
 (= z$353 $x128)))
(assert
 (let (($x132 (or z$353 z$331)))
 (= z$355 $x132)))
(assert
 (let (($x136 (or z$355 z$334)))
 (= z$357 $x136)))
(assert
 (let (($x140 (or z$357 z$337)))
 (= z$359 $x140)))
(assert
 (= z$361 (and z$338 z$359)))
(assert
 (= z$364 (and (distinct tmp_ic_miss_state z$n4s7) true)))
(assert
 (let (($x151 (or z$347 z$364)))
 (= z$365 $x151)))
(assert
 (= z$367 (and z$361 z$365)))
(assert
 (let (($x159 (or z$342 z$12)))
 (= z$369 $x159)))
(assert
 (let (($x163 (= miss_state.miss_state_output z$n2s7)))
 (= z$143 $x163)))
(assert
 (let (($x166 (or z$369 z$143)))
 (= z$371 $x166)))
(assert
 (let (($x170 (or z$371 z$145)))
 (= z$373 $x170)))
(assert
 (let (($x174 (= miss_state.miss_state_output z$n64s7)))
 (= z$90 $x174)))
(assert
 (let (($x177 (or z$373 z$90)))
 (= z$375 $x177)))
(assert
 (= z$377 (and z$24 z$375)))
(assert
 (= z$380 (and (distinct tmp_ic_miss_state z$n1s7) true)))
(assert
 (let (($x188 (or z$377 z$380)))
 (= z$381 $x188)))
(assert
 (= z$383 (and z$367 z$381)))
(assert
 (= z$385 (= prop z$383)))
(assert
 (let (($x201 (= tmp_ic_miss_state$next z$n1s7)))
 (= z$409 $x201)))
(assert
 (let (($x204 (= tmp_ic_miss_state$next z$n2s7)))
 (= z$410 $x204)))
(assert
 (let (($x207 (or z$409 z$410)))
 (= z$411 $x207)))
(assert
 (let (($x211 (= tmp_ic_miss_state$next z$n4s7)))
 (= z$413 $x211)))
(assert
 (let (($x214 (or z$411 z$413)))
 (= z$414 $x214)))
(assert
 (let (($x218 (= tmp_ic_miss_state$next z$n8s7)))
 (= z$416 $x218)))
(assert
 (let (($x221 (or z$414 z$416)))
 (= z$417 $x221)))
(assert
 (let (($x225 (= tmp_ic_miss_state$next z$n16s7)))
 (= z$419 $x225)))
(assert
 (let (($x228 (or z$417 z$419)))
 (= z$420 $x228)))
(assert
 (let (($x232 (= tmp_ic_miss_state$next z$n32s7)))
 (= z$422 $x232)))
(assert
 (let (($x235 (or z$420 z$422)))
 (= z$423 $x235)))
(assert
 (let (($x239 (= tmp_ic_miss_state$next z$n64s7)))
 (= z$425 $x239)))
(assert
 (let (($x242 (or z$423 z$425)))
 (= z$426 $x242)))
(assert
 (let (($x246 (= tmp_ic_miss_state$next z$n0s7)))
 (= z$428 $x246)))
(assert
 (let (($x249 (or z$426 z$428)))
 (= z$429 $x249)))
(assert
 (let (($x254 (= miss_state.miss_state_output$next z$n8s7)))
 (= z$431 $x254)))
(assert
 (let (($x257 (= miss_state.miss_state_output$next z$n1s7)))
 (= z$432 $x257)))
(assert
 (let (($x260 (or z$431 z$432)))
 (= z$433 $x260)))
(assert
 (let (($x264 (= miss_state.miss_state_output$next z$n0s7)))
 (= z$435 $x264)))
(assert
 (let (($x267 (or z$433 z$435)))
 (= z$436 $x267)))
(assert
 (let (($x271 (= miss_state.miss_state_output$next z$n4s7)))
 (= z$438 $x271)))
(assert
 (let (($x274 (or z$436 z$438)))
 (= z$439 $x274)))
(assert
 (= z$441 (and z$413 z$439)))
(assert
 (let (($x282 (or z$411 z$441)))
 (= z$443 $x282)))
(assert
 (let (($x286 (or z$443 z$416)))
 (= z$445 $x286)))
(assert
 (let (($x290 (or z$445 z$419)))
 (= z$447 $x290)))
(assert
 (let (($x294 (or z$447 z$422)))
 (= z$449 $x294)))
(assert
 (let (($x298 (or z$449 z$425)))
 (= z$451 $x298)))
(assert
 (let (($x302 (or z$451 z$428)))
 (= z$453 $x302)))
(assert
 (= z$455 (and z$429 z$453)))
(assert
 (= z$457 (and (distinct tmp_ic_miss_state$next z$n4s7) true)))
(assert
 (let (($x313 (or z$441 z$457)))
 (= z$458 $x313)))
(assert
 (= z$460 (and z$455 z$458)))
(assert
 (let (($x321 (or z$435 z$432)))
 (= z$462 $x321)))
(assert
 (let (($x325 (= miss_state.miss_state_output$next z$n2s7)))
 (= z$464 $x325)))
(assert
 (let (($x328 (or z$462 z$464)))
 (= z$465 $x328)))
(assert
 (let (($x332 (or z$465 z$438)))
 (= z$467 $x332)))
(assert
 (let (($x336 (= miss_state.miss_state_output$next z$n64s7)))
 (= z$469 $x336)))
(assert
 (let (($x339 (or z$467 z$469)))
 (= z$470 $x339)))
(assert
 (= z$472 (and z$409 z$470)))
(assert
 (= z$474 (and (distinct tmp_ic_miss_state$next z$n1s7) true)))
(assert
 (let (($x350 (or z$472 z$474)))
 (= z$475 $x350)))
(assert
 (= z$477 (and z$460 z$475)))
(assert
 (= z$479 (= prop$next z$477)))
(assert
 (= z$32 (not reset_l)))
(assert
 (let (($x415 (= miss_state.miss_state_output z$n16s7)))
 (= z$86 $x415)))
(assert
 (let (($x418 (= miss_state.miss_state_output z$n32s7)))
 (= z$88 $x418)))
(assert
 (let (($x421 (or z$88 z$90)))
 (= z$91 $x421)))
(assert
 (let (($x425 (or z$84 z$86 z$91)))
 (= z$93 $x425)))
(assert
 (let (($x430 (not pcsu_powerdown)))
 (= z$96 $x430)))
(assert
 (let (($x434 (or z$96 iu_brtaken_e)))
 (= z$98 $x434)))
(assert
 (let ((?x438 (ite z$98 z$n1s7 z$n64s7)))
 (= z$100 ?x438)))
(assert
 (let ((?x442 (ite z$90 z$100 z$n0s7)))
 (= z$102 ?x442)))
(assert
 (let ((?x446 (ite z$32 z$n0s7 z$102)))
 (= z$104 ?x446)))
(assert
 (let (($x451 (Extract_1_0_0_2 biu_icu_ack)))
 (= z$48 $x451)))
(assert
 (let (($x455 (Extract_1_1_1_2 biu_icu_ack)))
 (= z$50 $x455)))
(assert
 (= z$52 (not z$50)))
(assert
 (= z$53 (and z$48 z$52)))
(assert
 (let (($x466 (or z$53 z$50)))
 (= z$55 $x466)))
(assert
 (let ((?x470 (ite z$55 z$n1s7 miss_state.miss_state_output)))
 (= z$106 ?x470)))
(assert
 (let ((?x474 (ite z$88 z$106 z$n0s7)))
 (= z$108 ?x474)))
(assert
 (let ((?x478 (ite z$32 z$n0s7 z$108)))
 (= z$110 ?x478)))
(assert
 (let ((?x482 (ite z$90 z$104 z$110)))
 (= z$112 ?x482)))
(assert
 (let ((?x486 (ite z$50 z$n1s7 miss_state.miss_state_output)))
 (= z$114 ?x486)))
(assert
 (let ((?x490 (ite z$53 z$n0s7 z$114)))
 (= z$116 ?x490)))
(assert
 (let ((?x494 (ite z$86 z$116 z$n0s7)))
 (= z$118 ?x494)))
(assert
 (let ((?x498 (ite z$32 z$n0s7 z$118)))
 (= z$120 ?x498)))
(assert
 (let ((?x502 (ite z$53 z$n32s7 z$120)))
 (= z$122 ?x502)))
(assert
 (let ((?x506 (ite z$86 z$122 z$n0s7)))
 (= z$124 ?x506)))
(assert
 (let ((?x510 (ite z$32 z$n0s7 z$124)))
 (= z$126 ?x510)))
(assert
 (let ((?x514 (ite z$84 z$116 z$n0s7)))
 (= z$128 ?x514)))
(assert
 (let ((?x518 (ite z$32 z$n0s7 z$128)))
 (= z$130 ?x518)))
(assert
 (let ((?x522 (ite z$53 z$n16s7 z$130)))
 (= z$132 ?x522)))
(assert
 (let ((?x526 (ite z$84 z$132 z$n0s7)))
 (= z$134 ?x526)))
(assert
 (let ((?x530 (ite z$32 z$n0s7 z$134)))
 (= z$136 ?x530)))
(assert
 (let ((?x534 (ite z$86 z$126 z$136)))
 (= z$138 ?x534)))
(assert
 (let ((?x538 (ite z$91 z$112 z$138)))
 (= z$140 ?x538)))
(assert
 (let (($x542 (or z$143 z$145)))
 (= z$146 $x542)))
(assert
 (let ((?x546 (ite z$145 z$116 z$n0s7)))
 (= z$148 ?x546)))
(assert
 (let ((?x550 (ite z$32 z$n0s7 z$148)))
 (= z$150 ?x550)))
(assert
 (let ((?x554 (ite z$53 z$n8s7 z$150)))
 (= z$152 ?x554)))
(assert
 (let ((?x558 (ite z$145 z$152 z$n0s7)))
 (= z$154 ?x558)))
(assert
 (let ((?x562 (ite z$32 z$n0s7 z$154)))
 (= z$156 ?x562)))
(assert
 (let ((?x566 (ite z$143 z$106 z$n0s7)))
 (= z$158 ?x566)))
(assert
 (let ((?x570 (ite z$32 z$n0s7 z$158)))
 (= z$160 ?x570)))
(assert
 (let ((?x574 (ite z$145 z$156 z$160)))
 (= z$162 ?x574)))
(assert
 (= z$164 (not iu_brtaken_e)))
(assert
 (= z$165 (and pcsu_powerdown z$164)))
(assert
 (= z$168 (and iu_flush_e iu_psr_ice)))
(assert
 (let (($x591 (Extract_1_0_0_7 miss_state.miss_state_output)))
 (= z$37 $x591)))
(assert
 (= z$170 (and z$168 z$37)))
(assert
 (let (($x600 (Extract_1_3_3_4 iu_ic_diag_e)))
 (= z$172 $x600)))
(assert
 (let (($x604 (or z$170 z$172)))
 (= z$174 $x604)))
(assert
 (let (($x608 (Extract_1_2_2_4 iu_ic_diag_e)))
 (= z$35 $x608)))
(assert
 (let (($x612 (or z$174 z$35)))
 (= z$176 $x612)))
(assert
 (let (($x616 (Extract_1_1_1_4 iu_ic_diag_e)))
 (= z$178 $x616)))
(assert
 (let (($x620 (or z$176 z$178)))
 (= z$180 $x620)))
(assert
 (let (($x624 (Extract_1_0_0_4 iu_ic_diag_e)))
 (= z$182 $x624)))
(assert
 (let (($x628 (or z$180 z$182)))
 (= z$184 $x628)))
(assert
 (let (($x632 (or z$184 valid_diag_c_reg.out)))
 (= z$186 $x632)))
(assert
 (= z$188 (not z$186)))
(assert
 (= z$189 (and z$165 z$188)))
(assert
 (let (($x644 (or z$186 ibuf_full)))
 (= z$192 $x644)))
(assert
 (let (($x648 (or z$192 iu_brtaken_e)))
 (= z$194 $x648)))
(assert
 (= z$197 (and z$37 ice_line_align)))
(assert
 (= z$26 (not valid_diag_c_reg.out)))
(assert
 (= z$199 (and z$197 z$26)))
(assert
 (= z$14 (not nc_fill_cyc_flop.out)))
(assert
 (= z$201 (and z$199 z$14)))
(assert
 (= z$3 (not fourth_fill_cyc_flop.out)))
(assert
 (= z$203 (and z$201 z$3)))
(assert
 (let (($x669 (ite z$203 iu_psr_ice_reg.mj_s_ff_snre_d_0.out qual_iu_psr_ice_reg.out)))
 (= z$205 $x669)))
(assert
 (let (($x673 (not z$205)))
 (= z$207 $x673)))
(assert
 (let (($x677 (or z$207 iu_psr_bm8)))
 (= z$209 $x677)))
(assert
 (= z$212 (not icu_hit)))
(assert
 (let (($x685 (or z$209 z$212)))
 (= z$213 $x685)))
(assert
 (= z$215 (and z$213 z$37)))
(assert
 (= z$217 (and z$215 z$26)))
(assert
 (= z$219 (and z$217 z$3)))
(assert
 (= z$221 (and z$219 z$14)))
(assert
 (= z$224 (not ic_drty)))
(assert
 (= z$225 (and z$221 z$224)))
(assert
 (= z$227 (not iu_psr_bm8)))
(assert
 (= z$228 (and z$205 z$227)))
(assert
 (let (($x720 (not z$228)))
 (= z$230 $x720)))
(assert
 (= z$231 (and z$225 z$230)))
(assert
 (= z$233 (and z$225 z$228)))
(assert
 (let ((?x731 (ite z$233 z$n4s7 miss_state.miss_state_output)))
 (= z$235 ?x731)))
(assert
 (let ((?x735 (ite z$231 z$n0s7 z$235)))
 (= z$237 ?x735)))
(assert
 (let ((?x739 (ite z$194 z$n0s7 z$237)))
 (= z$239 ?x739)))
(assert
 (let ((?x743 (ite z$189 z$n0s7 z$239)))
 (= z$241 ?x743)))
(assert
 (let ((?x747 (ite z$12 z$241 z$n0s7)))
 (= z$243 ?x747)))
(assert
 (let ((?x751 (ite z$32 z$n0s7 z$243)))
 (= z$245 ?x751)))
(assert
 (let ((?x755 (ite z$231 z$n2s7 z$245)))
 (= z$247 ?x755)))
(assert
 (let ((?x759 (ite z$194 z$n0s7 z$247)))
 (= z$249 ?x759)))
(assert
 (let ((?x763 (ite z$189 z$n0s7 z$249)))
 (= z$251 ?x763)))
(assert
 (let ((?x767 (ite z$12 z$251 z$n0s7)))
 (= z$253 ?x767)))
(assert
 (let ((?x771 (ite z$32 z$n0s7 z$253)))
 (= z$255 ?x771)))
(assert
 (let ((?x775 (ite z$194 miss_state.miss_state_output z$255)))
 (= z$257 ?x775)))
(assert
 (let ((?x779 (ite z$189 z$n0s7 z$257)))
 (= z$259 ?x779)))
(assert
 (let ((?x783 (ite z$12 z$259 z$n0s7)))
 (= z$261 ?x783)))
(assert
 (let ((?x787 (ite z$32 z$n0s7 z$261)))
 (= z$263 ?x787)))
(assert
 (let ((?x791 (ite z$189 z$n64s7 z$263)))
 (= z$265 ?x791)))
(assert
 (let ((?x795 (ite z$12 z$265 z$n0s7)))
 (= z$267 ?x795)))
(assert
 (let ((?x799 (ite z$32 z$n0s7 z$267)))
 (= z$269 ?x799)))
(assert
 (let ((?x803 (ite z$12 z$269 z$n0s7)))
 (= z$271 ?x803)))
(assert
 (let ((?x807 (ite z$146 z$162 z$271)))
 (= z$273 ?x807)))
(assert
 (let ((?x811 (ite z$93 z$140 z$273)))
 (= z$275 ?x811)))
(assert
 (let ((?x815 (ite z$32 z$n0s7 z$275)))
 (= z$277 ?x815)))
(assert
 (let ((?x819 (ite z$32 z$n1s7 z$277)))
 (= z$279 ?x819)))
(assert
 (let (($x823 (= miss_state.miss_state_output$next z$279)))
 (= z$281 $x823)))
(assert
 (= z$585 (and z$577 z$385 prop z$479 z$281)))
(assert
 z$585)
(assert
 (=> p$0 (= z$550 (and (distinct miss_state.miss_state_output$next z$n1s7) true))))
(assert
 (=> p$0 z$550))
(assert
 (=> p$1 (= z$551 (and (distinct miss_state.miss_state_output$next z$n2s7) true))))
(assert
 (=> p$1 z$551))
(assert
 (=> p$2 (= z$552 (and (distinct miss_state.miss_state_output$next z$n4s7) true))))
(assert
 (=> p$2 z$552))
(assert
 (=> p$3 (= z$553 (and (distinct miss_state.miss_state_output$next z$n8s7) true))))
(assert
 (=> p$3 z$553))
(assert
 (=> p$4 (= z$555 (and (distinct miss_state.miss_state_output$next z$n32s7) true))))
(assert
 (=> p$4 z$555))
(assert
 (=> p$5 (= z$556 (and (distinct miss_state.miss_state_output$next z$n64s7) true))))
(assert
 (=> p$5 z$556))
(check-sat)
(assert p$5)
(assert p$1)
(assert p$2)
(assert p$4)
(assert p$0)
(set-info :status sat)
(check-sat)
(exit)
