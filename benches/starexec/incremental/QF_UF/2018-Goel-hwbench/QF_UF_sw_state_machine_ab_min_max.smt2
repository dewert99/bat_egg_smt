(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sw_state_machine
query-maker: "Z3"
query-time: 3.737000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt32 0)
(declare-fun z$n2s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun S () utt32)
(declare-fun z$28 () utt32)
(declare-fun z$34 () utt32)
(declare-fun z$36 () utt32)
(declare-fun z$38 () utt32)
(declare-fun z$40 () utt32)
(declare-fun S$next () utt32)
(declare-fun L10 () Bool)
(declare-fun z$2 () Bool)
(declare-fun L3 () Bool)
(declare-fun z$4 () Bool)
(declare-fun L4 () Bool)
(declare-fun z$6 () Bool)
(declare-fun L5 () Bool)
(declare-fun z$8 () Bool)
(declare-fun L6 () Bool)
(declare-fun z$10 () Bool)
(declare-fun L7 () Bool)
(declare-fun z$12 () Bool)
(declare-fun L8 () Bool)
(declare-fun z$14 () Bool)
(declare-fun L9 () Bool)
(declare-fun z$16 () Bool)
(declare-fun z$20 () Bool)
(declare-fun X () Bool)
(declare-fun z$22 () Bool)
(declare-fun prop () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$25 () Bool)
(declare-fun z$30 () Bool)
(declare-fun z$31 () Bool)
(declare-fun LoneHot () Bool)
(declare-fun z$42 () Bool)
(declare-fun Le_1_32_32 (utt32 utt32) Bool)
(declare-fun z$44 () Bool)
(declare-fun inp () Bool)
(declare-fun z$47 () Bool)
(declare-fun z$49 () Bool)
(declare-fun z$51 () Bool)
(declare-fun X$next () Bool)
(declare-fun z$53 () Bool)
(declare-fun L1 () Bool)
(declare-fun z$56 () Bool)
(declare-fun L1$next () Bool)
(declare-fun z$58 () Bool)
(declare-fun z$60 () Bool)
(declare-fun z$62 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$65 () Bool)
(declare-fun z$67 () Bool)
(declare-fun z$69 () Bool)
(declare-fun L3$next () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$74 () Bool)
(declare-fun z$76 () Bool)
(declare-fun z$78 () Bool)
(declare-fun L4$next () Bool)
(declare-fun z$80 () Bool)
(declare-fun z$82 () Bool)
(declare-fun z$84 () Bool)
(declare-fun L5$next () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$89 () Bool)
(declare-fun z$91 () Bool)
(declare-fun z$93 () Bool)
(declare-fun L6$next () Bool)
(declare-fun z$95 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$99 () Bool)
(declare-fun L7$next () Bool)
(declare-fun z$101 () Bool)
(declare-fun z$103 () Bool)
(declare-fun z$104 () Bool)
(declare-fun z$106 () Bool)
(declare-fun L8$next () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$110 () Bool)
(declare-fun z$112 () Bool)
(declare-fun L9$next () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$117 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$121 () Bool)
(declare-fun L10$next () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$129 () Bool)
(declare-fun z$131 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$137 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$141 () Bool)
(declare-fun z$142 () Bool)
(declare-fun z$144 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$154 () Bool)
(declare-fun z$156 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$166 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$170 () Bool)
(declare-fun z$172 () Bool)
(declare-fun z$174 () Bool)
(declare-fun z$176 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$190 () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$194 () Bool)
(declare-fun z$196 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$206 () Bool)
(declare-fun z$208 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$214 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$218 () Bool)
(declare-fun z$220 () Bool)
(declare-fun z$222 () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$226 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$230 () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$238 () Bool)
(declare-fun z$240 () Bool)
(declare-fun z$242 () Bool)
(declare-fun LoneHot$next () Bool)
(declare-fun z$244 () Bool)
(declare-fun z$257 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$258 () Bool)
(declare-fun z$417 () Bool)
(declare-fun z$280 () Bool)
(declare-fun p$0 () Bool)
(assert
 (and (distinct z$n0s32 z$n1s32 z$n2s32) true))
(assert
 (let (($x34 (not L10)))
 (= z$2 $x34)))
(assert
 (let (($x53 (not L3)))
 (= z$4 $x53)))
(assert
 (let (($x57 (not L4)))
 (= z$6 $x57)))
(assert
 (let (($x61 (not L5)))
 (= z$8 $x61)))
(assert
 (let (($x65 (not L6)))
 (= z$10 $x65)))
(assert
 (let (($x69 (not L7)))
 (= z$12 $x69)))
(assert
 (let (($x73 (not L8)))
 (= z$14 $x73)))
(assert
 (let (($x77 (not L9)))
 (= z$16 $x77)))
(assert
 (let (($x82 (= S z$n0s32)))
 (= z$20 $x82)))
(assert
 (let (($x86 (not X)))
 (= z$22 $x86)))
(assert
 (= z$247 (= prop z$2)))
(assert
 (= z$25 (and z$20 X)))
(assert
 (let ((?x97 (ite z$25 z$n1s32 S)))
 (= z$28 ?x97)))
(assert
 (let (($x101 (= S z$n1s32)))
 (= z$30 $x101)))
(assert
 (= z$31 (and z$30 z$22)))
(assert
 (let ((?x108 (ite z$31 z$n2s32 S)))
 (= z$34 ?x108)))
(assert
 (let ((?x112 (ite L8 z$34 S)))
 (= z$36 ?x112)))
(assert
 (let ((?x116 (ite L6 z$28 z$36)))
 (= z$38 ?x116)))
(assert
 (let ((?x120 (ite LoneHot z$38 S)))
 (= z$40 ?x120)))
(assert
 (let (($x124 (= S$next z$40)))
 (= z$42 $x124)))
(assert
 (let (($x128 (Le_1_32_32 S z$n2s32)))
 (= z$44 $x128)))
(assert
 (let (($x133 (ite z$44 inp X)))
 (= z$47 $x133)))
(assert
 (let (($x137 (ite L4 z$47 X)))
 (= z$49 $x137)))
(assert
 (let (($x141 (ite LoneHot z$49 X)))
 (= z$51 $x141)))
(assert
 (= z$53 (= X$next z$51)))
(assert
 (= z$56 (ite LoneHot false L1)))
(assert
 (= z$58 (= L1$next z$56)))
(assert
 (let (($x149 (or L1 L7)))
 (= z$60 $x149)))
(assert
 (let (($x153 (not z$31)))
 (= z$62 $x153)))
(assert
 (= z$63 (and L8 z$62)))
(assert
 (let (($x160 (or z$60 z$63)))
 (= z$65 $x160)))
(assert
 (let (($x164 (or z$65 L9)))
 (= z$67 $x164)))
(assert
 (let (($x168 (ite LoneHot z$67 L3)))
 (= z$69 $x168)))
(assert
 (= z$71 (= L3$next z$69)))
(assert
 (= z$73 (and (distinct S z$n2s32) true)))
(assert
 (let (($x751 (or z$73 z$22)))
 (= z$74 $x751)))
(assert
 (= z$76 (and L3 z$74)))
(assert
 (let (($x743 (ite LoneHot z$76 L4)))
 (= z$78 $x743)))
(assert
 (= z$80 (= L4$next z$78)))
(assert
 (= z$82 (and L4 z$44)))
(assert
 (let (($x577 (ite LoneHot z$82 L5)))
 (= z$84 $x577)))
(assert
 (= z$86 (= L5$next z$84)))
(assert
 (let (($x627 (not z$44)))
 (= z$88 $x627)))
(assert
 (= z$89 (and L4 z$88)))
(assert
 (let (($x704 (or L5 z$89)))
 (= z$91 $x704)))
(assert
 (let (($x664 (ite LoneHot z$91 L6)))
 (= z$93 $x664)))
(assert
 (= z$95 (= L6$next z$93)))
(assert
 (= z$97 (and L6 z$25)))
(assert
 (let (($x713 (ite LoneHot z$97 L7)))
 (= z$99 $x713)))
(assert
 (= z$101 (= L7$next z$99)))
(assert
 (let (($x678 (not z$25)))
 (= z$103 $x678)))
(assert
 (= z$104 (and L6 z$103)))
(assert
 (let (($x652 (ite LoneHot z$104 L8)))
 (= z$106 $x652)))
(assert
 (= z$108 (= L8$next z$106)))
(assert
 (= z$110 (and L8 z$31)))
(assert
 (let (($x531 (ite LoneHot z$110 L9)))
 (= z$112 $x531)))
(assert
 (= z$114 (= L9$next z$112)))
(assert
 (let (($x692 (not z$74)))
 (= z$116 $x692)))
(assert
 (= z$117 (and L3 z$116)))
(assert
 (let (($x721 (or L10 z$117)))
 (= z$119 $x721)))
(assert
 (let (($x723 (ite LoneHot z$119 L10)))
 (= z$121 $x723)))
(assert
 (= z$123 (= L10$next z$121)))
(assert
 (= z$125 (and L1 z$4)))
(assert
 (= z$127 (and z$125 z$6)))
(assert
 (= z$129 (and z$127 z$8)))
(assert
 (= z$131 (and z$129 z$10)))
(assert
 (= z$133 (and z$131 z$12)))
(assert
 (= z$135 (and z$133 z$14)))
(assert
 (= z$137 (and z$135 z$16)))
(assert
 (= z$139 (and z$137 z$2)))
(assert
 (let (($x208 (not L1)))
 (= z$141 $x208)))
(assert
 (= z$142 (and z$141 L3)))
(assert
 (= z$144 (and z$142 z$6)))
(assert
 (= z$146 (and z$144 z$8)))
(assert
 (= z$148 (and z$146 z$10)))
(assert
 (= z$150 (and z$148 z$12)))
(assert
 (= z$152 (and z$150 z$14)))
(assert
 (= z$154 (and z$152 z$16)))
(assert
 (= z$156 (and z$154 z$2)))
(assert
 (let (($x243 (or z$139 z$156)))
 (= z$158 $x243)))
(assert
 (= z$160 (and z$141 z$4)))
(assert
 (= z$162 (and z$160 L4)))
(assert
 (= z$164 (and z$162 z$8)))
(assert
 (= z$166 (and z$164 z$10)))
(assert
 (= z$168 (and z$166 z$12)))
(assert
 (= z$170 (and z$168 z$14)))
(assert
 (= z$172 (and z$170 z$16)))
(assert
 (= z$174 (and z$172 z$2)))
(assert
 (let (($x279 (or z$158 z$174)))
 (= z$176 $x279)))
(assert
 (= z$178 (and z$160 z$6)))
(assert
 (= z$180 (and z$178 L5)))
(assert
 (= z$182 (and z$180 z$10)))
(assert
 (= z$184 (and z$182 z$12)))
(assert
 (= z$186 (and z$184 z$14)))
(assert
 (= z$188 (and z$186 z$16)))
(assert
 (= z$190 (and z$188 z$2)))
(assert
 (let (($x311 (or z$176 z$190)))
 (= z$192 $x311)))
(assert
 (= z$194 (and z$178 z$8)))
(assert
 (= z$196 (and z$194 L6)))
(assert
 (= z$198 (and z$196 z$12)))
(assert
 (= z$200 (and z$198 z$14)))
(assert
 (= z$202 (and z$200 z$16)))
(assert
 (= z$204 (and z$202 z$2)))
(assert
 (let (($x339 (or z$192 z$204)))
 (= z$206 $x339)))
(assert
 (= z$208 (and z$194 z$10)))
(assert
 (= z$210 (and z$208 L7)))
(assert
 (= z$212 (and z$210 z$14)))
(assert
 (= z$214 (and z$212 z$16)))
(assert
 (= z$216 (and z$214 z$2)))
(assert
 (let (($x363 (or z$206 z$216)))
 (= z$218 $x363)))
(assert
 (= z$220 (and z$208 z$12)))
(assert
 (= z$222 (and z$220 L8)))
(assert
 (= z$224 (and z$222 z$16)))
(assert
 (= z$226 (and z$224 z$2)))
(assert
 (let (($x383 (or z$218 z$226)))
 (= z$228 $x383)))
(assert
 (= z$230 (and z$220 z$14)))
(assert
 (= z$232 (and z$230 L9)))
(assert
 (= z$234 (and z$232 z$2)))
(assert
 (let (($x399 (or z$228 z$234)))
 (= z$236 $x399)))
(assert
 (= z$238 (and z$230 z$16)))
(assert
 (= z$240 (and z$238 L10)))
(assert
 (let (($x411 (or z$236 z$240)))
 (= z$242 $x411)))
(assert
 (= z$244 (= LoneHot$next z$242)))
(assert
 (= z$257 (not L10$next)))
(assert
 (= z$258 (= prop$next z$257)))
(assert
 (let (($x851 (and L1 z$2 z$4 z$6 z$8 z$10 z$12 z$14 z$16 LoneHot z$20 z$22 z$247 prop z$42 z$53 z$58 z$71 z$80 z$86 z$95 z$101 z$108 z$114 z$123 z$244 z$258)))
 (= z$417 $x851)))
(assert
 z$417)
(assert
 (=> p$0 (= z$280 (= S$next z$n2s32))))
(assert
 (=> p$0 z$280))
(check-sat)
(assert p$0)
(set-info :status unsat)
(check-sat)
(exit)
