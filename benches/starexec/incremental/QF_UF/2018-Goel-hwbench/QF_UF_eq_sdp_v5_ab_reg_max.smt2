(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v5
query-maker: "Z3"
query-time: 0.835000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt8 0)
(declare-fun z$n4s8 () utt8)
(declare-fun z$n12s8 () utt8)
(declare-fun z$n16s8 () utt8)
(declare-fun z$n1s8 () utt8)
(declare-fun z$n0s8 () utt8)
(declare-fun a () utt8)
(declare-fun Add_8_8_8 (utt8 utt8) utt8)
(declare-fun b () utt8)
(declare-fun z$31 () utt8)
(declare-fun Sub_8_8_8 (utt8 utt8) utt8)
(declare-fun z$33 () utt8)
(declare-fun z$35 () utt8)
(declare-fun c () utt8)
(declare-fun z$38 () utt8)
(declare-fun z$40 () utt8)
(declare-fun z$42 () utt8)
(declare-fun z$44 () utt8)
(declare-fun s1$next () utt8)
(declare-fun s2 () utt8)
(declare-fun z$52 () utt8)
(declare-fun s3$next () utt8)
(declare-fun z$61 () utt8)
(declare-fun im.p1_a$next () utt8)
(declare-fun z$65 () utt8)
(declare-fun im.p1_b$next () utt8)
(declare-fun z$69 () utt8)
(declare-fun im.p1_c$next () utt8)
(declare-fun im.p2_c () utt8)
(declare-fun im.p2_m () utt8)
(declare-fun z$95 () utt8)
(declare-fun z$97 () utt8)
(declare-fun im.p3_n$next () utt8)
(declare-fun im.p2_c$next () utt8)
(declare-fun im.p2_m$next () utt8)
(declare-fun z$137 () utt8)
(declare-fun s2$next () utt8)
(declare-fun BitWiseAnd_8_8_8 (utt8 utt8) utt8)
(declare-fun im.p1_a () utt8)
(declare-fun z$78 () utt8)
(declare-fun z$203 () utt8)
(declare-fun s1 () utt8)
(declare-fun z$48 () utt8)
(declare-fun im.p1_b () utt8)
(declare-fun z$81 () utt8)
(declare-fun z$83 () utt8)
(declare-fun z$85 () utt8)
(declare-fun z$87 () utt8)
(declare-fun im.p1_c () utt8)
(declare-fun z$91 () utt8)
(declare-fun z$366 () utt8)
(declare-fun z$369 () utt8)
(declare-fun z$370 () utt8)
(declare-fun z$371 () utt8)
(declare-fun z$372 () utt8)
(declare-fun z$387 () utt8)
(declare-fun z$388 () utt8)
(declare-fun z$389 () utt8)
(declare-fun im.p3_n () utt8)
(declare-fun s3 () utt8)
(declare-fun Extract_1_0_0_8 (utt8) Bool)
(declare-fun z$28 () Bool)
(declare-fun ctl_2 () Bool)
(declare-fun im.reset () Bool)
(declare-fun z$46 () Bool)
(declare-fun z$54 () Bool)
(declare-fun z$57 () Bool)
(declare-fun im.p1_ctl_2$next () Bool)
(declare-fun z$59 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$67 () Bool)
(declare-fun z$71 () Bool)
(declare-fun im.p1_ctl_2 () Bool)
(declare-fun z$73 () Bool)
(declare-fun im.p2_ctl_2$next () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$99 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$147 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$149 () Bool)
(declare-fun z$151 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$20 () Bool)
(declare-fun z$14 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$145 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$80 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$229 () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$230 () Bool)
(declare-fun z$231 () Bool)
(declare-fun z$240 () Bool)
(declare-fun z$50 () Bool)
(declare-fun z$89 () Bool)
(declare-fun z$93 () Bool)
(declare-fun z$396 () Bool)
(declare-fun z$8 () Bool)
(declare-fun p$0 () Bool)
(declare-fun im.p2_ctl_2 () Bool)
(declare-fun z$12 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$120 () Bool)
(declare-fun p$2 () Bool)
(declare-fun im.reset$next () Bool)
(declare-fun z$134 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$181 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$182 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$183 () Bool)
(declare-fun p$8 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$185 () Bool)
(declare-fun p$9 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$271 () Bool)
(declare-fun z$274 () Bool)
(declare-fun p$11 () Bool)
(declare-fun z$275 () Bool)
(declare-fun p$12 () Bool)
(declare-fun z$276 () Bool)
(declare-fun p$13 () Bool)
(declare-fun p$14 () Bool)
(declare-fun z$279 () Bool)
(declare-fun p$15 () Bool)
(declare-fun z$280 () Bool)
(declare-fun p$16 () Bool)
(declare-fun z$281 () Bool)
(declare-fun z$287 () Bool)
(declare-fun p$17 () Bool)
(declare-fun z$288 () Bool)
(declare-fun p$18 () Bool)
(declare-fun z$289 () Bool)
(declare-fun p$19 () Bool)
(declare-fun z$362 () Bool)
(declare-fun z$363 () Bool)
(declare-fun p$20 () Bool)
(declare-fun z$364 () Bool)
(declare-fun z$365 () Bool)
(declare-fun p$21 () Bool)
(declare-fun z$367 () Bool)
(declare-fun p$22 () Bool)
(declare-fun z$368 () Bool)
(declare-fun p$23 () Bool)
(declare-fun z$374 () Bool)
(declare-fun z$376 () Bool)
(declare-fun p$24 () Bool)
(declare-fun z$378 () Bool)
(declare-fun p$25 () Bool)
(declare-fun z$380 () Bool)
(declare-fun p$26 () Bool)
(declare-fun p$27 () Bool)
(declare-fun z$392 () Bool)
(declare-fun p$28 () Bool)
(declare-fun p$29 () Bool)
(declare-fun z$16 () Bool)
(declare-fun p$30 () Bool)
(declare-fun p$31 () Bool)
(declare-fun z$22 () Bool)
(declare-fun p$32 () Bool)
(declare-fun p$33 () Bool)
(declare-fun z$126 () Bool)
(declare-fun z$201 () Bool)
(declare-fun p$34 () Bool)
(declare-fun z$272 () Bool)
(declare-fun p$35 () Bool)
(declare-fun p$36 () Bool)
(declare-fun z$273 () Bool)
(declare-fun p$37 () Bool)
(declare-fun z$277 () Bool)
(declare-fun p$38 () Bool)
(declare-fun z$278 () Bool)
(declare-fun z$282 () Bool)
(declare-fun p$39 () Bool)
(declare-fun z$283 () Bool)
(declare-fun p$40 () Bool)
(declare-fun p$41 () Bool)
(declare-fun z$284 () Bool)
(declare-fun p$42 () Bool)
(declare-fun z$285 () Bool)
(declare-fun p$43 () Bool)
(declare-fun z$286 () Bool)
(declare-fun p$44 () Bool)
(declare-fun z$390 () Bool)
(declare-fun p$45 () Bool)
(declare-fun z$391 () Bool)
(assert
 (and (distinct z$n0s8 z$n1s8 z$n16s8 z$n12s8 z$n4s8) true))
(assert
 (let (($x592 (Extract_1_0_0_8 a)))
 (= z$28 $x592)))
(assert
 (let ((?x967 (Add_8_8_8 a b)))
 (= z$31 ?x967)))
(assert
 (let ((?x351 (Sub_8_8_8 a b)))
 (= z$33 ?x351)))
(assert
 (let ((?x987 (ite z$28 z$31 z$33)))
 (= z$35 ?x987)))
(assert
 (let ((?x637 (Add_8_8_8 z$35 c)))
 (= z$38 ?x637)))
(assert
 (let ((?x990 (Sub_8_8_8 z$35 c)))
 (= z$40 ?x990)))
(assert
 (let ((?x962 (ite ctl_2 z$38 z$40)))
 (= z$42 ?x962)))
(assert
 (let ((?x740 (ite im.reset z$n0s8 z$42)))
 (= z$44 ?x740)))
(assert
 (let (($x623 (= s1$next z$44)))
 (= z$46 $x623)))
(assert
 (let ((?x2518 (ite im.reset z$n0s8 s2)))
 (= z$52 ?x2518)))
(assert
 (let (($x609 (= s3$next z$52)))
 (= z$54 $x609)))
(assert
 (= z$57 (ite im.reset false ctl_2)))
(assert
 (= z$59 (= im.p1_ctl_2$next z$57)))
(assert
 (let ((?x443 (ite im.reset z$n0s8 a)))
 (= z$61 ?x443)))
(assert
 (let (($x1014 (= im.p1_a$next z$61)))
 (= z$63 $x1014)))
(assert
 (let ((?x312 (ite im.reset z$n0s8 b)))
 (= z$65 ?x312)))
(assert
 (let (($x702 (= im.p1_b$next z$65)))
 (= z$67 $x702)))
(assert
 (let ((?x270 (ite im.reset z$n0s8 c)))
 (= z$69 ?x270)))
(assert
 (let (($x733 (= im.p1_c$next z$69)))
 (= z$71 $x733)))
(assert
 (= z$73 (ite im.reset false im.p1_ctl_2)))
(assert
 (= z$75 (= im.p2_ctl_2$next z$73)))
(assert
 (let ((?x78 (Sub_8_8_8 im.p2_m im.p2_c)))
 (= z$95 ?x78)))
(assert
 (let ((?x2208 (ite im.reset z$n0s8 z$95)))
 (= z$97 ?x2208)))
(assert
 (let (($x771 (= im.p3_n$next z$97)))
 (= z$99 $x771)))
(assert
 (let ((?x160 (Sub_8_8_8 im.p2_m$next im.p2_c$next)))
 (= z$137 ?x160)))
(assert
 (= z$139 (and (distinct s2$next z$137) true)))
(assert
 (let (($x134 (= s2$next z$n0s8)))
 (= z$146 $x134)))
(assert
 (let (($x124 (= im.p2_m$next z$n0s8)))
 (= z$147 $x124)))
(assert
 (let (($x114 (= im.p2_c$next z$n0s8)))
 (= z$148 $x114)))
(assert
 (= z$149 (and z$139 z$146 z$147 z$148)))
(assert
 (= z$151 (not z$149)))
(assert
 (= z$133 (and (distinct s2 z$95) true)))
(assert
 (let (($x47 (= s2 z$n0s8)))
 (= z$20 $x47)))
(assert
 (let (($x31 (= im.p2_m z$n0s8)))
 (= z$14 $x31)))
(assert
 (let (($x405 (= im.p2_c z$n0s8)))
 (= z$10 $x405)))
(assert
 (= z$145 (and z$133 z$20 z$14 z$10)))
(assert
 (= z$150 (not z$145)))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (= z$78 ?x932)))
(assert
 (let (($x930 (= z$78 z$n1s8)))
 (= z$80 $x930)))
(assert
 (let (($x813 (= im.p1_a z$n0s8)))
 (= z$2 $x813)))
(assert
 (= z$229 (and z$80 z$2)))
(assert
 (= z$232 (not z$229)))
(assert
 (let ((?x924 (BitWiseAnd_8_8_8 im.p1_a$next z$n1s8)))
 (= z$203 ?x924)))
(assert
 (let (($x971 (= z$203 z$n1s8)))
 (= z$212 $x971)))
(assert
 (let (($x780 (= im.p1_a$next z$n0s8)))
 (= z$230 $x780)))
(assert
 (= z$231 (and z$212 z$230)))
(assert
 (= z$240 (not z$231)))
(assert
 (let ((?x265 (ite im.reset z$n0s8 s1)))
 (= z$48 ?x265)))
(assert
 (let (($x594 (= s2$next z$48)))
 (= z$50 $x594)))
(assert
 (let ((?x618 (Add_8_8_8 im.p1_a im.p1_b)))
 (= z$81 ?x618)))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (= z$83 ?x616)))
(assert
 (let ((?x614 (ite z$80 z$81 z$83)))
 (= z$85 ?x614)))
(assert
 (let ((?x622 (ite im.reset z$n0s8 z$85)))
 (= z$87 ?x622)))
(assert
 (let (($x630 (= im.p2_m$next z$87)))
 (= z$89 $x630)))
(assert
 (let ((?x232 (ite im.reset z$n0s8 im.p1_c)))
 (= z$91 ?x232)))
(assert
 (let (($x235 (= im.p2_c$next z$91)))
 (= z$93 $x235)))
(assert
 (let (($x2570 (and z$46 z$54 z$59 z$63 z$67 z$71 z$75 z$99 z$151 z$150 z$232 z$240 z$50 z$89 z$93)))
 (= z$396 $x2570)))
(assert
 z$396)
(assert
 (let (($x854 (not im.p1_ctl_2)))
 (let (($x473 (= z$8 $x854)))
 (=> p$0 $x473))))
(assert
 (=> p$0 z$8))
(assert
 (let (($x476 (= z$12 (not im.p2_ctl_2))))
 (=> p$1 $x476)))
(assert
 (=> p$1 z$12))
(assert
 (let (($x5042 (= z$120 (not im.reset))))
 (=> p$2 $x5042)))
(assert
 (=> p$2 z$120))
(assert
 (let (($x651 (= z$134 (not im.reset$next))))
 (=> p$3 $x651)))
(assert
 (=> p$3 z$134))
(assert
 (let ((?x160 (Sub_8_8_8 im.p2_m$next im.p2_c$next)))
 (let (($x152 (= z$137 ?x160)))
 (=> p$4 $x152))))
(assert
 (let (($x142 (= z$139 (and (distinct s2$next z$137) true))))
 (=> p$4 $x142)))
(assert
 (=> p$4 z$139))
(assert
 (let (($x656 (= z$181 (and (distinct s2$next im.p2_m$next) true))))
 (=> p$5 $x656)))
(assert
 (=> p$5 z$181))
(assert
 (let (($x680 (= z$182 (and (distinct s2$next im.p2_c$next) true))))
 (=> p$6 $x680)))
(assert
 (=> p$6 z$182))
(assert
 (let ((?x160 (Sub_8_8_8 im.p2_m$next im.p2_c$next)))
 (let (($x152 (= z$137 ?x160)))
 (=> p$7 $x152))))
(assert
 (let (($x281 (= z$183 (and (distinct z$137 im.p2_m$next) true))))
 (=> p$7 $x281)))
(assert
 (=> p$7 z$183))
(assert
 (let ((?x160 (Sub_8_8_8 im.p2_m$next im.p2_c$next)))
 (let (($x152 (= z$137 ?x160)))
 (=> p$8 $x152))))
(assert
 (let (($x237 (= z$184 (and (distinct z$137 im.p2_c$next) true))))
 (=> p$8 $x237)))
(assert
 (=> p$8 z$184))
(assert
 (let (($x711 (= z$185 (and (distinct im.p2_m$next im.p2_c$next) true))))
 (=> p$9 $x711)))
(assert
 (=> p$9 z$185))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$10 $x926))))
(assert
 (let (($x1539 (= z$271 (and (distinct im.p1_c z$83) true))))
 (=> p$10 $x1539)))
(assert
 (=> p$10 z$271))
(assert
 (let (($x2659 (= z$274 (and (distinct im.p1_c im.p1_a) true))))
 (=> p$11 $x2659)))
(assert
 (=> p$11 z$274))
(assert
 (let (($x2572 (= z$275 (and (distinct im.p1_c s1) true))))
 (=> p$12 $x2572)))
(assert
 (=> p$12 z$275))
(assert
 (let (($x1880 (= z$276 (and (distinct im.p1_c im.p1_b) true))))
 (=> p$13 $x1880)))
(assert
 (=> p$13 z$276))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$14 $x926))))
(assert
 (let (($x2790 (= z$279 (and (distinct z$83 im.p1_a) true))))
 (=> p$14 $x2790)))
(assert
 (=> p$14 z$279))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$15 $x926))))
(assert
 (let (($x2576 (= z$280 (and (distinct z$83 s1) true))))
 (=> p$15 $x2576)))
(assert
 (=> p$15 z$280))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$16 $x926))))
(assert
 (let (($x1933 (= z$281 (and (distinct z$83 im.p1_b) true))))
 (=> p$16 $x1933)))
(assert
 (=> p$16 z$281))
(assert
 (let (($x5403 (= z$287 (and (distinct im.p1_a s1) true))))
 (=> p$17 $x5403)))
(assert
 (=> p$17 z$287))
(assert
 (let (($x5417 (= z$288 (and (distinct im.p1_a im.p1_b) true))))
 (=> p$18 $x5417)))
(assert
 (=> p$18 z$288))
(assert
 (let (($x5248 (= z$289 (and (distinct s1 im.p1_b) true))))
 (=> p$19 $x5248)))
(assert
 (=> p$19 z$289))
(assert
 (let (($x5023 (= z$363 (not z$362))))
 (=> p$20 $x5023)))
(assert
 (=> p$20 z$363))
(assert
 (let (($x1529 (= z$365 (not z$364))))
 (=> p$21 $x1529)))
(assert
 (=> p$21 z$365))
(assert
 (let (($x3014 (Extract_1_0_0_8 z$366)))
 (let (($x3016 (= z$367 $x3014)))
 (=> p$22 $x3016))))
(assert
 (let (($x5027 (= z$368 (not z$367))))
 (=> p$22 $x5027)))
(assert
 (=> p$22 z$368))
(assert
 (let ((?x5035 (Sub_8_8_8 z$366 z$369)))
 (let (($x5038 (= z$370 ?x5035)))
 (=> p$23 $x5038))))
(assert
 (let ((?x5379 (Sub_8_8_8 z$370 z$371)))
 (let (($x5382 (= z$372 ?x5379)))
 (=> p$23 $x5382))))
(assert
 (let (($x5391 (= s1 z$372)))
 (let (($x5383 (= z$374 $x5391)))
 (=> p$23 $x5383))))
(assert
 (=> p$23 z$374))
(assert
 (let (($x5150 (= im.p1_a z$366)))
 (let (($x5134 (= z$376 $x5150)))
 (=> p$24 $x5134))))
(assert
 (=> p$24 z$376))
(assert
 (let (($x5205 (= im.p1_b z$369)))
 (let (($x5206 (= z$378 $x5205)))
 (=> p$25 $x5206))))
(assert
 (=> p$25 z$378))
(assert
 (let (($x5257 (= im.p1_c z$371)))
 (let (($x5386 (= z$380 $x5257)))
 (=> p$26 $x5386))))
(assert
 (=> p$26 z$380))
(assert
 (let (($x3014 (Extract_1_0_0_8 z$366)))
 (let (($x3016 (= z$367 $x3014)))
 (=> p$27 $x3016))))
(assert
 (let ((?x4977 (Add_8_8_8 z$366 z$369)))
 (let (($x5010 (= z$387 ?x4977)))
 (=> p$27 $x5010))))
(assert
 (let ((?x5035 (Sub_8_8_8 z$366 z$369)))
 (let (($x5038 (= z$370 ?x5035)))
 (=> p$27 $x5038))))
(assert
 (let ((?x5008 (ite z$367 z$387 z$370)))
 (let (($x5040 (= z$388 ?x5008)))
 (=> p$27 $x5040))))
(assert
 (let ((?x5049 (Sub_8_8_8 z$388 z$371)))
 (let (($x5041 (= z$389 ?x5049)))
 (=> p$27 $x5041))))
(assert
 (let (($x5124 (= z$392 (and (distinct z$389 z$370) true))))
 (=> p$27 $x5124)))
(assert
 (=> p$27 z$392))
(assert
 (let (($x405 (= im.p2_c z$n0s8)))
 (let (($x305 (= z$10 $x405)))
 (=> p$28 $x305))))
(assert
 (=> p$28 z$10))
(assert
 (let (($x31 (= im.p2_m z$n0s8)))
 (let (($x32 (= z$14 $x31)))
 (=> p$29 $x32))))
(assert
 (=> p$29 z$14))
(assert
 (let (($x851 (= im.p3_n z$n0s8)))
 (let (($x475 (= z$16 $x851)))
 (=> p$30 $x475))))
(assert
 (=> p$30 z$16))
(assert
 (let (($x47 (= s2 z$n0s8)))
 (let (($x45 (= z$20 $x47)))
 (=> p$31 $x45))))
(assert
 (=> p$31 z$20))
(assert
 (let (($x902 (= s3 z$n0s8)))
 (let (($x261 (= z$22 $x902)))
 (=> p$32 $x261))))
(assert
 (=> p$32 z$22))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$33 $x568))))
(assert
 (let (($x2197 (= z$126 (and (distinct z$78 z$n1s8) true))))
 (=> p$33 $x2197)))
(assert
 (=> p$33 z$126))
(assert
 (let (($x4120 (= z$201 (and (distinct s1 z$n1s8) true))))
 (=> p$34 $x4120)))
(assert
 (=> p$34 z$201))
(assert
 (let (($x1302 (= z$272 (and (distinct im.p1_c z$n1s8) true))))
 (=> p$35 $x1302)))
(assert
 (=> p$35 z$272))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$36 $x568))))
(assert
 (let (($x2578 (= z$273 (and (distinct im.p1_c z$78) true))))
 (=> p$36 $x2578)))
(assert
 (=> p$36 z$273))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$37 $x926))))
(assert
 (let (($x2425 (= z$277 (and (distinct z$83 z$n1s8) true))))
 (=> p$37 $x2425)))
(assert
 (=> p$37 z$277))
(assert
 (let ((?x616 (Sub_8_8_8 im.p1_a im.p1_b)))
 (let (($x926 (= z$83 ?x616)))
 (=> p$38 $x926))))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$38 $x568))))
(assert
 (let (($x1136 (= z$278 (and (distinct z$83 z$78) true))))
 (=> p$38 $x1136)))
(assert
 (=> p$38 z$278))
(assert
 (let (($x2716 (= z$282 (and (distinct im.p1_a z$n1s8) true))))
 (=> p$39 $x2716)))
(assert
 (=> p$39 z$282))
(assert
 (let (($x5094 (= z$283 (and (distinct im.p1_b z$n1s8) true))))
 (=> p$40 $x5094)))
(assert
 (=> p$40 z$283))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$41 $x568))))
(assert
 (let (($x5095 (= z$284 (and (distinct z$78 im.p1_a) true))))
 (=> p$41 $x5095)))
(assert
 (=> p$41 z$284))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$42 $x568))))
(assert
 (let (($x5012 (= z$285 (and (distinct z$78 s1) true))))
 (=> p$42 $x5012)))
(assert
 (=> p$42 z$285))
(assert
 (let ((?x932 (BitWiseAnd_8_8_8 im.p1_a z$n1s8)))
 (let (($x568 (= z$78 ?x932)))
 (=> p$43 $x568))))
(assert
 (let (($x5072 (= z$286 (and (distinct z$78 im.p1_b) true))))
 (=> p$43 $x5072)))
(assert
 (=> p$43 z$286))
(assert
 (let (($x3014 (Extract_1_0_0_8 z$366)))
 (let (($x3016 (= z$367 $x3014)))
 (=> p$44 $x3016))))
(assert
 (let ((?x4977 (Add_8_8_8 z$366 z$369)))
 (let (($x5010 (= z$387 ?x4977)))
 (=> p$44 $x5010))))
(assert
 (let ((?x5035 (Sub_8_8_8 z$366 z$369)))
 (let (($x5038 (= z$370 ?x5035)))
 (=> p$44 $x5038))))
(assert
 (let ((?x5008 (ite z$367 z$387 z$370)))
 (let (($x5040 (= z$388 ?x5008)))
 (=> p$44 $x5040))))
(assert
 (let ((?x5049 (Sub_8_8_8 z$388 z$371)))
 (let (($x5041 (= z$389 ?x5049)))
 (=> p$44 $x5041))))
(assert
 (let (($x5054 (= z$390 (and (distinct z$389 z$n1s8) true))))
 (=> p$44 $x5054)))
(assert
 (=> p$44 z$390))
(assert
 (let ((?x5035 (Sub_8_8_8 z$366 z$369)))
 (let (($x5038 (= z$370 ?x5035)))
 (=> p$45 $x5038))))
(assert
 (let (($x5136 (= z$391 (and (distinct z$370 z$n1s8) true))))
 (=> p$45 $x5136)))
(assert
 (=> p$45 z$391))
(check-sat)
(assert p$4)
(assert p$23)
(assert p$25)
(assert p$33)
(assert p$26)
(set-info :status sat)
(check-sat)
(exit)
