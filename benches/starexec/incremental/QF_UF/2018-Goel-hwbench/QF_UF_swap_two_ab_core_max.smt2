(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: swap_two
query-maker: "Z3"
query-time: 0.453000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt20 0)
(declare-sort utt32 0)
(declare-sort utt12 0)
(declare-fun z$n101s20 () utt20)
(declare-fun z$n201s20 () utt20)
(declare-fun z$n200s20 () utt20)
(declare-fun z$n100s20 () utt20)
(declare-fun z$n101s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun z$n201s32 () utt32)
(declare-fun z$n200s32 () utt32)
(declare-fun z$n100s32 () utt32)
(declare-fun b () utt20)
(declare-fun a () utt20)
(declare-fun Concat_32_20_12 (utt20 utt12) utt32)
(declare-fun z$n0s12 () utt12)
(declare-fun z$14 () utt32)
(declare-fun a$next () utt20)
(declare-fun z$31 () utt32)
(declare-fun b$next () utt20)
(declare-fun z$120 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$6 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$126 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$17 () Bool)
(declare-fun z$19 () Bool)
(declare-fun z$20 () Bool)
(declare-fun prop () Bool)
(declare-fun z$22 () Bool)
(declare-fun z$33 () Bool)
(declare-fun z$34 () Bool)
(declare-fun z$35 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$37 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$53 () Bool)
(declare-fun z$54 () Bool)
(declare-fun z$56 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$51 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$109 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$117 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$157 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$165 () Bool)
(declare-fun z$173 () Bool)
(declare-fun z$174 () Bool)
(declare-fun z$122 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$161 () Bool)
(declare-fun p$1 () Bool)
(assert
 (and (distinct z$n100s20 z$n200s20 z$n201s20 z$n101s20) true))
(assert
 (and (distinct z$n100s32 z$n200s32 z$n201s32 z$n0s32 z$n101s32) true))
(assert
 (= z$120 (and (distinct b z$n100s20) true)))
(assert
 (let (($x174 (= a z$n100s20)))
 (= z$2 $x174)))
(assert
 (let (($x176 (= b z$n200s20)))
 (= z$5 $x176)))
(assert
 (= z$6 (and z$2 z$5)))
(assert
 (= z$125 (not z$6)))
(assert
 (= z$126 (and z$120 z$125)))
(assert
 (= z$127 (not z$126)))
(assert
 z$127)
(assert
 (let ((?x285 (Concat_32_20_12 a z$n0s12)))
 (= z$14 ?x285)))
(assert
 (let (($x125 (= z$14 z$n100s32)))
 (= z$17 $x125)))
(assert
 (let (($x317 (= z$14 z$n200s32)))
 (= z$19 $x317)))
(assert
 (= z$20 (or z$17 z$19)))
(assert
 (= z$22 (= prop z$20)))
(assert
 z$22)
(assert
 prop)
(assert
 (let ((?x356 (Concat_32_20_12 a$next z$n0s12)))
 (= z$31 ?x356)))
(assert
 (let (($x354 (= z$31 z$n100s32)))
 (= z$33 $x354)))
(assert
 (let (($x171 (= z$31 z$n200s32)))
 (= z$34 $x171)))
(assert
 (let (($x351 (or z$33 z$34)))
 (= z$35 $x351)))
(assert
 (= z$37 (= prop$next z$35)))
(assert
 z$37)
(assert
 (let (($x501 (= a$next z$n100s20)))
 (= z$52 $x501)))
(assert
 (= z$53 (and (distinct z$31 z$n100s32) true)))
(assert
 (= z$54 (and z$52 z$53)))
(assert
 (= z$56 (not z$54)))
(assert
 z$56)
(assert
 (= z$40 (and (distinct z$14 z$n100s32) true)))
(assert
 (= z$51 (and z$2 z$40)))
(assert
 (= z$55 (not z$51)))
(assert
 z$55)
(assert
 (let (($x335 (= a$next b)))
 (= z$10 $x335)))
(assert
 (= z$75 (and (distinct z$31 z$n200s32) true)))
(assert
 (= z$85 (and z$10 z$5 z$75)))
(assert
 (= z$86 (not z$85)))
(assert
 z$86)
(assert
 (let (($x790 (= b z$n100s20)))
 (= z$109 $x790)))
(assert
 (= z$116 (and z$109 z$53 z$10)))
(assert
 (= z$117 (not z$116)))
(assert
 z$117)
(assert
 (let (($x291 (= b$next a)))
 (= z$8 $x291)))
(assert
 z$8)
(assert
 (= z$157 (and z$5 z$75 z$10)))
(assert
 (= z$158 (not z$157)))
(assert
 z$158)
(assert
 (= z$165 (and (distinct a z$n200s20) true)))
(assert
 (= z$173 (and z$125 z$165)))
(assert
 (= z$174 (not z$173)))
(assert
 z$174)
(assert
 (=> p$0 (= z$122 (and (distinct b$next z$n100s20) true))))
(assert
 (=> p$0 z$122))
(assert
 (=> p$1 (= z$161 (and (distinct b$next z$n200s20) true))))
(assert
 (=> p$1 z$161))
(check-sat)
(assert p$0)
(assert p$1)
(set-info :status unsat)
(check-sat)
(exit)
