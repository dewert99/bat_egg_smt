(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: v_FIFO
query-maker: "Z3"
query-time: 1.168000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt3 0)
(declare-sort utt4 0)
(declare-sort utt32 0)
(declare-sort utt28 0)
(declare-sort utt31 0)
(declare-fun z$n6s3 () utt3)
(declare-fun z$n5s3 () utt3)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n2s3 () utt3)
(declare-fun z$n4s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun z$n2s4 () utt4)
(declare-fun z$n3s4 () utt4)
(declare-fun z$n13s4 () utt4)
(declare-fun z$n4s4 () utt4)
(declare-fun z$n12s4 () utt4)
(declare-fun z$n1s4 () utt4)
(declare-fun z$n14s4 () utt4)
(declare-fun z$n15s4 () utt4)
(declare-fun z$n0s4 () utt4)
(declare-fun z$n16s32 () utt32)
(declare-fun z$n2s32 () utt32)
(declare-fun z$n15s32 () utt32)
(declare-fun z$n14s32 () utt32)
(declare-fun z$n3s32 () utt32)
(declare-fun z$n12s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun z$n4s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun rb.head () utt4)
(declare-fun rb.tail () utt4)
(declare-fun z$70 () utt4)
(declare-fun z$96 () utt4)
(declare-fun dataIn () utt4)
(declare-fun z$106 () utt4)
(declare-fun |rb.mem[0]| () utt4)
(declare-fun Concat_4_1_1_1_1 (Bool Bool Bool Bool) utt4)
(declare-fun z$156 () utt4)
(declare-fun |rb.mem[0]$next| () utt4)
(declare-fun |rb.mem[1]| () utt4)
(declare-fun z$186 () utt4)
(declare-fun |rb.mem[1]$next| () utt4)
(declare-fun |rb.mem[2]| () utt4)
(declare-fun z$218 () utt4)
(declare-fun |rb.mem[2]$next| () utt4)
(declare-fun |rb.mem[3]| () utt4)
(declare-fun z$248 () utt4)
(declare-fun |rb.mem[3]$next| () utt4)
(declare-fun |rb.mem[4]| () utt4)
(declare-fun z$280 () utt4)
(declare-fun |rb.mem[4]$next| () utt4)
(declare-fun Concat_32_4_28 (utt4 utt28) utt32)
(declare-fun z$n0s28 () utt28)
(declare-fun z$43 () utt32)
(declare-fun Add_32_32_32 (utt32 utt32) utt32)
(declare-fun z$46 () utt32)
(declare-fun Extract_4_3_0_32 (utt32) utt4)
(declare-fun z$48 () utt4)
(declare-fun z$50 () utt4)
(declare-fun z$52 () utt4)
(declare-fun z$54 () utt4)
(declare-fun rb.tail$next () utt4)
(declare-fun z$301 () utt32)
(declare-fun z$303 () utt32)
(declare-fun z$305 () utt4)
(declare-fun z$307 () utt4)
(declare-fun rb.head$next () utt4)
(declare-fun sr.tail () utt4)
(declare-fun z$311 () utt32)
(declare-fun |sr.mem[1]| () utt4)
(declare-fun |sr.mem[0]| () utt4)
(declare-fun z$368 () utt4)
(declare-fun |sr.mem[1]$next| () utt4)
(declare-fun |sr.mem[2]| () utt4)
(declare-fun z$372 () utt4)
(declare-fun |sr.mem[2]$next| () utt4)
(declare-fun |sr.mem[3]| () utt4)
(declare-fun z$376 () utt4)
(declare-fun |sr.mem[3]$next| () utt4)
(declare-fun |sr.mem[4]| () utt4)
(declare-fun z$380 () utt4)
(declare-fun |sr.mem[4]$next| () utt4)
(declare-fun sr.tail$next () utt4)
(declare-fun z$456 () utt32)
(declare-fun Extract_3_2_0_4 (utt4) utt3)
(declare-fun z$467 () utt3)
(declare-fun z$473 () utt4)
(declare-fun |sr.mem[0]$next| () utt4)
(declare-fun z$477 () utt4)
(declare-fun z$479 () utt4)
(declare-fun z$481 () utt4)
(declare-fun s$43$next () utt3)
(declare-fun s$41$next () utt4)
(declare-fun s$42$next () utt4)
(declare-fun z$489 () utt4)
(declare-fun s$40$next () utt4)
(declare-fun z$491 () utt4)
(declare-fun z$493 () utt4)
(declare-fun z$495 () utt4)
(declare-fun z$497 () utt4)
(declare-fun z$499 () utt4)
(declare-fun z$501 () utt4)
(declare-fun Concat_32_1_31 (Bool utt31) utt32)
(declare-fun z$n0s31 () utt31)
(declare-fun z$508 () utt32)
(declare-fun z$389 () utt3)
(declare-fun z$397 () utt4)
(declare-fun z$403 () utt4)
(declare-fun z$405 () utt4)
(declare-fun z$407 () utt4)
(declare-fun s$43 () utt3)
(declare-fun s$41 () utt4)
(declare-fun s$42 () utt4)
(declare-fun z$418 () utt4)
(declare-fun s$40 () utt4)
(declare-fun z$421 () utt4)
(declare-fun z$423 () utt4)
(declare-fun z$425 () utt4)
(declare-fun z$427 () utt4)
(declare-fun z$429 () utt4)
(declare-fun z$431 () utt4)
(declare-fun z$439 () utt32)
(declare-fun z$714 () utt4)
(declare-fun z$732 () utt4)
(declare-fun dataIn$next () utt4)
(declare-fun z$739 () utt4)
(declare-fun z$781 () utt4)
(declare-fun z$57 () utt3)
(declare-fun Extract_3_2_0_32 (utt32) utt3)
(declare-fun z$63 () utt3)
(declare-fun z$64 () utt3)
(declare-fun z$65 () utt3)
(declare-fun z$66 () utt3)
(declare-fun z$56 () utt3)
(declare-fun z$787 () utt32)
(declare-fun z$882 () utt32)
(declare-fun z$364 () utt4)
(declare-fun z$338 () utt32)
(declare-fun z$340 () utt4)
(declare-fun z$342 () utt4)
(declare-fun z$344 () utt4)
(declare-fun Sub_32_32_32 (utt32 utt32) utt32)
(declare-fun z$346 () utt32)
(declare-fun z$348 () utt4)
(declare-fun z$350 () utt4)
(declare-fun z$352 () utt4)
(declare-fun z$354 () utt4)
(declare-fun z$356 () utt4)
(declare-fun z$358 () utt4)
(declare-fun z$360 () utt4)
(declare-fun z$785 () utt32)
(declare-fun z$32 () Bool)
(declare-fun rb.empty () Bool)
(declare-fun z$33 () Bool)
(declare-fun z$34 () Bool)
(declare-fun z$36 () Bool)
(declare-fun push_ () Bool)
(declare-fun z$37 () Bool)
(declare-fun Extract_1_0_0_4 (utt4) Bool)
(declare-fun z$73 () Bool)
(declare-fun z$76 () Bool)
(declare-fun z$72 () Bool)
(declare-fun z$78 () Bool)
(declare-fun Extract_1_1_1_4 (utt4) Bool)
(declare-fun z$80 () Bool)
(declare-fun z$82 () Bool)
(declare-fun z$79 () Bool)
(declare-fun z$84 () Bool)
(declare-fun Extract_1_2_2_4 (utt4) Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$90 () Bool)
(declare-fun z$91 () Bool)
(declare-fun z$93 () Bool)
(declare-fun z$101 () Bool)
(declare-fun z$98 () Bool)
(declare-fun z$103 () Bool)
(declare-fun z$109 () Bool)
(declare-fun z$110 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$122 () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$121 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$129 () Bool)
(declare-fun z$132 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$136 () Bool)
(declare-fun z$134 () Bool)
(declare-fun z$138 () Bool)
(declare-fun z$140 () Bool)
(declare-fun Extract_1_3_3_4 (utt4) Bool)
(declare-fun z$142 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$149 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$154 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$166 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$170 () Bool)
(declare-fun z$172 () Bool)
(declare-fun z$174 () Bool)
(declare-fun z$176 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$190 () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$194 () Bool)
(declare-fun z$196 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$206 () Bool)
(declare-fun z$208 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$214 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$220 () Bool)
(declare-fun z$222 () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$226 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$230 () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$238 () Bool)
(declare-fun z$240 () Bool)
(declare-fun z$242 () Bool)
(declare-fun z$244 () Bool)
(declare-fun z$246 () Bool)
(declare-fun z$250 () Bool)
(declare-fun z$252 () Bool)
(declare-fun z$254 () Bool)
(declare-fun z$256 () Bool)
(declare-fun z$258 () Bool)
(declare-fun z$260 () Bool)
(declare-fun z$262 () Bool)
(declare-fun z$264 () Bool)
(declare-fun z$266 () Bool)
(declare-fun z$268 () Bool)
(declare-fun z$270 () Bool)
(declare-fun z$272 () Bool)
(declare-fun z$274 () Bool)
(declare-fun z$276 () Bool)
(declare-fun z$278 () Bool)
(declare-fun z$282 () Bool)
(declare-fun pop_ () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$284 () Bool)
(declare-fun z$285 () Bool)
(declare-fun z$287 () Bool)
(declare-fun z$289 () Bool)
(declare-fun z$291 () Bool)
(declare-fun z$293 () Bool)
(declare-fun z$295 () Bool)
(declare-fun rb.empty$next () Bool)
(declare-fun z$297 () Bool)
(declare-fun z$299 () Bool)
(declare-fun z$309 () Bool)
(declare-fun z$316 () Bool)
(declare-fun z$317 () Bool)
(declare-fun z$370 () Bool)
(declare-fun z$374 () Bool)
(declare-fun z$378 () Bool)
(declare-fun z$382 () Bool)
(declare-fun z$536 () Bool)
(declare-fun z$458 () Bool)
(declare-fun z$537 () Bool)
(declare-fun z$539 () Bool)
(declare-fun z$28 () Bool)
(declare-fun z$314 () Bool)
(declare-fun z$535 () Bool)
(declare-fun z$538 () Bool)
(declare-fun z$543 () Bool)
(declare-fun z$459 () Bool)
(declare-fun z$460 () Bool)
(declare-fun z$461 () Bool)
(declare-fun z$463 () Bool)
(declare-fun sr.empty$next () Bool)
(declare-fun z$464 () Bool)
(declare-fun z$465 () Bool)
(declare-fun z$469 () Bool)
(declare-fun z$470 () Bool)
(declare-fun z$471 () Bool)
(declare-fun z$475 () Bool)
(declare-fun z$476 () Bool)
(declare-fun Extract_1_2_2_3 (utt3) Bool)
(declare-fun z$483 () Bool)
(declare-fun Extract_1_1_1_3 (utt3) Bool)
(declare-fun z$485 () Bool)
(declare-fun Extract_1_0_0_3 (utt3) Bool)
(declare-fun z$487 () Bool)
(declare-fun z$503 () Bool)
(declare-fun z$504 () Bool)
(declare-fun z$506 () Bool)
(declare-fun z$562 () Bool)
(declare-fun z$563 () Bool)
(declare-fun z$565 () Bool)
(declare-fun z$385 () Bool)
(declare-fun sr.empty () Bool)
(declare-fun z$386 () Bool)
(declare-fun z$387 () Bool)
(declare-fun z$392 () Bool)
(declare-fun z$394 () Bool)
(declare-fun z$395 () Bool)
(declare-fun z$400 () Bool)
(declare-fun z$402 () Bool)
(declare-fun z$410 () Bool)
(declare-fun z$412 () Bool)
(declare-fun z$414 () Bool)
(declare-fun z$433 () Bool)
(declare-fun z$434 () Bool)
(declare-fun z$436 () Bool)
(declare-fun z$527 () Bool)
(declare-fun z$561 () Bool)
(declare-fun z$564 () Bool)
(declare-fun z$711 () Bool)
(declare-fun push$next () Bool)
(declare-fun z$712 () Bool)
(declare-fun z$693 () Bool)
(declare-fun z$717 () Bool)
(declare-fun z$716 () Bool)
(declare-fun z$719 () Bool)
(declare-fun z$695 () Bool)
(declare-fun z$721 () Bool)
(declare-fun z$720 () Bool)
(declare-fun z$723 () Bool)
(declare-fun z$697 () Bool)
(declare-fun z$725 () Bool)
(declare-fun z$724 () Bool)
(declare-fun z$727 () Bool)
(declare-fun z$728 () Bool)
(declare-fun z$730 () Bool)
(declare-fun z$735 () Bool)
(declare-fun z$734 () Bool)
(declare-fun z$737 () Bool)
(declare-fun z$699 () Bool)
(declare-fun z$742 () Bool)
(declare-fun z$741 () Bool)
(declare-fun z$744 () Bool)
(declare-fun z$746 () Bool)
(declare-fun z$748 () Bool)
(declare-fun z$750 () Bool)
(declare-fun z$701 () Bool)
(declare-fun z$753 () Bool)
(declare-fun z$752 () Bool)
(declare-fun z$755 () Bool)
(declare-fun z$757 () Bool)
(declare-fun z$759 () Bool)
(declare-fun z$761 () Bool)
(declare-fun z$703 () Bool)
(declare-fun z$764 () Bool)
(declare-fun z$763 () Bool)
(declare-fun z$766 () Bool)
(declare-fun z$768 () Bool)
(declare-fun z$770 () Bool)
(declare-fun z$772 () Bool)
(declare-fun z$705 () Bool)
(declare-fun z$775 () Bool)
(declare-fun z$774 () Bool)
(declare-fun z$777 () Bool)
(declare-fun z$779 () Bool)
(declare-fun z$783 () Bool)
(declare-fun z$802 () Bool)
(declare-fun z$803 () Bool)
(declare-fun z$804 () Bool)
(declare-fun z$805 () Bool)
(declare-fun z$806 () Bool)
(declare-fun z$807 () Bool)
(declare-fun z$808 () Bool)
(declare-fun z$809 () Bool)
(declare-fun z$811 () Bool)
(declare-fun z$687 () Bool)
(declare-fun z$601 () Bool)
(declare-fun z$598 () Bool)
(declare-fun z$595 () Bool)
(declare-fun z$592 () Bool)
(declare-fun z$590 () Bool)
(declare-fun z$588 () Bool)
(declare-fun z$586 () Bool)
(declare-fun z$801 () Bool)
(declare-fun z$810 () Bool)
(declare-fun z$68 () Bool)
(declare-fun z$15 () Bool)
(declare-fun z$841 () Bool)
(declare-fun z$842 () Bool)
(declare-fun z$863 () Bool)
(declare-fun z$864 () Bool)
(declare-fun z$899 () Bool)
(declare-fun z$888 () Bool)
(declare-fun z$900 () Bool)
(declare-fun z$902 () Bool)
(declare-fun z$877 () Bool)
(declare-fun z$898 () Bool)
(declare-fun z$901 () Bool)
(declare-fun z$914 () Bool)
(declare-fun z$906 () Bool)
(declare-fun z$924 () Bool)
(declare-fun z$925 () Bool)
(declare-fun z$524 () Bool)
(declare-fun z$525 () Bool)
(declare-fun z$983 () Bool)
(declare-fun z$984 () Bool)
(declare-fun z$986 () Bool)
(declare-fun z$644 () Bool)
(declare-fun z$645 () Bool)
(declare-fun z$677 () Bool)
(declare-fun z$982 () Bool)
(declare-fun z$985 () Bool)
(declare-fun z$948 () Bool)
(declare-fun z$1011 () Bool)
(declare-fun z$1012 () Bool)
(declare-fun z$1014 () Bool)
(declare-fun z$13 () Bool)
(declare-fun z$1010 () Bool)
(declare-fun z$1013 () Bool)
(declare-fun z$1037 () Bool)
(declare-fun z$1038 () Bool)
(declare-fun z$1040 () Bool)
(declare-fun z$3 () Bool)
(declare-fun z$1036 () Bool)
(declare-fun z$1039 () Bool)
(declare-fun z$1098 () Bool)
(declare-fun z$1099 () Bool)
(declare-fun z$1101 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$1097 () Bool)
(declare-fun z$1100 () Bool)
(declare-fun z$1144 () Bool)
(declare-fun z$1146 () Bool)
(declare-fun z$1143 () Bool)
(declare-fun z$1145 () Bool)
(declare-fun z$819 () Bool)
(declare-fun z$366 () Bool)
(declare-fun z$1059 () Bool)
(declare-fun z$1150 () Bool)
(declare-fun z$1157 () Bool)
(declare-fun z$1158 () Bool)
(declare-fun z$813 () Bool)
(declare-fun z$1181 () Bool)
(declare-fun z$1183 () Bool)
(declare-fun z$1180 () Bool)
(declare-fun z$1182 () Bool)
(declare-fun z$650 () Bool)
(declare-fun z$1199 () Bool)
(declare-fun z$1200 () Bool)
(declare-fun z$1220 () Bool)
(declare-fun z$1221 () Bool)
(declare-fun z$1223 () Bool)
(declare-fun z$1210 () Bool)
(declare-fun z$1219 () Bool)
(declare-fun z$1222 () Bool)
(declare-fun z$1243 () Bool)
(declare-fun z$1244 () Bool)
(declare-fun z$1246 () Bool)
(declare-fun z$1233 () Bool)
(declare-fun z$1242 () Bool)
(declare-fun z$1245 () Bool)
(declare-fun z$1265 () Bool)
(declare-fun z$1266 () Bool)
(declare-fun z$1268 () Bool)
(declare-fun z$1256 () Bool)
(declare-fun z$1264 () Bool)
(declare-fun z$1267 () Bool)
(declare-fun z$617 () Bool)
(declare-fun z$940 () Bool)
(declare-fun z$995 () Bool)
(declare-fun z$996 () Bool)
(declare-fun z$1279 () Bool)
(declare-fun z$1280 () Bool)
(declare-fun z$566 () Bool)
(declare-fun z$1391 () Bool)
(declare-fun z$1393 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$1392 () Bool)
(declare-fun z$1401 () Bool)
(declare-fun z$518 () Bool)
(declare-fun z$1423 () Bool)
(declare-fun z$1425 () Bool)
(declare-fun z$630 () Bool)
(declare-fun z$1422 () Bool)
(declare-fun z$1424 () Bool)
(declare-fun z$915 () Bool)
(declare-fun z$320 () Bool)
(declare-fun z$323 () Bool)
(declare-fun z$362 () Bool)
(declare-fun z$1480 () Bool)
(declare-fun z$1481 () Bool)
(declare-fun z$683 () Bool)
(declare-fun z$1522 () Bool)
(declare-fun z$1523 () Bool)
(declare-fun z$1362 () Bool)
(declare-fun z$1549 () Bool)
(declare-fun z$1550 () Bool)
(declare-fun z$1573 () Bool)
(declare-fun z$789 () Bool)
(declare-fun z$1584 () Bool)
(declare-fun z$1585 () Bool)
(declare-fun z$1465 () Bool)
(declare-fun z$1616 () Bool)
(declare-fun z$1641 () Bool)
(declare-fun z$1642 () Bool)
(declare-fun z$990 () Bool)
(declare-fun z$1681 () Bool)
(declare-fun z$1683 () Bool)
(declare-fun z$988 () Bool)
(declare-fun z$1682 () Bool)
(declare-fun z$1688 () Bool)
(declare-fun z$1723 () Bool)
(declare-fun z$1725 () Bool)
(declare-fun z$1724 () Bool)
(declare-fun z$1729 () Bool)
(declare-fun z$1754 () Bool)
(declare-fun z$1756 () Bool)
(declare-fun z$1755 () Bool)
(declare-fun z$1760 () Bool)
(declare-fun z$1734 () Bool)
(declare-fun z$1735 () Bool)
(declare-fun z$1825 () Bool)
(declare-fun z$1826 () Bool)
(declare-fun z$643 () Bool)
(declare-fun z$678 () Bool)
(declare-fun z$1859 () Bool)
(declare-fun z$1861 () Bool)
(declare-fun z$523 () Bool)
(declare-fun z$1248 () Bool)
(declare-fun z$1860 () Bool)
(declare-fun z$1864 () Bool)
(declare-fun z$1871 () Bool)
(declare-fun z$1872 () Bool)
(declare-fun z$1894 () Bool)
(declare-fun z$1895 () Bool)
(declare-fun z$324 () Bool)
(declare-fun z$326 () Bool)
(declare-fun z$328 () Bool)
(declare-fun z$330 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$334 () Bool)
(declare-fun z$336 () Bool)
(declare-fun z$1956 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$455 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun p$5 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$680 () Bool)
(declare-fun p$8 () Bool)
(declare-fun z$685 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$1929 () Bool)
(declare-fun z$1930 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$1931 () Bool)
(declare-fun z$1932 () Bool)
(declare-fun p$11 () Bool)
(declare-fun p$12 () Bool)
(declare-fun p$13 () Bool)
(declare-fun z$7 () Bool)
(declare-fun p$14 () Bool)
(declare-fun z$9 () Bool)
(declare-fun p$15 () Bool)
(declare-fun z$11 () Bool)
(declare-fun p$16 () Bool)
(declare-fun p$17 () Bool)
(declare-fun p$18 () Bool)
(declare-fun z$18 () Bool)
(declare-fun p$19 () Bool)
(declare-fun z$20 () Bool)
(declare-fun p$20 () Bool)
(declare-fun z$22 () Bool)
(declare-fun p$21 () Bool)
(declare-fun z$24 () Bool)
(declare-fun p$22 () Bool)
(declare-fun z$26 () Bool)
(declare-fun p$23 () Bool)
(declare-fun p$24 () Bool)
(declare-fun p$25 () Bool)
(declare-fun p$26 () Bool)
(declare-fun p$27 () Bool)
(declare-fun p$28 () Bool)
(declare-fun z$557 () Bool)
(declare-fun p$29 () Bool)
(declare-fun p$30 () Bool)
(declare-fun z$625 () Bool)
(declare-fun p$31 () Bool)
(declare-fun p$32 () Bool)
(declare-fun z$635 () Bool)
(declare-fun p$33 () Bool)
(declare-fun z$640 () Bool)
(declare-fun p$34 () Bool)
(declare-fun z$648 () Bool)
(declare-fun z$676 () Bool)
(declare-fun p$35 () Bool)
(declare-fun p$36 () Bool)
(declare-fun p$37 () Bool)
(declare-fun z$679 () Bool)
(declare-fun p$38 () Bool)
(declare-fun p$39 () Bool)
(declare-fun p$40 () Bool)
(declare-fun z$690 () Bool)
(declare-fun z$1935 () Bool)
(declare-fun p$41 () Bool)
(assert
 (and (distinct z$n0s3 z$n3s3 z$n4s3 z$n2s3 z$n1s3 z$n5s3 z$n6s3) true))
(assert
 (and (distinct z$n0s4 z$n15s4 z$n14s4 z$n1s4 z$n12s4 z$n4s4 z$n13s4 z$n3s4 z$n2s4) true))
(assert
 (and (distinct z$n1s32 z$n4s32 z$n0s32 z$n12s32 z$n3s32 z$n14s32 z$n15s32 z$n2s32 z$n16s32) true))
(assert
 (let (($x2322 (= rb.tail rb.head)))
 (= z$32 $x2322)))
(assert
 (let (($x5324 (not rb.empty)))
 (= z$33 $x5324)))
(assert
 (= z$34 (and z$32 z$33)))
(assert
 (= z$36 (not z$34)))
(assert
 (= z$37 (and push_ z$36)))
(assert
 (let ((?x1876 (ite z$37 rb.head z$n0s4)))
 (= z$70 ?x1876)))
(assert
 (let (($x4962 (Extract_1_0_0_4 rb.head)))
 (= z$73 $x4962)))
(assert
 (= z$76 (ite z$37 z$73 false)))
(assert
 (let (($x3206 (Extract_1_0_0_4 z$70)))
 (= z$72 $x3206)))
(assert
 (= z$72 z$76))
(assert
 (let (($x2512 (not z$72)))
 (= z$78 $x2512)))
(assert
 (let (($x2402 (Extract_1_1_1_4 rb.head)))
 (= z$80 $x2402)))
(assert
 (= z$82 (ite z$37 z$80 false)))
(assert
 (let (($x2145 (Extract_1_1_1_4 z$70)))
 (= z$79 $x2145)))
(assert
 (= z$79 z$82))
(assert
 (let (($x5256 (not z$79)))
 (= z$84 $x5256)))
(assert
 (let (($x4018 (Extract_1_2_2_4 rb.head)))
 (= z$86 $x4018)))
(assert
 (= z$88 (ite z$37 z$86 false)))
(assert
 (let (($x5058 (Extract_1_2_2_4 z$70)))
 (= z$85 $x5058)))
(assert
 (= z$85 z$88))
(assert
 (let (($x2482 (not z$85)))
 (= z$90 $x2482)))
(assert
 (= z$91 (and z$84 z$90)))
(assert
 (= z$93 (and z$78 z$91)))
(assert
 (let ((?x5523 (ite z$37 z$n15s4 z$n0s4)))
 (= z$96 ?x5523)))
(assert
 (= z$101 (ite z$37 true false)))
(assert
 (let (($x4649 (Extract_1_0_0_4 z$96)))
 (= z$98 $x4649)))
(assert
 (= z$98 z$101))
(assert
 (= z$103 (and z$93 z$98)))
(assert
 (let ((?x6382 (ite z$37 dataIn z$n0s4)))
 (= z$106 ?x6382)))
(assert
 (let (($x2805 (Extract_1_0_0_4 dataIn)))
 (= z$109 $x2805)))
(assert
 (= z$110 (ite z$37 z$109 false)))
(assert
 (let (($x6395 (Extract_1_0_0_4 z$106)))
 (= z$108 $x6395)))
(assert
 (= z$108 z$110))
(assert
 (let (($x4282 (Extract_1_0_0_4 |rb.mem[0]|)))
 (= z$112 $x4282)))
(assert
 (let (($x3081 (ite z$103 z$108 z$112)))
 (= z$114 $x3081)))
(assert
 (let (($x6020 (Extract_1_1_1_4 z$96)))
 (= z$116 $x6020)))
(assert
 (= z$116 z$101))
(assert
 (= z$119 (and z$93 z$116)))
(assert
 (let (($x3611 (Extract_1_1_1_4 dataIn)))
 (= z$122 $x3611)))
(assert
 (= z$123 (ite z$37 z$122 false)))
(assert
 (let (($x3276 (Extract_1_1_1_4 z$106)))
 (= z$121 $x3276)))
(assert
 (= z$121 z$123))
(assert
 (let (($x5613 (Extract_1_1_1_4 |rb.mem[0]|)))
 (= z$125 $x5613)))
(assert
 (let (($x4015 (ite z$119 z$121 z$125)))
 (= z$127 $x4015)))
(assert
 (let (($x6459 (Extract_1_2_2_4 z$96)))
 (= z$129 $x6459)))
(assert
 (= z$129 z$101))
(assert
 (= z$132 (and z$93 z$129)))
(assert
 (let (($x6709 (Extract_1_2_2_4 dataIn)))
 (= z$135 $x6709)))
(assert
 (= z$136 (ite z$37 z$135 false)))
(assert
 (let (($x2718 (Extract_1_2_2_4 z$106)))
 (= z$134 $x2718)))
(assert
 (= z$134 z$136))
(assert
 (let (($x4059 (Extract_1_2_2_4 |rb.mem[0]|)))
 (= z$138 $x4059)))
(assert
 (let (($x5637 (ite z$132 z$134 z$138)))
 (= z$140 $x5637)))
(assert
 (let (($x6428 (Extract_1_3_3_4 z$96)))
 (= z$142 $x6428)))
(assert
 (= z$142 z$101))
(assert
 (= z$146 (and z$93 z$142)))
(assert
 (let (($x6246 (Extract_1_3_3_4 dataIn)))
 (= z$149 $x6246)))
(assert
 (= z$150 (ite z$37 z$149 false)))
(assert
 (let (($x2762 (Extract_1_3_3_4 z$106)))
 (= z$148 $x2762)))
(assert
 (= z$148 z$150))
(assert
 (let (($x2880 (Extract_1_3_3_4 |rb.mem[0]|)))
 (= z$152 $x2880)))
(assert
 (let (($x6468 (ite z$146 z$148 z$152)))
 (= z$154 $x6468)))
(assert
 (let ((?x3190 (Concat_4_1_1_1_1 z$114 z$127 z$140 z$154)))
 (= z$156 ?x3190)))
(assert
 (let (($x3730 (= |rb.mem[0]$next| z$156)))
 (= z$158 $x3730)))
(assert
 (= z$160 (and z$72 z$91)))
(assert
 (= z$162 (and z$160 z$98)))
(assert
 (let (($x7987 (Extract_1_0_0_4 |rb.mem[1]|)))
 (= z$164 $x7987)))
(assert
 (let (($x6702 (ite z$162 z$108 z$164)))
 (= z$166 $x6702)))
(assert
 (= z$168 (and z$160 z$116)))
(assert
 (let (($x2668 (Extract_1_1_1_4 |rb.mem[1]|)))
 (= z$170 $x2668)))
(assert
 (let (($x9504 (ite z$168 z$121 z$170)))
 (= z$172 $x9504)))
(assert
 (= z$174 (and z$160 z$129)))
(assert
 (let (($x10511 (Extract_1_2_2_4 |rb.mem[1]|)))
 (= z$176 $x10511)))
(assert
 (let (($x7737 (ite z$174 z$134 z$176)))
 (= z$178 $x7737)))
(assert
 (= z$180 (and z$160 z$142)))
(assert
 (let (($x5481 (Extract_1_3_3_4 |rb.mem[1]|)))
 (= z$182 $x5481)))
(assert
 (let (($x2789 (ite z$180 z$148 z$182)))
 (= z$184 $x2789)))
(assert
 (let ((?x5326 (Concat_4_1_1_1_1 z$166 z$172 z$178 z$184)))
 (= z$186 ?x5326)))
(assert
 (let (($x9369 (= |rb.mem[1]$next| z$186)))
 (= z$188 $x9369)))
(assert
 (= z$190 (and z$79 z$90)))
(assert
 (= z$192 (and z$78 z$190)))
(assert
 (= z$194 (and z$192 z$98)))
(assert
 (let (($x6416 (Extract_1_0_0_4 |rb.mem[2]|)))
 (= z$196 $x6416)))
(assert
 (let (($x5150 (ite z$194 z$108 z$196)))
 (= z$198 $x5150)))
(assert
 (= z$200 (and z$192 z$116)))
(assert
 (let (($x8956 (Extract_1_1_1_4 |rb.mem[2]|)))
 (= z$202 $x8956)))
(assert
 (let (($x10113 (ite z$200 z$121 z$202)))
 (= z$204 $x10113)))
(assert
 (= z$206 (and z$192 z$129)))
(assert
 (let (($x7858 (Extract_1_2_2_4 |rb.mem[2]|)))
 (= z$208 $x7858)))
(assert
 (let (($x8897 (ite z$206 z$134 z$208)))
 (= z$210 $x8897)))
(assert
 (= z$212 (and z$192 z$142)))
(assert
 (let (($x8684 (Extract_1_3_3_4 |rb.mem[2]|)))
 (= z$214 $x8684)))
(assert
 (let (($x1127 (ite z$212 z$148 z$214)))
 (= z$216 $x1127)))
(assert
 (let ((?x6586 (Concat_4_1_1_1_1 z$198 z$204 z$210 z$216)))
 (= z$218 ?x6586)))
(assert
 (let (($x7622 (= |rb.mem[2]$next| z$218)))
 (= z$220 $x7622)))
(assert
 (= z$222 (and z$72 z$190)))
(assert
 (= z$224 (and z$222 z$98)))
(assert
 (let (($x2473 (Extract_1_0_0_4 |rb.mem[3]|)))
 (= z$226 $x2473)))
(assert
 (let (($x6179 (ite z$224 z$108 z$226)))
 (= z$228 $x6179)))
(assert
 (= z$230 (and z$222 z$116)))
(assert
 (let (($x4644 (Extract_1_1_1_4 |rb.mem[3]|)))
 (= z$232 $x4644)))
(assert
 (let (($x8195 (ite z$230 z$121 z$232)))
 (= z$234 $x8195)))
(assert
 (= z$236 (and z$222 z$129)))
(assert
 (let (($x7441 (Extract_1_2_2_4 |rb.mem[3]|)))
 (= z$238 $x7441)))
(assert
 (let (($x3519 (ite z$236 z$134 z$238)))
 (= z$240 $x3519)))
(assert
 (= z$242 (and z$222 z$142)))
(assert
 (let (($x10676 (Extract_1_3_3_4 |rb.mem[3]|)))
 (= z$244 $x10676)))
(assert
 (let (($x7782 (ite z$242 z$148 z$244)))
 (= z$246 $x7782)))
(assert
 (let ((?x3313 (Concat_4_1_1_1_1 z$228 z$234 z$240 z$246)))
 (= z$248 ?x3313)))
(assert
 (let (($x8881 (= |rb.mem[3]$next| z$248)))
 (= z$250 $x8881)))
(assert
 (= z$252 (and z$84 z$85)))
(assert
 (= z$254 (and z$78 z$252)))
(assert
 (= z$256 (and z$254 z$98)))
(assert
 (let (($x5084 (Extract_1_0_0_4 |rb.mem[4]|)))
 (= z$258 $x5084)))
(assert
 (let (($x3932 (ite z$256 z$108 z$258)))
 (= z$260 $x3932)))
(assert
 (= z$262 (and z$254 z$116)))
(assert
 (let (($x5716 (Extract_1_1_1_4 |rb.mem[4]|)))
 (= z$264 $x5716)))
(assert
 (let (($x6117 (ite z$262 z$121 z$264)))
 (= z$266 $x6117)))
(assert
 (= z$268 (and z$254 z$129)))
(assert
 (let (($x5573 (Extract_1_2_2_4 |rb.mem[4]|)))
 (= z$270 $x5573)))
(assert
 (let (($x5258 (ite z$268 z$134 z$270)))
 (= z$272 $x5258)))
(assert
 (= z$274 (and z$254 z$142)))
(assert
 (let (($x3951 (Extract_1_3_3_4 |rb.mem[4]|)))
 (= z$276 $x3951)))
(assert
 (let (($x588 (ite z$274 z$148 z$276)))
 (= z$278 $x588)))
(assert
 (let ((?x4789 (Concat_4_1_1_1_1 z$260 z$266 z$272 z$278)))
 (= z$280 ?x4789)))
(assert
 (let (($x6214 (= |rb.mem[4]$next| z$280)))
 (= z$282 $x6214)))
(assert
 (= z$40 (and pop_ z$33)))
(assert
 (let ((?x6739 (Concat_32_4_28 rb.tail z$n0s28)))
 (= z$43 ?x6739)))
(assert
 (let ((?x6045 (Add_32_32_32 z$43 z$n1s32)))
 (= z$46 ?x6045)))
(assert
 (let ((?x1844 (Extract_4_3_0_32 z$46)))
 (= z$48 ?x1844)))
(assert
 (let (($x1227 (= z$48 rb.head)))
 (= z$284 $x1227)))
(assert
 (= z$285 (ite z$284 true rb.empty)))
(assert
 (= z$287 (ite z$40 z$285 false)))
(assert
 (= z$289 (ite z$37 false z$287)))
(assert
 (let (($x4301 (ite z$40 z$289 rb.empty)))
 (= z$291 $x4301)))
(assert
 (= z$293 (ite z$37 false z$291)))
(assert
 (= z$295 (ite z$37 false z$293)))
(assert
 (= z$297 (= rb.empty$next z$295)))
(assert
 (let ((?x1514 (ite z$40 z$48 rb.tail)))
 (= z$50 ?x1514)))
(assert
 (let ((?x2767 (ite z$37 z$n0s4 z$50)))
 (= z$52 ?x2767)))
(assert
 (let ((?x5209 (ite z$37 rb.tail z$52)))
 (= z$54 ?x5209)))
(assert
 (let (($x4960 (= rb.tail$next z$54)))
 (= z$299 $x4960)))
(assert
 (let ((?x5972 (Concat_32_4_28 rb.head z$n0s28)))
 (= z$301 ?x5972)))
(assert
 (let ((?x5457 (Add_32_32_32 z$301 z$n1s32)))
 (= z$303 ?x5457)))
(assert
 (let ((?x5936 (Extract_4_3_0_32 z$303)))
 (= z$305 ?x5936)))
(assert
 (let ((?x6219 (ite z$37 z$305 rb.head)))
 (= z$307 ?x6219)))
(assert
 (let (($x3387 (= rb.head$next z$307)))
 (= z$309 $x3387)))
(assert
 (let ((?x4136 (Concat_32_4_28 sr.tail z$n0s28)))
 (= z$311 ?x4136)))
(assert
 (= z$316 (and (distinct z$311 z$n4s32) true)))
(assert
 (= z$317 (and push_ z$316)))
(assert
 (let ((?x5482 (ite z$317 |sr.mem[0]| |sr.mem[1]|)))
 (= z$368 ?x5482)))
(assert
 (let (($x5701 (= |sr.mem[1]$next| z$368)))
 (= z$370 $x5701)))
(assert
 (let ((?x10164 (ite z$317 |sr.mem[1]| |sr.mem[2]|)))
 (= z$372 ?x10164)))
(assert
 (let (($x10520 (= |sr.mem[2]$next| z$372)))
 (= z$374 $x10520)))
(assert
 (let ((?x5331 (ite z$317 |sr.mem[2]| |sr.mem[3]|)))
 (= z$376 ?x5331)))
(assert
 (let (($x5883 (= |sr.mem[3]$next| z$376)))
 (= z$378 $x5883)))
(assert
 (let ((?x1781 (ite z$317 |sr.mem[3]| |sr.mem[4]|)))
 (= z$380 ?x1781)))
(assert
 (let (($x5319 (= |sr.mem[4]$next| z$380)))
 (= z$382 $x5319)))
(assert
 (let (($x5854 (= sr.tail$next z$n0s4)))
 (= z$536 $x5854)))
(assert
 (let ((?x2652 (Concat_32_4_28 sr.tail$next z$n0s28)))
 (= z$456 ?x2652)))
(assert
 (let (($x4676 (= z$456 z$n4s32)))
 (= z$458 $x4676)))
(assert
 (= z$537 (and z$536 z$458)))
(assert
 (= z$539 (not z$537)))
(assert
 (let (($x6501 (= sr.tail z$n0s4)))
 (= z$28 $x6501)))
(assert
 (let (($x3841 (= z$311 z$n4s32)))
 (= z$314 $x3841)))
(assert
 (= z$535 (and z$28 z$314)))
(assert
 (= z$538 (not z$535)))
(assert
 (= z$543 (and (distinct z$456 z$n4s32) true)))
(assert
 (let (($x2601 (= rb.tail$next rb.head$next)))
 (= z$459 $x2601)))
(assert
 (let (($x5527 (not rb.empty$next)))
 (= z$460 $x5527)))
(assert
 (= z$461 (and z$459 z$460)))
(assert
 (= z$463 (= z$458 z$461)))
(assert
 (= z$464 (= sr.empty$next rb.empty$next)))
(assert
 (= z$465 (and z$463 z$464)))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (= z$467 ?x5430)))
(assert
 (let (($x6124 (= z$467 z$n3s3)))
 (= z$469 $x6124)))
(assert
 (let (($x3398 (= z$467 z$n4s3)))
 (= z$470 $x3398)))
(assert
 (let (($x6722 (or z$469 z$470)))
 (= z$471 $x6722)))
(assert
 (let ((?x6277 (ite z$470 |sr.mem[4]$next| |sr.mem[3]$next|)))
 (= z$473 ?x6277)))
(assert
 (let (($x854 (= z$467 z$n2s3)))
 (= z$475 $x854)))
(assert
 (let (($x6959 (= z$467 z$n1s3)))
 (= z$476 $x6959)))
(assert
 (let ((?x3470 (ite z$476 |sr.mem[1]$next| |sr.mem[0]$next|)))
 (= z$477 ?x3470)))
(assert
 (let ((?x6701 (ite z$475 |sr.mem[2]$next| z$477)))
 (= z$479 ?x6701)))
(assert
 (let ((?x6566 (ite z$471 z$473 z$479)))
 (= z$481 ?x6566)))
(assert
 (let (($x3108 (Extract_1_2_2_3 s$43$next)))
 (= z$483 $x3108)))
(assert
 (let (($x6693 (Extract_1_1_1_3 s$43$next)))
 (= z$485 $x6693)))
(assert
 (let (($x6432 (Extract_1_0_0_3 s$43$next)))
 (= z$487 $x6432)))
(assert
 (let ((?x4887 (ite z$487 s$42$next s$41$next)))
 (= z$489 ?x4887)))
(assert
 (let ((?x4843 (ite z$487 s$40$next |rb.mem[4]$next|)))
 (= z$491 ?x4843)))
(assert
 (let ((?x423 (ite z$485 z$489 z$491)))
 (= z$493 ?x423)))
(assert
 (let ((?x5692 (ite z$487 |rb.mem[3]$next| |rb.mem[2]$next|)))
 (= z$495 ?x5692)))
(assert
 (let ((?x6682 (ite z$487 |rb.mem[1]$next| |rb.mem[0]$next|)))
 (= z$497 ?x6682)))
(assert
 (let ((?x2475 (ite z$485 z$495 z$497)))
 (= z$499 ?x2475)))
(assert
 (let ((?x2034 (ite z$483 z$493 z$499)))
 (= z$501 ?x2034)))
(assert
 (let (($x6141 (= z$481 z$501)))
 (= z$503 $x6141)))
(assert
 (let (($x5971 (or sr.empty$next z$503)))
 (= z$504 $x5971)))
(assert
 (= z$506 (and z$465 z$504)))
(assert
 (let ((?x3679 (Concat_32_1_31 z$506 z$n0s31)))
 (= z$508 ?x3679)))
(assert
 (= z$562 (and (distinct z$508 z$n1s32) true)))
(assert
 (= z$563 (and rb.empty$next sr.empty$next z$543 z$562)))
(assert
 (= z$565 (not z$563)))
(assert
 (= z$385 (= z$314 z$34)))
(assert
 (= z$386 (= sr.empty rb.empty)))
(assert
 (= z$387 (and z$385 z$386)))
(assert
 (let ((?x6485 (Extract_3_2_0_4 sr.tail)))
 (= z$389 ?x6485)))
(assert
 (let (($x3293 (= z$389 z$n3s3)))
 (= z$392 $x3293)))
(assert
 (let (($x2706 (= z$389 z$n4s3)))
 (= z$394 $x2706)))
(assert
 (let (($x2648 (or z$392 z$394)))
 (= z$395 $x2648)))
(assert
 (let ((?x4064 (ite z$394 |sr.mem[4]| |sr.mem[3]|)))
 (= z$397 ?x4064)))
(assert
 (let (($x5941 (= z$389 z$n2s3)))
 (= z$400 $x5941)))
(assert
 (let (($x513 (= z$389 z$n1s3)))
 (= z$402 $x513)))
(assert
 (let ((?x3693 (ite z$402 |sr.mem[1]| |sr.mem[0]|)))
 (= z$403 ?x3693)))
(assert
 (let ((?x508 (ite z$400 |sr.mem[2]| z$403)))
 (= z$405 ?x508)))
(assert
 (let ((?x6233 (ite z$395 z$397 z$405)))
 (= z$407 ?x6233)))
(assert
 (let (($x6140 (Extract_1_2_2_3 s$43)))
 (= z$410 $x6140)))
(assert
 (let (($x4315 (Extract_1_1_1_3 s$43)))
 (= z$412 $x4315)))
(assert
 (let (($x3744 (Extract_1_0_0_3 s$43)))
 (= z$414 $x3744)))
(assert
 (let ((?x5932 (ite z$414 s$42 s$41)))
 (= z$418 ?x5932)))
(assert
 (let ((?x1559 (ite z$414 s$40 |rb.mem[4]|)))
 (= z$421 ?x1559)))
(assert
 (let ((?x2956 (ite z$412 z$418 z$421)))
 (= z$423 ?x2956)))
(assert
 (let ((?x4216 (ite z$414 |rb.mem[3]| |rb.mem[2]|)))
 (= z$425 ?x4216)))
(assert
 (let ((?x1716 (ite z$414 |rb.mem[1]| |rb.mem[0]|)))
 (= z$427 ?x1716)))
(assert
 (let ((?x797 (ite z$412 z$425 z$427)))
 (= z$429 ?x797)))
(assert
 (let ((?x6454 (ite z$410 z$423 z$429)))
 (= z$431 ?x6454)))
(assert
 (let (($x5245 (= z$407 z$431)))
 (= z$433 $x5245)))
(assert
 (let (($x5450 (or sr.empty z$433)))
 (= z$434 $x5450)))
(assert
 (= z$436 (and z$387 z$434)))
(assert
 (let ((?x4281 (Concat_32_1_31 z$436 z$n0s31)))
 (= z$439 ?x4281)))
(assert
 (= z$527 (and (distinct z$439 z$n1s32) true)))
(assert
 (= z$561 (and rb.empty sr.empty z$316 z$527)))
(assert
 (= z$564 (not z$561)))
(assert
 (= z$711 (not z$461)))
(assert
 (= z$712 (and push$next z$711)))
(assert
 (let ((?x3257 (ite z$712 rb.head$next z$n0s4)))
 (= z$714 ?x3257)))
(assert
 (let (($x6547 (Extract_1_0_0_4 rb.head$next)))
 (= z$693 $x6547)))
(assert
 (= z$717 (ite z$712 z$693 false)))
(assert
 (let (($x1004 (Extract_1_0_0_4 z$714)))
 (= z$716 $x1004)))
(assert
 (= z$716 z$717))
(assert
 (let (($x958 (not z$716)))
 (= z$719 $x958)))
(assert
 (let (($x6543 (Extract_1_1_1_4 rb.head$next)))
 (= z$695 $x6543)))
(assert
 (= z$721 (ite z$712 z$695 false)))
(assert
 (let (($x2183 (Extract_1_1_1_4 z$714)))
 (= z$720 $x2183)))
(assert
 (= z$720 z$721))
(assert
 (let (($x2587 (not z$720)))
 (= z$723 $x2587)))
(assert
 (let (($x5684 (Extract_1_2_2_4 rb.head$next)))
 (= z$697 $x5684)))
(assert
 (= z$725 (ite z$712 z$697 false)))
(assert
 (let (($x1605 (Extract_1_2_2_4 z$714)))
 (= z$724 $x1605)))
(assert
 (= z$724 z$725))
(assert
 (let (($x3700 (not z$724)))
 (= z$727 $x3700)))
(assert
 (= z$728 (and z$723 z$727)))
(assert
 (= z$730 (and z$719 z$728)))
(assert
 (let ((?x5764 (ite z$712 z$n15s4 z$n0s4)))
 (= z$732 ?x5764)))
(assert
 (= z$735 (ite z$712 true false)))
(assert
 (let (($x5106 (Extract_1_0_0_4 z$732)))
 (= z$734 $x5106)))
(assert
 (= z$734 z$735))
(assert
 (= z$737 (and z$730 z$734)))
(assert
 (let ((?x6016 (ite z$712 dataIn$next z$n0s4)))
 (= z$739 ?x6016)))
(assert
 (let (($x3099 (Extract_1_0_0_4 dataIn$next)))
 (= z$699 $x3099)))
(assert
 (= z$742 (ite z$712 z$699 false)))
(assert
 (let (($x4195 (Extract_1_0_0_4 z$739)))
 (= z$741 $x4195)))
(assert
 (= z$741 z$742))
(assert
 (let (($x4049 (Extract_1_0_0_4 |rb.mem[0]$next|)))
 (= z$744 $x4049)))
(assert
 (let (($x3721 (ite z$737 z$741 z$744)))
 (= z$746 $x3721)))
(assert
 (let (($x2958 (Extract_1_1_1_4 z$732)))
 (= z$748 $x2958)))
(assert
 (= z$748 z$735))
(assert
 (= z$750 (and z$730 z$748)))
(assert
 (let (($x6813 (Extract_1_1_1_4 dataIn$next)))
 (= z$701 $x6813)))
(assert
 (= z$753 (ite z$712 z$701 false)))
(assert
 (let (($x2395 (Extract_1_1_1_4 z$739)))
 (= z$752 $x2395)))
(assert
 (= z$752 z$753))
(assert
 (let (($x4889 (Extract_1_1_1_4 |rb.mem[0]$next|)))
 (= z$755 $x4889)))
(assert
 (let (($x1191 (ite z$750 z$752 z$755)))
 (= z$757 $x1191)))
(assert
 (let (($x5887 (Extract_1_2_2_4 z$732)))
 (= z$759 $x5887)))
(assert
 (= z$759 z$735))
(assert
 (= z$761 (and z$730 z$759)))
(assert
 (let (($x6588 (Extract_1_2_2_4 dataIn$next)))
 (= z$703 $x6588)))
(assert
 (= z$764 (ite z$712 z$703 false)))
(assert
 (let (($x1667 (Extract_1_2_2_4 z$739)))
 (= z$763 $x1667)))
(assert
 (= z$763 z$764))
(assert
 (let (($x6519 (Extract_1_2_2_4 |rb.mem[0]$next|)))
 (= z$766 $x6519)))
(assert
 (let (($x6222 (ite z$761 z$763 z$766)))
 (= z$768 $x6222)))
(assert
 (let (($x3076 (Extract_1_3_3_4 z$732)))
 (= z$770 $x3076)))
(assert
 (= z$770 z$735))
(assert
 (= z$772 (and z$730 z$770)))
(assert
 (let (($x5313 (Extract_1_3_3_4 dataIn$next)))
 (= z$705 $x5313)))
(assert
 (= z$775 (ite z$712 z$705 false)))
(assert
 (let (($x5582 (Extract_1_3_3_4 z$739)))
 (= z$774 $x5582)))
(assert
 (= z$774 z$775))
(assert
 (let (($x1111 (Extract_1_3_3_4 |rb.mem[0]$next|)))
 (= z$777 $x1111)))
(assert
 (let (($x963 (ite z$772 z$774 z$777)))
 (= z$779 $x963)))
(assert
 (let ((?x5358 (Concat_4_1_1_1_1 z$746 z$757 z$768 z$779)))
 (= z$781 ?x5358)))
(assert
 (= z$783 (and (distinct sr.tail$next z$781) true)))
(assert
 (let (($x2954 (not z$774)))
 (= z$802 $x2954)))
(assert
 (= z$803 (not z$763)))
(assert
 (= z$804 (not z$752)))
(assert
 (= z$805 (not z$741)))
(assert
 (let (($x3700 (not z$724)))
 (= z$806 $x3700)))
(assert
 (let (($x2587 (not z$720)))
 (= z$807 $x2587)))
(assert
 (let (($x958 (not z$716)))
 (= z$808 $x958)))
(assert
 (let (($x925 (and z$783 z$802 z$803 z$804 z$805 z$806 z$807 z$808 z$536 z$748)))
 (= z$809 $x925)))
(assert
 (= z$811 (not z$809)))
(assert
 (= z$687 (and (distinct sr.tail z$156) true)))
(assert
 (let (($x1156 (not z$148)))
 (= z$601 $x1156)))
(assert
 (= z$598 (not z$134)))
(assert
 (= z$595 (not z$121)))
(assert
 (= z$592 (not z$108)))
(assert
 (let (($x2482 (not z$85)))
 (= z$590 $x2482)))
(assert
 (let (($x5256 (not z$79)))
 (= z$588 $x5256)))
(assert
 (let (($x2512 (not z$72)))
 (= z$586 $x2512)))
(assert
 (let (($x6849 (and z$687 z$601 z$598 z$595 z$592 z$590 z$588 z$586 z$28 z$116)))
 (= z$801 $x6849)))
(assert
 (= z$810 (not z$801)))
(assert
 (let ((?x4294 (Extract_3_2_0_4 rb.tail)))
 (= z$57 ?x4294)))
(assert
 (let ((?x6742 (Extract_3_2_0_32 z$46)))
 (= z$63 ?x6742)))
(assert
 (let ((?x6613 (ite z$40 z$63 z$57)))
 (= z$64 ?x6613)))
(assert
 (let ((?x483 (ite z$37 z$n0s3 z$64)))
 (= z$65 ?x483)))
(assert
 (let ((?x899 (ite z$37 z$57 z$65)))
 (= z$66 ?x899)))
(assert
 (let ((?x623 (Extract_3_2_0_4 z$54)))
 (= z$56 ?x623)))
(assert
 (= z$56 z$66))
(assert
 (let (($x6737 (= s$43$next z$56)))
 (= z$68 $x6737)))
(assert
 (let (($x6327 (= rb.tail z$n0s4)))
 (= z$15 $x6327)))
(assert
 (= z$841 (and rb.empty push_ z$485 z$68 z$15)))
(assert
 (= z$842 (not z$841)))
(assert
 (= z$863 (and rb.empty push_ z$487 z$68 z$15)))
(assert
 (= z$864 (not z$863)))
(assert
 (let (($x572 (= rb.tail$next z$n0s4)))
 (= z$899 $x572)))
(assert
 (let ((?x459 (Concat_32_4_28 rb.tail$next z$n0s28)))
 (= z$787 ?x459)))
(assert
 (let ((?x6134 (Add_32_32_32 z$787 z$n1s32)))
 (= z$882 ?x6134)))
(assert
 (= z$888 (and (distinct z$882 z$n1s32) true)))
(assert
 (= z$900 (and z$899 z$888)))
(assert
 (= z$902 (not z$900)))
(assert
 (= z$877 (and (distinct z$46 z$n1s32) true)))
(assert
 (= z$898 (and z$15 z$877)))
(assert
 (= z$901 (not z$898)))
(assert
 (let (($x4582 (= z$303 z$n1s32)))
 (= z$914 $x4582)))
(assert
 (let (($x1963 (= z$882 z$n1s32)))
 (= z$906 $x1963)))
(assert
 (= z$924 (and rb.empty push_ z$459 z$914 z$906 z$309)))
(assert
 (= z$925 (not z$924)))
(assert
 (let (($x4458 (not z$412)))
 (= z$524 $x4458)))
(assert
 (let (($x2282 (not z$414)))
 (= z$525 $x2282)))
(assert
 (= z$983 (and (distinct s$43 z$n4s3) true)))
(assert
 (= z$984 (and z$410 z$524 z$525 z$983)))
(assert
 (= z$986 (not z$984)))
(assert
 (let (($x5456 (not z$485)))
 (= z$644 $x5456)))
(assert
 (let (($x2924 (not z$487)))
 (= z$645 $x2924)))
(assert
 (= z$677 (and (distinct s$43$next z$n4s3) true)))
(assert
 (= z$982 (and z$483 z$644 z$645 z$677)))
(assert
 (= z$985 (not z$982)))
(assert
 (let (($x6274 (Extract_1_3_3_4 |rb.mem[4]$next|)))
 (= z$948 $x6274)))
(assert
 (let (($x3225 (= |rb.mem[4]$next| z$n0s4)))
 (= z$1011 $x3225)))
(assert
 (= z$1012 (and z$948 z$1011)))
(assert
 (= z$1014 (not z$1012)))
(assert
 (let (($x5015 (= |rb.mem[4]| z$n0s4)))
 (= z$13 $x5015)))
(assert
 (= z$1010 (and z$276 z$13)))
(assert
 (= z$1013 (not z$1010)))
(assert
 (let (($x2254 (= rb.head$next z$n0s4)))
 (= z$1037 $x2254)))
(assert
 (= z$1038 (and z$724 z$1037)))
(assert
 (= z$1040 (not z$1038)))
(assert
 (let (($x6624 (= rb.head z$n0s4)))
 (= z$3 $x6624)))
(assert
 (= z$1036 (and z$85 z$3)))
(assert
 (= z$1039 (not z$1036)))
(assert
 (let (($x1823 (= |rb.mem[0]$next| z$n0s4)))
 (= z$1098 $x1823)))
(assert
 (= z$1099 (and z$755 z$1098)))
(assert
 (= z$1101 (not z$1099)))
(assert
 (let (($x5830 (= |rb.mem[0]| z$n0s4)))
 (= z$5 $x5830)))
(assert
 (= z$1097 (and z$125 z$5)))
(assert
 (= z$1100 (not z$1097)))
(assert
 (= z$1144 (and z$744 z$1098)))
(assert
 (= z$1146 (not z$1144)))
(assert
 (= z$1143 (and z$112 z$5)))
(assert
 (= z$1145 (not z$1143)))
(assert
 (let (($x2300 (= sr.tail z$156)))
 (= z$819 $x2300)))
(assert
 (let ((?x3054 (ite z$317 dataIn |sr.mem[0]|)))
 (= z$364 ?x3054)))
(assert
 (let (($x5685 (= |sr.mem[0]$next| z$364)))
 (= z$366 $x5685)))
(assert
 (let (($x6675 (= |rb.mem[0]$next| sr.tail$next)))
 (= z$1059 $x6675)))
(assert
 (= z$1150 (and (distinct sr.tail$next |sr.mem[0]$next|) true)))
(assert
 (let (($x5374 (and z$819 z$601 z$598 z$595 z$592 z$366 z$1059 z$1150 z$28 z$98 z$158)))
 (= z$1157 $x5374)))
(assert
 (= z$1158 (not z$1157)))
(assert
 (let (($x4998 (= sr.tail$next z$781)))
 (= z$813 $x4998)))
(assert
 (= z$1181 (and z$813 z$806 z$807 z$808 z$774 z$536)))
(assert
 (= z$1183 (not z$1181)))
(assert
 (= z$1180 (and z$819 z$590 z$588 z$586 z$148 z$28)))
(assert
 (= z$1182 (not z$1180)))
(assert
 (= z$650 (and (distinct |rb.mem[0]$next| |sr.mem[0]$next|) true)))
(assert
 (= z$1199 (and z$650 z$590 z$588 z$586 z$366 z$316 z$142 z$158)))
(assert
 (= z$1200 (not z$1199)))
(assert
 (let (($x6138 (= s$43 z$n3s3)))
 (= z$1220 $x6138)))
(assert
 (= z$1221 (and z$525 z$1220)))
(assert
 (= z$1223 (not z$1221)))
(assert
 (let (($x1952 (= s$43$next z$n3s3)))
 (= z$1210 $x1952)))
(assert
 (= z$1219 (and z$645 z$1210)))
(assert
 (= z$1222 (not z$1219)))
(assert
 (let (($x2753 (= s$43 z$n2s3)))
 (= z$1243 $x2753)))
(assert
 (= z$1244 (and z$524 z$1243)))
(assert
 (= z$1246 (not z$1244)))
(assert
 (let (($x5445 (= s$43$next z$n2s3)))
 (= z$1233 $x5445)))
(assert
 (= z$1242 (and z$644 z$1233)))
(assert
 (= z$1245 (not z$1242)))
(assert
 (let (($x736 (= s$43 z$n1s3)))
 (= z$1265 $x736)))
(assert
 (= z$1266 (and z$525 z$1265)))
(assert
 (= z$1268 (not z$1266)))
(assert
 (let (($x2874 (= s$43$next z$n1s3)))
 (= z$1256 $x2874)))
(assert
 (= z$1264 (and z$645 z$1256)))
(assert
 (= z$1267 (not z$1264)))
(assert
 (= z$617 (not z$270)))
(assert
 (let (($x5022 (= |rb.mem[4]| sr.tail)))
 (= z$940 $x5022)))
(assert
 (let (($x5020 (= sr.tail$next |sr.mem[4]$next|)))
 (= z$995 $x5020)))
(assert
 (let (($x2735 (= |sr.mem[3]| sr.tail)))
 (= z$996 $x2735)))
(assert
 (= z$1279 (and push_ z$617 z$940 z$995 z$996 z$470 z$382)))
(assert
 (= z$1280 (not z$1279)))
(assert
 (let (($x5965 (not sr.empty$next)))
 (= z$566 $x5965)))
(assert
 (= z$1391 (and z$459 z$460 z$566 z$458 z$503 z$562)))
(assert
 (= z$1393 (not z$1391)))
(assert
 (let (($x5933 (not sr.empty)))
 (= z$319 $x5933)))
(assert
 (= z$1392 (and z$32 z$33 z$319 z$314 z$433 z$527)))
(assert
 (= z$1401 (not z$1392)))
(assert
 (= z$518 (and (distinct z$389 z$n4s3) true)))
(assert
 (= z$1423 (and z$314 z$518)))
(assert
 (= z$1425 (not z$1423)))
(assert
 (= z$630 (and (distinct z$467 z$n4s3) true)))
(assert
 (= z$1422 (and z$458 z$630)))
(assert
 (= z$1424 (not z$1422)))
(assert
 (let ((?x3101 (Add_32_32_32 z$311 z$n1s32)))
 (= z$338 ?x3101)))
(assert
 (let (($x796 (= z$338 z$n1s32)))
 (= z$915 $x796)))
(assert
 (let ((?x4942 (Extract_4_3_0_32 z$338)))
 (= z$340 ?x4942)))
(assert
 (let ((?x4410 (ite z$319 z$340 sr.tail)))
 (= z$342 ?x4410)))
(assert
 (let ((?x5323 (ite z$317 z$342 z$n0s4)))
 (= z$344 ?x5323)))
(assert
 (= z$320 (and pop_ z$319)))
(assert
 (let (($x4358 (= z$311 z$n0s32)))
 (= z$323 $x4358)))
(assert
 (let ((?x2449 (Sub_32_32_32 z$311 z$n1s32)))
 (= z$346 ?x2449)))
(assert
 (let ((?x6010 (Extract_4_3_0_32 z$346)))
 (= z$348 ?x6010)))
(assert
 (let ((?x3709 (ite z$323 sr.tail z$348)))
 (= z$350 ?x3709)))
(assert
 (let ((?x915 (ite z$320 z$350 z$n0s4)))
 (= z$352 ?x915)))
(assert
 (let ((?x4819 (ite z$317 z$n0s4 z$352)))
 (= z$354 ?x4819)))
(assert
 (let ((?x5844 (ite z$320 z$354 sr.tail)))
 (= z$356 ?x5844)))
(assert
 (let ((?x1296 (ite z$317 z$n0s4 z$356)))
 (= z$358 ?x1296)))
(assert
 (let ((?x5193 (ite z$317 z$344 z$358)))
 (= z$360 ?x5193)))
(assert
 (let (($x4932 (= sr.tail$next z$360)))
 (= z$362 $x4932)))
(assert
 (= z$1480 (and push_ z$915 z$458 z$362)))
(assert
 (= z$1481 (not z$1480)))
(assert
 (= z$683 (and (distinct z$456 z$n1s32) true)))
(assert
 (= z$1522 (and push_ z$319 z$915 z$683 z$362)))
(assert
 (= z$1523 (not z$1522)))
(assert
 (let ((?x5225 (Concat_32_4_28 rb.head$next z$n0s28)))
 (= z$785 ?x5225)))
(assert
 (= z$1362 (and (distinct z$785 z$n1s32) true)))
(assert
 (= z$1549 (and rb.empty push_ z$1362 z$914 z$309)))
(assert
 (= z$1550 (not z$1549)))
(assert
 (let (($x5311 (= z$301 z$n1s32)))
 (= z$1573 $x5311)))
(assert
 (let (($x4523 (= z$785 z$787)))
 (= z$789 $x4523)))
(assert
 (= z$1584 (and z$1573 z$906 z$789 z$309)))
(assert
 (= z$1585 (not z$1584)))
(assert
 (let (($x6901 (= rb.tail |sr.mem[3]|)))
 (= z$1465 $x6901)))
(assert
 (let (($x2905 (= rb.head |sr.mem[3]|)))
 (= z$1616 $x2905)))
(assert
 (= z$1641 (and rb.empty push_ z$483 z$1465 z$1616 z$68 z$590)))
(assert
 (= z$1642 (not z$1641)))
(assert
 (let (($x9580 (= s$43$next z$n4s3)))
 (= z$990 $x9580)))
(assert
 (= z$1681 (and z$485 z$990)))
(assert
 (= z$1683 (not z$1681)))
(assert
 (let (($x1557 (= s$43 z$n4s3)))
 (= z$988 $x1557)))
(assert
 (= z$1682 (and z$412 z$988)))
(assert
 (= z$1688 (not z$1682)))
(assert
 (= z$1723 (and z$487 z$990)))
(assert
 (= z$1725 (not z$1723)))
(assert
 (= z$1724 (and z$414 z$988)))
(assert
 (= z$1729 (not z$1724)))
(assert
 (= z$1754 (and z$644 z$1210)))
(assert
 (= z$1756 (not z$1754)))
(assert
 (= z$1755 (and z$524 z$1220)))
(assert
 (= z$1760 (not z$1755)))
(assert
 (let (($x6250 (= rb.tail |sr.mem[2]|)))
 (= z$1734 $x6250)))
(assert
 (let (($x10103 (= rb.head |sr.mem[2]|)))
 (= z$1735 $x10103)))
(assert
 (= z$1825 (and rb.empty push_ z$487 z$1734 z$1735 z$68 z$586)))
(assert
 (= z$1826 (not z$1825)))
(assert
 (let (($x4674 (not z$483)))
 (= z$643 $x4674)))
(assert
 (= z$678 (and (distinct s$43$next z$n2s3) true)))
(assert
 (= z$1859 (and z$485 z$643 z$645 z$678)))
(assert
 (= z$1861 (not z$1859)))
(assert
 (let (($x6572 (not z$410)))
 (= z$523 $x6572)))
(assert
 (= z$1248 (and (distinct s$43 z$n2s3) true)))
(assert
 (= z$1860 (and z$412 z$523 z$525 z$1248)))
(assert
 (= z$1864 (not z$1860)))
(assert
 (let (($x7551 (= rb.tail |sr.mem[1]|)))
 (= z$1871 $x7551)))
(assert
 (let (($x1714 (= rb.head |sr.mem[1]|)))
 (= z$1872 $x1714)))
(assert
 (= z$1894 (and rb.empty push_ z$485 z$1871 z$1872 z$68 z$588)))
(assert
 (= z$1895 (not z$1894)))
(assert
 (= z$324 (ite z$323 true sr.empty)))
(assert
 (= z$326 (ite z$320 z$324 false)))
(assert
 (= z$328 (ite z$317 false z$326)))
(assert
 (let (($x1779 (ite z$320 z$328 sr.empty)))
 (= z$330 $x1779)))
(assert
 (= z$332 (ite z$317 false z$330)))
(assert
 (= z$334 (ite z$317 false z$332)))
(assert
 (= z$336 (= sr.empty$next z$334)))
(assert
 (let (($x2465 (and z$158 z$188 z$220 z$250 z$282 z$297 z$299 z$309 z$370 z$374 z$378 z$382 z$539 z$538 z$565 z$564 z$811 z$810 z$842 z$864 z$902 z$901 z$925 z$986 z$985 z$1014 z$1013 z$1040 z$1039 z$1101 z$1100 z$1146 z$1145 z$1158 z$1183 z$1182 z$1200 z$1223 z$1222 z$1246 z$1245 z$1268 z$1267 z$1280 z$1393 z$1401 z$1425 z$1424 z$1481 z$1523 z$1550 z$1585 z$1642 z$1683 z$1688 z$1725 z$1729 z$1756 z$1760 z$1826 z$1861 z$1864 z$1895 z$68 z$336 z$362 z$366)))
 (= z$1956 $x2465)))
(assert
 z$1956)
(assert
 (=> p$0 rb.empty))
(assert
 (=> p$1 sr.empty))
(assert
 (=> p$2 push_))
(assert
 (let (($x3648 (= z$455 (not prop$next))))
 (=> p$3 $x3648)))
(assert
 (=> p$3 z$455))
(assert
 (let (($x3108 (Extract_1_2_2_3 s$43$next)))
 (let (($x6413 (= z$483 $x3108)))
 (=> p$4 $x6413))))
(assert
 (=> p$4 z$483))
(assert
 (let (($x6693 (Extract_1_1_1_3 s$43$next)))
 (let (($x3989 (= z$485 $x6693)))
 (=> p$5 $x3989))))
(assert
 (=> p$5 z$485))
(assert
 (let (($x5965 (not sr.empty$next)))
 (let (($x3453 (= z$566 $x5965)))
 (=> p$6 $x3453))))
(assert
 (=> p$6 z$566))
(assert
 (let (($x6432 (Extract_1_0_0_3 s$43$next)))
 (let (($x4172 (= z$487 $x6432)))
 (=> p$7 $x4172))))
(assert
 (let (($x2924 (not z$487)))
 (let (($x3745 (= z$645 $x2924)))
 (=> p$7 $x3745))))
(assert
 (=> p$7 z$645))
(assert
 (let (($x10266 (= sr.tail$next |sr.mem[0]$next|)))
 (let (($x4419 (= z$680 $x10266)))
 (=> p$8 $x4419))))
(assert
 (=> p$8 z$680))
(assert
 (let (($x6774 (= rb.tail sr.tail)))
 (let (($x5993 (= z$685 $x6774)))
 (=> p$9 $x5993))))
(assert
 (=> p$9 z$685))
(assert
 (let (($x9518 (= z$1930 (not z$1929))))
 (=> p$10 $x9518)))
(assert
 (=> p$10 z$1930))
(assert
 (let (($x5126 (= z$1932 (not z$1931))))
 (=> p$11 $x5126)))
(assert
 (=> p$11 z$1932))
(assert
 (let (($x6624 (= rb.head z$n0s4)))
 (let (($x6651 (= z$3 $x6624)))
 (=> p$12 $x6651))))
(assert
 (=> p$12 z$3))
(assert
 (let (($x5830 (= |rb.mem[0]| z$n0s4)))
 (let (($x3325 (= z$5 $x5830)))
 (=> p$13 $x3325))))
(assert
 (=> p$13 z$5))
(assert
 (let (($x5567 (= |rb.mem[1]| z$n0s4)))
 (let (($x5715 (= z$7 $x5567)))
 (=> p$14 $x5715))))
(assert
 (=> p$14 z$7))
(assert
 (let (($x2950 (= |rb.mem[2]| z$n0s4)))
 (let (($x6509 (= z$9 $x2950)))
 (=> p$15 $x6509))))
(assert
 (=> p$15 z$9))
(assert
 (let (($x1650 (= |rb.mem[3]| z$n0s4)))
 (let (($x713 (= z$11 $x1650)))
 (=> p$16 $x713))))
(assert
 (=> p$16 z$11))
(assert
 (let (($x5015 (= |rb.mem[4]| z$n0s4)))
 (let (($x2670 (= z$13 $x5015)))
 (=> p$17 $x2670))))
(assert
 (=> p$17 z$13))
(assert
 (let (($x6327 (= rb.tail z$n0s4)))
 (let (($x1575 (= z$15 $x6327)))
 (=> p$18 $x1575))))
(assert
 (=> p$18 z$15))
(assert
 (let (($x1988 (= |sr.mem[0]| z$n0s4)))
 (let (($x295 (= z$18 $x1988)))
 (=> p$19 $x295))))
(assert
 (=> p$19 z$18))
(assert
 (let (($x1927 (= |sr.mem[1]| z$n0s4)))
 (let (($x6760 (= z$20 $x1927)))
 (=> p$20 $x6760))))
(assert
 (=> p$20 z$20))
(assert
 (let (($x5860 (= |sr.mem[2]| z$n0s4)))
 (let (($x5392 (= z$22 $x5860)))
 (=> p$21 $x5392))))
(assert
 (=> p$21 z$22))
(assert
 (let (($x5906 (= |sr.mem[3]| z$n0s4)))
 (let (($x4221 (= z$24 $x5906)))
 (=> p$22 $x4221))))
(assert
 (=> p$22 z$24))
(assert
 (let (($x2434 (= |sr.mem[4]| z$n0s4)))
 (let (($x2765 (= z$26 $x2434)))
 (=> p$23 $x2765))))
(assert
 (=> p$23 z$26))
(assert
 (let (($x6501 (= sr.tail z$n0s4)))
 (let (($x3683 (= z$28 $x6501)))
 (=> p$24 $x3683))))
(assert
 (=> p$24 z$28))
(assert
 (=> p$25 true))
(assert
 (let ((?x4136 (Concat_32_4_28 sr.tail z$n0s28)))
 (let (($x6617 (= z$311 ?x4136)))
 (=> p$26 $x6617))))
(assert
 (let (($x4927 (= z$316 (and (distinct z$311 z$n4s32) true))))
 (=> p$26 $x4927)))
(assert
 (=> p$26 z$316))
(assert
 (let ((?x2652 (Concat_32_4_28 sr.tail$next z$n0s28)))
 (let (($x4544 (= z$456 ?x2652)))
 (=> p$27 $x4544))))
(assert
 (let (($x5439 (= z$543 (and (distinct z$456 z$n4s32) true))))
 (=> p$27 $x5439)))
(assert
 (=> p$27 z$543))
(assert
 (let ((?x4136 (Concat_32_4_28 sr.tail z$n0s28)))
 (let (($x6617 (= z$311 ?x4136)))
 (=> p$28 $x6617))))
(assert
 (let (($x7606 (= z$557 (and (distinct z$311 z$n1s32) true))))
 (=> p$28 $x7606)))
(assert
 (=> p$28 z$557))
(assert
 (let ((?x2652 (Concat_32_4_28 sr.tail$next z$n0s28)))
 (let (($x4544 (= z$456 ?x2652)))
 (=> p$29 $x4544))))
(assert
 (let (($x4676 (= z$456 z$n4s32)))
 (let (($x6644 (= z$458 $x4676)))
 (=> p$29 $x6644))))
(assert
 (let (($x2601 (= rb.tail$next rb.head$next)))
 (let (($x5500 (= z$459 $x2601)))
 (=> p$29 $x5500))))
(assert
 (let (($x5527 (not rb.empty$next)))
 (let (($x5617 (= z$460 $x5527)))
 (=> p$29 $x5617))))
(assert
 (let (($x5377 (= z$461 (and z$459 z$460))))
 (=> p$29 $x5377)))
(assert
 (let (($x6099 (= z$463 (= z$458 z$461))))
 (=> p$29 $x6099)))
(assert
 (let (($x2798 (= z$464 (= sr.empty$next rb.empty$next))))
 (=> p$29 $x2798)))
(assert
 (let (($x6603 (= z$465 (and z$463 z$464))))
 (=> p$29 $x6603)))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$29 $x2200))))
(assert
 (let (($x6124 (= z$467 z$n3s3)))
 (let (($x4758 (= z$469 $x6124)))
 (=> p$29 $x4758))))
(assert
 (let (($x3398 (= z$467 z$n4s3)))
 (let (($x3629 (= z$470 $x3398)))
 (=> p$29 $x3629))))
(assert
 (let (($x6722 (or z$469 z$470)))
 (let (($x6371 (= z$471 $x6722)))
 (=> p$29 $x6371))))
(assert
 (let ((?x6277 (ite z$470 |sr.mem[4]$next| |sr.mem[3]$next|)))
 (let (($x1413 (= z$473 ?x6277)))
 (=> p$29 $x1413))))
(assert
 (let (($x854 (= z$467 z$n2s3)))
 (let (($x6655 (= z$475 $x854)))
 (=> p$29 $x6655))))
(assert
 (let (($x6959 (= z$467 z$n1s3)))
 (let (($x4401 (= z$476 $x6959)))
 (=> p$29 $x4401))))
(assert
 (let ((?x3470 (ite z$476 |sr.mem[1]$next| |sr.mem[0]$next|)))
 (let (($x3446 (= z$477 ?x3470)))
 (=> p$29 $x3446))))
(assert
 (let ((?x6701 (ite z$475 |sr.mem[2]$next| z$477)))
 (let (($x5394 (= z$479 ?x6701)))
 (=> p$29 $x5394))))
(assert
 (let ((?x6566 (ite z$471 z$473 z$479)))
 (let (($x2001 (= z$481 ?x6566)))
 (=> p$29 $x2001))))
(assert
 (let (($x3108 (Extract_1_2_2_3 s$43$next)))
 (let (($x6413 (= z$483 $x3108)))
 (=> p$29 $x6413))))
(assert
 (let (($x6693 (Extract_1_1_1_3 s$43$next)))
 (let (($x3989 (= z$485 $x6693)))
 (=> p$29 $x3989))))
(assert
 (let (($x6432 (Extract_1_0_0_3 s$43$next)))
 (let (($x4172 (= z$487 $x6432)))
 (=> p$29 $x4172))))
(assert
 (let ((?x4887 (ite z$487 s$42$next s$41$next)))
 (let (($x4390 (= z$489 ?x4887)))
 (=> p$29 $x4390))))
(assert
 (let ((?x4843 (ite z$487 s$40$next |rb.mem[4]$next|)))
 (let (($x3780 (= z$491 ?x4843)))
 (=> p$29 $x3780))))
(assert
 (let ((?x423 (ite z$485 z$489 z$491)))
 (let (($x4885 (= z$493 ?x423)))
 (=> p$29 $x4885))))
(assert
 (let ((?x5692 (ite z$487 |rb.mem[3]$next| |rb.mem[2]$next|)))
 (let (($x692 (= z$495 ?x5692)))
 (=> p$29 $x692))))
(assert
 (let ((?x6682 (ite z$487 |rb.mem[1]$next| |rb.mem[0]$next|)))
 (let (($x5257 (= z$497 ?x6682)))
 (=> p$29 $x5257))))
(assert
 (let ((?x2475 (ite z$485 z$495 z$497)))
 (let (($x3545 (= z$499 ?x2475)))
 (=> p$29 $x3545))))
(assert
 (let ((?x2034 (ite z$483 z$493 z$499)))
 (let (($x1951 (= z$501 ?x2034)))
 (=> p$29 $x1951))))
(assert
 (let (($x6141 (= z$481 z$501)))
 (let (($x6220 (= z$503 $x6141)))
 (=> p$29 $x6220))))
(assert
 (let (($x5971 (or sr.empty$next z$503)))
 (let (($x883 (= z$504 $x5971)))
 (=> p$29 $x883))))
(assert
 (let (($x6873 (= z$506 (and z$465 z$504))))
 (=> p$29 $x6873)))
(assert
 (let ((?x3679 (Concat_32_1_31 z$506 z$n0s31)))
 (let (($x4187 (= z$508 ?x3679)))
 (=> p$29 $x4187))))
(assert
 (let (($x6721 (= z$562 (and (distinct z$508 z$n1s32) true))))
 (=> p$29 $x6721)))
(assert
 (=> p$29 z$562))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$30 $x2200))))
(assert
 (let (($x10058 (= z$625 (and (distinct z$467 z$n3s3) true))))
 (=> p$30 $x10058)))
(assert
 (=> p$30 z$625))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$31 $x2200))))
(assert
 (let (($x5749 (= z$630 (and (distinct z$467 z$n4s3) true))))
 (=> p$31 $x5749)))
(assert
 (=> p$31 z$630))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$32 $x2200))))
(assert
 (let (($x7480 (= z$635 (and (distinct z$467 z$n2s3) true))))
 (=> p$32 $x7480)))
(assert
 (=> p$32 z$635))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$33 $x2200))))
(assert
 (let (($x7775 (= z$640 (and (distinct z$467 z$n1s3) true))))
 (=> p$33 $x7775)))
(assert
 (=> p$33 z$640))
(assert
 (let ((?x5430 (Extract_3_2_0_4 sr.tail$next)))
 (let (($x2200 (= z$467 ?x5430)))
 (=> p$34 $x2200))))
(assert
 (let (($x6124 (= z$467 z$n3s3)))
 (let (($x4758 (= z$469 $x6124)))
 (=> p$34 $x4758))))
(assert
 (let (($x3398 (= z$467 z$n4s3)))
 (let (($x3629 (= z$470 $x3398)))
 (=> p$34 $x3629))))
(assert
 (let (($x6722 (or z$469 z$470)))
 (let (($x6371 (= z$471 $x6722)))
 (=> p$34 $x6371))))
(assert
 (let ((?x6277 (ite z$470 |sr.mem[4]$next| |sr.mem[3]$next|)))
 (let (($x1413 (= z$473 ?x6277)))
 (=> p$34 $x1413))))
(assert
 (let (($x854 (= z$467 z$n2s3)))
 (let (($x6655 (= z$475 $x854)))
 (=> p$34 $x6655))))
(assert
 (let (($x6959 (= z$467 z$n1s3)))
 (let (($x4401 (= z$476 $x6959)))
 (=> p$34 $x4401))))
(assert
 (let ((?x3470 (ite z$476 |sr.mem[1]$next| |sr.mem[0]$next|)))
 (let (($x3446 (= z$477 ?x3470)))
 (=> p$34 $x3446))))
(assert
 (let ((?x6701 (ite z$475 |sr.mem[2]$next| z$477)))
 (let (($x5394 (= z$479 ?x6701)))
 (=> p$34 $x5394))))
(assert
 (let ((?x6566 (ite z$471 z$473 z$479)))
 (let (($x2001 (= z$481 ?x6566)))
 (=> p$34 $x2001))))
(assert
 (let (($x3108 (Extract_1_2_2_3 s$43$next)))
 (let (($x6413 (= z$483 $x3108)))
 (=> p$34 $x6413))))
(assert
 (let (($x6693 (Extract_1_1_1_3 s$43$next)))
 (let (($x3989 (= z$485 $x6693)))
 (=> p$34 $x3989))))
(assert
 (let (($x6432 (Extract_1_0_0_3 s$43$next)))
 (let (($x4172 (= z$487 $x6432)))
 (=> p$34 $x4172))))
(assert
 (let ((?x4887 (ite z$487 s$42$next s$41$next)))
 (let (($x4390 (= z$489 ?x4887)))
 (=> p$34 $x4390))))
(assert
 (let ((?x4843 (ite z$487 s$40$next |rb.mem[4]$next|)))
 (let (($x3780 (= z$491 ?x4843)))
 (=> p$34 $x3780))))
(assert
 (let ((?x423 (ite z$485 z$489 z$491)))
 (let (($x4885 (= z$493 ?x423)))
 (=> p$34 $x4885))))
(assert
 (let ((?x5692 (ite z$487 |rb.mem[3]$next| |rb.mem[2]$next|)))
 (let (($x692 (= z$495 ?x5692)))
 (=> p$34 $x692))))
(assert
 (let ((?x6682 (ite z$487 |rb.mem[1]$next| |rb.mem[0]$next|)))
 (let (($x5257 (= z$497 ?x6682)))
 (=> p$34 $x5257))))
(assert
 (let ((?x2475 (ite z$485 z$495 z$497)))
 (let (($x3545 (= z$499 ?x2475)))
 (=> p$34 $x3545))))
(assert
 (let ((?x2034 (ite z$483 z$493 z$499)))
 (let (($x1951 (= z$501 ?x2034)))
 (=> p$34 $x1951))))
(assert
 (let (($x8069 (= z$648 (and (distinct z$481 z$501) true))))
 (=> p$34 $x8069)))
(assert
 (=> p$34 z$648))
(assert
 (let (($x7895 (= z$676 (and (distinct s$43$next z$n3s3) true))))
 (=> p$35 $x7895)))
(assert
 (=> p$35 z$676))
(assert
 (let (($x1046 (= z$677 (and (distinct s$43$next z$n4s3) true))))
 (=> p$36 $x1046)))
(assert
 (=> p$36 z$677))
(assert
 (let (($x8627 (= z$678 (and (distinct s$43$next z$n2s3) true))))
 (=> p$37 $x8627)))
(assert
 (=> p$37 z$678))
(assert
 (let (($x8743 (= z$679 (and (distinct s$43$next z$n1s3) true))))
 (=> p$38 $x8743)))
(assert
 (=> p$38 z$679))
(assert
 (let ((?x2652 (Concat_32_4_28 sr.tail$next z$n0s28)))
 (let (($x4544 (= z$456 ?x2652)))
 (=> p$39 $x4544))))
(assert
 (let (($x1398 (= z$683 (and (distinct z$456 z$n1s32) true))))
 (=> p$39 $x1398)))
(assert
 (=> p$39 z$683))
(assert
 (let ((?x4136 (Concat_32_4_28 sr.tail z$n0s28)))
 (let (($x6617 (= z$311 ?x4136)))
 (=> p$40 $x6617))))
(assert
 (let ((?x6739 (Concat_32_4_28 rb.tail z$n0s28)))
 (let (($x3490 (= z$43 ?x6739)))
 (=> p$40 $x3490))))
(assert
 (let (($x7197 (= z$311 z$43)))
 (let (($x4311 (= z$690 $x7197)))
 (=> p$40 $x4311))))
(assert
 (=> p$40 z$690))
(assert
 (let (($x4092 (= s$43 z$n0s3)))
 (let (($x9109 (= z$1935 $x4092)))
 (=> p$41 $x9109))))
(assert
 (=> p$41 z$1935))
(check-sat)
(assert p$0)
(assert p$5)
(assert p$2)
(set-info :status sat)
(check-sat)
(exit)
