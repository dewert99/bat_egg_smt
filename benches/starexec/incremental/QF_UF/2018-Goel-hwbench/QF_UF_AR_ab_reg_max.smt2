(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: AR
query-maker: "Z3"
query-time: 0.651000 ms
query-class: abstract
query-category: assume
query-type: regular
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt251 0)
(declare-fun z$n197s251 () utt251)
(declare-fun z$n12s251 () utt251)
(declare-fun z$n23s251 () utt251)
(declare-fun z$n206s251 () utt251)
(declare-fun z$n32s251 () utt251)
(declare-fun z$n20s251 () utt251)
(declare-fun z$n34s251 () utt251)
(declare-fun z$n31s251 () utt251)
(declare-fun z$n21s251 () utt251)
(declare-fun z$n199s251 () utt251)
(declare-fun z$n123s251 () utt251)
(declare-fun z$n16s251 () utt251)
(declare-fun z$n11s251 () utt251)
(declare-fun z$n19s251 () utt251)
(declare-fun z$n11983157094615116375939581176584992905283330352356145485516558024746991618s251 () utt251)
(declare-fun z$n10s251 () utt251)
(declare-fun z$n13s251 () utt251)
(declare-fun z$n203s251 () utt251)
(declare-fun z$n213s251 () utt251)
(declare-fun z$n43s251 () utt251)
(declare-fun z$n28s251 () utt251)
(declare-fun z$n65s251 () utt251)
(declare-fun z$n125s251 () utt251)
(declare-fun z$n8s251 () utt251)
(declare-fun z$n713623846352979940529142984724747568191373310s251 () utt251)
(declare-fun z$n15s251 () utt251)
(declare-fun z$n80s251 () utt251)
(declare-fun z$n2s251 () utt251)
(declare-fun z$n4s251 () utt251)
(declare-fun z$n55s251 () utt251)
(declare-fun z$n122s251 () utt251)
(declare-fun z$n66s251 () utt251)
(declare-fun z$n6s251 () utt251)
(declare-fun z$n72s251 () utt251)
(declare-fun z$n11983157094615116375939581176584992905283330352356145485516558024746991617s251 () utt251)
(declare-fun z$n30s251 () utt251)
(declare-fun z$n96s251 () utt251)
(declare-fun z$n24s251 () utt251)
(declare-fun z$n7s251 () utt251)
(declare-fun z$n713623846352979940529142984724747568191373313s251 () utt251)
(declare-fun z$n5s251 () utt251)
(declare-fun z$n79s251 () utt251)
(declare-fun z$n3s251 () utt251)
(declare-fun z$n124s251 () utt251)
(declare-fun z$n216s251 () utt251)
(declare-fun z$n14s251 () utt251)
(declare-fun z$n48s251 () utt251)
(declare-fun z$n204s251 () utt251)
(declare-fun z$n137438953664s251 () utt251)
(declare-fun z$n201s251 () utt251)
(declare-fun z$n78s251 () utt251)
(declare-fun z$n192s251 () utt251)
(declare-fun z$n120s251 () utt251)
(declare-fun z$n200s251 () utt251)
(declare-fun z$n100s251 () utt251)
(declare-fun z$n0s251 () utt251)
(declare-fun z$n1s251 () utt251)
(declare-fun z$n9s251 () utt251)
(declare-fun a$next () utt251)
(declare-fun a () utt251)
(declare-fun Add_251_251_251 (utt251 utt251) utt251)
(declare-fun b$next () utt251)
(declare-fun z$69 () utt251)
(declare-fun b () utt251)
(declare-fun z$11 () utt251)
(declare-fun z$13 () utt251)
(declare-fun z$41 () Bool)
(declare-fun Le_1_251_251 (utt251 utt251) Bool)
(declare-fun z$32 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$45 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$21 () Bool)
(declare-fun z$36 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$59 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$84 () Bool)
(declare-fun z$87 () Bool)
(declare-fun z$9 () Bool)
(declare-fun z$15 () Bool)
(declare-fun z$118 () Bool)
(declare-fun z$132 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$171 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$262 () Bool)
(declare-fun z$273 () Bool)
(declare-fun z$274 () Bool)
(declare-fun z$183 () Bool)
(declare-fun z$284 () Bool)
(declare-fun z$17 () Bool)
(declare-fun z$309 () Bool)
(declare-fun z$310 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$336 () Bool)
(declare-fun z$337 () Bool)
(declare-fun z$408 () Bool)
(declare-fun z$421 () Bool)
(declare-fun z$422 () Bool)
(declare-fun z$260 () Bool)
(declare-fun z$432 () Bool)
(declare-fun z$461 () Bool)
(declare-fun z$462 () Bool)
(declare-fun z$468 () Bool)
(declare-fun z$489 () Bool)
(declare-fun z$490 () Bool)
(declare-fun z$576 () Bool)
(declare-fun z$590 () Bool)
(declare-fun z$591 () Bool)
(declare-fun z$406 () Bool)
(declare-fun z$601 () Bool)
(declare-fun z$632 () Bool)
(declare-fun z$633 () Bool)
(declare-fun z$639 () Bool)
(declare-fun z$658 () Bool)
(declare-fun z$659 () Bool)
(declare-fun z$738 () Bool)
(declare-fun z$753 () Bool)
(declare-fun z$754 () Bool)
(declare-fun z$574 () Bool)
(declare-fun z$764 () Bool)
(declare-fun z$797 () Bool)
(declare-fun z$798 () Bool)
(declare-fun z$804 () Bool)
(declare-fun z$824 () Bool)
(declare-fun z$825 () Bool)
(declare-fun z$904 () Bool)
(declare-fun z$920 () Bool)
(declare-fun z$921 () Bool)
(declare-fun z$736 () Bool)
(declare-fun z$931 () Bool)
(declare-fun z$965 () Bool)
(declare-fun z$966 () Bool)
(declare-fun z$972 () Bool)
(declare-fun z$992 () Bool)
(declare-fun z$993 () Bool)
(declare-fun z$1094 () Bool)
(declare-fun z$1111 () Bool)
(declare-fun z$1112 () Bool)
(declare-fun z$1161 () Bool)
(declare-fun z$58 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$68 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$74 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun p$8 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$51 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$55 () Bool)
(declare-fun p$11 () Bool)
(declare-fun z$56 () Bool)
(declare-fun p$12 () Bool)
(declare-fun z$57 () Bool)
(declare-fun p$13 () Bool)
(declare-fun z$60 () Bool)
(declare-fun p$14 () Bool)
(declare-fun p$15 () Bool)
(declare-fun z$62 () Bool)
(declare-fun p$16 () Bool)
(declare-fun z$65 () Bool)
(declare-fun z$66 () Bool)
(declare-fun p$17 () Bool)
(declare-fun p$18 () Bool)
(declare-fun z$72 () Bool)
(declare-fun p$19 () Bool)
(declare-fun p$20 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$75 () Bool)
(declare-fun p$21 () Bool)
(declare-fun p$22 () Bool)
(declare-fun z$76 () Bool)
(declare-fun z$203 () Bool)
(declare-fun p$23 () Bool)
(declare-fun p$24 () Bool)
(declare-fun z$207 () Bool)
(declare-fun p$25 () Bool)
(declare-fun z$313 () Bool)
(declare-fun p$26 () Bool)
(declare-fun p$27 () Bool)
(declare-fun p$28 () Bool)
(declare-fun z$465 () Bool)
(declare-fun p$29 () Bool)
(declare-fun p$30 () Bool)
(declare-fun p$31 () Bool)
(declare-fun z$636 () Bool)
(declare-fun p$32 () Bool)
(declare-fun p$33 () Bool)
(declare-fun p$34 () Bool)
(declare-fun z$801 () Bool)
(declare-fun p$35 () Bool)
(declare-fun p$36 () Bool)
(declare-fun z$902 () Bool)
(declare-fun p$37 () Bool)
(declare-fun p$38 () Bool)
(declare-fun p$39 () Bool)
(declare-fun z$969 () Bool)
(declare-fun p$40 () Bool)
(declare-fun p$41 () Bool)
(declare-fun z$1122 () Bool)
(declare-fun p$42 () Bool)
(assert
 (and (distinct z$n9s251 z$n1s251 z$n0s251 z$n100s251 z$n200s251 z$n120s251 z$n192s251 z$n78s251 z$n201s251 z$n137438953664s251 z$n204s251 z$n48s251 z$n14s251 z$n216s251 z$n124s251 z$n3s251 z$n79s251 z$n5s251 z$n713623846352979940529142984724747568191373313s251 z$n7s251 z$n24s251 z$n96s251 z$n30s251 z$n11983157094615116375939581176584992905283330352356145485516558024746991617s251 z$n72s251 z$n6s251 z$n66s251 z$n122s251 z$n55s251 z$n4s251 z$n2s251 z$n80s251 z$n15s251 z$n713623846352979940529142984724747568191373310s251 z$n8s251 z$n125s251 z$n65s251 z$n28s251 z$n43s251 z$n213s251 z$n203s251 z$n13s251 z$n10s251 z$n11983157094615116375939581176584992905283330352356145485516558024746991618s251 z$n19s251 z$n11s251 z$n16s251 z$n123s251 z$n199s251 z$n21s251 z$n31s251 z$n34s251 z$n20s251 z$n32s251 z$n206s251 z$n23s251 z$n12s251 z$n197s251) true))
(assert
 (let (($x1825 (= a$next z$n1s251)))
 (= z$41 $x1825)))
(assert
 (let (($x398 (Le_1_251_251 a$next z$n200s251)))
 (= z$32 $x398)))
(assert
 (= z$42 (not z$32)))
(assert
 (= z$43 (and z$41 z$42)))
(assert
 (= z$45 (not z$43)))
(assert
 (let (($x170 (= a z$n1s251)))
 (= z$2 $x170)))
(assert
 (let (($x1398 (Le_1_251_251 a z$n200s251)))
 (= z$21 $x1398)))
(assert
 (= z$36 (not z$21)))
(assert
 (= z$40 (and z$2 z$36)))
(assert
 (= z$44 (not z$40)))
(assert
 (let ((?x489 (Add_251_251_251 b$next a$next)))
 (= z$69 ?x489)))
(assert
 (= z$71 (and (distinct a$next z$69) true)))
(assert
 (let (($x3758 (= b$next z$n0s251)))
 (= z$85 $x3758)))
(assert
 (= z$86 (and z$71 z$85)))
(assert
 (= z$88 (not z$86)))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (= z$11 ?x497)))
(assert
 (= z$59 (and (distinct a z$11) true)))
(assert
 (let (($x1455 (= b z$n0s251)))
 (= z$5 $x1455)))
(assert
 (= z$84 (and z$59 z$5)))
(assert
 (= z$87 (not z$84)))
(assert
 (let (($x6624 (Le_1_251_251 a z$n100s251)))
 (= z$9 $x6624)))
(assert
 (let ((?x10915 (ite z$9 z$11 a)))
 (= z$13 ?x10915)))
(assert
 (let (($x5296 (= a$next z$13)))
 (= z$15 $x5296)))
(assert
 (let (($x7135 (= a b)))
 (= z$118 $x7135)))
(assert
 (= z$132 (and z$42 z$15 z$118 z$9)))
(assert
 (= z$133 (not z$132)))
(assert
 (let (($x29057 (= b z$n1s251)))
 (= z$171 $x29057)))
(assert
 (= z$191 (and z$171 z$9 z$42 z$15)))
(assert
 (= z$192 (not z$191)))
(assert
 (let (($x5356 (= b z$n2s251)))
 (= z$262 $x5356)))
(assert
 (= z$273 (and z$262 z$9 z$42 z$15)))
(assert
 (= z$274 (not z$273)))
(assert
 (let (($x21186 (= a z$n2s251)))
 (= z$183 $x21186)))
(assert
 (= z$284 (and (distinct b$next z$n2s251) true)))
(assert
 (let (($x327 (= b$next a)))
 (= z$17 $x327)))
(assert
 (= z$309 (and z$183 z$284 z$17)))
(assert
 (= z$310 (not z$309)))
(assert
 (= z$319 (and (distinct a$next z$n2s251) true)))
(assert
 (= z$336 (and z$2 z$319 z$171 z$15)))
(assert
 (= z$337 (not z$336)))
(assert
 (let (($x23304 (= b z$n3s251)))
 (= z$408 $x23304)))
(assert
 (= z$421 (and z$408 z$9 z$42 z$15)))
(assert
 (= z$422 (not z$421)))
(assert
 (let (($x15133 (= a z$n3s251)))
 (= z$260 $x15133)))
(assert
 (= z$432 (and (distinct b$next z$n3s251) true)))
(assert
 (= z$461 (and z$260 z$432 z$17)))
(assert
 (= z$462 (not z$461)))
(assert
 (= z$468 (and (distinct a$next z$n3s251) true)))
(assert
 (= z$489 (and z$468 z$183 z$171 z$15)))
(assert
 (= z$490 (not z$489)))
(assert
 (let (($x2213 (= b z$n5s251)))
 (= z$576 $x2213)))
(assert
 (= z$590 (and z$576 z$9 z$42 z$15)))
(assert
 (= z$591 (not z$590)))
(assert
 (let (($x23597 (= a z$n5s251)))
 (= z$406 $x23597)))
(assert
 (= z$601 (and (distinct b$next z$n5s251) true)))
(assert
 (= z$632 (and z$406 z$601 z$17)))
(assert
 (= z$633 (not z$632)))
(assert
 (= z$639 (and (distinct a$next z$n5s251) true)))
(assert
 (= z$658 (and z$639 z$262 z$260 z$15)))
(assert
 (= z$659 (not z$658)))
(assert
 (let (($x37885 (= b z$n8s251)))
 (= z$738 $x37885)))
(assert
 (= z$753 (and z$738 z$9 z$42 z$15)))
(assert
 (= z$754 (not z$753)))
(assert
 (let (($x27298 (= a z$n8s251)))
 (= z$574 $x27298)))
(assert
 (= z$764 (and (distinct b$next z$n8s251) true)))
(assert
 (= z$797 (and z$574 z$764 z$17)))
(assert
 (= z$798 (not z$797)))
(assert
 (= z$804 (and (distinct a$next z$n8s251) true)))
(assert
 (= z$824 (and z$804 z$408 z$406 z$15)))
(assert
 (= z$825 (not z$824)))
(assert
 (let (($x16896 (= b z$n13s251)))
 (= z$904 $x16896)))
(assert
 (= z$920 (and z$904 z$9 z$42 z$15)))
(assert
 (= z$921 (not z$920)))
(assert
 (let (($x32702 (= a z$n13s251)))
 (= z$736 $x32702)))
(assert
 (= z$931 (and (distinct b$next z$n13s251) true)))
(assert
 (= z$965 (and z$736 z$931 z$17)))
(assert
 (= z$966 (not z$965)))
(assert
 (= z$972 (and (distinct a$next z$n13s251) true)))
(assert
 (= z$992 (and z$972 z$576 z$574 z$15)))
(assert
 (= z$993 (not z$992)))
(assert
 (let (($x11260 (= b z$n21s251)))
 (= z$1094 $x11260)))
(assert
 (= z$1111 (and z$1094 z$9 z$42 z$15)))
(assert
 (= z$1112 (not z$1111)))
(assert
 (let (($x601 (and z$45 z$44 z$88 z$87 z$133 z$192 z$274 z$310 z$337 z$422 z$462 z$490 z$591 z$633 z$659 z$754 z$798 z$825 z$921 z$966 z$993 z$1112 z$15 z$17)))
 (= z$1161 $x601)))
(assert
 z$1161)
(assert
 (let (($x5266 (= z$58 (and (distinct a b) true))))
 (=> p$0 $x5266)))
(assert
 (=> p$0 z$58))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (let (($x442 (= z$11 ?x497)))
 (=> p$1 $x442))))
(assert
 (let (($x29 (= z$59 (and (distinct a z$11) true))))
 (=> p$1 $x29)))
(assert
 (=> p$1 z$59))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (let (($x442 (= z$11 ?x497)))
 (=> p$2 $x442))))
(assert
 (let (($x23633 (= z$63 (and (distinct b z$11) true))))
 (=> p$2 $x23633)))
(assert
 (=> p$2 z$63))
(assert
 (let (($x1709 (= z$68 (and (distinct a$next b$next) true))))
 (=> p$3 $x1709)))
(assert
 (=> p$3 z$68))
(assert
 (let ((?x489 (Add_251_251_251 b$next a$next)))
 (let (($x747 (= z$69 ?x489)))
 (=> p$4 $x747))))
(assert
 (let (($x1419 (= z$71 (and (distinct a$next z$69) true))))
 (=> p$4 $x1419)))
(assert
 (=> p$4 z$71))
(assert
 (let ((?x489 (Add_251_251_251 b$next a$next)))
 (let (($x747 (= z$69 ?x489)))
 (=> p$5 $x747))))
(assert
 (let (($x4601 (= z$74 (and (distinct b$next z$69) true))))
 (=> p$5 $x4601)))
(assert
 (=> p$5 z$74))
(assert
 (let (($x6624 (Le_1_251_251 a z$n100s251)))
 (let (($x7055 (= z$9 $x6624)))
 (=> p$6 $x7055))))
(assert
 (=> p$6 z$9))
(assert
 (let (($x6624 (Le_1_251_251 a z$n100s251)))
 (let (($x7055 (= z$9 $x6624)))
 (=> p$7 $x7055))))
(assert
 (=> p$7 z$9))
(assert
 (let (($x1398 (Le_1_251_251 a z$n200s251)))
 (let (($x731 (= z$21 $x1398)))
 (=> p$8 $x731))))
(assert
 (=> p$8 z$21))
(assert
 (let (($x398 (Le_1_251_251 a$next z$n200s251)))
 (let (($x3794 (= z$32 $x398)))
 (=> p$9 $x3794))))
(assert
 (=> p$9 z$32))
(assert
 (let (($x12911 (= z$51 (and (distinct a z$n1s251) true))))
 (=> p$10 $x12911)))
(assert
 (=> p$10 z$51))
(assert
 (let (($x2016 (= z$55 (and (distinct a$next z$n100s251) true))))
 (=> p$11 $x2016)))
(assert
 (=> p$11 z$55))
(assert
 (let (($x4625 (= z$56 (and (distinct a$next z$n200s251) true))))
 (=> p$12 $x4625)))
(assert
 (=> p$12 z$56))
(assert
 (let (($x16566 (= z$57 (and (distinct a z$n100s251) true))))
 (=> p$13 $x16566)))
(assert
 (=> p$13 z$57))
(assert
 (let (($x6965 (= z$60 (and (distinct a z$n200s251) true))))
 (=> p$14 $x6965)))
(assert
 (=> p$14 z$60))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (let (($x442 (= z$11 ?x497)))
 (=> p$15 $x442))))
(assert
 (let (($x12217 (= z$62 (and (distinct z$11 z$n100s251) true))))
 (=> p$15 $x12217)))
(assert
 (=> p$15 z$62))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (let (($x442 (= z$11 ?x497)))
 (=> p$16 $x442))))
(assert
 (let (($x29212 (= z$65 (and (distinct z$11 z$n200s251) true))))
 (=> p$16 $x29212)))
(assert
 (=> p$16 z$65))
(assert
 (let (($x10899 (Le_1_251_251 a$next z$n100s251)))
 (let (($x10728 (= z$66 $x10899)))
 (=> p$17 $x10728))))
(assert
 (=> p$17 z$66))
(assert
 (let (($x10899 (Le_1_251_251 a$next z$n100s251)))
 (let (($x10728 (= z$66 $x10899)))
 (=> p$18 $x10728))))
(assert
 (=> p$18 z$66))
(assert
 (let (($x10720 (= z$72 (and (distinct b$next z$n100s251) true))))
 (=> p$19 $x10720)))
(assert
 (=> p$19 z$72))
(assert
 (let ((?x489 (Add_251_251_251 b$next a$next)))
 (let (($x747 (= z$69 ?x489)))
 (=> p$20 $x747))))
(assert
 (let (($x1585 (= z$73 (and (distinct z$69 z$n100s251) true))))
 (=> p$20 $x1585)))
(assert
 (=> p$20 z$73))
(assert
 (let (($x5288 (= z$75 (and (distinct b$next z$n200s251) true))))
 (=> p$21 $x5288)))
(assert
 (=> p$21 z$75))
(assert
 (let ((?x489 (Add_251_251_251 b$next a$next)))
 (let (($x747 (= z$69 ?x489)))
 (=> p$22 $x747))))
(assert
 (let (($x2028 (= z$76 (and (distinct z$69 z$n200s251) true))))
 (=> p$22 $x2028)))
(assert
 (=> p$22 z$76))
(assert
 (let (($x14436 (= z$203 (and (distinct b$next z$n1s251) true))))
 (=> p$23 $x14436)))
(assert
 (=> p$23 z$203))
(assert
 (let ((?x497 (Add_251_251_251 b a)))
 (let (($x442 (= z$11 ?x497)))
 (=> p$24 $x442))))
(assert
 (let (($x9096 (= z$207 (and (distinct z$11 z$n1s251) true))))
 (=> p$24 $x9096)))
(assert
 (=> p$24 z$207))
(assert
 (let (($x21634 (= z$284 (and (distinct b$next z$n2s251) true))))
 (=> p$25 $x21634)))
(assert
 (=> p$25 z$284))
(assert
 (let (($x2273 (= z$313 (and (distinct a z$n2s251) true))))
 (=> p$26 $x2273)))
(assert
 (=> p$26 z$313))
(assert
 (let (($x7296 (= z$319 (and (distinct a$next z$n2s251) true))))
 (=> p$27 $x7296)))
(assert
 (=> p$27 z$319))
(assert
 (let (($x31791 (= z$432 (and (distinct b$next z$n3s251) true))))
 (=> p$28 $x31791)))
(assert
 (=> p$28 z$432))
(assert
 (let (($x12368 (= z$465 (and (distinct a z$n3s251) true))))
 (=> p$29 $x12368)))
(assert
 (=> p$29 z$465))
(assert
 (let (($x22490 (= z$468 (and (distinct a$next z$n3s251) true))))
 (=> p$30 $x22490)))
(assert
 (=> p$30 z$468))
(assert
 (let (($x33390 (= z$601 (and (distinct b$next z$n5s251) true))))
 (=> p$31 $x33390)))
(assert
 (=> p$31 z$601))
(assert
 (let (($x10044 (= z$636 (and (distinct a z$n5s251) true))))
 (=> p$32 $x10044)))
(assert
 (=> p$32 z$636))
(assert
 (let (($x539 (= z$639 (and (distinct a$next z$n5s251) true))))
 (=> p$33 $x539)))
(assert
 (=> p$33 z$639))
(assert
 (let (($x38678 (= z$764 (and (distinct b$next z$n8s251) true))))
 (=> p$34 $x38678)))
(assert
 (=> p$34 z$764))
(assert
 (let (($x16929 (= z$801 (and (distinct a z$n8s251) true))))
 (=> p$35 $x16929)))
(assert
 (=> p$35 z$801))
(assert
 (let (($x3086 (= z$804 (and (distinct a$next z$n8s251) true))))
 (=> p$36 $x3086)))
(assert
 (=> p$36 z$804))
(assert
 (let (($x24302 (= a z$n21s251)))
 (let (($x17128 (= z$902 $x24302)))
 (=> p$37 $x17128))))
(assert
 (=> p$37 z$902))
(assert
 (let (($x16896 (= b z$n13s251)))
 (let (($x14072 (= z$904 $x16896)))
 (=> p$38 $x14072))))
(assert
 (=> p$38 z$904))
(assert
 (let (($x12594 (= z$931 (and (distinct b$next z$n13s251) true))))
 (=> p$39 $x12594)))
(assert
 (=> p$39 z$931))
(assert
 (let (($x6351 (= z$969 (and (distinct a z$n13s251) true))))
 (=> p$40 $x6351)))
(assert
 (=> p$40 z$969))
(assert
 (let (($x6055 (= z$972 (and (distinct a$next z$n13s251) true))))
 (=> p$41 $x6055)))
(assert
 (=> p$41 z$972))
(assert
 (let (($x28765 (= z$1122 (and (distinct b$next z$n21s251) true))))
 (=> p$42 $x28765)))
(assert
 (=> p$42 z$1122))
(check-sat)
(assert p$42)
(set-info :status sat)
(check-sat)
(exit)
