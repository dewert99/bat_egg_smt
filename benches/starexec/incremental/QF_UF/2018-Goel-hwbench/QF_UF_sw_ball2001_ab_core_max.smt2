(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sw_ball2001
query-maker: "Z3"
query-time: 2.929000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt3 0)
(declare-fun z$n2s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun Z () utt3)
(declare-fun Y () utt3)
(declare-fun X () utt3)
(declare-fun z$42 () utt3)
(declare-fun z$44 () utt3)
(declare-fun z$46 () utt3)
(declare-fun z$48 () utt3)
(declare-fun z$50 () utt3)
(declare-fun Z$next () utt3)
(declare-fun Y$next () utt3)
(declare-fun W () utt3)
(declare-fun Add_3_3_3 (utt3 utt3) utt3)
(declare-fun z$28 () utt3)
(declare-fun z$30 () utt3)
(declare-fun z$32 () utt3)
(declare-fun z$34 () utt3)
(declare-fun z$36 () utt3)
(declare-fun X$next () utt3)
(declare-fun z$392 () utt3)
(declare-fun z$99 () Bool)
(declare-fun LoneHot () Bool)
(declare-fun L6 () Bool)
(declare-fun z$354 () Bool)
(declare-fun z$355 () Bool)
(declare-fun L1 () Bool)
(declare-fun z$2 () Bool)
(declare-fun L2 () Bool)
(declare-fun z$4 () Bool)
(declare-fun L3 () Bool)
(declare-fun z$6 () Bool)
(declare-fun L4 () Bool)
(declare-fun z$8 () Bool)
(declare-fun L5 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$12 () Bool)
(declare-fun L7 () Bool)
(declare-fun z$14 () Bool)
(declare-fun L8 () Bool)
(declare-fun z$16 () Bool)
(declare-fun L0 () Bool)
(declare-fun z$18 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$343 () Bool)
(declare-fun z$346 () Bool)
(declare-fun z$347 () Bool)
(declare-fun prop () Bool)
(declare-fun z$239 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$92 () Bool)
(declare-fun z$93 () Bool)
(declare-fun z$95 () Bool)
(declare-fun L6$next () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$117 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$121 () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$129 () Bool)
(declare-fun z$131 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$134 () Bool)
(declare-fun z$136 () Bool)
(declare-fun z$138 () Bool)
(declare-fun z$140 () Bool)
(declare-fun z$142 () Bool)
(declare-fun z$144 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$154 () Bool)
(declare-fun z$156 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$166 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$170 () Bool)
(declare-fun z$172 () Bool)
(declare-fun z$174 () Bool)
(declare-fun z$176 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$190 () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$194 () Bool)
(declare-fun z$196 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$206 () Bool)
(declare-fun z$208 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$214 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$218 () Bool)
(declare-fun z$220 () Bool)
(declare-fun z$222 () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$226 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$230 () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$234 () Bool)
(declare-fun LoneHot$next () Bool)
(declare-fun z$236 () Bool)
(declare-fun L7$next () Bool)
(declare-fun z$252 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$253 () Bool)
(declare-fun z$21 () Bool)
(declare-fun z$25 () Bool)
(declare-fun z$38 () Bool)
(declare-fun z$57 () Bool)
(declare-fun L0$next () Bool)
(declare-fun z$59 () Bool)
(declare-fun z$61 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$65 () Bool)
(declare-fun L1$next () Bool)
(declare-fun z$67 () Bool)
(declare-fun z$69 () Bool)
(declare-fun L2$next () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$75 () Bool)
(declare-fun L3$next () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$79 () Bool)
(declare-fun L4$next () Bool)
(declare-fun z$81 () Bool)
(declare-fun z$83 () Bool)
(declare-fun z$84 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun L5$next () Bool)
(declare-fun z$90 () Bool)
(declare-fun z$100 () Bool)
(declare-fun z$102 () Bool)
(declare-fun z$104 () Bool)
(declare-fun z$106 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$109 () Bool)
(declare-fun z$111 () Bool)
(declare-fun z$113 () Bool)
(declare-fun L8$next () Bool)
(declare-fun z$115 () Bool)
(declare-fun z$386 () Bool)
(declare-fun z$427 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$283 () Bool)
(declare-fun z$394 () Bool)
(declare-fun z$428 () Bool)
(declare-fun z$432 () Bool)
(declare-fun z$452 () Bool)
(declare-fun z$453 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$284 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$285 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$260 () Bool)
(declare-fun p$6 () Bool)
(declare-fun z$261 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$262 () Bool)
(declare-fun p$8 () Bool)
(declare-fun z$263 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$264 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$266 () Bool)
(declare-fun p$11 () Bool)
(declare-fun z$268 () Bool)
(declare-fun p$12 () Bool)
(declare-fun z$270 () Bool)
(declare-fun p$13 () Bool)
(assert
 (and (distinct z$n0s3 z$n1s3 z$n3s3 z$n2s3) true))
(assert
 (= z$99 (and (distinct Z z$n0s3) true)))
(assert
 (= z$354 (and L6 LoneHot z$99)))
(assert
 (= z$355 (not z$354)))
(assert
 z$355)
(assert
 (let (($x52 (not L1)))
 (= z$2 $x52)))
(assert
 (let (($x56 (not L2)))
 (= z$4 $x56)))
(assert
 (let (($x60 (not L3)))
 (= z$6 $x60)))
(assert
 (let (($x64 (not L4)))
 (= z$8 $x64)))
(assert
 (let (($x68 (not L5)))
 (= z$10 $x68)))
(assert
 (let (($x72 (not L6)))
 (= z$12 $x72)))
(assert
 (= z$14 (not L7)))
(assert
 (let (($x76 (not L8)))
 (= z$16 $x76)))
(assert
 (let (($x490 (and L0 z$2 z$4 z$6 z$8 z$10 z$12 z$14 z$16 LoneHot)))
 (= z$18 $x490)))
(assert
 (= z$331 (not z$18)))
(assert
 (= z$343 (and z$99 z$8)))
(assert
 (= z$346 (and z$331 z$343)))
(assert
 (= z$347 (not z$346)))
(assert
 z$347)
(assert
 (= z$239 (= prop z$14)))
(assert
 z$239)
(assert
 prop)
(assert
 (= z$40 (and (distinct X Y) true)))
(assert
 (let ((?x90 (ite z$40 z$n0s3 Z)))
 (= z$42 ?x90)))
(assert
 (let ((?x94 (ite L5 z$42 Z)))
 (= z$44 ?x94)))
(assert
 (let ((?x98 (ite L3 z$n1s3 z$44)))
 (= z$46 ?x98)))
(assert
 (let ((?x102 (ite L0 z$n0s3 z$46)))
 (= z$48 ?x102)))
(assert
 (let ((?x106 (ite LoneHot z$48 Z)))
 (= z$50 ?x106)))
(assert
 (let (($x110 (= Z$next z$50)))
 (= z$52 $x110)))
(assert
 z$52)
(assert
 (let (($x114 (= X Y)))
 (= z$92 $x114)))
(assert
 (= z$93 (and L5 z$92)))
(assert
 (let (($x121 (ite LoneHot z$93 L6)))
 (= z$95 $x121)))
(assert
 (= z$97 (= L6$next z$95)))
(assert
 z$97)
(assert
 (= z$117 (and L0 z$2)))
(assert
 (= z$119 (and z$117 z$4)))
(assert
 (= z$121 (and z$119 z$6)))
(assert
 (= z$123 (and z$121 z$8)))
(assert
 (= z$125 (and z$123 z$10)))
(assert
 (= z$127 (and z$125 z$12)))
(assert
 (= z$129 (and z$127 z$14)))
(assert
 (= z$131 (and z$129 z$16)))
(assert
 (let (($x161 (not L0)))
 (= z$133 $x161)))
(assert
 (= z$134 (and z$133 L1)))
(assert
 (= z$136 (and z$134 z$4)))
(assert
 (= z$138 (and z$136 z$6)))
(assert
 (= z$140 (and z$138 z$8)))
(assert
 (= z$142 (and z$140 z$10)))
(assert
 (= z$144 (and z$142 z$12)))
(assert
 (= z$146 (and z$144 z$14)))
(assert
 (= z$148 (and z$146 z$16)))
(assert
 (let (($x196 (or z$131 z$148)))
 (= z$150 $x196)))
(assert
 (= z$152 (and z$133 z$2)))
(assert
 (= z$154 (and z$152 L2)))
(assert
 (= z$156 (and z$154 z$6)))
(assert
 (= z$158 (and z$156 z$8)))
(assert
 (= z$160 (and z$158 z$10)))
(assert
 (= z$162 (and z$160 z$12)))
(assert
 (= z$164 (and z$162 z$14)))
(assert
 (= z$166 (and z$164 z$16)))
(assert
 (let (($x232 (or z$150 z$166)))
 (= z$168 $x232)))
(assert
 (= z$170 (and z$152 z$4)))
(assert
 (= z$172 (and z$170 L3)))
(assert
 (= z$174 (and z$172 z$8)))
(assert
 (= z$176 (and z$174 z$10)))
(assert
 (= z$178 (and z$176 z$12)))
(assert
 (= z$180 (and z$178 z$14)))
(assert
 (= z$182 (and z$180 z$16)))
(assert
 (let (($x264 (or z$168 z$182)))
 (= z$184 $x264)))
(assert
 (= z$186 (and z$170 z$6)))
(assert
 (= z$188 (and z$186 L4)))
(assert
 (= z$190 (and z$188 z$10)))
(assert
 (= z$192 (and z$190 z$12)))
(assert
 (= z$194 (and z$192 z$14)))
(assert
 (= z$196 (and z$194 z$16)))
(assert
 (let (($x292 (or z$184 z$196)))
 (= z$198 $x292)))
(assert
 (= z$200 (and z$186 z$8)))
(assert
 (= z$202 (and z$200 L5)))
(assert
 (= z$204 (and z$202 z$12)))
(assert
 (= z$206 (and z$204 z$14)))
(assert
 (= z$208 (and z$206 z$16)))
(assert
 (let (($x316 (or z$198 z$208)))
 (= z$210 $x316)))
(assert
 (= z$212 (and z$200 z$10)))
(assert
 (= z$214 (and z$212 L6)))
(assert
 (= z$216 (and z$214 z$14)))
(assert
 (= z$218 (and z$216 z$16)))
(assert
 (let (($x336 (or z$210 z$218)))
 (= z$220 $x336)))
(assert
 (= z$222 (and z$212 z$12)))
(assert
 (= z$224 (and z$222 L7)))
(assert
 (= z$226 (and z$224 z$16)))
(assert
 (= z$228 (or z$220 z$226)))
(assert
 (= z$230 (and z$222 z$14)))
(assert
 (= z$232 (and z$230 L8)))
(assert
 (let (($x364 (or z$228 z$232)))
 (= z$234 $x364)))
(assert
 (= z$236 (= LoneHot$next z$234)))
(assert
 z$236)
(assert
 (= z$252 (not L7$next)))
(assert
 (= z$253 (= prop$next z$252)))
(assert
 z$253)
(assert
 (let (($x670 (= Y$next Y)))
 (= z$21 $x670)))
(assert
 z$21)
(assert
 (= z$25 (and (distinct W z$n0s3) true)))
(assert
 (let ((?x384 (Add_3_3_3 X z$n1s3)))
 (= z$28 ?x384)))
(assert
 (let ((?x664 (ite z$25 z$28 X)))
 (= z$30 ?x664)))
(assert
 (let ((?x661 (ite L2 z$30 X)))
 (= z$32 ?x661)))
(assert
 (let ((?x656 (ite L1 Y z$32)))
 (= z$34 ?x656)))
(assert
 (let ((?x652 (ite LoneHot z$34 X)))
 (= z$36 ?x652)))
(assert
 (let (($x648 (= X$next z$36)))
 (= z$38 $x648)))
(assert
 z$38)
(assert
 (= z$57 (ite LoneHot false L0)))
(assert
 (= z$59 (= L0$next z$57)))
(assert
 z$59)
(assert
 (= z$61 (and L5 z$40)))
(assert
 (let (($x633 (or L0 z$61)))
 (= z$63 $x633)))
(assert
 (let (($x629 (ite LoneHot z$63 L1)))
 (= z$65 $x629)))
(assert
 (= z$67 (= L1$next z$65)))
(assert
 z$67)
(assert
 (let (($x621 (ite LoneHot L1 L2)))
 (= z$69 $x621)))
(assert
 (= z$71 (= L2$next z$69)))
(assert
 z$71)
(assert
 (= z$73 (and L2 z$25)))
(assert
 (let (($x609 (ite LoneHot z$73 L3)))
 (= z$75 $x609)))
(assert
 (= z$77 (= L3$next z$75)))
(assert
 z$77)
(assert
 (let (($x602 (ite LoneHot L3 L4)))
 (= z$79 $x602)))
(assert
 (= z$81 (= L4$next z$79)))
(assert
 z$81)
(assert
 (let (($x477 (= W z$n0s3)))
 (= z$83 $x477)))
(assert
 (= z$84 (and L2 z$83)))
(assert
 (let (($x592 (or L4 z$84)))
 (= z$86 $x592)))
(assert
 (let (($x588 (ite LoneHot z$86 L5)))
 (= z$88 $x588)))
(assert
 (= z$90 (= L5$next z$88)))
(assert
 z$90)
(assert
 (= z$100 (and L6 z$99)))
(assert
 (= z$102 (or L7 z$100)))
(assert
 (= z$104 (ite LoneHot z$102 L7)))
(assert
 (= z$106 (= L7$next z$104)))
(assert
 z$106)
(assert
 (let (($x566 (= Z z$n0s3)))
 (= z$108 $x566)))
(assert
 (= z$109 (and L6 z$108)))
(assert
 (let (($x557 (or L8 z$109)))
 (= z$111 $x557)))
(assert
 (let (($x553 (ite LoneHot z$111 L8)))
 (= z$113 $x553)))
(assert
 (= z$115 (= L8$next z$113)))
(assert
 z$115)
(assert
 (let (($x1936 (= z$28 Y)))
 (= z$386 $x1936)))
(assert
 (= z$427 (and z$92 z$386)))
(assert
 (= z$429 (not z$427)))
(assert
 z$429)
(assert
 (let (($x491 (= X$next Y$next)))
 (= z$283 $x491)))
(assert
 (let ((?x915 (Add_3_3_3 X$next z$n1s3)))
 (= z$392 ?x915)))
(assert
 (let (($x893 (= z$392 Y$next)))
 (= z$394 $x893)))
(assert
 (= z$428 (and z$283 z$394)))
(assert
 (= z$432 (not z$428)))
(assert
 z$432)
(assert
 (= z$452 (and L4 LoneHot z$92)))
(assert
 (= z$453 (not z$452)))
(assert
 z$453)
(assert
 (=> p$0 L5$next))
(assert
 (=> p$1 LoneHot$next))
(assert
 (let (($x42 (= z$252 (not L7$next))))
 (=> p$2 $x42)))
(assert
 (=> p$2 z$252))
(assert
 (let (($x491 (= X$next Y$next)))
 (let (($x536 (= z$283 $x491)))
 (=> p$3 $x536))))
(assert
 (=> p$3 z$283))
(assert
 (=> p$4 (= z$284 (and (distinct Y$next z$n0s3) true))))
(assert
 (=> p$4 z$284))
(assert
 (=> p$5 (= z$285 (and (distinct Y$next Z$next) true))))
(assert
 (=> p$5 z$285))
(assert
 (=> p$6 (= z$260 (not L0$next))))
(assert
 (=> p$6 z$260))
(assert
 (=> p$7 (= z$261 (not L1$next))))
(assert
 (=> p$7 z$261))
(assert
 (=> p$8 (= z$262 (not L2$next))))
(assert
 (=> p$8 z$262))
(assert
 (=> p$9 (= z$263 (not L3$next))))
(assert
 (=> p$9 z$263))
(assert
 (=> p$10 (= z$264 (not L4$next))))
(assert
 (=> p$10 z$264))
(assert
 (=> p$11 (= z$266 (not L6$next))))
(assert
 (=> p$11 z$266))
(assert
 (=> p$12 (= z$268 (not L8$next))))
(assert
 (=> p$12 z$268))
(assert
 (=> p$13 (= z$270 (and (distinct Z$next z$n0s3) true))))
(assert
 (=> p$13 z$270))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(assert p$5)
(assert p$6)
(assert p$7)
(assert p$8)
(assert p$9)
(assert p$10)
(assert p$11)
(assert p$12)
(assert p$13)
(set-info :status unsat)
(check-sat)
(exit)
