(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sw_loop
query-maker: "Z3"
query-time: 3.067000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt3 0)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n4s3 () utt3)
(declare-fun z$n5s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n7s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun X () utt3)
(declare-fun Add_3_3_3 (utt3 utt3) utt3)
(declare-fun z$23 () utt3)
(declare-fun z$25 () utt3)
(declare-fun z$27 () utt3)
(declare-fun z$29 () utt3)
(declare-fun X$next () utt3)
(declare-fun z$287 () utt3)
(declare-fun Le_1_3_3 (utt3 utt3) Bool)
(declare-fun z$20 () Bool)
(declare-fun z$183 () Bool)
(declare-fun LoneHot () Bool)
(declare-fun L4 () Bool)
(declare-fun z$238 () Bool)
(declare-fun z$239 () Bool)
(declare-fun L1 () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$248 () Bool)
(declare-fun L2 () Bool)
(declare-fun z$4 () Bool)
(declare-fun z$74 () Bool)
(declare-fun z$265 () Bool)
(declare-fun z$267 () Bool)
(declare-fun L3 () Bool)
(declare-fun z$6 () Bool)
(declare-fun z$395 () Bool)
(declare-fun z$397 () Bool)
(declare-fun z$401 () Bool)
(declare-fun z$403 () Bool)
(declare-fun z$2 () Bool)
(declare-fun L5 () Bool)
(declare-fun z$10 () Bool)
(declare-fun L0 () Bool)
(declare-fun z$99 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$413 () Bool)
(declare-fun z$414 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$430 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$39 () Bool)
(declare-fun z$59 () Bool)
(declare-fun z$455 () Bool)
(declare-fun z$456 () Bool)
(declare-fun z$284 () Bool)
(declare-fun z$465 () Bool)
(declare-fun z$466 () Bool)
(declare-fun z$473 () Bool)
(declare-fun z$474 () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$481 () Bool)
(declare-fun z$482 () Bool)
(declare-fun z$498 () Bool)
(declare-fun z$499 () Bool)
(declare-fun z$506 () Bool)
(declare-fun z$507 () Bool)
(declare-fun L6 () Bool)
(declare-fun z$12 () Bool)
(declare-fun prop () Bool)
(declare-fun z$167 () Bool)
(declare-fun z$31 () Bool)
(declare-fun z$34 () Bool)
(declare-fun L0$next () Bool)
(declare-fun z$36 () Bool)
(declare-fun z$41 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$45 () Bool)
(declare-fun L1$next () Bool)
(declare-fun z$47 () Bool)
(declare-fun z$49 () Bool)
(declare-fun z$51 () Bool)
(declare-fun L2$next () Bool)
(declare-fun z$53 () Bool)
(declare-fun z$55 () Bool)
(declare-fun L3$next () Bool)
(declare-fun z$57 () Bool)
(declare-fun z$60 () Bool)
(declare-fun z$62 () Bool)
(declare-fun L4$next () Bool)
(declare-fun z$64 () Bool)
(declare-fun z$66 () Bool)
(declare-fun z$68 () Bool)
(declare-fun z$70 () Bool)
(declare-fun L5$next () Bool)
(declare-fun z$72 () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$79 () Bool)
(declare-fun z$81 () Bool)
(declare-fun z$83 () Bool)
(declare-fun L6$next () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$87 () Bool)
(declare-fun z$89 () Bool)
(declare-fun z$91 () Bool)
(declare-fun z$93 () Bool)
(declare-fun z$95 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$100 () Bool)
(declare-fun z$102 () Bool)
(declare-fun z$104 () Bool)
(declare-fun z$106 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$110 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$118 () Bool)
(declare-fun z$120 () Bool)
(declare-fun z$122 () Bool)
(declare-fun z$124 () Bool)
(declare-fun z$126 () Bool)
(declare-fun z$128 () Bool)
(declare-fun z$130 () Bool)
(declare-fun z$132 () Bool)
(declare-fun z$134 () Bool)
(declare-fun z$136 () Bool)
(declare-fun z$138 () Bool)
(declare-fun z$140 () Bool)
(declare-fun z$142 () Bool)
(declare-fun z$144 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$148 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$154 () Bool)
(declare-fun z$156 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun LoneHot$next () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$176 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$177 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$211 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$192 () Bool)
(declare-fun z$193 () Bool)
(declare-fun z$196 () Bool)
(declare-fun z$212 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$255 () Bool)
(declare-fun z$258 () Bool)
(declare-fun z$289 () Bool)
(declare-fun z$306 () Bool)
(declare-fun z$308 () Bool)
(declare-fun z$305 () Bool)
(declare-fun z$307 () Bool)
(declare-fun z$333 () Bool)
(declare-fun z$334 () Bool)
(declare-fun z$336 () Bool)
(declare-fun z$16 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$335 () Bool)
(declare-fun z$562 () Bool)
(declare-fun z$563 () Bool)
(declare-fun z$536 () Bool)
(declare-fun z$594 () Bool)
(declare-fun z$596 () Bool)
(declare-fun z$538 () Bool)
(declare-fun z$595 () Bool)
(declare-fun z$603 () Bool)
(declare-fun z$285 () Bool)
(declare-fun z$637 () Bool)
(declare-fun z$638 () Bool)
(declare-fun z$641 () Bool)
(declare-fun z$187 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$188 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$290 () Bool)
(declare-fun p$3 () Bool)
(assert
 (and (distinct z$n0s3 z$n7s3 z$n3s3 z$n5s3 z$n4s3 z$n1s3) true))
(assert
 (let (($x82 (Le_1_3_3 X z$n7s3)))
 (= z$20 $x82)))
(assert
 (let (($x325 (not z$20)))
 (= z$183 $x325)))
(assert
 (= z$238 (and L4 LoneHot z$183)))
(assert
 (= z$239 (not z$238)))
(assert
 (= z$247 (and L1 LoneHot z$183)))
(assert
 (= z$248 (not z$247)))
(assert
 (let (($x58 (not L2)))
 (= z$4 $x58)))
(assert
 (let (($x325 (not z$20)))
 (= z$74 $x325)))
(assert
 (= z$265 (and z$4 z$74)))
(assert
 (= z$267 (not z$265)))
(assert
 (let (($x62 (not L3)))
 (= z$6 $x62)))
(assert
 (= z$395 (and z$6 z$74)))
(assert
 (= z$397 (not z$395)))
(assert
 (= z$401 (and z$4 LoneHot z$74)))
(assert
 (= z$403 (not z$401)))
(assert
 (let (($x54 (not L1)))
 (= z$2 $x54)))
(assert
 (let (($x70 (not L5)))
 (= z$10 $x70)))
(assert
 (let (($x149 (not L0)))
 (= z$99 $x149)))
(assert
 (let (($x2146 (not LoneHot)))
 (= z$168 $x2146)))
(assert
 (= z$413 (and z$2 z$4 z$6 L4 z$10 z$99 z$168)))
(assert
 (= z$414 (not z$413)))
(assert
 (= z$429 (and z$4 z$6 z$74)))
(assert
 (= z$430 (not z$429)))
(assert
 (let (($x66 (not L4)))
 (= z$8 $x66)))
(assert
 (let (($x106 (Le_1_3_3 X z$n5s3)))
 (= z$39 $x106)))
(assert
 (let (($x110 (not z$39)))
 (= z$59 $x110)))
(assert
 (= z$455 (and z$4 z$8 z$59 z$74)))
(assert
 (= z$456 (not z$455)))
(assert
 (let ((?x86 (Add_3_3_3 X z$n3s3)))
 (= z$23 ?x86)))
(assert
 (let (($x780 (= z$23 z$n7s3)))
 (= z$284 $x780)))
(assert
 (= z$465 (and z$4 z$6 z$284)))
(assert
 (= z$466 (not z$465)))
(assert
 (= z$473 (and z$2 z$6 z$74)))
(assert
 (= z$474 (not z$473)))
(assert
 (let (($x110 (not z$39)))
 (= z$186 $x110)))
(assert
 (= z$481 (and z$4 z$8 z$74 z$186)))
(assert
 (= z$482 (not z$481)))
(assert
 (= z$498 (and z$2 z$4 z$8 z$74)))
(assert
 (= z$499 (not z$498)))
(assert
 (= z$506 (and L3 LoneHot z$74)))
(assert
 (= z$507 (not z$506)))
(assert
 (let (($x35 (not L6)))
 (= z$12 $x35)))
(assert
 (= z$167 (= prop z$12)))
(assert
 (let ((?x90 (ite z$20 z$23 X)))
 (= z$25 ?x90)))
(assert
 (let ((?x94 (ite L1 z$25 X)))
 (= z$27 ?x94)))
(assert
 (let ((?x98 (ite LoneHot z$27 X)))
 (= z$29 ?x98)))
(assert
 (let (($x102 (= X$next z$29)))
 (= z$31 $x102)))
(assert
 (= z$34 (ite LoneHot false L0)))
(assert
 (= z$36 (= L0$next z$34)))
(assert
 (= z$41 (and L3 z$39)))
(assert
 (let (($x324 (or L0 z$41)))
 (= z$43 $x324)))
(assert
 (let (($x493 (ite LoneHot z$43 L1)))
 (= z$45 $x493)))
(assert
 (= z$47 (= L1$next z$45)))
(assert
 (= z$49 (and L1 z$20)))
(assert
 (let (($x674 (ite LoneHot z$49 L2)))
 (= z$51 $x674)))
(assert
 (= z$53 (= L2$next z$51)))
(assert
 (let (($x670 (ite LoneHot L2 L3)))
 (= z$55 $x670)))
(assert
 (= z$57 (= L3$next z$55)))
(assert
 (= z$60 (and L3 z$59)))
(assert
 (let (($x117 (ite LoneHot z$60 L4)))
 (= z$62 $x117)))
(assert
 (= z$64 (= L4$next z$62)))
(assert
 (= z$66 (and L4 z$20)))
(assert
 (let (($x664 (or L5 z$66)))
 (= z$68 $x664)))
(assert
 (let (($x661 (ite LoneHot z$68 L5)))
 (= z$70 $x661)))
(assert
 (= z$72 (= L5$next z$70)))
(assert
 (= z$75 (and L1 z$74)))
(assert
 (let (($x515 (or L6 z$75)))
 (= z$77 $x515)))
(assert
 (= z$79 (and L4 z$74)))
(assert
 (let (($x588 (or z$77 z$79)))
 (= z$81 $x588)))
(assert
 (let (($x603 (ite LoneHot z$81 L6)))
 (= z$83 $x603)))
(assert
 (= z$85 (= L6$next z$83)))
(assert
 (= z$87 (and L0 z$2)))
(assert
 (= z$89 (and z$87 z$4)))
(assert
 (= z$91 (and z$89 z$6)))
(assert
 (= z$93 (and z$91 z$8)))
(assert
 (= z$95 (and z$93 z$10)))
(assert
 (= z$97 (and z$95 z$12)))
(assert
 (= z$100 (and z$99 L1)))
(assert
 (= z$102 (and z$100 z$4)))
(assert
 (= z$104 (and z$102 z$6)))
(assert
 (= z$106 (and z$104 z$8)))
(assert
 (= z$108 (and z$106 z$10)))
(assert
 (= z$110 (and z$108 z$12)))
(assert
 (let (($x176 (or z$97 z$110)))
 (= z$112 $x176)))
(assert
 (= z$114 (and z$99 z$2)))
(assert
 (= z$116 (and z$114 L2)))
(assert
 (= z$118 (and z$116 z$6)))
(assert
 (= z$120 (and z$118 z$8)))
(assert
 (= z$122 (and z$120 z$10)))
(assert
 (= z$124 (and z$122 z$12)))
(assert
 (let (($x204 (or z$112 z$124)))
 (= z$126 $x204)))
(assert
 (= z$128 (and z$114 z$4)))
(assert
 (= z$130 (and z$128 L3)))
(assert
 (= z$132 (and z$130 z$8)))
(assert
 (= z$134 (and z$132 z$10)))
(assert
 (= z$136 (and z$134 z$12)))
(assert
 (let (($x228 (or z$126 z$136)))
 (= z$138 $x228)))
(assert
 (= z$140 (and z$128 z$6)))
(assert
 (= z$142 (and z$140 L4)))
(assert
 (= z$144 (and z$142 z$10)))
(assert
 (= z$146 (and z$144 z$12)))
(assert
 (let (($x248 (or z$138 z$146)))
 (= z$148 $x248)))
(assert
 (= z$150 (and z$140 z$8)))
(assert
 (= z$152 (and z$150 L5)))
(assert
 (= z$154 (and z$152 z$12)))
(assert
 (let (($x264 (or z$148 z$154)))
 (= z$156 $x264)))
(assert
 (= z$158 (and z$150 z$10)))
(assert
 (= z$160 (and z$158 L6)))
(assert
 (let (($x276 (or z$156 z$160)))
 (= z$162 $x276)))
(assert
 (= z$164 (= LoneHot$next z$162)))
(assert
 (= z$176 (not L6$next)))
(assert
 (= z$177 (= prop$next z$176)))
(assert
 (= z$191 (and (distinct X z$n7s3) true)))
(assert
 (= z$211 (and z$183 z$191)))
(assert
 (= z$213 (not z$211)))
(assert
 (let (($x287 (Le_1_3_3 X$next z$n7s3)))
 (= z$192 $x287)))
(assert
 (let (($x290 (not z$192)))
 (= z$193 $x290)))
(assert
 (= z$196 (and (distinct X$next z$n7s3) true)))
(assert
 (= z$212 (and z$193 z$196)))
(assert
 (= z$216 (not z$212)))
(assert
 (let (($x508 (Le_1_3_3 X$next z$n5s3)))
 (= z$255 $x508)))
(assert
 (let (($x649 (not z$255)))
 (= z$258 $x649)))
(assert
 (let ((?x1202 (Add_3_3_3 X$next z$n3s3)))
 (= z$287 ?x1202)))
(assert
 (let (($x1055 (= z$287 z$n7s3)))
 (= z$289 $x1055)))
(assert
 (= z$306 (and z$258 z$289)))
(assert
 (= z$308 (not z$306)))
(assert
 (= z$305 (and z$59 z$284)))
(assert
 (= z$307 (not z$305)))
(assert
 (let (($x1139 (= X$next z$n0s3)))
 (= z$333 $x1139)))
(assert
 (= z$334 (and z$333 z$289)))
(assert
 (= z$336 (not z$334)))
(assert
 (let (($x75 (= X z$n0s3)))
 (= z$16 $x75)))
(assert
 (= z$332 (and z$16 z$284)))
(assert
 (= z$335 (not z$332)))
(assert
 (= z$562 (and z$289 z$59 z$31)))
(assert
 (= z$563 (not z$562)))
(assert
 (= z$536 (and (distinct z$23 z$n3s3) true)))
(assert
 (= z$594 (and z$16 z$536)))
(assert
 (= z$596 (not z$594)))
(assert
 (= z$538 (and (distinct z$287 z$n3s3) true)))
(assert
 (= z$595 (and z$333 z$538)))
(assert
 (= z$603 (not z$595)))
(assert
 (= z$285 (and (distinct X z$n3s3) true)))
(assert
 (= z$637 (and z$4 z$284 z$285)))
(assert
 (= z$638 (not z$637)))
(assert
 (let (($x1828 (and z$239 z$248 z$267 z$397 z$403 z$414 z$430 z$456 z$466 z$474 z$482 z$499 z$507 z$167 prop z$31 z$36 z$47 z$53 z$57 z$64 z$72 z$85 z$164 z$177 z$213 z$216 z$308 z$307 z$336 z$335 z$563 z$596 z$603 z$638)))
 (= z$641 $x1828)))
(assert
 z$641)
(assert
 (=> p$0 (= z$187 (not L2$next))))
(assert
 (=> p$0 z$187))
(assert
 (=> p$1 (= z$188 (not L3$next))))
(assert
 (=> p$1 z$188))
(assert
 (let ((?x1202 (Add_3_3_3 X$next z$n3s3)))
 (let (($x1536 (= z$287 ?x1202)))
 (=> p$2 $x1536))))
(assert
 (let (($x1055 (= z$287 z$n7s3)))
 (let (($x1098 (= z$289 $x1055)))
 (=> p$2 $x1098))))
(assert
 (=> p$2 z$289))
(assert
 (=> p$3 (= z$290 (and (distinct X$next z$n3s3) true))))
(assert
 (=> p$3 z$290))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(set-info :status unsat)
(check-sat)
(exit)
