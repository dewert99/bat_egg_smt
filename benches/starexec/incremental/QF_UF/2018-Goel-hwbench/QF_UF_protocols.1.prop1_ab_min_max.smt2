(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: protocols.1.prop1
query-maker: "Z3"
query-time: 0.365000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt8 0)
(declare-sort utt32 0)
(declare-sort utt24 0)
(declare-fun z$n1s8 () utt8)
(declare-fun z$n0s8 () utt8)
(declare-fun z$n3s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun v_lost_channel_K () utt8)
(declare-fun v_lost_channel_L () utt8)
(declare-fun v_v_channel_K () utt8)
(declare-fun v_value_Consumer () utt8)
(declare-fun v_value_Receiver () utt8)
(declare-fun v_value_Sender () utt8)
(declare-fun z$52 () utt8)
(declare-fun v_v_channel_K$next () utt8)
(declare-fun z$84 () utt8)
(declare-fun v_value_Consumer$next () utt8)
(declare-fun z$97 () utt8)
(declare-fun v_value_Receiver$next () utt8)
(declare-fun Concat_32_8_24 (utt8 utt24) utt32)
(declare-fun z$n0s24 () utt24)
(declare-fun z$60 () utt32)
(declare-fun z$73 () utt32)
(declare-fun z$91 () utt8)
(declare-fun z$93 () utt8)
(declare-fun v_value_Sender$next () utt8)
(declare-fun a_consume0 () Bool)
(declare-fun z$1 () Bool)
(declare-fun a_consume1 () Bool)
(declare-fun z$3 () Bool)
(declare-fun a_dataOK () Bool)
(declare-fun z$5 () Bool)
(declare-fun a_data_lost () Bool)
(declare-fun z$7 () Bool)
(declare-fun a_got_msg_Consumer () Bool)
(declare-fun z$9 () Bool)
(declare-fun a_got_msg_Receiver () Bool)
(declare-fun z$11 () Bool)
(declare-fun a_produce0 () Bool)
(declare-fun z$13 () Bool)
(declare-fun a_produce1 () Bool)
(declare-fun z$15 () Bool)
(declare-fun a_ready_Consumer () Bool)
(declare-fun z$17 () Bool)
(declare-fun a_ready_Producer () Bool)
(declare-fun z$19 () Bool)
(declare-fun a_ready_Sender () Bool)
(declare-fun z$21 () Bool)
(declare-fun a_ready_channel_K () Bool)
(declare-fun z$23 () Bool)
(declare-fun a_ready_channel_L () Bool)
(declare-fun z$25 () Bool)
(declare-fun a_sending () Bool)
(declare-fun z$27 () Bool)
(declare-fun a_tr_channel_K () Bool)
(declare-fun z$29 () Bool)
(declare-fun a_tr_channel_L () Bool)
(declare-fun z$31 () Bool)
(declare-fun a_wait_msg () Bool)
(declare-fun z$33 () Bool)
(declare-fun dve_invalid () Bool)
(declare-fun z$35 () Bool)
(declare-fun z$38 () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$46 () Bool)
(declare-fun z$48 () Bool)
(declare-fun z$733 () Bool)
(declare-fun z$735 () Bool)
(declare-fun z$736 () Bool)
(declare-fun z$738 () Bool)
(declare-fun prop () Bool)
(declare-fun z$739 () Bool)
(declare-fun f08 () Bool)
(declare-fun z$54 () Bool)
(declare-fun f12 () Bool)
(declare-fun z$86 () Bool)
(declare-fun f09 () Bool)
(declare-fun z$99 () Bool)
(declare-fun f00 () Bool)
(declare-fun z$101 () Bool)
(declare-fun z$102 () Bool)
(declare-fun z$104 () Bool)
(declare-fun z$105 () Bool)
(declare-fun z$106 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$109 () Bool)
(declare-fun z$110 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$113 () Bool)
(declare-fun a_ready_channel_K$next () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$118 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$121 () Bool)
(declare-fun z$122 () Bool)
(declare-fun a_tr_channel_K$next () Bool)
(declare-fun z$124 () Bool)
(declare-fun a_data_lost$next () Bool)
(declare-fun z$126 () Bool)
(declare-fun f01 () Bool)
(declare-fun z$128 () Bool)
(declare-fun z$129 () Bool)
(declare-fun z$131 () Bool)
(declare-fun z$132 () Bool)
(declare-fun a_ready_channel_L$next () Bool)
(declare-fun z$133 () Bool)
(declare-fun GrEq_1_32_32 (utt32 utt32) Bool)
(declare-fun z$260 () Bool)
(declare-fun z$262 () Bool)
(declare-fun z$263 () Bool)
(declare-fun z$265 () Bool)
(declare-fun z$266 () Bool)
(declare-fun z$268 () Bool)
(declare-fun z$269 () Bool)
(declare-fun z$271 () Bool)
(declare-fun z$272 () Bool)
(declare-fun z$274 () Bool)
(declare-fun z$275 () Bool)
(declare-fun z$277 () Bool)
(declare-fun z$278 () Bool)
(declare-fun f02 () Bool)
(declare-fun z$280 () Bool)
(declare-fun z$282 () Bool)
(declare-fun z$283 () Bool)
(declare-fun f03 () Bool)
(declare-fun z$285 () Bool)
(declare-fun z$287 () Bool)
(declare-fun z$288 () Bool)
(declare-fun z$290 () Bool)
(declare-fun z$292 () Bool)
(declare-fun f04 () Bool)
(declare-fun z$293 () Bool)
(declare-fun z$295 () Bool)
(declare-fun z$296 () Bool)
(declare-fun z$298 () Bool)
(declare-fun z$299 () Bool)
(declare-fun z$301 () Bool)
(declare-fun f05 () Bool)
(declare-fun z$302 () Bool)
(declare-fun z$304 () Bool)
(declare-fun z$305 () Bool)
(declare-fun f06 () Bool)
(declare-fun z$307 () Bool)
(declare-fun z$309 () Bool)
(declare-fun z$310 () Bool)
(declare-fun f07 () Bool)
(declare-fun z$312 () Bool)
(declare-fun z$314 () Bool)
(declare-fun z$315 () Bool)
(declare-fun z$317 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$320 () Bool)
(declare-fun z$322 () Bool)
(declare-fun z$323 () Bool)
(declare-fun z$325 () Bool)
(declare-fun z$327 () Bool)
(declare-fun z$328 () Bool)
(declare-fun z$330 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$333 () Bool)
(declare-fun z$335 () Bool)
(declare-fun f10 () Bool)
(declare-fun z$336 () Bool)
(declare-fun z$338 () Bool)
(declare-fun z$339 () Bool)
(declare-fun z$341 () Bool)
(declare-fun z$343 () Bool)
(declare-fun f11 () Bool)
(declare-fun z$344 () Bool)
(declare-fun z$346 () Bool)
(declare-fun z$347 () Bool)
(declare-fun z$349 () Bool)
(declare-fun z$351 () Bool)
(declare-fun z$352 () Bool)
(declare-fun z$354 () Bool)
(declare-fun z$355 () Bool)
(declare-fun z$187 () Bool)
(declare-fun z$155 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$183 () Bool)
(declare-fun z$177 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$194 () Bool)
(declare-fun z$146 () Bool)
(declare-fun z$142 () Bool)
(declare-fun z$357 () Bool)
(declare-fun z$359 () Bool)
(declare-fun z$360 () Bool)
(declare-fun z$361 () Bool)
(declare-fun z$363 () Bool)
(declare-fun z$364 () Bool)
(declare-fun z$365 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$368 () Bool)
(declare-fun z$369 () Bool)
(declare-fun z$371 () Bool)
(declare-fun z$372 () Bool)
(declare-fun z$373 () Bool)
(declare-fun z$375 () Bool)
(declare-fun z$376 () Bool)
(declare-fun z$377 () Bool)
(declare-fun z$379 () Bool)
(declare-fun z$380 () Bool)
(declare-fun z$381 () Bool)
(declare-fun z$383 () Bool)
(declare-fun z$384 () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$387 () Bool)
(declare-fun z$388 () Bool)
(declare-fun z$389 () Bool)
(declare-fun z$391 () Bool)
(declare-fun z$392 () Bool)
(declare-fun z$393 () Bool)
(declare-fun z$395 () Bool)
(declare-fun z$396 () Bool)
(declare-fun z$397 () Bool)
(declare-fun z$399 () Bool)
(declare-fun z$400 () Bool)
(declare-fun z$401 () Bool)
(declare-fun z$403 () Bool)
(declare-fun z$404 () Bool)
(declare-fun z$406 () Bool)
(declare-fun z$408 () Bool)
(declare-fun z$409 () Bool)
(declare-fun z$411 () Bool)
(declare-fun z$412 () Bool)
(declare-fun z$414 () Bool)
(declare-fun z$415 () Bool)
(declare-fun z$416 () Bool)
(declare-fun z$418 () Bool)
(declare-fun z$419 () Bool)
(declare-fun z$421 () Bool)
(declare-fun z$422 () Bool)
(declare-fun z$423 () Bool)
(declare-fun z$425 () Bool)
(declare-fun z$426 () Bool)
(declare-fun z$428 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$430 () Bool)
(declare-fun z$432 () Bool)
(declare-fun z$433 () Bool)
(declare-fun z$435 () Bool)
(declare-fun z$436 () Bool)
(declare-fun z$437 () Bool)
(declare-fun z$439 () Bool)
(declare-fun z$440 () Bool)
(declare-fun z$442 () Bool)
(declare-fun z$443 () Bool)
(declare-fun z$444 () Bool)
(declare-fun z$446 () Bool)
(declare-fun z$447 () Bool)
(declare-fun z$449 () Bool)
(declare-fun z$450 () Bool)
(declare-fun z$451 () Bool)
(declare-fun z$453 () Bool)
(declare-fun z$454 () Bool)
(declare-fun z$456 () Bool)
(declare-fun z$457 () Bool)
(declare-fun z$458 () Bool)
(declare-fun z$460 () Bool)
(declare-fun z$461 () Bool)
(declare-fun z$463 () Bool)
(declare-fun z$464 () Bool)
(declare-fun z$465 () Bool)
(declare-fun z$467 () Bool)
(declare-fun z$468 () Bool)
(declare-fun z$470 () Bool)
(declare-fun z$471 () Bool)
(declare-fun z$472 () Bool)
(declare-fun z$474 () Bool)
(declare-fun z$475 () Bool)
(declare-fun z$477 () Bool)
(declare-fun z$478 () Bool)
(declare-fun z$479 () Bool)
(declare-fun z$481 () Bool)
(declare-fun z$482 () Bool)
(declare-fun z$484 () Bool)
(declare-fun z$485 () Bool)
(declare-fun z$486 () Bool)
(declare-fun z$488 () Bool)
(declare-fun z$490 () Bool)
(declare-fun z$491 () Bool)
(declare-fun z$493 () Bool)
(declare-fun z$494 () Bool)
(declare-fun z$496 () Bool)
(declare-fun z$497 () Bool)
(declare-fun z$499 () Bool)
(declare-fun z$500 () Bool)
(declare-fun z$501 () Bool)
(declare-fun z$502 () Bool)
(declare-fun z$504 () Bool)
(declare-fun z$505 () Bool)
(declare-fun z$507 () Bool)
(declare-fun z$509 () Bool)
(declare-fun z$510 () Bool)
(declare-fun z$512 () Bool)
(declare-fun z$513 () Bool)
(declare-fun z$515 () Bool)
(declare-fun z$516 () Bool)
(declare-fun z$518 () Bool)
(declare-fun z$519 () Bool)
(declare-fun z$520 () Bool)
(declare-fun z$522 () Bool)
(declare-fun z$523 () Bool)
(declare-fun z$525 () Bool)
(declare-fun z$526 () Bool)
(declare-fun z$528 () Bool)
(declare-fun z$530 () Bool)
(declare-fun z$531 () Bool)
(declare-fun z$533 () Bool)
(declare-fun z$534 () Bool)
(declare-fun z$536 () Bool)
(declare-fun z$537 () Bool)
(declare-fun z$539 () Bool)
(declare-fun z$540 () Bool)
(declare-fun z$541 () Bool)
(declare-fun z$543 () Bool)
(declare-fun z$544 () Bool)
(declare-fun z$546 () Bool)
(declare-fun z$547 () Bool)
(declare-fun z$549 () Bool)
(declare-fun z$551 () Bool)
(declare-fun z$552 () Bool)
(declare-fun z$554 () Bool)
(declare-fun z$555 () Bool)
(declare-fun z$557 () Bool)
(declare-fun z$558 () Bool)
(declare-fun z$560 () Bool)
(declare-fun z$561 () Bool)
(declare-fun z$562 () Bool)
(declare-fun z$563 () Bool)
(declare-fun z$565 () Bool)
(declare-fun z$566 () Bool)
(declare-fun z$568 () Bool)
(declare-fun z$569 () Bool)
(declare-fun z$571 () Bool)
(declare-fun z$572 () Bool)
(declare-fun z$573 () Bool)
(declare-fun z$575 () Bool)
(declare-fun z$576 () Bool)
(declare-fun z$578 () Bool)
(declare-fun z$579 () Bool)
(declare-fun z$581 () Bool)
(declare-fun z$583 () Bool)
(declare-fun z$584 () Bool)
(declare-fun z$586 () Bool)
(declare-fun z$588 () Bool)
(declare-fun z$589 () Bool)
(declare-fun z$591 () Bool)
(declare-fun z$593 () Bool)
(declare-fun z$594 () Bool)
(declare-fun z$596 () Bool)
(declare-fun z$598 () Bool)
(declare-fun z$599 () Bool)
(declare-fun z$601 () Bool)
(declare-fun z$603 () Bool)
(declare-fun z$605 () Bool)
(declare-fun z$606 () Bool)
(declare-fun z$607 () Bool)
(declare-fun z$609 () Bool)
(declare-fun z$610 () Bool)
(declare-fun z$612 () Bool)
(declare-fun z$613 () Bool)
(declare-fun z$615 () Bool)
(declare-fun z$616 () Bool)
(declare-fun z$617 () Bool)
(declare-fun z$618 () Bool)
(declare-fun z$620 () Bool)
(declare-fun z$621 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$623 () Bool)
(declare-fun z$625 () Bool)
(declare-fun z$626 () Bool)
(declare-fun z$627 () Bool)
(declare-fun z$629 () Bool)
(declare-fun z$630 () Bool)
(declare-fun z$632 () Bool)
(declare-fun z$633 () Bool)
(declare-fun z$635 () Bool)
(declare-fun z$636 () Bool)
(declare-fun z$637 () Bool)
(declare-fun z$639 () Bool)
(declare-fun z$640 () Bool)
(declare-fun z$642 () Bool)
(declare-fun z$643 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$165 () Bool)
(declare-fun z$143 () Bool)
(declare-fun z$147 () Bool)
(declare-fun z$149 () Bool)
(declare-fun z$151 () Bool)
(declare-fun z$153 () Bool)
(declare-fun z$154 () Bool)
(declare-fun z$156 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$645 () Bool)
(declare-fun z$647 () Bool)
(declare-fun z$169 () Bool)
(declare-fun z$171 () Bool)
(declare-fun z$172 () Bool)
(declare-fun z$648 () Bool)
(declare-fun z$159 () Bool)
(declare-fun z$649 () Bool)
(declare-fun z$651 () Bool)
(declare-fun z$652 () Bool)
(declare-fun z$654 () Bool)
(declare-fun z$655 () Bool)
(declare-fun z$657 () Bool)
(declare-fun z$658 () Bool)
(declare-fun z$659 () Bool)
(declare-fun z$661 () Bool)
(declare-fun z$662 () Bool)
(declare-fun z$663 () Bool)
(declare-fun z$665 () Bool)
(declare-fun z$666 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$181 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$186 () Bool)
(declare-fun z$188 () Bool)
(declare-fun z$195 () Bool)
(declare-fun z$199 () Bool)
(declare-fun z$201 () Bool)
(declare-fun z$202 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$668 () Bool)
(declare-fun z$670 () Bool)
(declare-fun z$207 () Bool)
(declare-fun z$209 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$190 () Bool)
(declare-fun z$671 () Bool)
(declare-fun z$672 () Bool)
(declare-fun z$674 () Bool)
(declare-fun z$675 () Bool)
(declare-fun z$677 () Bool)
(declare-fun z$678 () Bool)
(declare-fun z$680 () Bool)
(declare-fun z$681 () Bool)
(declare-fun z$214 () Bool)
(declare-fun z$216 () Bool)
(declare-fun z$217 () Bool)
(declare-fun z$682 () Bool)
(declare-fun z$683 () Bool)
(declare-fun z$684 () Bool)
(declare-fun z$686 () Bool)
(declare-fun z$687 () Bool)
(declare-fun z$689 () Bool)
(declare-fun z$690 () Bool)
(declare-fun z$692 () Bool)
(declare-fun z$693 () Bool)
(declare-fun z$694 () Bool)
(declare-fun z$696 () Bool)
(declare-fun z$697 () Bool)
(declare-fun z$698 () Bool)
(declare-fun z$700 () Bool)
(declare-fun z$701 () Bool)
(declare-fun z$221 () Bool)
(declare-fun z$223 () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$226 () Bool)
(declare-fun z$231 () Bool)
(declare-fun z$233 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$237 () Bool)
(declare-fun z$238 () Bool)
(declare-fun z$240 () Bool)
(declare-fun z$703 () Bool)
(declare-fun z$705 () Bool)
(declare-fun z$706 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$708 () Bool)
(declare-fun z$709 () Bool)
(declare-fun z$711 () Bool)
(declare-fun z$712 () Bool)
(declare-fun z$243 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$246 () Bool)
(declare-fun z$248 () Bool)
(declare-fun z$252 () Bool)
(declare-fun z$254 () Bool)
(declare-fun z$255 () Bool)
(declare-fun z$714 () Bool)
(declare-fun z$716 () Bool)
(declare-fun z$717 () Bool)
(declare-fun z$249 () Bool)
(declare-fun z$719 () Bool)
(declare-fun z$720 () Bool)
(declare-fun z$722 () Bool)
(declare-fun z$723 () Bool)
(declare-fun z$725 () Bool)
(declare-fun z$727 () Bool)
(declare-fun z$729 () Bool)
(declare-fun dve_invalid$next () Bool)
(declare-fun z$730 () Bool)
(declare-fun a_tr_channel_L$next () Bool)
(declare-fun z$137 () Bool)
(declare-fun a_dataOK$next () Bool)
(declare-fun z$139 () Bool)
(declare-fun a_ready_Producer$next () Bool)
(declare-fun z$160 () Bool)
(declare-fun a_produce0$next () Bool)
(declare-fun z$167 () Bool)
(declare-fun a_produce1$next () Bool)
(declare-fun z$174 () Bool)
(declare-fun a_ready_Consumer$next () Bool)
(declare-fun z$191 () Bool)
(declare-fun a_got_msg_Consumer$next () Bool)
(declare-fun z$205 () Bool)
(declare-fun a_consume0$next () Bool)
(declare-fun z$212 () Bool)
(declare-fun a_consume1$next () Bool)
(declare-fun z$219 () Bool)
(declare-fun a_ready_Sender$next () Bool)
(declare-fun z$229 () Bool)
(declare-fun a_sending$next () Bool)
(declare-fun z$241 () Bool)
(declare-fun a_wait_msg$next () Bool)
(declare-fun z$250 () Bool)
(declare-fun a_got_msg_Receiver$next () Bool)
(declare-fun z$257 () Bool)
(declare-fun z$761 () Bool)
(declare-fun z$762 () Bool)
(declare-fun z$763 () Bool)
(declare-fun z$764 () Bool)
(declare-fun z$766 () Bool)
(declare-fun z$767 () Bool)
(declare-fun z$769 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$770 () Bool)
(declare-fun z$95 () Bool)
(declare-fun z$889 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(assert
 (and (distinct z$n0s8 z$n1s8) true))
(assert
 (and (distinct z$n1s32 z$n3s32) true))
(assert
 (let (($x40 (not a_consume0)))
 (= z$1 $x40)))
(assert
 (let (($x44 (not a_consume1)))
 (= z$3 $x44)))
(assert
 (let (($x98 (not a_dataOK)))
 (= z$5 $x98)))
(assert
 (let (($x102 (not a_data_lost)))
 (= z$7 $x102)))
(assert
 (let (($x106 (not a_got_msg_Consumer)))
 (= z$9 $x106)))
(assert
 (let (($x110 (not a_got_msg_Receiver)))
 (= z$11 $x110)))
(assert
 (let (($x114 (not a_produce0)))
 (= z$13 $x114)))
(assert
 (let (($x118 (not a_produce1)))
 (= z$15 $x118)))
(assert
 (let (($x122 (not a_ready_Consumer)))
 (= z$17 $x122)))
(assert
 (let (($x126 (not a_ready_Producer)))
 (= z$19 $x126)))
(assert
 (let (($x130 (not a_ready_Sender)))
 (= z$21 $x130)))
(assert
 (let (($x134 (not a_ready_channel_K)))
 (= z$23 $x134)))
(assert
 (let (($x138 (not a_ready_channel_L)))
 (= z$25 $x138)))
(assert
 (let (($x142 (not a_sending)))
 (= z$27 $x142)))
(assert
 (let (($x146 (not a_tr_channel_K)))
 (= z$29 $x146)))
(assert
 (let (($x150 (not a_tr_channel_L)))
 (= z$31 $x150)))
(assert
 (let (($x154 (not a_wait_msg)))
 (= z$33 $x154)))
(assert
 (= z$35 (not dve_invalid)))
(assert
 (let (($x158 (= v_lost_channel_K z$n0s8)))
 (= z$38 $x158)))
(assert
 (let (($x162 (= v_lost_channel_L z$n0s8)))
 (= z$40 $x162)))
(assert
 (let (($x166 (= v_v_channel_K z$n0s8)))
 (= z$42 $x166)))
(assert
 (let (($x170 (= v_value_Consumer z$n0s8)))
 (= z$44 $x170)))
(assert
 (let (($x174 (= v_value_Receiver z$n0s8)))
 (= z$46 $x174)))
(assert
 (let (($x178 (= v_value_Sender z$n0s8)))
 (= z$48 $x178)))
(assert
 (= z$733 (and z$1 z$3)))
(assert
 (= z$735 (not z$733)))
(assert
 (= z$736 (and z$35 z$735)))
(assert
 (= z$738 (not z$736)))
(assert
 (= z$739 (= prop z$738)))
(assert
 (let ((?x31 (ite f08 v_value_Sender v_v_channel_K)))
 (= z$52 ?x31)))
(assert
 (let (($x1977 (= v_v_channel_K$next z$52)))
 (= z$54 $x1977)))
(assert
 (let ((?x186 (ite f12 v_value_Receiver v_value_Consumer)))
 (= z$84 ?x186)))
(assert
 (let (($x190 (= v_value_Consumer$next z$84)))
 (= z$86 $x190)))
(assert
 (let ((?x2082 (ite f09 v_v_channel_K v_value_Receiver)))
 (= z$97 ?x2082)))
(assert
 (let (($x1955 (= v_value_Receiver$next z$97)))
 (= z$99 $x1955)))
(assert
 (let (($x195 (not f00)))
 (= z$101 $x195)))
(assert
 (= z$102 (and a_ready_channel_K z$101)))
(assert
 (= z$104 (not z$102)))
(assert
 (let (($x206 (not f08)))
 (= z$105 $x206)))
(assert
 (= z$106 (and z$104 z$105)))
(assert
 (= z$108 (not z$106)))
(assert
 (let (($x217 (not f09)))
 (= z$109 $x217)))
(assert
 (= z$110 (and z$108 z$109)))
(assert
 (= z$112 (not z$110)))
(assert
 (let (($x227 (not z$112)))
 (= z$113 $x227)))
(assert
 (= z$114 (= a_ready_channel_K$next z$113)))
(assert
 (= z$116 (and a_tr_channel_K z$101)))
(assert
 (= z$118 (not z$116)))
(assert
 (= z$119 (and z$118 z$105)))
(assert
 (= z$121 (not z$119)))
(assert
 (= z$122 (and z$121 z$109)))
(assert
 (= z$124 (= a_tr_channel_K$next z$122)))
(assert
 (= z$126 (= a_data_lost$next a_data_lost)))
(assert
 (let (($x261 (not f01)))
 (= z$128 $x261)))
(assert
 (= z$129 (and a_ready_channel_L z$128)))
(assert
 (= z$131 (not z$129)))
(assert
 (let (($x271 (not z$131)))
 (= z$132 $x271)))
(assert
 (= z$133 (= a_ready_channel_L$next z$132)))
(assert
 (let ((?x278 (Concat_32_8_24 v_lost_channel_K z$n0s24)))
 (= z$60 ?x278)))
(assert
 (let (($x282 (GrEq_1_32_32 z$60 z$n3s32)))
 (= z$260 $x282)))
(assert
 (= z$262 (not z$260)))
(assert
 (= z$263 (and a_tr_channel_K z$262)))
(assert
 (= z$265 (not z$263)))
(assert
 (= z$266 (and f00 z$265)))
(assert
 (= z$268 (not z$266)))
(assert
 (let ((?x303 (Concat_32_8_24 v_lost_channel_L z$n0s24)))
 (= z$73 ?x303)))
(assert
 (let (($x307 (GrEq_1_32_32 z$73 z$n3s32)))
 (= z$269 $x307)))
(assert
 (= z$271 (not z$269)))
(assert
 (= z$272 (and a_tr_channel_L z$271)))
(assert
 (= z$274 (not z$272)))
(assert
 (= z$275 (and f01 z$274)))
(assert
 (= z$277 (not z$275)))
(assert
 (= z$278 (and z$268 z$277)))
(assert
 (= z$280 (and a_ready_Producer f02)))
(assert
 (= z$282 (not z$280)))
(assert
 (= z$283 (and z$278 z$282)))
(assert
 (= z$285 (and a_ready_Producer f03)))
(assert
 (= z$287 (not z$285)))
(assert
 (= z$288 (and z$283 z$287)))
(assert
 (= z$290 (and a_got_msg_Consumer z$44)))
(assert
 (= z$292 (not z$290)))
(assert
 (= z$293 (and f04 z$292)))
(assert
 (= z$295 (not z$293)))
(assert
 (= z$296 (and z$288 z$295)))
(assert
 (let (($x376 (= z$n1s8 v_value_Consumer)))
 (= z$298 $x376)))
(assert
 (= z$299 (and a_got_msg_Consumer z$298)))
(assert
 (= z$301 (not z$299)))
(assert
 (= z$302 (and f05 z$301)))
(assert
 (= z$304 (not z$302)))
(assert
 (= z$305 (and z$296 z$304)))
(assert
 (= z$307 (and z$1 f06)))
(assert
 (= z$309 (not z$307)))
(assert
 (= z$310 (and z$305 z$309)))
(assert
 (= z$312 (and z$3 f07)))
(assert
 (= z$314 (not z$312)))
(assert
 (= z$315 (and z$310 z$314)))
(assert
 (= z$317 (and z$23 a_sending)))
(assert
 (= z$319 (not z$317)))
(assert
 (= z$320 (and f08 z$319)))
(assert
 (= z$322 (not z$320)))
(assert
 (= z$323 (and z$315 z$322)))
(assert
 (= z$325 (and a_tr_channel_K z$33)))
(assert
 (= z$327 (not z$325)))
(assert
 (= z$328 (and f09 z$327)))
(assert
 (= z$330 (not z$328)))
(assert
 (= z$331 (and z$323 z$330)))
(assert
 (= z$333 (and a_produce0 z$21)))
(assert
 (= z$335 (not z$333)))
(assert
 (= z$336 (and f10 z$335)))
(assert
 (= z$338 (not z$336)))
(assert
 (= z$339 (and z$331 z$338)))
(assert
 (= z$341 (and a_produce1 z$21)))
(assert
 (= z$343 (not z$341)))
(assert
 (= z$344 (and f11 z$343)))
(assert
 (= z$346 (not z$344)))
(assert
 (= z$347 (and z$339 z$346)))
(assert
 (= z$349 (and z$17 a_got_msg_Receiver)))
(assert
 (= z$351 (not z$349)))
(assert
 (= z$352 (and f12 z$351)))
(assert
 (= z$354 (not z$352)))
(assert
 (= z$355 (and z$347 z$354)))
(assert
 (let (($x513 (not f12)))
 (= z$187 $x513)))
(assert
 (let (($x516 (not f11)))
 (= z$155 $x516)))
(assert
 (let (($x519 (not f10)))
 (= z$150 $x519)))
(assert
 (let (($x522 (not f07)))
 (= z$183 $x522)))
(assert
 (let (($x525 (not f06)))
 (= z$177 $x525)))
(assert
 (let (($x528 (not f05)))
 (= z$198 $x528)))
(assert
 (let (($x531 (not f04)))
 (= z$194 $x531)))
(assert
 (let (($x534 (not f03)))
 (= z$146 $x534)))
(assert
 (let (($x537 (not f02)))
 (= z$142 $x537)))
(assert
 (= z$357 (and z$101 z$128)))
(assert
 (= z$359 (not z$357)))
(assert
 (let (($x547 (not z$359)))
 (= z$360 $x547)))
(assert
 (= z$361 (and z$142 z$360)))
(assert
 (= z$363 (not z$361)))
(assert
 (let (($x557 (not z$363)))
 (= z$364 $x557)))
(assert
 (= z$365 (and z$146 z$364)))
(assert
 (= z$367 (not z$365)))
(assert
 (let (($x567 (not z$367)))
 (= z$368 $x567)))
(assert
 (= z$369 (and z$194 z$368)))
(assert
 (= z$371 (not z$369)))
(assert
 (let (($x577 (not z$371)))
 (= z$372 $x577)))
(assert
 (= z$373 (and z$198 z$372)))
(assert
 (= z$375 (not z$373)))
(assert
 (let (($x587 (not z$375)))
 (= z$376 $x587)))
(assert
 (= z$377 (and z$177 z$376)))
(assert
 (= z$379 (not z$377)))
(assert
 (let (($x597 (not z$379)))
 (= z$380 $x597)))
(assert
 (= z$381 (and z$183 z$380)))
(assert
 (= z$383 (not z$381)))
(assert
 (let (($x607 (not z$383)))
 (= z$384 $x607)))
(assert
 (= z$385 (and z$105 z$384)))
(assert
 (= z$387 (not z$385)))
(assert
 (let (($x617 (not z$387)))
 (= z$388 $x617)))
(assert
 (= z$389 (and z$109 z$388)))
(assert
 (= z$391 (not z$389)))
(assert
 (let (($x627 (not z$391)))
 (= z$392 $x627)))
(assert
 (= z$393 (and z$150 z$392)))
(assert
 (= z$395 (not z$393)))
(assert
 (let (($x637 (not z$395)))
 (= z$396 $x637)))
(assert
 (= z$397 (and z$155 z$396)))
(assert
 (= z$399 (not z$397)))
(assert
 (let (($x647 (not z$399)))
 (= z$400 $x647)))
(assert
 (= z$401 (and z$187 z$400)))
(assert
 (= z$403 (not z$401)))
(assert
 (= z$404 (and z$355 z$403)))
(assert
 (= z$406 (and f00 f01)))
(assert
 (= z$408 (not z$406)))
(assert
 (= z$409 (and f02 z$359)))
(assert
 (= z$411 (not z$409)))
(assert
 (= z$412 (and z$408 z$411)))
(assert
 (= z$414 (not z$412)))
(assert
 (= z$415 (not z$414)))
(assert
 (= z$416 (and f03 z$363)))
(assert
 (= z$418 (not z$416)))
(assert
 (= z$419 (and z$415 z$418)))
(assert
 (= z$421 (not z$419)))
(assert
 (= z$422 (not z$421)))
(assert
 (= z$423 (and f04 z$367)))
(assert
 (= z$425 (not z$423)))
(assert
 (= z$426 (and z$422 z$425)))
(assert
 (= z$428 (not z$426)))
(assert
 (= z$429 (not z$428)))
(assert
 (= z$430 (and f05 z$371)))
(assert
 (= z$432 (not z$430)))
(assert
 (= z$433 (and z$429 z$432)))
(assert
 (= z$435 (not z$433)))
(assert
 (= z$436 (not z$435)))
(assert
 (= z$437 (and f06 z$375)))
(assert
 (= z$439 (not z$437)))
(assert
 (= z$440 (and z$436 z$439)))
(assert
 (= z$442 (not z$440)))
(assert
 (= z$443 (not z$442)))
(assert
 (= z$444 (and f07 z$379)))
(assert
 (= z$446 (not z$444)))
(assert
 (= z$447 (and z$443 z$446)))
(assert
 (= z$449 (not z$447)))
(assert
 (= z$450 (not z$449)))
(assert
 (= z$451 (and f08 z$383)))
(assert
 (= z$453 (not z$451)))
(assert
 (= z$454 (and z$450 z$453)))
(assert
 (= z$456 (not z$454)))
(assert
 (= z$457 (not z$456)))
(assert
 (= z$458 (and f09 z$387)))
(assert
 (= z$460 (not z$458)))
(assert
 (= z$461 (and z$457 z$460)))
(assert
 (= z$463 (not z$461)))
(assert
 (= z$464 (not z$463)))
(assert
 (= z$465 (and f10 z$391)))
(assert
 (= z$467 (not z$465)))
(assert
 (= z$468 (and z$464 z$467)))
(assert
 (= z$470 (not z$468)))
(assert
 (= z$471 (not z$470)))
(assert
 (= z$472 (and f11 z$395)))
(assert
 (= z$474 (not z$472)))
(assert
 (= z$475 (and z$471 z$474)))
(assert
 (= z$477 (not z$475)))
(assert
 (= z$478 (not z$477)))
(assert
 (= z$479 (and f12 z$399)))
(assert
 (= z$481 (not z$479)))
(assert
 (= z$482 (and z$478 z$481)))
(assert
 (= z$484 (not z$482)))
(assert
 (= z$485 (not z$484)))
(assert
 (= z$486 (and z$404 z$485)))
(assert
 (= z$488 (and z$23 a_tr_channel_K)))
(assert
 (= z$490 (not z$488)))
(assert
 (= z$491 (and a_ready_channel_K z$29)))
(assert
 (= z$493 (not z$491)))
(assert
 (= z$494 (and a_data_lost z$493)))
(assert
 (= z$496 (not z$494)))
(assert
 (= z$497 (and z$490 z$496)))
(assert
 (= z$499 (not z$497)))
(assert
 (= z$500 (not z$499)))
(assert
 (let (($x890 (not z$493)))
 (= z$501 $x890)))
(assert
 (= z$502 (and z$7 z$501)))
(assert
 (= z$504 (not z$502)))
(assert
 (= z$505 (and z$500 z$504)))
(assert
 (= z$507 (and z$25 a_tr_channel_L)))
(assert
 (= z$509 (not z$507)))
(assert
 (= z$510 (and a_ready_channel_L z$31)))
(assert
 (= z$512 (not z$510)))
(assert
 (= z$513 (and a_dataOK z$512)))
(assert
 (= z$515 (not z$513)))
(assert
 (= z$516 (and z$509 z$515)))
(assert
 (= z$518 (not z$516)))
(assert
 (= z$519 (not z$518)))
(assert
 (= z$520 (and z$505 z$519)))
(assert
 (let (($x939 (not z$512)))
 (= z$522 $x939)))
(assert
 (= z$523 (and z$5 z$522)))
(assert
 (= z$525 (not z$523)))
(assert
 (= z$526 (and z$520 z$525)))
(assert
 (= z$528 (and z$19 a_produce0)))
(assert
 (= z$530 (not z$528)))
(assert
 (= z$531 (and a_ready_Producer z$13)))
(assert
 (= z$533 (not z$531)))
(assert
 (= z$534 (and a_produce1 z$533)))
(assert
 (= z$536 (not z$534)))
(assert
 (= z$537 (and z$530 z$536)))
(assert
 (= z$539 (not z$537)))
(assert
 (= z$540 (not z$539)))
(assert
 (= z$541 (and z$526 z$540)))
(assert
 (let (($x988 (not z$533)))
 (= z$543 $x988)))
(assert
 (= z$544 (and z$15 z$543)))
(assert
 (= z$546 (not z$544)))
(assert
 (= z$547 (and z$541 z$546)))
(assert
 (= z$549 (and z$17 a_got_msg_Consumer)))
(assert
 (= z$551 (not z$549)))
(assert
 (= z$552 (and a_ready_Consumer z$9)))
(assert
 (= z$554 (not z$552)))
(assert
 (= z$555 (and a_consume0 z$554)))
(assert
 (= z$557 (not z$555)))
(assert
 (= z$558 (and z$551 z$557)))
(assert
 (= z$560 (not z$558)))
(assert
 (= z$561 (not z$560)))
(assert
 (let (($x1033 (not z$554)))
 (= z$562 $x1033)))
(assert
 (= z$563 (and z$1 z$562)))
(assert
 (= z$565 (not z$563)))
(assert
 (= z$566 (and a_consume1 z$565)))
(assert
 (= z$568 (not z$566)))
(assert
 (= z$569 (and z$561 z$568)))
(assert
 (= z$571 (not z$569)))
(assert
 (= z$572 (not z$571)))
(assert
 (= z$573 (and z$547 z$572)))
(assert
 (let (($x1064 (not z$565)))
 (= z$575 $x1064)))
(assert
 (= z$576 (and z$3 z$575)))
(assert
 (= z$578 (not z$576)))
(assert
 (= z$579 (and z$573 z$578)))
(assert
 (= z$581 (and z$21 a_sending)))
(assert
 (= z$583 (not z$581)))
(assert
 (= z$584 (and z$579 z$583)))
(assert
 (= z$586 (and a_ready_Sender z$27)))
(assert
 (= z$588 (not z$586)))
(assert
 (= z$589 (and z$584 z$588)))
(assert
 (= z$591 (and z$33 a_got_msg_Receiver)))
(assert
 (= z$593 (not z$591)))
(assert
 (= z$594 (and z$589 z$593)))
(assert
 (= z$596 (and a_wait_msg z$11)))
(assert
 (= z$598 (not z$596)))
(assert
 (= z$599 (and z$594 z$598)))
(assert
 (= z$601 (and z$486 z$599)))
(assert
 (= z$603 (and z$112 z$122)))
(assert
 (= z$605 (not z$603)))
(assert
 (let (($x1133 (not z$122)))
 (= z$606 $x1133)))
(assert
 (= z$607 (and z$113 z$606)))
(assert
 (= z$609 (not z$607)))
(assert
 (= z$610 (and a_data_lost z$609)))
(assert
 (= z$612 (not z$610)))
(assert
 (= z$613 (and z$605 z$612)))
(assert
 (= z$615 (not z$613)))
(assert
 (= z$616 (not z$615)))
(assert
 (let (($x1160 (not z$609)))
 (= z$617 $x1160)))
(assert
 (= z$618 (and z$7 z$617)))
(assert
 (= z$620 (not z$618)))
(assert
 (= z$621 (and z$616 z$620)))
(assert
 (= z$135 (and a_tr_channel_L z$128)))
(assert
 (= z$623 (and z$131 z$135)))
(assert
 (= z$625 (not z$623)))
(assert
 (let (($x1185 (not z$135)))
 (= z$626 $x1185)))
(assert
 (= z$627 (and z$132 z$626)))
(assert
 (= z$629 (not z$627)))
(assert
 (= z$630 (and a_dataOK z$629)))
(assert
 (= z$632 (not z$630)))
(assert
 (= z$633 (and z$625 z$632)))
(assert
 (= z$635 (not z$633)))
(assert
 (= z$636 (not z$635)))
(assert
 (= z$637 (and z$621 z$636)))
(assert
 (let (($x1216 (not z$629)))
 (= z$639 $x1216)))
(assert
 (= z$640 (and z$5 z$639)))
(assert
 (= z$642 (not z$640)))
(assert
 (= z$643 (and z$637 z$642)))
(assert
 (= z$162 (and z$13 z$142)))
(assert
 (= z$164 (not z$162)))
(assert
 (= z$165 (and z$164 z$150)))
(assert
 (= z$143 (and z$19 z$142)))
(assert
 (= z$147 (and z$143 z$146)))
(assert
 (= z$149 (not z$147)))
(assert
 (= z$151 (and z$149 z$150)))
(assert
 (= z$153 (not z$151)))
(assert
 (= z$154 (not z$153)))
(assert
 (= z$156 (and z$154 z$155)))
(assert
 (= z$158 (not z$156)))
(assert
 (= z$645 (and z$165 z$158)))
(assert
 (= z$647 (not z$645)))
(assert
 (= z$169 (and z$15 z$146)))
(assert
 (= z$171 (not z$169)))
(assert
 (= z$172 (and z$171 z$155)))
(assert
 (let (($x1287 (not z$165)))
 (= z$648 $x1287)))
(assert
 (let (($x1290 (not z$158)))
 (= z$159 $x1290)))
(assert
 (= z$649 (and z$648 z$159)))
(assert
 (= z$651 (not z$649)))
(assert
 (= z$652 (and z$172 z$651)))
(assert
 (= z$654 (not z$652)))
(assert
 (= z$655 (and z$647 z$654)))
(assert
 (= z$657 (not z$655)))
(assert
 (= z$658 (not z$657)))
(assert
 (= z$659 (and z$643 z$658)))
(assert
 (let (($x1321 (not z$172)))
 (= z$661 $x1321)))
(assert
 (let (($x1324 (not z$651)))
 (= z$662 $x1324)))
(assert
 (= z$663 (and z$661 z$662)))
(assert
 (= z$665 (not z$663)))
(assert
 (= z$666 (and z$659 z$665)))
(assert
 (= z$178 (and a_ready_Consumer z$177)))
(assert
 (= z$180 (not z$178)))
(assert
 (= z$181 (not z$180)))
(assert
 (= z$184 (and z$181 z$183)))
(assert
 (= z$186 (not z$184)))
(assert
 (= z$188 (and z$186 z$187)))
(assert
 (= z$195 (and a_got_msg_Consumer z$194)))
(assert
 (= z$199 (and z$195 z$198)))
(assert
 (= z$201 (not z$199)))
(assert
 (= z$202 (and z$201 z$187)))
(assert
 (= z$204 (not z$202)))
(assert
 (= z$668 (and z$188 z$204)))
(assert
 (= z$670 (not z$668)))
(assert
 (= z$207 (and z$1 z$194)))
(assert
 (= z$209 (not z$207)))
(assert
 (= z$210 (and z$209 z$177)))
(assert
 (let (($x1395 (not z$188)))
 (= z$190 $x1395)))
(assert
 (let (($x1398 (not z$204)))
 (= z$671 $x1398)))
(assert
 (= z$672 (and z$190 z$671)))
(assert
 (= z$674 (not z$672)))
(assert
 (= z$675 (and z$210 z$674)))
(assert
 (= z$677 (not z$675)))
(assert
 (= z$678 (and z$670 z$677)))
(assert
 (= z$680 (not z$678)))
(assert
 (= z$681 (not z$680)))
(assert
 (= z$214 (and z$3 z$198)))
(assert
 (= z$216 (not z$214)))
(assert
 (= z$217 (and z$216 z$183)))
(assert
 (let (($x1436 (not z$210)))
 (= z$682 $x1436)))
(assert
 (let (($x1439 (not z$674)))
 (= z$683 $x1439)))
(assert
 (= z$684 (and z$682 z$683)))
(assert
 (= z$686 (not z$684)))
(assert
 (= z$687 (and z$217 z$686)))
(assert
 (= z$689 (not z$687)))
(assert
 (= z$690 (and z$681 z$689)))
(assert
 (= z$692 (not z$690)))
(assert
 (= z$693 (not z$692)))
(assert
 (= z$694 (and z$666 z$693)))
(assert
 (let (($x1470 (not z$217)))
 (= z$696 $x1470)))
(assert
 (let (($x1473 (not z$686)))
 (= z$697 $x1473)))
(assert
 (= z$698 (and z$696 z$697)))
(assert
 (= z$700 (not z$698)))
(assert
 (= z$701 (and z$694 z$700)))
(assert
 (= z$221 (and a_ready_Sender z$105)))
(assert
 (= z$223 (not z$221)))
(assert
 (= z$224 (and z$223 z$150)))
(assert
 (= z$226 (and z$224 z$155)))
(assert
 (= z$231 (and a_sending z$105)))
(assert
 (= z$233 (not z$231)))
(assert
 (= z$234 (and z$233 z$150)))
(assert
 (= z$236 (not z$234)))
(assert
 (= z$237 (not z$236)))
(assert
 (= z$238 (and z$237 z$155)))
(assert
 (= z$240 (not z$238)))
(assert
 (= z$703 (and z$226 z$240)))
(assert
 (= z$705 (not z$703)))
(assert
 (= z$706 (and z$701 z$705)))
(assert
 (let (($x1537 (not z$226)))
 (= z$228 $x1537)))
(assert
 (let (($x1540 (not z$240)))
 (= z$708 $x1540)))
(assert
 (= z$709 (and z$228 z$708)))
(assert
 (= z$711 (not z$709)))
(assert
 (= z$712 (and z$706 z$711)))
(assert
 (= z$243 (and z$33 z$109)))
(assert
 (= z$245 (not z$243)))
(assert
 (= z$246 (and z$245 z$187)))
(assert
 (= z$248 (not z$246)))
(assert
 (= z$252 (and z$11 z$109)))
(assert
 (= z$254 (not z$252)))
(assert
 (= z$255 (and z$254 z$187)))
(assert
 (= z$714 (and z$248 z$255)))
(assert
 (= z$716 (not z$714)))
(assert
 (= z$717 (and z$712 z$716)))
(assert
 (let (($x1590 (not z$248)))
 (= z$249 $x1590)))
(assert
 (let (($x1593 (not z$255)))
 (= z$719 $x1593)))
(assert
 (= z$720 (and z$249 z$719)))
(assert
 (= z$722 (not z$720)))
(assert
 (= z$723 (and z$717 z$722)))
(assert
 (= z$725 (and z$601 z$723)))
(assert
 (= z$727 (and z$725 z$35)))
(assert
 (= z$729 (not z$727)))
(assert
 (= z$730 (= dve_invalid$next z$729)))
(assert
 (= z$137 (= a_tr_channel_L$next z$135)))
(assert
 (= z$139 (= a_dataOK$next a_dataOK)))
(assert
 (= z$160 (= a_ready_Producer$next z$159)))
(assert
 (= z$167 (= a_produce0$next z$165)))
(assert
 (= z$174 (= a_produce1$next z$172)))
(assert
 (= z$191 (= a_ready_Consumer$next z$190)))
(assert
 (= z$205 (= a_got_msg_Consumer$next z$204)))
(assert
 (= z$212 (= a_consume0$next z$210)))
(assert
 (= z$219 (= a_consume1$next z$217)))
(assert
 (= z$229 (= a_ready_Sender$next z$228)))
(assert
 (= z$241 (= a_sending$next z$240)))
(assert
 (= z$250 (= a_wait_msg$next z$249)))
(assert
 (= z$257 (= a_got_msg_Receiver$next z$255)))
(assert
 (= z$761 (not dve_invalid$next)))
(assert
 (= z$762 (not a_consume0$next)))
(assert
 (= z$763 (not a_consume1$next)))
(assert
 (= z$764 (and z$762 z$763)))
(assert
 (= z$766 (not z$764)))
(assert
 (= z$767 (and z$761 z$766)))
(assert
 (= z$769 (not z$767)))
(assert
 (= z$770 (= prop$next z$769)))
(assert
 (let ((?x2873 (ite f10 z$n0s8 v_value_Sender)))
 (= z$91 ?x2873)))
(assert
 (let ((?x1691 (ite f11 z$n1s8 z$91)))
 (= z$93 ?x1691)))
(assert
 (let (($x2410 (= v_value_Sender$next z$93)))
 (= z$95 $x2410)))
(assert
 (let (($x2578 (and z$1 z$3 z$5 z$7 z$9 z$11 z$13 z$15 z$17 z$19 z$21 z$23 z$25 z$27 z$29 z$31 z$33 z$35 z$38 z$40 z$42 z$44 z$46 z$48 z$739 prop z$54 z$86 z$99 z$114 z$124 z$126 z$133 z$730 z$137 z$139 z$160 z$167 z$174 z$191 z$205 z$212 z$219 z$229 z$241 z$250 z$257 z$770 z$95)))
 (= z$889 $x2578)))
(assert
 z$889)
(assert
 (=> p$0 a_ready_Sender$next))
(assert
 (let (($x67 (= z$761 (not dve_invalid$next))))
 (=> p$1 $x67)))
(assert
 (=> p$1 z$761))
(check-sat)
(assert p$0)
(set-info :status sat)
(check-sat)
(exit)
