(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sw_ball2004_1
query-maker: "Z3"
query-time: 0.271000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt3 0)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n6s3 () utt3)
(declare-fun z$n7s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun X () utt3)
(declare-fun X$next () utt3)
(declare-fun Z () utt3)
(declare-fun Z$next () utt3)
(declare-fun Y () utt3)
(declare-fun Y$next () utt3)
(declare-fun L2 () Bool)
(declare-fun z$4 () Bool)
(declare-fun L3 () Bool)
(declare-fun z$6 () Bool)
(declare-fun prop () Bool)
(declare-fun z$117 () Bool)
(declare-fun L3$next () Bool)
(declare-fun z$129 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$130 () Bool)
(declare-fun z$16 () Bool)
(declare-fun z$19 () Bool)
(declare-fun Le_1_3_3 (utt3 utt3) Bool)
(declare-fun z$34 () Bool)
(declare-fun L1 () Bool)
(declare-fun z$36 () Bool)
(declare-fun LoneHot () Bool)
(declare-fun z$38 () Bool)
(declare-fun L2$next () Bool)
(declare-fun z$40 () Bool)
(declare-fun z$2 () Bool)
(declare-fun L0 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$75 () Bool)
(declare-fun L4 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$79 () Bool)
(declare-fun z$80 () Bool)
(declare-fun z$82 () Bool)
(declare-fun z$84 () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$90 () Bool)
(declare-fun z$92 () Bool)
(declare-fun z$94 () Bool)
(declare-fun z$96 () Bool)
(declare-fun z$98 () Bool)
(declare-fun z$100 () Bool)
(declare-fun z$102 () Bool)
(declare-fun z$104 () Bool)
(declare-fun z$106 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$110 () Bool)
(declare-fun z$112 () Bool)
(declare-fun LoneHot$next () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$26 () Bool)
(declare-fun z$181 () Bool)
(declare-fun z$183 () Bool)
(declare-fun z$144 () Bool)
(declare-fun z$147 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$197 () Bool)
(declare-fun z$198 () Bool)
(declare-fun z$201 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$145 () Bool)
(assert
 (and (distinct z$n0s3 z$n7s3 z$n6s3 z$n3s3 z$n1s3) true))
(assert
 (let (($x53 (not L2)))
 (= z$4 $x53)))
(assert
 (let (($x12 (not L3)))
 (= z$6 $x12)))
(assert
 (= z$117 (= prop z$6)))
(assert
 (= z$129 (not L3$next)))
(assert
 (= z$130 (= prop$next z$129)))
(assert
 (let (($x66 (= X$next X)))
 (= z$16 $x66)))
(assert
 (let (($x71 (= Z$next Z)))
 (= z$19 $x71)))
(assert
 (let (($x76 (Le_1_3_3 Y Z)))
 (= z$34 $x76)))
(assert
 (= z$36 (and L1 z$34)))
(assert
 (let (($x84 (ite LoneHot z$36 L2)))
 (= z$38 $x84)))
(assert
 (= z$40 (= L2$next z$38)))
(assert
 (let (($x49 (not L1)))
 (= z$2 $x49)))
(assert
 (= z$71 (and L0 z$2)))
(assert
 (= z$73 (and z$71 z$4)))
(assert
 (= z$75 (and z$73 z$6)))
(assert
 (let (($x57 (not L4)))
 (= z$8 $x57)))
(assert
 (= z$77 (and z$75 z$8)))
(assert
 (let (($x108 (not L0)))
 (= z$79 $x108)))
(assert
 (= z$80 (and z$79 L1)))
(assert
 (= z$82 (and z$80 z$4)))
(assert
 (= z$84 (and z$82 z$6)))
(assert
 (= z$86 (and z$84 z$8)))
(assert
 (let (($x127 (or z$77 z$86)))
 (= z$88 $x127)))
(assert
 (= z$90 (and z$79 z$2)))
(assert
 (= z$92 (and z$90 L2)))
(assert
 (= z$94 (and z$92 z$6)))
(assert
 (= z$96 (and z$94 z$8)))
(assert
 (let (($x147 (or z$88 z$96)))
 (= z$98 $x147)))
(assert
 (= z$100 (and z$90 z$4)))
(assert
 (= z$102 (and z$100 L3)))
(assert
 (= z$104 (and z$102 z$8)))
(assert
 (let (($x163 (or z$98 z$104)))
 (= z$106 $x163)))
(assert
 (= z$108 (and z$100 z$6)))
(assert
 (= z$110 (and z$108 L4)))
(assert
 (let (($x175 (or z$106 z$110)))
 (= z$112 $x175)))
(assert
 (= z$114 (= LoneHot$next z$112)))
(assert
 (let (($x287 (Le_1_3_3 X Z)))
 (= z$42 $x287)))
(assert
 (= z$44 (not z$42)))
(assert
 (let (($x304 (Le_1_3_3 X Y)))
 (= z$26 $x304)))
(assert
 (= z$181 (and z$44 z$34 z$26)))
(assert
 (= z$183 (not z$181)))
(assert
 (let (($x186 (Le_1_3_3 X$next Z$next)))
 (= z$144 $x186)))
(assert
 (let (($x189 (not z$144)))
 (= z$147 $x189)))
(assert
 (let (($x881 (Le_1_3_3 Y$next Z$next)))
 (= z$160 $x881)))
(assert
 (let (($x913 (Le_1_3_3 X$next Y$next)))
 (= z$168 $x913)))
(assert
 (= z$182 (and z$147 z$160 z$168)))
(assert
 (= z$184 (not z$182)))
(assert
 (= z$197 (and L1 z$34 z$44)))
(assert
 (= z$198 (not z$197)))
(assert
 (let (($x675 (and z$4 z$117 prop z$130 z$16 z$19 z$40 z$114 z$183 z$184 z$198)))
 (= z$201 $x675)))
(assert
 z$201)
(assert
 (=> p$0 L2$next))
(assert
 (let (($x186 (Le_1_3_3 X$next Z$next)))
 (let (($x187 (= z$144 $x186)))
 (=> p$1 $x187))))
(assert
 (=> p$1 (= z$145 (not z$144))))
(assert
 (=> p$1 z$145))
(check-sat)
(assert p$1)
(set-info :status sat)
(check-sat)
(exit)
