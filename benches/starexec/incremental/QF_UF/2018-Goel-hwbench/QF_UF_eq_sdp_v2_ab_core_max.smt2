(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: eq_sdp_v2
query-maker: "Z3"
query-time: 2.617000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-fun im.p2_ctl_2 () Bool)
(declare-fun z$13 () Bool)
(declare-fun im.p2_m () Bool)
(declare-fun z$15 () Bool)
(declare-fun s2 () Bool)
(declare-fun z$21 () Bool)
(declare-fun im.p2_c () Bool)
(declare-fun z$343 () Bool)
(declare-fun z$344 () Bool)
(declare-fun z$11 () Bool)
(declare-fun z$536 () Bool)
(declare-fun z$537 () Bool)
(declare-fun z$587 () Bool)
(declare-fun z$588 () Bool)
(declare-fun z$751 () Bool)
(declare-fun z$752 () Bool)
(declare-fun Add_1_1_1 (Bool Bool) Bool)
(declare-fun z$95 () Bool)
(declare-fun z$826 () Bool)
(declare-fun z$828 () Bool)
(declare-fun im.p1_a () Bool)
(declare-fun z$1 () Bool)
(declare-fun im.p1_b () Bool)
(declare-fun z$3 () Bool)
(declare-fun im.p1_ctl_2 () Bool)
(declare-fun z$9 () Bool)
(declare-fun s1 () Bool)
(declare-fun z$19 () Bool)
(declare-fun im.p1_c () Bool)
(declare-fun z$269 () Bool)
(declare-fun z$270 () Bool)
(declare-fun Sub_1_1_1 (Bool Bool) Bool)
(declare-fun z$83 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$291 () Bool)
(declare-fun z$292 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$355 () Bool)
(declare-fun z$356 () Bool)
(declare-fun z$458 () Bool)
(declare-fun z$459 () Bool)
(declare-fun z$81 () Bool)
(declare-fun z$508 () Bool)
(declare-fun z$509 () Bool)
(declare-fun z$570 () Bool)
(declare-fun z$571 () Bool)
(declare-fun z$141 () Bool)
(declare-fun z$579 () Bool)
(declare-fun z$580 () Bool)
(declare-fun z$698 () Bool)
(declare-fun z$699 () Bool)
(declare-fun z$743 () Bool)
(declare-fun z$744 () Bool)
(declare-fun z$820 () Bool)
(declare-fun z$821 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$841 () Bool)
(declare-fun z$842 () Bool)
(declare-fun z$851 () Bool)
(declare-fun z$853 () Bool)
(declare-fun im.p3_n () Bool)
(declare-fun s3 () Bool)
(declare-fun z$106 () Bool)
(declare-fun prop () Bool)
(declare-fun z$107 () Bool)
(declare-fun im.reset () Bool)
(declare-fun z$49 () Bool)
(declare-fun s2$next () Bool)
(declare-fun z$51 () Bool)
(declare-fun z$77 () Bool)
(declare-fun im.p2_ctl_2$next () Bool)
(declare-fun z$79 () Bool)
(declare-fun im.p1_ctl_1 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$87 () Bool)
(declare-fun im.p2_m$next () Bool)
(declare-fun z$89 () Bool)
(declare-fun z$91 () Bool)
(declare-fun im.p2_c$next () Bool)
(declare-fun z$93 () Bool)
(declare-fun im.p3_n$next () Bool)
(declare-fun s3$next () Bool)
(declare-fun z$121 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$122 () Bool)
(declare-fun z$142 () Bool)
(declare-fun z$149 () Bool)
(declare-fun z$150 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$157 () Bool)
(declare-fun z$159 () Bool)
(declare-fun b () Bool)
(declare-fun a () Bool)
(declare-fun z$32 () Bool)
(declare-fun z$34 () Bool)
(declare-fun ctl_1 () Bool)
(declare-fun z$36 () Bool)
(declare-fun c () Bool)
(declare-fun z$41 () Bool)
(declare-fun z$174 () Bool)
(declare-fun z$172 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$248 () Bool)
(declare-fun b$next () Bool)
(declare-fun a$next () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$222 () Bool)
(declare-fun ctl_1$next () Bool)
(declare-fun z$230 () Bool)
(declare-fun c$next () Bool)
(declare-fun z$232 () Bool)
(declare-fun z$246 () Bool)
(declare-fun z$223 () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$254 () Bool)
(declare-fun z$310 () Bool)
(declare-fun z$312 () Bool)
(declare-fun im.p1_b$next () Bool)
(declare-fun im.p1_a$next () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$311 () Bool)
(declare-fun z$316 () Bool)
(declare-fun z$137 () Bool)
(declare-fun z$273 () Bool)
(declare-fun z$274 () Bool)
(declare-fun z$330 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$140 () Bool)
(declare-fun z$329 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$368 () Bool)
(declare-fun z$370 () Bool)
(declare-fun z$369 () Bool)
(declare-fun z$374 () Bool)
(declare-fun z$179 () Bool)
(declare-fun z$387 () Bool)
(declare-fun z$389 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$388 () Bool)
(declare-fun z$391 () Bool)
(declare-fun z$256 () Bool)
(declare-fun z$407 () Bool)
(declare-fun z$409 () Bool)
(declare-fun z$131 () Bool)
(declare-fun z$406 () Bool)
(declare-fun z$408 () Bool)
(declare-fun z$442 () Bool)
(declare-fun z$444 () Bool)
(declare-fun z$441 () Bool)
(declare-fun z$443 () Bool)
(declare-fun z$39 () Bool)
(declare-fun z$132 () Bool)
(declare-fun z$486 () Bool)
(declare-fun z$489 () Bool)
(declare-fun z$301 () Bool)
(declare-fun z$487 () Bool)
(declare-fun z$488 () Bool)
(declare-fun z$495 () Bool)
(declare-fun z$522 () Bool)
(declare-fun z$524 () Bool)
(declare-fun z$136 () Bool)
(declare-fun z$276 () Bool)
(declare-fun z$523 () Bool)
(declare-fun z$528 () Bool)
(declare-fun z$201 () Bool)
(declare-fun z$550 () Bool)
(declare-fun z$552 () Bool)
(declare-fun z$549 () Bool)
(declare-fun z$551 () Bool)
(declare-fun z$554 () Bool)
(declare-fun z$604 () Bool)
(declare-fun z$606 () Bool)
(declare-fun z$143 () Bool)
(declare-fun z$603 () Bool)
(declare-fun z$605 () Bool)
(declare-fun z$161 () Bool)
(declare-fun z$622 () Bool)
(declare-fun z$624 () Bool)
(declare-fun z$165 () Bool)
(declare-fun z$621 () Bool)
(declare-fun z$623 () Bool)
(declare-fun z$641 () Bool)
(declare-fun z$643 () Bool)
(declare-fun z$642 () Bool)
(declare-fun z$645 () Bool)
(declare-fun z$659 () Bool)
(declare-fun z$661 () Bool)
(declare-fun z$660 () Bool)
(declare-fun z$663 () Bool)
(declare-fun z$681 () Bool)
(declare-fun z$683 () Bool)
(declare-fun z$682 () Bool)
(declare-fun z$687 () Bool)
(declare-fun z$725 () Bool)
(declare-fun z$727 () Bool)
(declare-fun z$724 () Bool)
(declare-fun z$726 () Bool)
(declare-fun z$765 () Bool)
(declare-fun z$767 () Bool)
(declare-fun z$766 () Bool)
(declare-fun z$769 () Bool)
(declare-fun z$784 () Bool)
(declare-fun z$786 () Bool)
(declare-fun z$783 () Bool)
(declare-fun z$785 () Bool)
(declare-fun z$808 () Bool)
(declare-fun z$810 () Bool)
(declare-fun z$807 () Bool)
(declare-fun z$809 () Bool)
(declare-fun ctl_2 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$45 () Bool)
(declare-fun s1$next () Bool)
(declare-fun z$47 () Bool)
(declare-fun z$57 () Bool)
(declare-fun im.p1_ctl_1$next () Bool)
(declare-fun z$59 () Bool)
(declare-fun z$61 () Bool)
(declare-fun im.p1_ctl_2$next () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$65 () Bool)
(declare-fun z$67 () Bool)
(declare-fun z$69 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun im.p1_c$next () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$877 () Bool)
(declare-fun z$878 () Bool)
(declare-fun z$885 () Bool)
(declare-fun z$886 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$128 () Bool)
(declare-fun z$900 () Bool)
(declare-fun z$901 () Bool)
(declare-fun z$910 () Bool)
(declare-fun z$911 () Bool)
(declare-fun z$930 () Bool)
(declare-fun z$931 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$942 () Bool)
(declare-fun z$944 () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$138 () Bool)
(declare-fun p$4 () Bool)
(declare-fun im.reset$next () Bool)
(declare-fun z$148 () Bool)
(declare-fun p$5 () Bool)
(declare-fun p$6 () Bool)
(declare-fun z$211 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$176 () Bool)
(declare-fun p$8 () Bool)
(declare-fun p$9 () Bool)
(assert
 (= z$13 (not im.p2_ctl_2)))
(assert
 (let (($x183 (not im.p2_m)))
 (= z$15 $x183)))
(assert
 (let (($x445 (not s2)))
 (= z$21 $x445)))
(assert
 (= z$343 (and im.p2_c z$13 z$15 z$21)))
(assert
 (= z$344 (not z$343)))
(assert
 z$344)
(assert
 (let (($x202 (not im.p2_c)))
 (= z$11 $x202)))
(assert
 (= z$536 (and z$11 im.p2_m z$21)))
(assert
 (= z$537 (not z$536)))
(assert
 z$537)
(assert
 (= z$587 (and z$11 z$15 s2)))
(assert
 (= z$588 (not z$587)))
(assert
 z$588)
(assert
 (= z$751 (and im.p2_c im.p2_m s2)))
(assert
 (= z$752 (not z$751)))
(assert
 z$752)
(assert
 (let (($x1089 (Add_1_1_1 im.p2_m im.p2_c)))
 (= z$95 $x1089)))
(assert
 (= z$826 (and z$21 z$95)))
(assert
 (= z$828 (not z$826)))
(assert
 z$828)
(assert
 (let (($x84 (not im.p1_a)))
 (= z$1 $x84)))
(assert
 (let (($x74 (not im.p1_b)))
 (= z$3 $x74)))
(assert
 (let (($x282 (not im.p1_ctl_2)))
 (= z$9 $x282)))
(assert
 (let (($x308 (not s1)))
 (= z$19 $x308)))
(assert
 (= z$269 (and z$1 z$3 im.p1_c z$9 z$19)))
(assert
 (= z$270 (not z$269)))
(assert
 z$270)
(assert
 (let (($x440 (Sub_1_1_1 im.p1_a im.p1_b)))
 (= z$83 $x440)))
(assert
 (let (($x1275 (not z$83)))
 (= z$178 $x1275)))
(assert
 (= z$291 (and im.p1_c z$9 z$19 z$178)))
(assert
 (= z$292 (not z$291)))
(assert
 z$292)
(assert
 (let (($x50 (not im.p1_c)))
 (= z$5 $x50)))
(assert
 (= z$355 (and im.p1_a z$5 z$19 z$83)))
(assert
 (= z$356 (not z$355)))
(assert
 z$356)
(assert
 (= z$458 (and z$5 z$9 z$19 z$83)))
(assert
 (= z$459 (not z$458)))
(assert
 z$459)
(assert
 (let (($x453 (Add_1_1_1 im.p1_a im.p1_b)))
 (= z$81 $x453)))
(assert
 (= z$508 (and z$5 z$19 z$81)))
(assert
 (= z$509 (not z$508)))
(assert
 z$509)
(assert
 (= z$570 (and im.p1_a im.p1_b z$5 s1)))
(assert
 (= z$571 (not z$570)))
(assert
 z$571)
(assert
 (let (($x1280 (not z$81)))
 (= z$141 $x1280)))
(assert
 (= z$579 (and z$5 s1 z$141)))
(assert
 (= z$580 (not z$579)))
(assert
 z$580)
(assert
 (= z$698 (and im.p1_c z$9 s1 z$83)))
(assert
 (= z$699 (not z$698)))
(assert
 z$699)
(assert
 (= z$743 (and im.p1_c s1 z$81)))
(assert
 (= z$744 (not z$743)))
(assert
 z$744)
(assert
 (= z$820 (and im.p1_c z$19 z$141)))
(assert
 (= z$821 (not z$820)))
(assert
 z$821)
(assert
 (let (($x173 (Sub_1_1_1 im.p2_m im.p2_c)))
 (= z$97 $x173)))
(assert
 (= z$841 (and z$13 z$21 z$97)))
(assert
 (= z$842 (not z$841)))
(assert
 z$842)
(assert
 (= z$851 (and z$83 z$141)))
(assert
 (= z$853 (not z$851)))
(assert
 z$853)
(assert
 (= z$106 (= s3 im.p3_n)))
(assert
 (= z$107 (= prop z$106)))
(assert
 z$107)
(assert
 prop)
(assert
 (= z$49 (ite im.reset false s1)))
(assert
 (= z$51 (= s2$next z$49)))
(assert
 z$51)
(assert
 (= z$77 (ite im.reset false im.p1_ctl_2)))
(assert
 (= z$79 (= im.p2_ctl_2$next z$77)))
(assert
 z$79)
(assert
 (let (($x424 (ite im.p1_ctl_1 z$81 z$83)))
 (= z$85 $x424)))
(assert
 (= z$87 (ite im.reset false z$85)))
(assert
 (= z$89 (= im.p2_m$next z$87)))
(assert
 z$89)
(assert
 (= z$91 (ite im.reset false im.p1_c)))
(assert
 (= z$93 (= im.p2_c$next z$91)))
(assert
 z$93)
(assert
 (= z$121 (= s3$next im.p3_n$next)))
(assert
 (= z$122 (= prop$next z$121)))
(assert
 z$122)
(assert
 (let (($x67 (not im.p2_c$next)))
 (= z$142 $x67)))
(assert
 (let (($x35 (not im.p2_m$next)))
 (= z$149 $x35)))
(assert
 (let (($x230 (Sub_1_1_1 im.p2_m$next im.p2_c$next)))
 (= z$150 $x230)))
(assert
 (= z$158 (and z$142 z$149 z$150)))
(assert
 (= z$160 (not z$158)))
(assert
 z$160)
(assert
 (= z$157 (and z$11 z$15 z$97)))
(assert
 (= z$159 (not z$157)))
(assert
 z$159)
(assert
 (let (($x272 (Add_1_1_1 a b)))
 (= z$32 $x272)))
(assert
 (let (($x302 (Sub_1_1_1 a b)))
 (= z$34 $x302)))
(assert
 (let (($x276 (ite ctl_1 z$32 z$34)))
 (= z$36 $x276)))
(assert
 (let (($x390 (Sub_1_1_1 z$36 c)))
 (= z$41 $x390)))
(assert
 (let (($x636 (not z$41)))
 (= z$174 $x636)))
(assert
 (let (($x686 (not z$34)))
 (= z$172 $x686)))
(assert
 (= z$245 (and c z$174 z$172)))
(assert
 (= z$248 (not z$245)))
(assert
 z$248)
(assert
 (let (($x660 (Add_1_1_1 a$next b$next)))
 (= z$228 $x660)))
(assert
 (let (($x526 (Sub_1_1_1 a$next b$next)))
 (= z$222 $x526)))
(assert
 (let (($x488 (ite ctl_1$next z$228 z$222)))
 (= z$230 $x488)))
(assert
 (let (($x470 (Sub_1_1_1 z$230 c$next)))
 (= z$232 $x470)))
(assert
 (let (($x248 (not z$232)))
 (= z$246 $x248)))
(assert
 (let (($x505 (not z$222)))
 (= z$223 $x505)))
(assert
 (= z$247 (and c$next z$246 z$223)))
(assert
 (= z$254 (not z$247)))
(assert
 z$254)
(assert
 (= z$310 (and im.p1_a im.p1_b z$83)))
(assert
 (= z$312 (not z$310)))
(assert
 z$312)
(assert
 (let (($x724 (Sub_1_1_1 im.p1_a$next im.p1_b$next)))
 (= z$210 $x724)))
(assert
 (= z$311 (and im.p1_a$next im.p1_b$next z$210)))
(assert
 (= z$316 (not z$311)))
(assert
 z$316)
(assert
 (let (($x476 (not im.p1_b$next)))
 (= z$137 $x476)))
(assert
 (let (($x239 (Add_1_1_1 im.p1_a$next im.p1_b$next)))
 (= z$273 $x239)))
(assert
 (let (($x610 (not z$273)))
 (= z$274 $x610)))
(assert
 (= z$330 (and im.p1_a$next z$137 z$274)))
(assert
 (= z$332 (not z$330)))
(assert
 z$332)
(assert
 (let (($x1280 (not z$81)))
 (= z$140 $x1280)))
(assert
 (= z$329 (and im.p1_a z$3 z$140)))
(assert
 (= z$331 (not z$329)))
(assert
 z$331)
(assert
 (= z$368 (and im.p1_a im.p1_b z$81)))
(assert
 (= z$370 (not z$368)))
(assert
 z$370)
(assert
 (= z$369 (and im.p1_a$next im.p1_b$next z$273)))
(assert
 (= z$374 (not z$369)))
(assert
 z$374)
(assert
 (let (($x1275 (not z$83)))
 (= z$179 $x1275)))
(assert
 (= z$387 (and z$179 z$81)))
(assert
 (= z$389 (not z$387)))
(assert
 z$389)
(assert
 (let (($x733 (not z$210)))
 (= z$213 $x733)))
(assert
 (= z$388 (and z$213 z$273)))
(assert
 (= z$391 (not z$388)))
(assert
 z$391)
(assert
 (let (($x594 (not c$next)))
 (= z$256 $x594)))
(assert
 (= z$407 (and z$246 z$256 z$228)))
(assert
 (= z$409 (not z$407)))
(assert
 z$409)
(assert
 (let (($x985 (not c)))
 (= z$131 $x985)))
(assert
 (= z$406 (and z$174 z$131 z$32)))
(assert
 (= z$408 (not z$406)))
(assert
 z$408)
(assert
 (= z$442 (and z$222 z$256 z$246)))
(assert
 (= z$444 (not z$442)))
(assert
 z$444)
(assert
 (= z$441 (and z$34 z$131 z$174)))
(assert
 (= z$443 (not z$441)))
(assert
 z$443)
(assert
 (let (($x438 (Add_1_1_1 z$36 c)))
 (= z$39 $x438)))
(assert
 (let (($x1018 (not z$39)))
 (= z$132 $x1018)))
(assert
 (= z$486 (and z$132 z$131 z$32)))
(assert
 (= z$489 (not z$486)))
(assert
 z$489)
(assert
 (let (($x1122 (Add_1_1_1 z$230 c$next)))
 (= z$301 $x1122)))
(assert
 (let (($x955 (not z$301)))
 (= z$487 $x955)))
(assert
 (= z$488 (and z$487 z$256 z$228)))
(assert
 (= z$495 (not z$488)))
(assert
 z$495)
(assert
 (= z$522 (and z$1 im.p1_b z$141)))
(assert
 (= z$524 (not z$522)))
(assert
 z$524)
(assert
 (let (($x467 (not im.p1_a$next)))
 (= z$136 $x467)))
(assert
 (let (($x610 (not z$273)))
 (= z$276 $x610)))
(assert
 (= z$523 (and z$136 im.p1_b$next z$276)))
(assert
 (= z$528 (not z$523)))
(assert
 z$528)
(assert
 (let (($x332 (Add_1_1_1 im.p2_m$next im.p2_c$next)))
 (= z$201 $x332)))
(assert
 (= z$550 (and z$142 z$149 z$201)))
(assert
 (= z$552 (not z$550)))
(assert
 z$552)
(assert
 (= z$549 (and z$11 z$15 z$95)))
(assert
 (= z$551 (not z$549)))
(assert
 z$551)
(assert
 (let (($x1318 (not z$201)))
 (= z$554 $x1318)))
(assert
 (= z$604 (and z$142 im.p2_m$next z$554)))
(assert
 (= z$606 (not z$604)))
(assert
 z$606)
(assert
 (let (($x1521 (not z$95)))
 (= z$143 $x1521)))
(assert
 (= z$603 (and z$11 im.p2_m z$143)))
(assert
 (= z$605 (not z$603)))
(assert
 z$605)
(assert
 (let (($x410 (not z$150)))
 (= z$161 $x410)))
(assert
 (= z$622 (and z$142 im.p2_m$next z$161)))
(assert
 (= z$624 (not z$622)))
(assert
 z$624)
(assert
 (let (($x869 (not z$97)))
 (= z$165 $x869)))
(assert
 (= z$621 (and z$11 im.p2_m z$165)))
(assert
 (= z$623 (not z$621)))
(assert
 z$623)
(assert
 (= z$641 (and im.p2_c im.p2_m z$95)))
(assert
 (= z$643 (not z$641)))
(assert
 z$643)
(assert
 (= z$642 (and im.p2_c$next im.p2_m$next z$201)))
(assert
 (= z$645 (not z$642)))
(assert
 z$645)
(assert
 (= z$659 (and im.p2_c im.p2_m z$97)))
(assert
 (= z$661 (not z$659)))
(assert
 z$661)
(assert
 (= z$660 (and im.p2_c$next im.p2_m$next z$150)))
(assert
 (= z$663 (not z$660)))
(assert
 z$663)
(assert
 (= z$681 (and z$41 c z$34)))
(assert
 (= z$683 (not z$681)))
(assert
 z$683)
(assert
 (= z$682 (and z$232 c$next z$222)))
(assert
 (= z$687 (not z$682)))
(assert
 z$687)
(assert
 (= z$725 (and z$301 c$next z$228)))
(assert
 (= z$727 (not z$725)))
(assert
 z$727)
(assert
 (= z$724 (and z$39 c z$32)))
(assert
 (= z$726 (not z$724)))
(assert
 z$726)
(assert
 (= z$765 (and im.p2_c z$15 z$143)))
(assert
 (= z$767 (not z$765)))
(assert
 z$767)
(assert
 (= z$766 (and im.p2_c$next z$149 z$554)))
(assert
 (= z$769 (not z$766)))
(assert
 z$769)
(assert
 (= z$784 (and im.p2_c$next z$149 z$161)))
(assert
 (= z$786 (not z$784)))
(assert
 z$786)
(assert
 (= z$783 (and im.p2_c z$15 z$165)))
(assert
 (= z$785 (not z$783)))
(assert
 z$785)
(assert
 (= z$808 (and z$487 z$232)))
(assert
 (= z$810 (not z$808)))
(assert
 z$810)
(assert
 (= z$807 (and z$132 z$41)))
(assert
 (= z$809 (not z$807)))
(assert
 z$809)
(assert
 (let (($x391 (ite ctl_2 z$39 z$41)))
 (= z$43 $x391)))
(assert
 (= z$45 (ite im.reset false z$43)))
(assert
 (= z$47 (= s1$next z$45)))
(assert
 z$47)
(assert
 (= z$57 (ite im.reset false ctl_1)))
(assert
 (= z$59 (= im.p1_ctl_1$next z$57)))
(assert
 z$59)
(assert
 (= z$61 (ite im.reset false ctl_2)))
(assert
 (= z$63 (= im.p1_ctl_2$next z$61)))
(assert
 z$63)
(assert
 (= z$65 (ite im.reset false a)))
(assert
 (= z$67 (= im.p1_a$next z$65)))
(assert
 z$67)
(assert
 (= z$69 (ite im.reset false b)))
(assert
 (= z$71 (= im.p1_b$next z$69)))
(assert
 z$71)
(assert
 (= z$73 (ite im.reset false c)))
(assert
 (= z$75 (= im.p1_c$next z$73)))
(assert
 z$75)
(assert
 (= z$877 (and z$5 z$19 z$83)))
(assert
 (= z$878 (not z$877)))
(assert
 z$878)
(assert
 (= z$885 (and im.p2_m z$21 z$97)))
(assert
 (= z$886 (not z$885)))
(assert
 z$886)
(assert
 (let (($x1950 (not a)))
 (= z$127 $x1950)))
(assert
 (let (($x1744 (not b)))
 (= z$128 $x1744)))
(assert
 (= z$900 (and z$34 z$127 z$128)))
(assert
 (= z$901 (not z$900)))
(assert
 z$901)
(assert
 (= z$910 (and z$21 z$97)))
(assert
 (= z$911 (not z$910)))
(assert
 z$911)
(assert
 (= z$930 (and z$1 z$5 s1 z$179)))
(assert
 (= z$931 (not z$930)))
(assert
 z$931)
(assert
 (let (($x1951 (Add_1_1_1 z$34 c)))
 (= z$180 $x1951)))
(assert
 (= z$942 (and z$131 z$172 z$180)))
(assert
 (= z$944 (not z$942)))
(assert
 z$944)
(assert
 (=> p$0 s1$next))
(assert
 (=> p$1 im.p1_ctl_2$next))
(assert
 (=> p$2 im.p1_a$next))
(assert
 (=> p$3 im.p1_b$next))
(assert
 (=> p$4 (= z$138 (not im.p1_c$next))))
(assert
 (=> p$4 z$138))
(assert
 (=> p$5 (= z$148 (not im.reset$next))))
(assert
 (=> p$5 z$148))
(assert
 (let (($x724 (Sub_1_1_1 im.p1_a$next im.p1_b$next)))
 (let (($x615 (= z$210 $x724)))
 (=> p$6 $x615))))
(assert
 (=> p$6 (= z$211 (not z$210))))
(assert
 (=> p$6 z$211))
(assert
 (let (($x724 (Sub_1_1_1 im.p1_a$next im.p1_b$next)))
 (let (($x615 (= z$210 $x724)))
 (=> p$7 $x615))))
(assert
 (let (($x733 (not z$210)))
 (let (($x754 (= z$213 $x733)))
 (=> p$7 $x754))))
(assert
 (=> p$7 z$213))
(assert
 (=> p$8 (= z$176 (not im.p1_ctl_1$next))))
(assert
 (=> p$8 z$176))
(assert
 (let (($x239 (Add_1_1_1 im.p1_a$next im.p1_b$next)))
 (let (($x364 (= z$273 $x239)))
 (=> p$9 $x364))))
(assert
 (let (($x610 (not z$273)))
 (let (($x1286 (= z$276 $x610)))
 (=> p$9 $x1286))))
(assert
 (=> p$9 z$276))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(assert p$5)
(assert p$6)
(assert p$7)
(assert p$8)
(assert p$9)
(set-info :status unsat)
(check-sat)
(exit)
