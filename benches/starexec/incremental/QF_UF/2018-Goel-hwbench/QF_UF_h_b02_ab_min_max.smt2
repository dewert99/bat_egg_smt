(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: h_b02
query-maker: "Z3"
query-time: 0.616000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt3 0)
(declare-sort utt32 0)
(declare-sort utt31 0)
(declare-sort utt29 0)
(declare-fun z$n2s3 () utt3)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n6s3 () utt3)
(declare-fun z$n5s3 () utt3)
(declare-fun z$n4s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun z$n1s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun stato () utt3)
(declare-fun Concat_32_1_31 (Bool utt31) utt32)
(declare-fun z$n0s31 () utt31)
(declare-fun z$74 () utt32)
(declare-fun Concat_32_3_29 (utt3 utt29) utt32)
(declare-fun z$n0s29 () utt29)
(declare-fun z$81 () utt32)
(declare-fun z$41 () utt32)
(declare-fun z$45 () utt3)
(declare-fun z$47 () utt3)
(declare-fun z$49 () utt3)
(declare-fun z$51 () utt3)
(declare-fun z$53 () utt3)
(declare-fun z$55 () utt3)
(declare-fun z$57 () utt3)
(declare-fun z$59 () utt3)
(declare-fun z$61 () utt3)
(declare-fun z$63 () utt3)
(declare-fun z$65 () utt3)
(declare-fun z$67 () utt3)
(declare-fun z$69 () utt3)
(declare-fun stato$next () utt3)
(declare-fun z$94 () utt32)
(declare-fun z$97 () utt32)
(declare-fun U () Bool)
(declare-fun z$1 () Bool)
(declare-fun z$4 () Bool)
(declare-fun z$79 () Bool)
(declare-fun z$83 () Bool)
(declare-fun z$84 () Bool)
(declare-fun prop () Bool)
(declare-fun z$86 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$12 () Bool)
(declare-fun z$14 () Bool)
(declare-fun z$15 () Bool)
(declare-fun z$17 () Bool)
(declare-fun LINEA () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$26 () Bool)
(declare-fun z$28 () Bool)
(declare-fun z$29 () Bool)
(declare-fun z$71 () Bool)
(declare-fun U$next () Bool)
(declare-fun z$96 () Bool)
(declare-fun z$99 () Bool)
(declare-fun z$100 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$102 () Bool)
(declare-fun z$116 () Bool)
(declare-fun z$117 () Bool)
(declare-fun z$118 () Bool)
(declare-fun z$120 () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$115 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$167 () Bool)
(declare-fun z$169 () Bool)
(declare-fun p$0 () Bool)
(assert
 (and (distinct z$n0s3 z$n3s3 z$n4s3 z$n5s3 z$n6s3 z$n1s3 z$n2s3) true))
(assert
 (and (distinct z$n0s32 z$n1s32) true))
(assert
 (= z$1 (not U)))
(assert
 (let (($x139 (= stato z$n0s3)))
 (= z$4 $x139)))
(assert
 (let ((?x37 (Concat_32_1_31 U z$n0s31)))
 (= z$74 ?x37)))
(assert
 (= z$79 (and (distinct z$74 z$n1s32) true)))
(assert
 (let ((?x130 (Concat_32_3_29 stato z$n0s29)))
 (= z$81 ?x130)))
(assert
 (let (($x289 (= z$81 z$n1s32)))
 (= z$83 $x289)))
(assert
 (let (($x286 (or z$79 z$83)))
 (= z$84 $x286)))
(assert
 (= z$86 (= prop z$84)))
(assert
 (let (($x465 (= stato z$n3s3)))
 (= z$8 $x465)))
(assert
 (let (($x468 (= stato z$n4s3)))
 (= z$10 $x468)))
(assert
 (let (($x471 (= stato z$n5s3)))
 (= z$12 $x471)))
(assert
 (let (($x474 (= stato z$n6s3)))
 (= z$14 $x474)))
(assert
 (let (($x477 (or z$12 z$14)))
 (= z$15 $x477)))
(assert
 (let (($x481 (or z$8 z$10 z$15)))
 (= z$17 $x481)))
(assert
 (let ((?x486 (Concat_32_1_31 LINEA z$n0s31)))
 (= z$41 ?x486)))
(assert
 (let (($x559 (= z$41 z$n0s32)))
 (= z$44 $x559)))
(assert
 (let ((?x162 (ite z$44 z$n4s3 z$n0s3)))
 (= z$45 ?x162)))
(assert
 (let ((?x166 (ite z$14 z$45 z$n0s3)))
 (= z$47 ?x166)))
(assert
 (let ((?x171 (ite z$14 z$47 z$n6s3)))
 (= z$49 ?x171)))
(assert
 (let ((?x125 (ite z$10 z$n1s3 z$n4s3)))
 (= z$51 ?x125)))
(assert
 (let ((?x177 (ite z$15 z$49 z$51)))
 (= z$53 ?x177)))
(assert
 (let (($x127 (= stato z$n1s3)))
 (= z$26 $x127)))
(assert
 (let (($x546 (= stato z$n2s3)))
 (= z$28 $x546)))
(assert
 (let (($x195 (or z$26 z$28)))
 (= z$29 $x195)))
(assert
 (let ((?x198 (ite z$44 z$n3s3 z$n6s3)))
 (= z$55 ?x198)))
(assert
 (let ((?x200 (ite z$28 z$55 z$n0s3)))
 (= z$57 ?x200)))
(assert
 (let ((?x202 (ite z$44 z$n2s3 z$n5s3)))
 (= z$59 ?x202)))
(assert
 (let ((?x204 (ite z$26 z$59 z$n0s3)))
 (= z$61 ?x204)))
(assert
 (let ((?x206 (ite z$28 z$57 z$61)))
 (= z$63 ?x206)))
(assert
 (let ((?x208 (ite z$4 z$n1s3 stato)))
 (= z$65 ?x208)))
(assert
 (let ((?x210 (ite z$29 z$63 z$65)))
 (= z$67 ?x210)))
(assert
 (let ((?x212 (ite z$17 z$53 z$67)))
 (= z$69 ?x212)))
(assert
 (let (($x214 (= stato$next z$69)))
 (= z$71 $x214)))
(assert
 (let ((?x277 (Concat_32_1_31 U$next z$n0s31)))
 (= z$94 ?x277)))
(assert
 (= z$96 (and (distinct z$94 z$n1s32) true)))
(assert
 (let ((?x269 (Concat_32_3_29 stato$next z$n0s29)))
 (= z$97 ?x269)))
(assert
 (let (($x265 (= z$97 z$n1s32)))
 (= z$99 $x265)))
(assert
 (let (($x262 (or z$96 z$99)))
 (= z$100 $x262)))
(assert
 (= z$102 (= prop$next z$100)))
(assert
 (let (($x384 (= z$94 z$n1s32)))
 (= z$116 $x384)))
(assert
 (= z$117 (not U$next)))
(assert
 (= z$118 (and z$116 z$117)))
(assert
 (= z$120 (not z$118)))
(assert
 (let (($x372 (= z$74 z$n1s32)))
 (= z$77 $x372)))
(assert
 (= z$115 (and z$77 z$1)))
(assert
 (= z$119 (not z$115)))
(assert
 (= z$167 (and z$1 z$4 z$86 prop z$71 z$102 z$120 z$119)))
(assert
 z$167)
(assert
 (=> p$0 (= z$169 (= stato$next z$n3s3))))
(assert
 (=> p$0 z$169))
(check-sat)
(assert p$0)
(set-info :status unsat)
(check-sat)
(exit)
