(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: cache_coherence_two
query-maker: "Z3"
query-time: 0.884000 ms
query-class: abstract
query-category: assume
query-type: mus_min
status: sat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt2 0)
(declare-sort utt3 0)
(declare-sort utt32 0)
(declare-sort utt31 0)
(declare-fun z$n1s2 () utt2)
(declare-fun z$n2s2 () utt2)
(declare-fun z$n0s2 () utt2)
(declare-fun z$n4s3 () utt3)
(declare-fun z$n3s3 () utt3)
(declare-fun z$n1s3 () utt3)
(declare-fun z$n2s3 () utt3)
(declare-fun z$n5s3 () utt3)
(declare-fun z$n0s3 () utt3)
(declare-fun z$n0s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun pcacheB.next_state () utt2)
(declare-fun pcacheA.next_state () utt2)
(declare-fun pcacheB.state () utt2)
(declare-fun pcacheA.state () utt2)
(declare-fun z$288 () utt32)
(declare-fun Concat_32_1_31 (Bool utt31) utt32)
(declare-fun z$n0s31 () utt31)
(declare-fun z$666 () utt32)
(declare-fun z$293 () utt32)
(declare-fun z$671 () utt32)
(declare-fun pcacheA.state$next () utt2)
(declare-fun bus_arbiter.shared_snoop () utt3)
(declare-fun z$193 () utt32)
(declare-fun z$196 () utt32)
(declare-fun z$198 () utt32)
(declare-fun z$230 () utt32)
(declare-fun z$232 () utt32)
(declare-fun z$241 () utt32)
(declare-fun z$243 () utt32)
(declare-fun z$245 () utt32)
(declare-fun z$313 () utt2)
(declare-fun z$315 () utt2)
(declare-fun z$317 () utt2)
(declare-fun z$319 () utt2)
(declare-fun z$321 () utt2)
(declare-fun z$323 () utt2)
(declare-fun z$325 () utt2)
(declare-fun z$327 () utt2)
(declare-fun z$329 () utt2)
(declare-fun z$331 () utt2)
(declare-fun z$333 () utt2)
(declare-fun z$335 () utt2)
(declare-fun z$337 () utt2)
(declare-fun z$339 () utt2)
(declare-fun z$341 () utt2)
(declare-fun z$343 () utt2)
(declare-fun z$345 () utt2)
(declare-fun z$347 () utt2)
(declare-fun z$349 () utt2)
(declare-fun z$351 () utt2)
(declare-fun z$353 () utt2)
(declare-fun z$355 () utt2)
(declare-fun z$357 () utt2)
(declare-fun z$359 () utt2)
(declare-fun z$361 () utt2)
(declare-fun z$363 () utt2)
(declare-fun z$365 () utt2)
(declare-fun pcacheA.next_state$next () utt2)
(declare-fun pcacheB.state$next () utt2)
(declare-fun z$542 () utt2)
(declare-fun z$544 () utt2)
(declare-fun z$546 () utt2)
(declare-fun z$548 () utt2)
(declare-fun z$550 () utt2)
(declare-fun z$552 () utt2)
(declare-fun z$554 () utt2)
(declare-fun z$556 () utt2)
(declare-fun z$558 () utt2)
(declare-fun z$560 () utt2)
(declare-fun z$562 () utt2)
(declare-fun z$564 () utt2)
(declare-fun z$566 () utt2)
(declare-fun z$568 () utt2)
(declare-fun z$570 () utt2)
(declare-fun z$572 () utt2)
(declare-fun z$574 () utt2)
(declare-fun z$576 () utt2)
(declare-fun z$578 () utt2)
(declare-fun z$580 () utt2)
(declare-fun z$582 () utt2)
(declare-fun z$584 () utt2)
(declare-fun z$586 () utt2)
(declare-fun z$588 () utt2)
(declare-fun z$590 () utt2)
(declare-fun pcacheB.next_state$next () utt2)
(declare-fun z$688 () utt32)
(declare-fun z$693 () utt32)
(declare-fun z$697 () utt32)
(declare-fun z$702 () utt32)
(declare-fun pcacheB.snoop_type () utt3)
(declare-fun z$77 () utt3)
(declare-fun pcacheA.snoop_type () utt3)
(declare-fun z$79 () utt3)
(declare-fun bus_arbiter.shared_snoop$next () utt3)
(declare-fun z$801 () Bool)
(declare-fun z$742 () Bool)
(declare-fun bus_arbiter.is_snoop () Bool)
(declare-fun z$7 () Bool)
(declare-fun bus_arbiter.bus_ackB () Bool)
(declare-fun z$3 () Bool)
(declare-fun z$718 () Bool)
(declare-fun z$714 () Bool)
(declare-fun bus_arbiter.bus_ackA () Bool)
(declare-fun z$1 () Bool)
(declare-fun z$88 () Bool)
(declare-fun z$278 () Bool)
(declare-fun Extract_1_0_0_32 (utt32) Bool)
(declare-fun z$290 () Bool)
(declare-fun z$670 () Bool)
(declare-fun z$292 () Bool)
(declare-fun z$296 () Bool)
(declare-fun z$295 () Bool)
(declare-fun z$673 () Bool)
(declare-fun z$674 () Bool)
(declare-fun prop () Bool)
(declare-fun z$676 () Bool)
(declare-fun z$158 () Bool)
(declare-fun z$160 () Bool)
(declare-fun z$162 () Bool)
(declare-fun z$163 () Bool)
(declare-fun z$164 () Bool)
(declare-fun z$165 () Bool)
(declare-fun bus_arbiter.invalidate () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$178 () Bool)
(declare-fun z$179 () Bool)
(declare-fun z$180 () Bool)
(declare-fun z$20 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$182 () Bool)
(declare-fun z$184 () Bool)
(declare-fun z$185 () Bool)
(declare-fun z$187 () Bool)
(declare-fun z$189 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$205 () Bool)
(declare-fun z$206 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$208 () Bool)
(declare-fun z$209 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$211 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$215 () Bool)
(declare-fun z$217 () Bool)
(declare-fun z$177 () Bool)
(declare-fun z$218 () Bool)
(declare-fun z$220 () Bool)
(declare-fun z$222 () Bool)
(declare-fun z$224 () Bool)
(declare-fun z$226 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$237 () Bool)
(declare-fun z$234 () Bool)
(declare-fun z$239 () Bool)
(declare-fun z$250 () Bool)
(declare-fun z$251 () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$253 () Bool)
(declare-fun z$255 () Bool)
(declare-fun z$268 () Bool)
(declare-fun z$126 () Bool)
(declare-fun z$286 () Bool)
(declare-fun z$298 () Bool)
(declare-fun z$300 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$507 () Bool)
(declare-fun z$509 () Bool)
(declare-fun z$513 () Bool)
(declare-fun z$475 () Bool)
(declare-fun z$530 () Bool)
(declare-fun z$592 () Bool)
(declare-fun z$687 () Bool)
(declare-fun z$691 () Bool)
(declare-fun z$690 () Bool)
(declare-fun z$695 () Bool)
(declare-fun z$696 () Bool)
(declare-fun z$700 () Bool)
(declare-fun z$699 () Bool)
(declare-fun z$704 () Bool)
(declare-fun z$705 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$707 () Bool)
(declare-fun pcacheB.inv_out () Bool)
(declare-fun pcacheB.bus_req () Bool)
(declare-fun z$60 () Bool)
(declare-fun pcacheA.inv_out () Bool)
(declare-fun pcacheA.bus_req () Bool)
(declare-fun z$62 () Bool)
(declare-fun bus_arbiter.invalidate$next () Bool)
(declare-fun z$64 () Bool)
(declare-fun z$67 () Bool)
(declare-fun bus_arbiter.bus_ackA$next () Bool)
(declare-fun z$69 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun bus_arbiter.bus_ackB$next () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$81 () Bool)
(declare-fun z$83 () Bool)
(declare-fun bus_arbiter.is_snoop$next () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$906 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$721 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$722 () Bool)
(declare-fun p$2 () Bool)
(assert
 (and (distinct z$n0s2 z$n2s2 z$n1s2) true))
(assert
 (and (distinct z$n0s3 z$n5s3 z$n2s3 z$n1s3 z$n3s3 z$n4s3) true))
(assert
 (and (distinct z$n1s32 z$n0s32) true))
(assert
 (= z$801 (and (distinct pcacheB.next_state z$n1s2) true)))
(assert
 (= z$742 (and (distinct pcacheA.next_state z$n1s2) true)))
(assert
 (let (($x169 (not bus_arbiter.is_snoop)))
 (= z$7 $x169)))
(assert
 (= z$3 (not bus_arbiter.bus_ackB)))
(assert
 (= z$718 (and (distinct pcacheB.state z$n1s2) true)))
(assert
 (= z$714 (and (distinct pcacheA.state z$n1s2) true)))
(assert
 (= z$1 (not bus_arbiter.bus_ackA)))
(assert
 (let (($x44 (= pcacheA.state z$n1s2)))
 (= z$88 $x44)))
(assert
 (let ((?x47 (ite z$88 z$n1s32 z$n0s32)))
 (= z$288 ?x47)))
(assert
 (= z$278 (ite z$88 true false)))
(assert
 (let (($x56 (Extract_1_0_0_32 z$288)))
 (= z$290 $x56)))
(assert
 (= z$290 z$278))
(assert
 (let ((?x62 (Concat_32_1_31 z$290 z$n0s31)))
 (= z$666 ?x62)))
(assert
 (= z$670 (and (distinct z$666 z$n1s32) true)))
(assert
 (let (($x70 (= pcacheB.state z$n1s2)))
 (= z$292 $x70)))
(assert
 (let ((?x73 (ite z$292 z$n1s32 z$n0s32)))
 (= z$293 ?x73)))
(assert
 (= z$296 (ite z$292 true false)))
(assert
 (let (($x80 (Extract_1_0_0_32 z$293)))
 (= z$295 $x80)))
(assert
 (= z$295 z$296))
(assert
 (let ((?x85 (Concat_32_1_31 z$295 z$n0s31)))
 (= z$671 ?x85)))
(assert
 (let (($x89 (= z$671 z$n1s32)))
 (= z$673 $x89)))
(assert
 (let (($x92 (or z$670 z$673)))
 (= z$674 $x92)))
(assert
 (= z$676 (= prop z$674)))
(assert
 (let (($x255 (= pcacheA.state$next pcacheA.next_state)))
 (= z$158 $x255)))
(assert
 (let (($x259 (or z$7 bus_arbiter.bus_ackA)))
 (= z$160 $x259)))
(assert
 (let (($x263 (= bus_arbiter.shared_snoop z$n3s3)))
 (= z$162 $x263)))
(assert
 (let (($x266 (= bus_arbiter.shared_snoop z$n4s3)))
 (= z$163 $x266)))
(assert
 (let (($x269 (= bus_arbiter.shared_snoop z$n5s3)))
 (= z$164 $x269)))
(assert
 (let (($x272 (or z$162 z$163 z$164)))
 (= z$165 $x272)))
(assert
 (= z$5 (not bus_arbiter.invalidate)))
(assert
 (let (($x276 (= bus_arbiter.shared_snoop z$n1s3)))
 (= z$178 $x276)))
(assert
 (let (($x279 (= pcacheA.next_state z$n1s2)))
 (= z$179 $x279)))
(assert
 (let (($x282 (or z$178 z$179)))
 (= z$180 $x282)))
(assert
 (let (($x190 (= pcacheA.next_state z$n0s2)))
 (= z$20 $x190)))
(assert
 (let (($x173 (= bus_arbiter.shared_snoop z$n0s3)))
 (= z$10 $x173)))
(assert
 (let (($x286 (or z$10 z$178)))
 (= z$182 $x286)))
(assert
 (= z$184 (not z$182)))
(assert
 (= z$185 (and z$20 z$184)))
(assert
 (let (($x297 (or z$163 z$164)))
 (= z$187 $x297)))
(assert
 (= z$189 (and z$179 z$187)))
(assert
 (let (($x305 (or z$185 z$189)))
 (= z$191 $x305)))
(assert
 (let ((?x309 (Concat_32_1_31 z$1 z$n0s31)))
 (= z$193 ?x309)))
(assert
 (let ((?x313 (ite z$191 z$193 z$n0s32)))
 (= z$196 ?x313)))
(assert
 (let ((?x317 (ite z$180 z$n1s32 z$196)))
 (= z$198 ?x317)))
(assert
 (= z$205 (ite z$191 z$1 false)))
(assert
 (= z$206 (ite z$180 true z$205)))
(assert
 (let (($x327 (Extract_1_0_0_32 z$198)))
 (= z$200 $x327)))
(assert
 (= z$200 z$206))
(assert
 (let (($x332 (= pcacheB.next_state z$n1s2)))
 (= z$208 $x332)))
(assert
 (let (($x335 (or z$178 z$208)))
 (= z$209 $x335)))
(assert
 (let (($x228 (= pcacheB.next_state z$n0s2)))
 (= z$44 $x228)))
(assert
 (= z$211 (and z$44 z$184)))
(assert
 (= z$213 (and z$208 z$187)))
(assert
 (let (($x347 (or z$211 z$213)))
 (= z$215 $x347)))
(assert
 (let (($x351 (= pcacheA.next_state z$n2s2)))
 (= z$217 $x351)))
(assert
 (let (($x354 (= bus_arbiter.shared_snoop z$n2s3)))
 (= z$177 $x354)))
(assert
 (let (($x357 (or z$177 z$163)))
 (= z$218 $x357)))
(assert
 (let (($x361 (or z$218 z$164)))
 (= z$220 $x361)))
(assert
 (= z$222 (and z$178 z$179)))
(assert
 (let (($x369 (or z$220 z$222)))
 (= z$224 $x369)))
(assert
 (= z$226 (and z$162 z$20)))
(assert
 (let (($x377 (or z$224 z$226)))
 (= z$228 $x377)))
(assert
 (let ((?x381 (ite z$228 z$n1s32 z$n0s32)))
 (= z$230 ?x381)))
(assert
 (let ((?x385 (ite z$217 z$n0s32 z$230)))
 (= z$232 ?x385)))
(assert
 (= z$236 (ite z$228 true false)))
(assert
 (= z$237 (ite z$217 false z$236)))
(assert
 (let (($x395 (Extract_1_0_0_32 z$232)))
 (= z$234 $x395)))
(assert
 (= z$234 z$237))
(assert
 (let (($x400 (ite z$234 z$1 z$3)))
 (= z$239 $x400)))
(assert
 (let ((?x404 (Concat_32_1_31 z$239 z$n0s31)))
 (= z$241 ?x404)))
(assert
 (let ((?x408 (ite z$215 z$241 z$n0s32)))
 (= z$243 ?x408)))
(assert
 (let ((?x412 (ite z$209 z$n1s32 z$243)))
 (= z$245 ?x412)))
(assert
 (= z$250 (ite z$215 z$239 false)))
(assert
 (= z$251 (ite z$209 true z$250)))
(assert
 (let (($x422 (Extract_1_0_0_32 z$245)))
 (= z$247 $x422)))
(assert
 (= z$247 z$251))
(assert
 (let (($x427 (or z$200 z$247)))
 (= z$253 $x427)))
(assert
 (= z$255 (not z$253)))
(assert
 (let ((?x434 (ite z$255 z$n0s2 z$n1s2)))
 (= z$313 ?x434)))
(assert
 (let ((?x438 (ite z$5 z$313 pcacheA.state)))
 (= z$315 ?x438)))
(assert
 (let ((?x442 (ite bus_arbiter.invalidate z$n0s2 pcacheA.state)))
 (= z$317 ?x442)))
(assert
 (let ((?x446 (ite z$5 z$313 z$317)))
 (= z$319 ?x446)))
(assert
 (let ((?x450 (ite z$163 z$315 z$319)))
 (= z$321 ?x450)))
(assert
 (let ((?x454 (ite z$164 z$315 z$321)))
 (= z$323 ?x454)))
(assert
 (let ((?x458 (ite z$255 z$n0s2 pcacheA.state)))
 (= z$325 ?x458)))
(assert
 (let ((?x462 (ite z$5 z$325 pcacheA.state)))
 (= z$327 ?x462)))
(assert
 (let ((?x466 (ite z$178 z$n0s2 pcacheA.state)))
 (= z$329 ?x466)))
(assert
 (let ((?x470 (ite z$177 z$327 z$329)))
 (= z$331 ?x470)))
(assert
 (let ((?x474 (ite z$165 z$323 z$331)))
 (= z$333 ?x474)))
(assert
 (let ((?x478 (ite z$1 pcacheA.state z$333)))
 (= z$335 ?x478)))
(assert
 (= z$268 (and bus_arbiter.is_snoop z$1)))
(assert
 (let ((?x486 (ite bus_arbiter.invalidate z$n2s2 pcacheA.state)))
 (= z$337 ?x486)))
(assert
 (let (($x490 (= pcacheA.state z$n0s2)))
 (= z$126 $x490)))
(assert
 (let ((?x493 (ite z$5 z$n1s2 z$n2s2)))
 (= z$339 ?x493)))
(assert
 (let ((?x497 (ite z$126 z$339 pcacheA.state)))
 (= z$341 ?x497)))
(assert
 (let ((?x501 (ite z$88 z$337 z$341)))
 (= z$343 ?x501)))
(assert
 (let ((?x505 (ite z$163 z$343 z$341)))
 (= z$345 ?x505)))
(assert
 (let ((?x509 (ite z$164 z$343 z$345)))
 (= z$347 ?x509)))
(assert
 (let ((?x513 (ite z$88 z$n2s2 pcacheA.state)))
 (= z$349 ?x513)))
(assert
 (let ((?x517 (ite z$178 z$349 pcacheA.state)))
 (= z$351 ?x517)))
(assert
 (let ((?x521 (ite z$177 z$341 z$351)))
 (= z$353 ?x521)))
(assert
 (let ((?x525 (ite z$165 z$347 z$353)))
 (= z$355 ?x525)))
(assert
 (= z$286 (and z$177 z$88)))
(assert
 (= z$298 (and z$290 z$295)))
(assert
 (= z$300 (not z$298)))
(assert
 (let ((?x540 (ite z$300 z$n0s2 pcacheA.state)))
 (= z$357 ?x540)))
(assert
 (let ((?x544 (ite z$286 z$357 pcacheA.next_state)))
 (= z$359 ?x544)))
(assert
 (let ((?x548 (ite z$200 z$355 z$359)))
 (= z$361 ?x548)))
(assert
 (let ((?x552 (ite z$268 z$361 pcacheA.next_state)))
 (= z$363 ?x552)))
(assert
 (let ((?x556 (ite z$160 z$335 z$363)))
 (= z$365 ?x556)))
(assert
 (let (($x560 (= pcacheA.next_state$next z$365)))
 (= z$367 $x560)))
(assert
 (let (($x563 (= pcacheB.state$next pcacheB.next_state)))
 (= z$507 $x563)))
(assert
 (let (($x567 (or z$7 bus_arbiter.bus_ackB)))
 (= z$509 $x567)))
(assert
 (let ((?x571 (ite z$5 z$313 pcacheB.state)))
 (= z$542 ?x571)))
(assert
 (let ((?x575 (ite bus_arbiter.invalidate z$n0s2 pcacheB.state)))
 (= z$544 ?x575)))
(assert
 (let ((?x579 (ite z$5 z$313 z$544)))
 (= z$546 ?x579)))
(assert
 (let ((?x583 (ite z$163 z$542 z$546)))
 (= z$548 ?x583)))
(assert
 (let ((?x587 (ite z$164 z$542 z$548)))
 (= z$550 ?x587)))
(assert
 (let ((?x591 (ite z$255 z$n0s2 pcacheB.state)))
 (= z$552 ?x591)))
(assert
 (let ((?x595 (ite z$5 z$552 pcacheB.state)))
 (= z$554 ?x595)))
(assert
 (let ((?x599 (ite z$178 z$n0s2 pcacheB.state)))
 (= z$556 ?x599)))
(assert
 (let ((?x603 (ite z$177 z$554 z$556)))
 (= z$558 ?x603)))
(assert
 (let ((?x607 (ite z$165 z$550 z$558)))
 (= z$560 ?x607)))
(assert
 (let ((?x611 (ite z$3 pcacheB.state z$560)))
 (= z$562 ?x611)))
(assert
 (= z$513 (and bus_arbiter.is_snoop z$3)))
(assert
 (let ((?x619 (ite bus_arbiter.invalidate z$n2s2 pcacheB.state)))
 (= z$564 ?x619)))
(assert
 (let (($x623 (= pcacheB.state z$n0s2)))
 (= z$475 $x623)))
(assert
 (let ((?x626 (ite z$475 z$339 pcacheB.state)))
 (= z$566 ?x626)))
(assert
 (let ((?x630 (ite z$292 z$564 z$566)))
 (= z$568 ?x630)))
(assert
 (let ((?x634 (ite z$163 z$568 z$566)))
 (= z$570 ?x634)))
(assert
 (let ((?x638 (ite z$164 z$568 z$570)))
 (= z$572 ?x638)))
(assert
 (let ((?x642 (ite z$292 z$n2s2 pcacheB.state)))
 (= z$574 ?x642)))
(assert
 (let ((?x646 (ite z$178 z$574 pcacheB.state)))
 (= z$576 ?x646)))
(assert
 (let ((?x650 (ite z$177 z$566 z$576)))
 (= z$578 ?x650)))
(assert
 (let ((?x654 (ite z$165 z$572 z$578)))
 (= z$580 ?x654)))
(assert
 (= z$530 (and z$177 z$292)))
(assert
 (let ((?x662 (ite z$300 z$n0s2 pcacheB.state)))
 (= z$582 ?x662)))
(assert
 (let ((?x666 (ite z$530 z$582 pcacheB.next_state)))
 (= z$584 ?x666)))
(assert
 (let ((?x670 (ite z$247 z$580 z$584)))
 (= z$586 ?x670)))
(assert
 (let ((?x674 (ite z$513 z$586 pcacheB.next_state)))
 (= z$588 ?x674)))
(assert
 (let ((?x678 (ite z$509 z$562 z$588)))
 (= z$590 ?x678)))
(assert
 (let (($x682 (= pcacheB.next_state$next z$590)))
 (= z$592 $x682)))
(assert
 (let (($x101 (= pcacheA.state$next z$n1s2)))
 (= z$687 $x101)))
(assert
 (let ((?x104 (ite z$687 z$n1s32 z$n0s32)))
 (= z$688 ?x104)))
(assert
 (= z$691 (ite z$687 true false)))
(assert
 (let (($x111 (Extract_1_0_0_32 z$688)))
 (= z$690 $x111)))
(assert
 (= z$690 z$691))
(assert
 (let ((?x116 (Concat_32_1_31 z$690 z$n0s31)))
 (= z$693 ?x116)))
(assert
 (= z$695 (and (distinct z$693 z$n1s32) true)))
(assert
 (let (($x124 (= pcacheB.state$next z$n1s2)))
 (= z$696 $x124)))
(assert
 (let ((?x127 (ite z$696 z$n1s32 z$n0s32)))
 (= z$697 ?x127)))
(assert
 (= z$700 (ite z$696 true false)))
(assert
 (let (($x134 (Extract_1_0_0_32 z$697)))
 (= z$699 $x134)))
(assert
 (= z$699 z$700))
(assert
 (let ((?x139 (Concat_32_1_31 z$699 z$n0s31)))
 (= z$702 ?x139)))
(assert
 (let (($x143 (= z$702 z$n1s32)))
 (= z$704 $x143)))
(assert
 (let (($x146 (or z$695 z$704)))
 (= z$705 $x146)))
(assert
 (= z$707 (= prop$next z$705)))
(assert
 (= z$60 (ite pcacheB.bus_req pcacheB.inv_out false)))
(assert
 (let (($x760 (ite pcacheA.bus_req pcacheA.inv_out z$60)))
 (= z$62 $x760)))
(assert
 (= z$64 (= bus_arbiter.invalidate$next z$62)))
(assert
 (= z$67 (ite pcacheA.bus_req true false)))
(assert
 (= z$69 (= bus_arbiter.bus_ackA$next z$67)))
(assert
 (= z$71 (ite pcacheB.bus_req true false)))
(assert
 (= z$73 (ite pcacheA.bus_req false z$71)))
(assert
 (= z$75 (= bus_arbiter.bus_ackB$next z$73)))
(assert
 (let ((?x738 (ite pcacheB.bus_req pcacheB.snoop_type z$n0s3)))
 (= z$77 ?x738)))
(assert
 (let ((?x697 (ite pcacheA.bus_req pcacheA.snoop_type z$77)))
 (= z$79 ?x697)))
(assert
 (let (($x826 (= bus_arbiter.shared_snoop$next z$79)))
 (= z$81 $x826)))
(assert
 (= z$83 (ite pcacheA.bus_req true z$71)))
(assert
 (= z$85 (= bus_arbiter.is_snoop$next z$83)))
(assert
 (let (($x946 (and z$801 z$742 z$7 z$3 z$718 z$718 z$714 z$714 z$1 z$676 prop z$158 z$367 z$507 z$592 z$707 z$64 z$69 z$75 z$81 z$85)))
 (= z$906 $x946)))
(assert
 z$906)
(assert
 (=> p$0 bus_arbiter.is_snoop$next))
(assert
 (=> p$1 (= z$721 (not bus_arbiter.bus_ackA$next))))
(assert
 (=> p$1 z$721))
(assert
 (=> p$2 (= z$722 (not bus_arbiter.bus_ackB$next))))
(assert
 (=> p$2 z$722))
(check-sat)
(assert p$1)
(assert p$0)
(set-info :status sat)
(check-sat)
(exit)
