(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: counter_v
query-maker: "Z3"
query-time: 2.723000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt4 0)
(declare-fun z$n12s4 () utt4)
(declare-fun z$n9s4 () utt4)
(declare-fun z$n7s4 () utt4)
(declare-fun z$n5s4 () utt4)
(declare-fun z$n6s4 () utt4)
(declare-fun z$n8s4 () utt4)
(declare-fun z$n10s4 () utt4)
(declare-fun z$n14s4 () utt4)
(declare-fun z$n3s4 () utt4)
(declare-fun z$n4s4 () utt4)
(declare-fun z$n13s4 () utt4)
(declare-fun z$n2s4 () utt4)
(declare-fun z$n11s4 () utt4)
(declare-fun z$n0s4 () utt4)
(declare-fun z$n15s4 () utt4)
(declare-fun z$n1s4 () utt4)
(declare-fun Add_4_4_4 (utt4 utt4) utt4)
(declare-fun X () utt4)
(declare-fun z$7 () utt4)
(declare-fun X$next () utt4)
(declare-fun z$35 () utt4)
(declare-fun z$9 () utt4)
(declare-fun z$11 () utt4)
(declare-fun z$57 () Bool)
(declare-fun z$16 () Bool)
(declare-fun prop () Bool)
(declare-fun z$17 () Bool)
(declare-fun z$27 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$28 () Bool)
(declare-fun z$34 () Bool)
(declare-fun z$37 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$45 () Bool)
(declare-fun z$2 () Bool)
(declare-fun z$33 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$6 () Bool)
(declare-fun en () Bool)
(declare-fun z$13 () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$78 () Bool)
(declare-fun z$118 () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$124 () Bool)
(declare-fun z$137 () Bool)
(declare-fun z$151 () Bool)
(declare-fun z$152 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$207 () Bool)
(declare-fun z$208 () Bool)
(declare-fun z$221 () Bool)
(declare-fun z$236 () Bool)
(declare-fun z$237 () Bool)
(declare-fun z$295 () Bool)
(declare-fun z$302 () Bool)
(declare-fun z$303 () Bool)
(declare-fun z$316 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$333 () Bool)
(declare-fun z$391 () Bool)
(declare-fun z$398 () Bool)
(declare-fun z$399 () Bool)
(declare-fun z$412 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$430 () Bool)
(declare-fun z$494 () Bool)
(declare-fun z$501 () Bool)
(declare-fun z$502 () Bool)
(declare-fun z$515 () Bool)
(declare-fun z$533 () Bool)
(declare-fun z$534 () Bool)
(declare-fun z$604 () Bool)
(declare-fun z$611 () Bool)
(declare-fun z$612 () Bool)
(declare-fun z$625 () Bool)
(declare-fun z$644 () Bool)
(declare-fun z$645 () Bool)
(declare-fun z$721 () Bool)
(declare-fun z$728 () Bool)
(declare-fun z$729 () Bool)
(declare-fun z$742 () Bool)
(declare-fun z$762 () Bool)
(declare-fun z$763 () Bool)
(declare-fun z$845 () Bool)
(declare-fun z$852 () Bool)
(declare-fun z$853 () Bool)
(declare-fun z$866 () Bool)
(declare-fun z$887 () Bool)
(declare-fun z$888 () Bool)
(declare-fun z$976 () Bool)
(declare-fun z$983 () Bool)
(declare-fun z$984 () Bool)
(declare-fun z$997 () Bool)
(declare-fun z$1019 () Bool)
(declare-fun z$1020 () Bool)
(declare-fun z$1114 () Bool)
(declare-fun z$1121 () Bool)
(declare-fun z$1122 () Bool)
(declare-fun z$1135 () Bool)
(declare-fun z$1158 () Bool)
(declare-fun z$1159 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$211 () Bool)
(declare-fun z$306 () Bool)
(declare-fun z$402 () Bool)
(declare-fun z$505 () Bool)
(declare-fun z$615 () Bool)
(declare-fun z$732 () Bool)
(declare-fun z$856 () Bool)
(declare-fun z$987 () Bool)
(declare-fun z$1125 () Bool)
(declare-fun z$1173 () Bool)
(declare-fun z$1174 () Bool)
(declare-fun en$next () Bool)
(declare-fun p$0 () Bool)
(declare-fun p$1 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$47 () Bool)
(declare-fun p$3 () Bool)
(declare-fun p$4 () Bool)
(declare-fun p$5 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun p$8 () Bool)
(declare-fun p$9 () Bool)
(declare-fun p$10 () Bool)
(declare-fun p$11 () Bool)
(declare-fun p$12 () Bool)
(declare-fun p$13 () Bool)
(assert
 (and (distinct z$n1s4 z$n15s4 z$n0s4 z$n11s4 z$n2s4 z$n13s4 z$n4s4 z$n3s4 z$n14s4 z$n10s4 z$n8s4 z$n6s4 z$n5s4 z$n7s4 z$n9s4 z$n12s4) true))
(assert
 (let ((?x280 (Add_4_4_4 X z$n1s4)))
 (= z$7 ?x280)))
(assert
 (= z$57 (and (distinct z$7 z$n15s4) true)))
(assert
 z$57)
(assert
 (= z$16 (and (distinct X z$n15s4) true)))
(assert
 (= z$17 (= prop z$16)))
(assert
 z$17)
(assert
 prop)
(assert
 (= z$27 (and (distinct X$next z$n15s4) true)))
(assert
 (= z$28 (= prop$next z$27)))
(assert
 z$28)
(assert
 (let (($x35 (= X$next z$n1s4)))
 (= z$34 $x35)))
(assert
 (let ((?x183 (Add_4_4_4 X$next z$n1s4)))
 (= z$35 ?x183)))
(assert
 (let (($x207 (= z$35 z$n15s4)))
 (= z$37 $x207)))
(assert
 (= z$43 (and z$34 z$37)))
(assert
 (= z$45 (not z$43)))
(assert
 z$45)
(assert
 (let (($x258 (= X z$n1s4)))
 (= z$2 $x258)))
(assert
 (let (($x293 (= z$7 z$n15s4)))
 (= z$33 $x293)))
(assert
 (= z$42 (and z$2 z$33)))
(assert
 (= z$44 (not z$42)))
(assert
 z$44)
(assert
 (let (($x141 (= X z$n15s4)))
 (= z$6 $x141)))
(assert
 (= z$9 (ite z$6 z$n1s4 z$7)))
(assert
 (let ((?x121 (ite en z$9 X)))
 (= z$11 ?x121)))
(assert
 (let (($x179 (= X$next z$11)))
 (= z$13 $x179)))
(assert
 (= z$77 (and z$37 z$13 z$2)))
(assert
 (= z$78 (not z$77)))
(assert
 z$78)
(assert
 (let (($x155 (= X z$n2s4)))
 (= z$118 $x155)))
(assert
 (= z$123 (and z$118 z$37 z$13)))
(assert
 (= z$124 (not z$123)))
(assert
 z$124)
(assert
 (= z$137 (and (distinct X$next z$n2s4) true)))
(assert
 (= z$151 (and en z$2 z$13 z$137)))
(assert
 (= z$152 (not z$151)))
(assert
 z$152)
(assert
 (let (($x670 (= X z$n3s4)))
 (= z$200 $x670)))
(assert
 (= z$207 (and z$200 z$37 z$13)))
(assert
 (= z$208 (not z$207)))
(assert
 z$208)
(assert
 (= z$221 (and (distinct X$next z$n3s4) true)))
(assert
 (= z$236 (and en z$13 z$118 z$221)))
(assert
 (= z$237 (not z$236)))
(assert
 z$237)
(assert
 (let (($x866 (= X z$n4s4)))
 (= z$295 $x866)))
(assert
 (= z$302 (and z$295 z$37 z$13)))
(assert
 (= z$303 (not z$302)))
(assert
 z$303)
(assert
 (= z$316 (and (distinct X$next z$n4s4) true)))
(assert
 (= z$332 (and en z$13 z$200 z$316)))
(assert
 (= z$333 (not z$332)))
(assert
 z$333)
(assert
 (let (($x345 (= X z$n5s4)))
 (= z$391 $x345)))
(assert
 (= z$398 (and z$391 z$37 z$13)))
(assert
 (= z$399 (not z$398)))
(assert
 z$399)
(assert
 (= z$412 (and (distinct X$next z$n5s4) true)))
(assert
 (= z$429 (and en z$13 z$295 z$412)))
(assert
 (= z$430 (not z$429)))
(assert
 z$430)
(assert
 (let (($x497 (= X z$n6s4)))
 (= z$494 $x497)))
(assert
 (= z$501 (and z$494 z$37 z$13)))
(assert
 (= z$502 (not z$501)))
(assert
 z$502)
(assert
 (= z$515 (and (distinct X$next z$n6s4) true)))
(assert
 (= z$533 (and en z$13 z$391 z$515)))
(assert
 (= z$534 (not z$533)))
(assert
 z$534)
(assert
 (let (($x1295 (= X z$n7s4)))
 (= z$604 $x1295)))
(assert
 (= z$611 (and z$604 z$37 z$13)))
(assert
 (= z$612 (not z$611)))
(assert
 z$612)
(assert
 (= z$625 (and (distinct X$next z$n7s4) true)))
(assert
 (= z$644 (and en z$13 z$494 z$625)))
(assert
 (= z$645 (not z$644)))
(assert
 z$645)
(assert
 (let (($x1035 (= X z$n8s4)))
 (= z$721 $x1035)))
(assert
 (= z$728 (and z$721 z$37 z$13)))
(assert
 (= z$729 (not z$728)))
(assert
 z$729)
(assert
 (= z$742 (and (distinct X$next z$n8s4) true)))
(assert
 (= z$762 (and en z$13 z$604 z$742)))
(assert
 (= z$763 (not z$762)))
(assert
 z$763)
(assert
 (let (($x1338 (= X z$n9s4)))
 (= z$845 $x1338)))
(assert
 (= z$852 (and z$845 z$37 z$13)))
(assert
 (= z$853 (not z$852)))
(assert
 z$853)
(assert
 (= z$866 (and (distinct X$next z$n9s4) true)))
(assert
 (= z$887 (and en z$13 z$721 z$866)))
(assert
 (= z$888 (not z$887)))
(assert
 z$888)
(assert
 (let (($x1727 (= X z$n10s4)))
 (= z$976 $x1727)))
(assert
 (= z$983 (and z$976 z$37 z$13)))
(assert
 (= z$984 (not z$983)))
(assert
 z$984)
(assert
 (= z$997 (and (distinct X$next z$n10s4) true)))
(assert
 (= z$1019 (and en z$13 z$845 z$997)))
(assert
 (= z$1020 (not z$1019)))
(assert
 z$1020)
(assert
 z$13)
(assert
 (let (($x1614 (= X z$n11s4)))
 (= z$1114 $x1614)))
(assert
 (= z$1121 (and z$1114 z$37 z$13)))
(assert
 (= z$1122 (not z$1121)))
(assert
 z$1122)
(assert
 (= z$1135 (and (distinct X$next z$n11s4) true)))
(assert
 (= z$1158 (and en z$13 z$976 z$1135)))
(assert
 (= z$1159 (not z$1158)))
(assert
 z$1159)
(assert
 (= z$55 (and (distinct X z$n1s4) true)))
(assert
 (= z$127 (and (distinct X z$n2s4) true)))
(assert
 (= z$211 (and (distinct X z$n3s4) true)))
(assert
 (= z$306 (and (distinct X z$n4s4) true)))
(assert
 (= z$402 (and (distinct X z$n5s4) true)))
(assert
 (= z$505 (and (distinct X z$n6s4) true)))
(assert
 (= z$615 (and (distinct X z$n7s4) true)))
(assert
 (= z$732 (and (distinct X z$n8s4) true)))
(assert
 (= z$856 (and (distinct X z$n9s4) true)))
(assert
 (= z$987 (and (distinct X z$n10s4) true)))
(assert
 (= z$1125 (and (distinct X z$n11s4) true)))
(assert
 (let (($x2253 (and z$55 z$127 z$211 z$306 z$402 z$505 z$615 z$732 z$856 z$987 z$1125)))
 (= z$1173 $x2253)))
(assert
 (= z$1174 (not z$1173)))
(assert
 z$1174)
(assert
 (=> p$0 en$next))
(assert
 (let (($x64 (= z$27 (and (distinct X$next z$n15s4) true))))
 (=> p$1 $x64)))
(assert
 (=> p$1 z$27))
(assert
 (let ((?x183 (Add_4_4_4 X$next z$n1s4)))
 (let (($x181 (= z$35 ?x183)))
 (=> p$2 $x181))))
(assert
 (let (($x207 (= z$35 z$n15s4)))
 (let (($x205 (= z$37 $x207)))
 (=> p$2 $x205))))
(assert
 (=> p$2 z$37))
(assert
 (=> p$3 (= z$47 (and (distinct X$next z$n1s4) true))))
(assert
 (=> p$3 z$47))
(assert
 (let (($x832 (= z$221 (and (distinct X$next z$n3s4) true))))
 (=> p$4 $x832)))
(assert
 (=> p$4 z$221))
(assert
 (let (($x2312 (= z$1135 (and (distinct X$next z$n11s4) true))))
 (=> p$5 $x2312)))
(assert
 (=> p$5 z$1135))
(assert
 (let (($x956 (= z$316 (and (distinct X$next z$n4s4) true))))
 (=> p$6 $x956)))
(assert
 (=> p$6 z$316))
(assert
 (let (($x468 (= z$137 (and (distinct X$next z$n2s4) true))))
 (=> p$7 $x468)))
(assert
 (=> p$7 z$137))
(assert
 (let (($x1369 (= z$515 (and (distinct X$next z$n6s4) true))))
 (=> p$8 $x1369)))
(assert
 (=> p$8 z$515))
(assert
 (let (($x2008 (= z$997 (and (distinct X$next z$n10s4) true))))
 (=> p$9 $x2008)))
(assert
 (=> p$9 z$997))
(assert
 (let (($x1090 (= z$412 (and (distinct X$next z$n5s4) true))))
 (=> p$10 $x1090)))
(assert
 (=> p$10 z$412))
(assert
 (let (($x1555 (= z$625 (and (distinct X$next z$n7s4) true))))
 (=> p$11 $x1555)))
(assert
 (=> p$11 z$625))
(assert
 (let (($x953 (= z$742 (and (distinct X$next z$n8s4) true))))
 (=> p$12 $x953)))
(assert
 (=> p$12 z$742))
(assert
 (let (($x606 (= z$866 (and (distinct X$next z$n9s4) true))))
 (=> p$13 $x606)))
(assert
 (=> p$13 z$866))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(assert p$5)
(assert p$6)
(assert p$7)
(assert p$8)
(assert p$9)
(assert p$10)
(assert p$11)
(assert p$12)
(assert p$13)
(set-info :status unsat)
(check-sat)
(exit)
