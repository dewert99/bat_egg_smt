(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: swap_three
query-maker: "Z3"
query-time: 0.869000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt20 0)
(declare-sort utt32 0)
(declare-sort utt12 0)
(declare-fun z$n0s20 () utt20)
(declare-fun z$n6s20 () utt20)
(declare-fun z$n7s20 () utt20)
(declare-fun z$n5s20 () utt20)
(declare-fun z$n1s20 () utt20)
(declare-fun z$n0s32 () utt32)
(declare-fun z$n6s32 () utt32)
(declare-fun z$n7s32 () utt32)
(declare-fun z$n5s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun a () utt20)
(declare-fun b () utt20)
(declare-fun c () utt20)
(declare-fun Concat_32_20_12 (utt20 utt12) utt32)
(declare-fun z$n0s12 () utt12)
(declare-fun z$19 () utt32)
(declare-fun b$next () utt20)
(declare-fun c$next () utt20)
(declare-fun a$next () utt20)
(declare-fun z$40 () utt32)
(declare-fun z$2 () Bool)
(declare-fun z$5 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$9 () Bool)
(declare-fun z$153 () Bool)
(declare-fun z$204 () Bool)
(declare-fun z$143 () Bool)
(declare-fun z$225 () Bool)
(declare-fun z$228 () Bool)
(declare-fun z$229 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$210 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$246 () Bool)
(declare-fun z$282 () Bool)
(declare-fun z$302 () Bool)
(declare-fun z$305 () Bool)
(declare-fun z$306 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$279 () Bool)
(declare-fun z$312 () Bool)
(declare-fun z$287 () Bool)
(declare-fun z$173 () Bool)
(declare-fun z$328 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$332 () Bool)
(declare-fun z$168 () Bool)
(declare-fun z$338 () Bool)
(declare-fun z$340 () Bool)
(declare-fun z$22 () Bool)
(declare-fun z$24 () Bool)
(declare-fun z$25 () Bool)
(declare-fun z$28 () Bool)
(declare-fun z$29 () Bool)
(declare-fun prop () Bool)
(declare-fun z$31 () Bool)
(declare-fun z$13 () Bool)
(declare-fun z$15 () Bool)
(declare-fun z$42 () Bool)
(declare-fun z$43 () Bool)
(declare-fun z$44 () Bool)
(declare-fun z$46 () Bool)
(declare-fun z$47 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$49 () Bool)
(declare-fun z$69 () Bool)
(declare-fun z$70 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$73 () Bool)
(declare-fun z$52 () Bool)
(declare-fun z$68 () Bool)
(declare-fun z$72 () Bool)
(declare-fun z$11 () Bool)
(declare-fun z$92 () Bool)
(declare-fun z$107 () Bool)
(declare-fun z$108 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$140 () Bool)
(declare-fun z$193 () Bool)
(declare-fun z$200 () Bool)
(declare-fun z$201 () Bool)
(declare-fun z$274 () Bool)
(declare-fun z$275 () Bool)
(declare-fun z$75 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$134 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$174 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$192 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$288 () Bool)
(declare-fun p$4 () Bool)
(assert
 (and (distinct z$n1s20 z$n5s20 z$n7s20 z$n6s20 z$n0s20) true))
(assert
 (and (distinct z$n1s32 z$n5s32 z$n7s32 z$n6s32 z$n0s32) true))
(assert
 (let (($x421 (= a z$n1s20)))
 (= z$2 $x421)))
(assert
 (let (($x164 (= b z$n5s20)))
 (= z$5 $x164)))
(assert
 (let (($x296 (= c z$n7s20)))
 (= z$8 $x296)))
(assert
 (= z$9 (and z$2 z$5 z$8)))
(assert
 (= z$153 (not z$9)))
(assert
 (= z$204 (and (distinct b z$n1s20) true)))
(assert
 (= z$143 (and (distinct b z$n7s20) true)))
(assert
 (= z$225 (and z$204 z$143)))
(assert
 (= z$228 (and z$153 z$225)))
(assert
 (= z$229 (not z$228)))
(assert
 z$229)
(assert
 (let (($x248 (= b z$n7s20)))
 (= z$133 $x248)))
(assert
 (= z$210 (and (distinct c z$n1s20) true)))
(assert
 (= z$245 (and z$133 z$210)))
(assert
 (= z$246 (not z$245)))
(assert
 z$246)
(assert
 (= z$282 (and (distinct c z$n5s20) true)))
(assert
 (= z$302 (and z$210 z$282)))
(assert
 (= z$305 (and z$153 z$302)))
(assert
 (= z$306 (not z$305)))
(assert
 z$306)
(assert
 (= z$112 (and (distinct b z$n5s20) true)))
(assert
 (= z$279 (and z$112 z$143 z$204)))
(assert
 (= z$312 (not z$279)))
(assert
 z$312)
(assert
 (= z$287 (and (distinct a z$n5s20) true)))
(assert
 (= z$173 (and (distinct a z$n7s20) true)))
(assert
 (= z$328 (and z$287 z$173)))
(assert
 (= z$331 (and z$153 z$328)))
(assert
 (= z$332 (not z$331)))
(assert
 z$332)
(assert
 (= z$168 (and (distinct c z$n7s20) true)))
(assert
 (= z$338 (and z$168 z$210 z$282)))
(assert
 (= z$340 (not z$338)))
(assert
 z$340)
(assert
 (let ((?x29 (Concat_32_20_12 a z$n0s12)))
 (= z$19 ?x29)))
(assert
 (let (($x345 (= z$19 z$n1s32)))
 (= z$22 $x345)))
(assert
 (let (($x751 (= z$19 z$n5s32)))
 (= z$24 $x751)))
(assert
 (let (($x342 (or z$22 z$24)))
 (= z$25 $x342)))
(assert
 (let (($x335 (= z$19 z$n7s32)))
 (= z$28 $x335)))
(assert
 (= z$29 (or z$25 z$28)))
(assert
 (= z$31 (= prop z$29)))
(assert
 z$31)
(assert
 prop)
(assert
 (let (($x904 (= b$next c)))
 (= z$13 $x904)))
(assert
 z$13)
(assert
 (let (($x1584 (= c$next a)))
 (= z$15 $x1584)))
(assert
 z$15)
(assert
 (let ((?x478 (Concat_32_20_12 a$next z$n0s12)))
 (= z$40 ?x478)))
(assert
 (let (($x476 (= z$40 z$n1s32)))
 (= z$42 $x476)))
(assert
 (let (($x866 (= z$40 z$n5s32)))
 (= z$43 $x866)))
(assert
 (let (($x473 (or z$42 z$43)))
 (= z$44 $x473)))
(assert
 (let (($x172 (= z$40 z$n7s32)))
 (= z$46 $x172)))
(assert
 (let (($x167 (or z$44 z$46)))
 (= z$47 $x167)))
(assert
 (= z$49 (= prop$next z$47)))
(assert
 z$49)
(assert
 (let (($x742 (= a$next z$n1s20)))
 (= z$69 $x742)))
(assert
 (= z$70 (and (distinct z$40 z$n1s32) true)))
(assert
 (= z$71 (and z$69 z$70)))
(assert
 (= z$73 (not z$71)))
(assert
 z$73)
(assert
 (= z$52 (and (distinct z$19 z$n1s32) true)))
(assert
 (= z$68 (and z$2 z$52)))
(assert
 (= z$72 (not z$68)))
(assert
 z$72)
(assert
 (let (($x346 (= a$next b)))
 (= z$11 $x346)))
(assert
 (= z$92 (and (distinct z$40 z$n5s32) true)))
(assert
 (= z$107 (and z$11 z$5 z$92)))
(assert
 (= z$108 (not z$107)))
(assert
 z$108)
(assert
 (= z$97 (and (distinct z$40 z$n7s32) true)))
(assert
 (= z$139 (and z$133 z$97 z$11)))
(assert
 (= z$140 (not z$139)))
(assert
 z$140)
(assert
 (let (($x1350 (= b z$n1s20)))
 (= z$193 $x1350)))
(assert
 (= z$200 (and z$193 z$70 z$11)))
(assert
 (= z$201 (not z$200)))
(assert
 z$201)
(assert
 (= z$274 (and z$5 z$92 z$11)))
(assert
 (= z$275 (not z$274)))
(assert
 z$275)
(assert
 z$11)
(assert
 (=> p$0 (= z$75 (and (distinct a$next z$n1s20) true))))
(assert
 (=> p$0 z$75))
(assert
 (=> p$1 (= z$134 (= c$next z$n1s20))))
(assert
 (=> p$1 z$134))
(assert
 (=> p$2 (= z$174 (and (distinct a$next z$n7s20) true))))
(assert
 (=> p$2 z$174))
(assert
 (=> p$3 (= z$192 (= b$next z$n1s20))))
(assert
 (=> p$3 z$192))
(assert
 (=> p$4 (= z$288 (and (distinct a$next z$n5s20) true))))
(assert
 (=> p$4 z$288))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(set-info :status unsat)
(check-sat)
(exit)
