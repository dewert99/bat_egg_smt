(set-info :smt-lib-version 2.6)
(set-logic QF_UF)
(set-info :source |
Generated by: Aman Goel (amangoel@umich.edu), Karem A. Sakallah (karem@umich.edu)
Generated on: 2018-04-06

Generated by the tool Averroes 2 (successor of [1]) which implements safety property
verification on hardware systems.

This SMT problem belongs to a set of SMT problems generated by applying Averroes 2
to benchmarks derived from [2-5].

A total of 412 systems (345 from [2], 19 from [3], 26 from [4], 22 from [5]) were
syntactically converted from their original formats (using [6, 7]), and given to 
Averroes 2 to perform property checking with abstraction (wide bit-vectors -> terms, 
wide operators -> UF) using SMT solvers [8, 9].

[1] Lee S., Sakallah K.A. (2014) Unbounded Scalable Verification Based on Approximate
Property-Directed Reachability and Datapath Abstraction. In: Biere A., Bloem R. (eds)
Computer Aided Verification. CAV 2014. Lecture Notes in Computer Science, vol 8559.
Springer, Cham
[2] http://fmv.jku.at/aiger/index.html#beem
[3] http://www.cs.cmu.edu/~modelcheck/vcegar
[4] http://www.cprover.org/hardware/v2c
[5] http://github.com/aman-goel/verilogbench
[6] http://www.clifford.at/yosys
[7] http://github.com/chengyinwu/V3
[8] http://github.com/Z3Prover/z3
[9] http://github.com/SRI-CSL/yices2

id: sdlx
query-maker: "Z3"
query-time: 4.506000 ms
query-class: abstract
query-category: assume
query-type: mus_core
status: unsat
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")

; 
(set-info :status sat)
(declare-sort utt2 0)
(declare-sort utt6 0)
(declare-sort utt32 0)
(declare-sort utt31 0)
(declare-sort utt26 0)
(declare-fun z$n2s2 () utt2)
(declare-fun z$n1s2 () utt2)
(declare-fun z$n3s2 () utt2)
(declare-fun z$n0s2 () utt2)
(declare-fun z$n1s6 () utt6)
(declare-fun z$n43s6 () utt6)
(declare-fun z$n2s6 () utt6)
(declare-fun z$n35s6 () utt6)
(declare-fun z$n8s6 () utt6)
(declare-fun z$n5s6 () utt6)
(declare-fun z$n4s6 () utt6)
(declare-fun z$n3s6 () utt6)
(declare-fun z$n0s6 () utt6)
(declare-fun z$n2s32 () utt32)
(declare-fun z$n3s32 () utt32)
(declare-fun z$n4s32 () utt32)
(declare-fun z$n5s32 () utt32)
(declare-fun z$n1s32 () utt32)
(declare-fun z$n0s32 () utt32)
(declare-fun NextState () utt6)
(declare-fun State () utt6)
(declare-fun Concat_32_1_31 (Bool utt31) utt32)
(declare-fun z$n0s31 () utt31)
(declare-fun z$995 () utt32)
(declare-fun z$1000 () utt32)
(declare-fun z$1007 () utt32)
(declare-fun z$1012 () utt32)
(declare-fun z$1018 () utt32)
(declare-fun z$1021 () utt32)
(declare-fun z$1026 () utt32)
(declare-fun z$1031 () utt32)
(declare-fun z$1036 () utt32)
(declare-fun z$1041 () utt32)
(declare-fun z$1046 () utt32)
(declare-fun z$1051 () utt32)
(declare-fun z$1056 () utt32)
(declare-fun z$1061 () utt32)
(declare-fun State$next () utt6)
(declare-fun z$1079 () utt32)
(declare-fun z$1084 () utt32)
(declare-fun z$1091 () utt32)
(declare-fun z$1096 () utt32)
(declare-fun z$1102 () utt32)
(declare-fun z$1105 () utt32)
(declare-fun z$1110 () utt32)
(declare-fun z$1115 () utt32)
(declare-fun z$1120 () utt32)
(declare-fun z$1125 () utt32)
(declare-fun z$1130 () utt32)
(declare-fun z$1135 () utt32)
(declare-fun z$1140 () utt32)
(declare-fun z$1145 () utt32)
(declare-fun Extract_6_31_26_32 (utt32) utt6)
(declare-fun IR () utt32)
(declare-fun z$59 () utt6)
(declare-fun z$912 () utt32)
(declare-fun z$917 () utt6)
(declare-fun Extract_6_5_0_32 (utt32) utt6)
(declare-fun z$914 () utt6)
(declare-fun z$920 () utt32)
(declare-fun z$924 () utt6)
(declare-fun z$922 () utt6)
(declare-fun z$926 () utt6)
(declare-fun z$928 () utt6)
(declare-fun z$930 () utt6)
(declare-fun z$933 () utt32)
(declare-fun z$937 () utt6)
(declare-fun z$935 () utt6)
(declare-fun z$939 () utt6)
(declare-fun z$941 () utt6)
(declare-fun z$943 () utt6)
(declare-fun z$945 () utt6)
(declare-fun z$947 () utt6)
(declare-fun z$949 () utt6)
(declare-fun z$951 () utt6)
(declare-fun z$953 () utt6)
(declare-fun z$955 () utt6)
(declare-fun z$957 () utt6)
(declare-fun z$960 () utt32)
(declare-fun z$964 () utt6)
(declare-fun z$962 () utt6)
(declare-fun z$967 () utt32)
(declare-fun z$971 () utt6)
(declare-fun z$969 () utt6)
(declare-fun z$973 () utt6)
(declare-fun z$975 () utt6)
(declare-fun z$977 () utt6)
(declare-fun z$979 () utt6)
(declare-fun NextState$next () utt6)
(declare-fun IR$next () utt32)
(declare-fun z$1261 () utt6)
(declare-fun Concat_32_6_26 (utt6 utt26) utt32)
(declare-fun z$n0s26 () utt26)
(declare-fun z$1262 () utt32)
(declare-fun z$1265 () utt32)
(declare-fun z$1219 () Bool)
(declare-fun z$1221 () Bool)
(declare-fun z$1289 () Bool)
(declare-fun z$1378 () Bool)
(declare-fun z$1379 () Bool)
(declare-fun Extract_1_0_0_6 (utt6) Bool)
(declare-fun z$992 () Bool)
(declare-fun z$997 () Bool)
(declare-fun Extract_1_1_1_6 (utt6) Bool)
(declare-fun z$998 () Bool)
(declare-fun z$1002 () Bool)
(declare-fun z$1003 () Bool)
(declare-fun Extract_1_2_2_6 (utt6) Bool)
(declare-fun z$1005 () Bool)
(declare-fun z$1009 () Bool)
(declare-fun z$1010 () Bool)
(declare-fun monitor_nop () Bool)
(declare-fun z$1014 () Bool)
(declare-fun z$1015 () Bool)
(declare-fun z$1017 () Bool)
(declare-fun ARW () Bool)
(declare-fun z$1020 () Bool)
(declare-fun BRW () Bool)
(declare-fun z$1023 () Bool)
(declare-fun z$1024 () Bool)
(declare-fun RegRW () Bool)
(declare-fun z$1028 () Bool)
(declare-fun z$1029 () Bool)
(declare-fun IRW () Bool)
(declare-fun z$1033 () Bool)
(declare-fun z$1034 () Bool)
(declare-fun IRRW () Bool)
(declare-fun z$1038 () Bool)
(declare-fun z$1039 () Bool)
(declare-fun PCRW () Bool)
(declare-fun z$1043 () Bool)
(declare-fun z$1044 () Bool)
(declare-fun NPCRW () Bool)
(declare-fun z$1048 () Bool)
(declare-fun z$1049 () Bool)
(declare-fun ALUoutRW () Bool)
(declare-fun z$1053 () Bool)
(declare-fun z$1054 () Bool)
(declare-fun MDRW () Bool)
(declare-fun z$1058 () Bool)
(declare-fun z$1059 () Bool)
(declare-fun BCRW () Bool)
(declare-fun z$1063 () Bool)
(declare-fun z$1064 () Bool)
(declare-fun z$1066 () Bool)
(declare-fun prop () Bool)
(declare-fun z$1068 () Bool)
(declare-fun z$1077 () Bool)
(declare-fun z$1081 () Bool)
(declare-fun z$1082 () Bool)
(declare-fun z$1086 () Bool)
(declare-fun z$1087 () Bool)
(declare-fun z$1089 () Bool)
(declare-fun z$1093 () Bool)
(declare-fun z$1094 () Bool)
(declare-fun monitor_nop$next () Bool)
(declare-fun z$1098 () Bool)
(declare-fun z$1099 () Bool)
(declare-fun z$1101 () Bool)
(declare-fun ARW$next () Bool)
(declare-fun z$1104 () Bool)
(declare-fun BRW$next () Bool)
(declare-fun z$1107 () Bool)
(declare-fun z$1108 () Bool)
(declare-fun RegRW$next () Bool)
(declare-fun z$1112 () Bool)
(declare-fun z$1113 () Bool)
(declare-fun IRW$next () Bool)
(declare-fun z$1117 () Bool)
(declare-fun z$1118 () Bool)
(declare-fun IRRW$next () Bool)
(declare-fun z$1122 () Bool)
(declare-fun z$1123 () Bool)
(declare-fun PCRW$next () Bool)
(declare-fun z$1127 () Bool)
(declare-fun z$1128 () Bool)
(declare-fun NPCRW$next () Bool)
(declare-fun z$1132 () Bool)
(declare-fun z$1133 () Bool)
(declare-fun ALUoutRW$next () Bool)
(declare-fun z$1137 () Bool)
(declare-fun z$1138 () Bool)
(declare-fun MDRW$next () Bool)
(declare-fun z$1142 () Bool)
(declare-fun z$1143 () Bool)
(declare-fun BCRW$next () Bool)
(declare-fun z$1147 () Bool)
(declare-fun z$1148 () Bool)
(declare-fun z$1150 () Bool)
(declare-fun prop$next () Bool)
(declare-fun z$1152 () Bool)
(declare-fun z$1181 () Bool)
(declare-fun z$1182 () Bool)
(declare-fun z$1184 () Bool)
(declare-fun z$41 () Bool)
(declare-fun z$1180 () Bool)
(declare-fun z$1183 () Bool)
(declare-fun z$1274 () Bool)
(declare-fun z$1276 () Bool)
(declare-fun z$1273 () Bool)
(declare-fun z$1275 () Bool)
(declare-fun z$1329 () Bool)
(declare-fun z$1281 () Bool)
(declare-fun z$1356 () Bool)
(declare-fun z$1359 () Bool)
(declare-fun z$1357 () Bool)
(declare-fun z$1154 () Bool)
(declare-fun z$1358 () Bool)
(declare-fun z$1364 () Bool)
(declare-fun z$51 () Bool)
(declare-fun z$53 () Bool)
(declare-fun z$55 () Bool)
(declare-fun z$56 () Bool)
(declare-fun z$61 () Bool)
(declare-fun z$63 () Bool)
(declare-fun z$65 () Bool)
(declare-fun z$66 () Bool)
(declare-fun z$70 () Bool)
(declare-fun z$71 () Bool)
(declare-fun z$72 () Bool)
(declare-fun z$74 () Bool)
(declare-fun z$209 () Bool)
(declare-fun z$211 () Bool)
(declare-fun z$213 () Bool)
(declare-fun z$215 () Bool)
(declare-fun z$84 () Bool)
(declare-fun z$217 () Bool)
(declare-fun z$219 () Bool)
(declare-fun z$221 () Bool)
(declare-fun z$92 () Bool)
(declare-fun z$93 () Bool)
(declare-fun z$95 () Bool)
(declare-fun z$223 () Bool)
(declare-fun z$225 () Bool)
(declare-fun z$227 () Bool)
(declare-fun z$229 () Bool)
(declare-fun z$231 () Bool)
(declare-fun z$233 () Bool)
(declare-fun z$235 () Bool)
(declare-fun z$112 () Bool)
(declare-fun z$113 () Bool)
(declare-fun z$114 () Bool)
(declare-fun z$161 () Bool)
(declare-fun z$163 () Bool)
(declare-fun z$31 () Bool)
(declare-fun z$237 () Bool)
(declare-fun z$239 () Bool)
(declare-fun z$241 () Bool)
(declare-fun z$243 () Bool)
(declare-fun Reset () Bool)
(declare-fun z$981 () Bool)
(declare-fun z$10 () Bool)
(declare-fun z$1391 () Bool)
(declare-fun z$1392 () Bool)
(declare-fun z$399 () Bool)
(declare-fun z$401 () Bool)
(declare-fun z$403 () Bool)
(declare-fun z$405 () Bool)
(declare-fun z$407 () Bool)
(declare-fun z$409 () Bool)
(declare-fun z$411 () Bool)
(declare-fun z$127 () Bool)
(declare-fun z$413 () Bool)
(declare-fun z$415 () Bool)
(declare-fun z$417 () Bool)
(declare-fun z$419 () Bool)
(declare-fun z$421 () Bool)
(declare-fun z$423 () Bool)
(declare-fun z$425 () Bool)
(declare-fun z$427 () Bool)
(declare-fun z$429 () Bool)
(declare-fun z$431 () Bool)
(declare-fun z$433 () Bool)
(declare-fun z$435 () Bool)
(declare-fun z$437 () Bool)
(declare-fun z$439 () Bool)
(declare-fun z$12 () Bool)
(declare-fun z$363 () Bool)
(declare-fun z$365 () Bool)
(declare-fun z$367 () Bool)
(declare-fun z$369 () Bool)
(declare-fun z$371 () Bool)
(declare-fun z$373 () Bool)
(declare-fun z$375 () Bool)
(declare-fun z$377 () Bool)
(declare-fun z$379 () Bool)
(declare-fun z$381 () Bool)
(declare-fun z$383 () Bool)
(declare-fun z$385 () Bool)
(declare-fun z$387 () Bool)
(declare-fun z$389 () Bool)
(declare-fun z$391 () Bool)
(declare-fun z$393 () Bool)
(declare-fun z$395 () Bool)
(declare-fun z$397 () Bool)
(declare-fun z$24 () Bool)
(declare-fun z$317 () Bool)
(declare-fun z$319 () Bool)
(declare-fun z$321 () Bool)
(declare-fun z$323 () Bool)
(declare-fun z$325 () Bool)
(declare-fun z$327 () Bool)
(declare-fun z$329 () Bool)
(declare-fun z$331 () Bool)
(declare-fun z$333 () Bool)
(declare-fun z$335 () Bool)
(declare-fun z$337 () Bool)
(declare-fun z$339 () Bool)
(declare-fun z$341 () Bool)
(declare-fun z$343 () Bool)
(declare-fun z$345 () Bool)
(declare-fun z$347 () Bool)
(declare-fun z$349 () Bool)
(declare-fun z$351 () Bool)
(declare-fun z$353 () Bool)
(declare-fun z$355 () Bool)
(declare-fun z$357 () Bool)
(declare-fun z$359 () Bool)
(declare-fun z$361 () Bool)
(declare-fun z$8 () Bool)
(declare-fun z$173 () Bool)
(declare-fun z$175 () Bool)
(declare-fun z$177 () Bool)
(declare-fun z$179 () Bool)
(declare-fun z$181 () Bool)
(declare-fun z$183 () Bool)
(declare-fun z$185 () Bool)
(declare-fun z$187 () Bool)
(declare-fun z$189 () Bool)
(declare-fun z$191 () Bool)
(declare-fun z$193 () Bool)
(declare-fun z$195 () Bool)
(declare-fun z$197 () Bool)
(declare-fun z$199 () Bool)
(declare-fun z$117 () Bool)
(declare-fun z$201 () Bool)
(declare-fun z$203 () Bool)
(declare-fun z$205 () Bool)
(declare-fun z$207 () Bool)
(declare-fun z$1452 () Bool)
(declare-fun z$1453 () Bool)
(declare-fun z$129 () Bool)
(declare-fun z$131 () Bool)
(declare-fun z$133 () Bool)
(declare-fun z$135 () Bool)
(declare-fun z$137 () Bool)
(declare-fun z$139 () Bool)
(declare-fun z$141 () Bool)
(declare-fun z$143 () Bool)
(declare-fun z$145 () Bool)
(declare-fun z$147 () Bool)
(declare-fun z$149 () Bool)
(declare-fun z$151 () Bool)
(declare-fun z$153 () Bool)
(declare-fun z$155 () Bool)
(declare-fun z$157 () Bool)
(declare-fun z$159 () Bool)
(declare-fun z$165 () Bool)
(declare-fun z$167 () Bool)
(declare-fun z$169 () Bool)
(declare-fun z$171 () Bool)
(declare-fun z$33 () Bool)
(declare-fun z$1468 () Bool)
(declare-fun z$1470 () Bool)
(declare-fun z$75 () Bool)
(declare-fun z$77 () Bool)
(declare-fun z$79 () Bool)
(declare-fun z$81 () Bool)
(declare-fun z$85 () Bool)
(declare-fun z$87 () Bool)
(declare-fun z$89 () Bool)
(declare-fun z$97 () Bool)
(declare-fun z$99 () Bool)
(declare-fun z$101 () Bool)
(declare-fun z$103 () Bool)
(declare-fun z$105 () Bool)
(declare-fun z$107 () Bool)
(declare-fun z$109 () Bool)
(declare-fun z$119 () Bool)
(declare-fun z$121 () Bool)
(declare-fun z$123 () Bool)
(declare-fun z$125 () Bool)
(declare-fun z$1487 () Bool)
(declare-fun z$1488 () Bool)
(declare-fun z$281 () Bool)
(declare-fun z$283 () Bool)
(declare-fun z$285 () Bool)
(declare-fun z$287 () Bool)
(declare-fun z$289 () Bool)
(declare-fun z$291 () Bool)
(declare-fun z$293 () Bool)
(declare-fun z$295 () Bool)
(declare-fun z$297 () Bool)
(declare-fun z$299 () Bool)
(declare-fun z$301 () Bool)
(declare-fun z$303 () Bool)
(declare-fun z$305 () Bool)
(declare-fun z$307 () Bool)
(declare-fun z$309 () Bool)
(declare-fun z$311 () Bool)
(declare-fun z$313 () Bool)
(declare-fun z$315 () Bool)
(declare-fun z$20 () Bool)
(declare-fun z$1505 () Bool)
(declare-fun z$1506 () Bool)
(declare-fun z$609 () Bool)
(declare-fun z$830 () Bool)
(declare-fun z$832 () Bool)
(declare-fun z$834 () Bool)
(declare-fun z$836 () Bool)
(declare-fun z$838 () Bool)
(declare-fun z$840 () Bool)
(declare-fun z$842 () Bool)
(declare-fun z$844 () Bool)
(declare-fun z$846 () Bool)
(declare-fun z$848 () Bool)
(declare-fun z$850 () Bool)
(declare-fun z$852 () Bool)
(declare-fun z$854 () Bool)
(declare-fun z$856 () Bool)
(declare-fun z$858 () Bool)
(declare-fun z$860 () Bool)
(declare-fun z$862 () Bool)
(declare-fun z$864 () Bool)
(declare-fun z$866 () Bool)
(declare-fun z$868 () Bool)
(declare-fun z$870 () Bool)
(declare-fun z$37 () Bool)
(declare-fun z$245 () Bool)
(declare-fun z$247 () Bool)
(declare-fun z$249 () Bool)
(declare-fun z$251 () Bool)
(declare-fun z$253 () Bool)
(declare-fun z$255 () Bool)
(declare-fun z$257 () Bool)
(declare-fun z$259 () Bool)
(declare-fun z$261 () Bool)
(declare-fun z$263 () Bool)
(declare-fun z$265 () Bool)
(declare-fun z$267 () Bool)
(declare-fun z$269 () Bool)
(declare-fun z$271 () Bool)
(declare-fun z$273 () Bool)
(declare-fun z$275 () Bool)
(declare-fun z$277 () Bool)
(declare-fun z$279 () Bool)
(declare-fun z$1225 () Bool)
(declare-fun p$0 () Bool)
(declare-fun z$1308 () Bool)
(declare-fun p$1 () Bool)
(declare-fun z$1309 () Bool)
(declare-fun p$2 () Bool)
(declare-fun z$1310 () Bool)
(declare-fun p$3 () Bool)
(declare-fun z$1311 () Bool)
(declare-fun p$4 () Bool)
(declare-fun z$1312 () Bool)
(declare-fun p$5 () Bool)
(declare-fun z$1313 () Bool)
(declare-fun p$6 () Bool)
(declare-fun p$7 () Bool)
(declare-fun z$1314 () Bool)
(declare-fun p$8 () Bool)
(declare-fun z$1315 () Bool)
(declare-fun p$9 () Bool)
(declare-fun z$1316 () Bool)
(declare-fun p$10 () Bool)
(declare-fun z$1521 () Bool)
(assert
 (and (distinct z$n0s2 z$n3s2 z$n1s2 z$n2s2) true))
(assert
 (and (distinct z$n0s6 z$n3s6 z$n4s6 z$n5s6 z$n8s6 z$n35s6 z$n2s6 z$n43s6 z$n1s6) true))
(assert
 (and (distinct z$n0s32 z$n1s32 z$n5s32 z$n4s32 z$n3s32 z$n2s32) true))
(assert
 (= z$1219 (and (distinct NextState z$n1s6) true)))
(assert
 (= z$1221 (and (distinct NextState z$n2s6) true)))
(assert
 (= z$1289 (and (distinct NextState z$n0s6) true)))
(assert
 (= z$1378 (and z$1219 z$1221 z$1289)))
(assert
 (= z$1379 (not z$1378)))
(assert
 z$1379)
(assert
 (let (($x2227 (Extract_1_0_0_6 State)))
 (= z$992 $x2227)))
(assert
 (let ((?x2852 (Concat_32_1_31 z$992 z$n0s31)))
 (= z$995 ?x2852)))
(assert
 (let (($x3413 (= z$995 z$n0s32)))
 (= z$997 $x3413)))
(assert
 (let (($x2856 (Extract_1_1_1_6 State)))
 (= z$998 $x2856)))
(assert
 (let ((?x3409 (Concat_32_1_31 z$998 z$n0s31)))
 (= z$1000 ?x3409)))
(assert
 (let (($x2131 (= z$1000 z$n1s32)))
 (= z$1002 $x2131)))
(assert
 (= z$1003 (and z$997 z$1002)))
(assert
 (let (($x2135 (Extract_1_2_2_6 State)))
 (= z$1005 $x2135)))
(assert
 (let ((?x950 (Concat_32_1_31 z$1005 z$n0s31)))
 (= z$1007 ?x950)))
(assert
 (let (($x1638 (= z$1007 z$n0s32)))
 (= z$1009 $x1638)))
(assert
 (= z$1010 (and z$1003 z$1009)))
(assert
 (let ((?x630 (Concat_32_1_31 monitor_nop z$n0s31)))
 (= z$1012 ?x630)))
(assert
 (let (($x634 (= z$1012 z$n0s32)))
 (= z$1014 $x634)))
(assert
 (= z$1015 (and z$1010 z$1014)))
(assert
 (= z$1017 (not z$1015)))
(assert
 (let ((?x658 (Concat_32_1_31 ARW z$n0s31)))
 (= z$1018 ?x658)))
(assert
 (let (($x675 (= z$1018 z$n1s32)))
 (= z$1020 $x675)))
(assert
 (let ((?x685 (Concat_32_1_31 BRW z$n0s31)))
 (= z$1021 ?x685)))
(assert
 (let (($x42 (= z$1021 z$n1s32)))
 (= z$1023 $x42)))
(assert
 (= z$1024 (and z$1020 z$1023)))
(assert
 (= z$1026 (Concat_32_1_31 RegRW z$n0s31)))
(assert
 (let (($x4042 (= z$1026 z$n0s32)))
 (= z$1028 $x4042)))
(assert
 (= z$1029 (and z$1024 z$1028)))
(assert
 (let ((?x1628 (Concat_32_1_31 IRW z$n0s31)))
 (= z$1031 ?x1628)))
(assert
 (let (($x2858 (= z$1031 z$n1s32)))
 (= z$1033 $x2858)))
(assert
 (= z$1034 (and z$1029 z$1033)))
(assert
 (let ((?x1289 (Concat_32_1_31 IRRW z$n0s31)))
 (= z$1036 ?x1289)))
(assert
 (let (($x841 (= z$1036 z$n0s32)))
 (= z$1038 $x841)))
(assert
 (= z$1039 (and z$1034 z$1038)))
(assert
 (let ((?x1293 (Concat_32_1_31 PCRW z$n0s31)))
 (= z$1041 ?x1293)))
(assert
 (let (($x1320 (= z$1041 z$n1s32)))
 (= z$1043 $x1320)))
(assert
 (= z$1044 (and z$1039 z$1043)))
(assert
 (let ((?x738 (Concat_32_1_31 NPCRW z$n0s31)))
 (= z$1046 ?x738)))
(assert
 (let (($x2358 (= z$1046 z$n0s32)))
 (= z$1048 $x2358)))
(assert
 (= z$1049 (and z$1044 z$1048)))
(assert
 (= z$1051 (Concat_32_1_31 ALUoutRW z$n0s31)))
(assert
 (let (($x3174 (= z$1051 z$n0s32)))
 (= z$1053 $x3174)))
(assert
 (= z$1054 (and z$1049 z$1053)))
(assert
 (= z$1056 (Concat_32_1_31 MDRW z$n0s31)))
(assert
 (let (($x4257 (= z$1056 z$n0s32)))
 (= z$1058 $x4257)))
(assert
 (= z$1059 (and z$1054 z$1058)))
(assert
 (= z$1061 (Concat_32_1_31 BCRW z$n0s31)))
(assert
 (let (($x4104 (= z$1061 z$n0s32)))
 (= z$1063 $x4104)))
(assert
 (= z$1064 (and z$1059 z$1063)))
(assert
 (= z$1066 (or z$1017 z$1064)))
(assert
 (= z$1068 (= prop z$1066)))
(assert
 z$1068)
(assert
 prop)
(assert
 (let (($x1004 (Extract_1_0_0_6 State$next)))
 (= z$1077 $x1004)))
(assert
 (let ((?x1009 (Concat_32_1_31 z$1077 z$n0s31)))
 (= z$1079 ?x1009)))
(assert
 (let (($x3076 (= z$1079 z$n0s32)))
 (= z$1081 $x3076)))
(assert
 (let (($x4141 (Extract_1_1_1_6 State$next)))
 (= z$1082 $x4141)))
(assert
 (let ((?x2389 (Concat_32_1_31 z$1082 z$n0s31)))
 (= z$1084 ?x2389)))
(assert
 (let (($x3549 (= z$1084 z$n1s32)))
 (= z$1086 $x3549)))
(assert
 (= z$1087 (and z$1081 z$1086)))
(assert
 (let (($x1744 (Extract_1_2_2_6 State$next)))
 (= z$1089 $x1744)))
(assert
 (let ((?x2843 (Concat_32_1_31 z$1089 z$n0s31)))
 (= z$1091 ?x2843)))
(assert
 (let (($x3424 (= z$1091 z$n0s32)))
 (= z$1093 $x3424)))
(assert
 (= z$1094 (and z$1087 z$1093)))
(assert
 (let ((?x2935 (Concat_32_1_31 monitor_nop$next z$n0s31)))
 (= z$1096 ?x2935)))
(assert
 (let (($x4136 (= z$1096 z$n0s32)))
 (= z$1098 $x4136)))
(assert
 (= z$1099 (and z$1094 z$1098)))
(assert
 (= z$1101 (not z$1099)))
(assert
 (let ((?x3952 (Concat_32_1_31 ARW$next z$n0s31)))
 (= z$1102 ?x3952)))
(assert
 (let (($x3948 (= z$1102 z$n1s32)))
 (= z$1104 $x3948)))
(assert
 (let ((?x3944 (Concat_32_1_31 BRW$next z$n0s31)))
 (= z$1105 ?x3944)))
(assert
 (let (($x3940 (= z$1105 z$n1s32)))
 (= z$1107 $x3940)))
(assert
 (= z$1108 (and z$1104 z$1107)))
(assert
 (let ((?x3932 (Concat_32_1_31 RegRW$next z$n0s31)))
 (= z$1110 ?x3932)))
(assert
 (let (($x4738 (= z$1110 z$n0s32)))
 (= z$1112 $x4738)))
(assert
 (= z$1113 (and z$1108 z$1112)))
(assert
 (let ((?x4622 (Concat_32_1_31 IRW$next z$n0s31)))
 (= z$1115 ?x4622)))
(assert
 (let (($x3809 (= z$1115 z$n1s32)))
 (= z$1117 $x3809)))
(assert
 (= z$1118 (and z$1113 z$1117)))
(assert
 (let ((?x3320 (Concat_32_1_31 IRRW$next z$n0s31)))
 (= z$1120 ?x3320)))
(assert
 (let (($x3740 (= z$1120 z$n0s32)))
 (= z$1122 $x3740)))
(assert
 (= z$1123 (and z$1118 z$1122)))
(assert
 (let ((?x3675 (Concat_32_1_31 PCRW$next z$n0s31)))
 (= z$1125 ?x3675)))
(assert
 (let (($x3673 (= z$1125 z$n1s32)))
 (= z$1127 $x3673)))
(assert
 (= z$1128 (and z$1123 z$1127)))
(assert
 (let ((?x3669 (Concat_32_1_31 NPCRW$next z$n0s31)))
 (= z$1130 ?x3669)))
(assert
 (let (($x3667 (= z$1130 z$n0s32)))
 (= z$1132 $x3667)))
(assert
 (= z$1133 (and z$1128 z$1132)))
(assert
 (let ((?x4627 (Concat_32_1_31 ALUoutRW$next z$n0s31)))
 (= z$1135 ?x4627)))
(assert
 (let (($x3732 (= z$1135 z$n0s32)))
 (= z$1137 $x3732)))
(assert
 (= z$1138 (and z$1133 z$1137)))
(assert
 (let ((?x3714 (Concat_32_1_31 MDRW$next z$n0s31)))
 (= z$1140 ?x3714)))
(assert
 (let (($x3718 (= z$1140 z$n0s32)))
 (= z$1142 $x3718)))
(assert
 (= z$1143 (and z$1138 z$1142)))
(assert
 (let ((?x3726 (Concat_32_1_31 BCRW$next z$n0s31)))
 (= z$1145 ?x3726)))
(assert
 (let (($x744 (= z$1145 z$n0s32)))
 (= z$1147 $x744)))
(assert
 (= z$1148 (and z$1143 z$1147)))
(assert
 (let (($x4419 (or z$1101 z$1148)))
 (= z$1150 $x4419)))
(assert
 (= z$1152 (= prop$next z$1150)))
(assert
 z$1152)
(assert
 (let (($x1311 (= State$next z$n0s6)))
 (= z$1181 $x1311)))
(assert
 (= z$1182 (and z$1082 z$1181)))
(assert
 (= z$1184 (not z$1182)))
(assert
 z$1184)
(assert
 (let (($x4435 (= State z$n0s6)))
 (= z$41 $x4435)))
(assert
 (= z$1180 (and z$998 z$41)))
(assert
 (= z$1183 (not z$1180)))
(assert
 z$1183)
(assert
 (= z$1274 (and z$997 z$992)))
(assert
 (= z$1276 (not z$1274)))
(assert
 z$1276)
(assert
 (= z$1273 (and z$1081 z$1077)))
(assert
 (= z$1275 (not z$1273)))
(assert
 z$1275)
(assert
 (let (($x2699 (= State$next z$n1s6)))
 (= z$1329 $x2699)))
(assert
 (let (($x2827 (not z$1077)))
 (= z$1281 $x2827)))
(assert
 (= z$1356 (and z$1329 z$1281)))
(assert
 (= z$1359 (not z$1356)))
(assert
 z$1359)
(assert
 (let (($x3399 (= State z$n1s6)))
 (= z$1357 $x3399)))
(assert
 (let (($x4302 (not z$992)))
 (= z$1154 $x4302)))
(assert
 (= z$1358 (and z$1357 z$1154)))
(assert
 (= z$1364 (not z$1358)))
(assert
 z$1364)
(assert
 (let (($x1326 (= NextState z$n3s6)))
 (= z$51 $x1326)))
(assert
 (let (($x3358 (= NextState z$n4s6)))
 (= z$53 $x3358)))
(assert
 (let (($x2253 (= NextState z$n5s6)))
 (= z$55 $x2253)))
(assert
 (let (($x2711 (or z$51 z$53 z$55)))
 (= z$56 $x2711)))
(assert
 (let ((?x3912 (Extract_6_31_26_32 IR)))
 (= z$59 ?x3912)))
(assert
 (let (($x3805 (= z$59 z$n5s6)))
 (= z$61 $x3805)))
(assert
 (let (($x2723 (= z$59 z$n8s6)))
 (= z$63 $x2723)))
(assert
 (let (($x4147 (= z$59 z$n35s6)))
 (= z$65 $x4147)))
(assert
 (let (($x4111 (or z$61 z$63 z$65)))
 (= z$66 $x4111)))
(assert
 (let (($x4109 (= z$59 z$n2s6)))
 (= z$70 $x4109)))
(assert
 (let (($x2950 (= z$59 z$n4s6)))
 (= z$71 $x2950)))
(assert
 (let (($x3375 (or z$70 z$71)))
 (= z$72 $x3375)))
(assert
 (let (($x4105 (= z$59 z$n0s6)))
 (= z$74 $x4105)))
(assert
 (= z$209 (ite z$74 false ARW)))
(assert
 (= z$211 (ite z$72 false z$209)))
(assert
 (= z$213 (ite z$66 false z$211)))
(assert
 (= z$215 (ite z$55 z$213 false)))
(assert
 (let (($x2942 (= z$59 z$n43s6)))
 (= z$84 $x2942)))
(assert
 (= z$217 (ite z$65 false ARW)))
(assert
 (= z$219 (ite z$84 false z$217)))
(assert
 (= z$221 (ite z$53 z$219 false)))
(assert
 (let (($x1296 (= IR z$n0s32)))
 (= z$92 $x1296)))
(assert
 (let (($x3926 (or z$65 z$84)))
 (= z$93 $x3926)))
(assert
 (let (($x3166 (or z$61 z$63 z$93)))
 (= z$95 $x3166)))
(assert
 (= z$223 (ite z$95 false z$211)))
(assert
 (= z$225 (ite z$92 false z$223)))
(assert
 (= z$227 (ite z$51 z$225 false)))
(assert
 (= z$229 (ite z$92 false z$227)))
(assert
 (= z$231 (ite z$51 z$229 false)))
(assert
 (let (($x3962 (ite z$53 z$221 z$231)))
 (= z$233 $x3962)))
(assert
 (let (($x3958 (ite z$55 z$215 z$233)))
 (= z$235 $x3958)))
(assert
 (let (($x3954 (= NextState z$n1s6)))
 (= z$112 $x3954)))
(assert
 (let (($x4565 (= NextState z$n2s6)))
 (= z$113 $x4565)))
(assert
 (let (($x1892 (or z$112 z$113)))
 (= z$114 $x1892)))
(assert
 (= z$161 (ite z$113 true false)))
(assert
 (= z$163 (ite z$113 z$161 false)))
(assert
 (let (($x3518 (= NextState z$n0s6)))
 (= z$31 $x3518)))
(assert
 (= z$237 (ite z$31 false ARW)))
(assert
 (let (($x4575 (ite z$114 z$163 z$237)))
 (= z$239 $x4575)))
(assert
 (let (($x4577 (ite z$56 z$235 z$239)))
 (= z$241 $x4577)))
(assert
 (= z$243 (= ARW$next z$241)))
(assert
 z$243)
(assert
 (let ((?x4626 (ite Reset z$n0s32 z$n1s32)))
 (= z$912 ?x4626)))
(assert
 (let ((?x4373 (ite Reset z$n0s6 z$n1s6)))
 (= z$917 ?x4373)))
(assert
 (let ((?x987 (Extract_6_5_0_32 z$912)))
 (= z$914 ?x987)))
(assert
 (= z$914 z$917))
(assert
 (let ((?x3683 (ite Reset z$n0s32 z$n5s32)))
 (= z$920 ?x3683)))
(assert
 (let ((?x3739 (ite Reset z$n0s6 z$n5s6)))
 (= z$924 ?x3739)))
(assert
 (let ((?x4600 (Extract_6_5_0_32 z$920)))
 (= z$922 ?x4600)))
(assert
 (= z$922 z$924))
(assert
 (let ((?x3737 (ite z$65 z$922 NextState)))
 (= z$926 ?x3737)))
(assert
 (let ((?x3736 (ite z$84 z$914 z$926)))
 (= z$928 ?x3736)))
(assert
 (let ((?x3735 (ite z$53 z$928 z$n0s6)))
 (= z$930 ?x3735)))
(assert
 (let ((?x3734 (ite Reset z$n0s32 z$n4s32)))
 (= z$933 ?x3734)))
(assert
 (let ((?x3733 (ite Reset z$n0s6 z$n4s6)))
 (= z$937 ?x3733)))
(assert
 (let ((?x4588 (Extract_6_5_0_32 z$933)))
 (= z$935 ?x4588)))
(assert
 (= z$935 z$937))
(assert
 (let ((?x1050 (ite z$93 z$935 z$922)))
 (= z$939 ?x1050)))
(assert
 (let ((?x1048 (ite z$74 z$922 NextState)))
 (= z$941 ?x1048)))
(assert
 (let ((?x1052 (ite z$72 z$922 z$941)))
 (= z$943 ?x1052)))
(assert
 (let ((?x3716 (ite z$95 z$939 z$943)))
 (= z$945 ?x3716)))
(assert
 (let ((?x3720 (ite z$92 z$n0s6 z$945)))
 (= z$947 ?x3720)))
(assert
 (let ((?x3724 (ite z$51 z$947 z$n0s6)))
 (= z$949 ?x3724)))
(assert
 (let ((?x853 (ite z$92 z$914 z$949)))
 (= z$951 ?x853)))
(assert
 (let ((?x4377 (ite z$51 z$951 z$n0s6)))
 (= z$953 ?x4377)))
(assert
 (let ((?x4519 (ite z$53 z$930 z$953)))
 (= z$955 ?x4519)))
(assert
 (let ((?x3586 (ite z$55 z$914 z$955)))
 (= z$957 ?x3586)))
(assert
 (let ((?x3583 (ite Reset z$n0s32 z$n3s32)))
 (= z$960 ?x3583)))
(assert
 (let ((?x3581 (ite Reset z$n0s6 z$n3s6)))
 (= z$964 ?x3581)))
(assert
 (let ((?x4433 (Extract_6_5_0_32 z$960)))
 (= z$962 ?x4433)))
(assert
 (= z$962 z$964))
(assert
 (let ((?x3577 (ite Reset z$n0s32 z$n2s32)))
 (= z$967 ?x3577)))
(assert
 (let ((?x3575 (ite Reset z$n0s6 z$n2s6)))
 (= z$971 ?x3575)))
(assert
 (let ((?x4445 (Extract_6_5_0_32 z$967)))
 (= z$969 ?x4445)))
(assert
 (= z$969 z$971))
(assert
 (let ((?x3571 (ite z$113 z$962 z$969)))
 (= z$973 ?x3571)))
(assert
 (let ((?x3569 (ite z$31 z$914 NextState)))
 (= z$975 ?x3569)))
(assert
 (let ((?x3567 (ite z$114 z$973 z$975)))
 (= z$977 ?x3567)))
(assert
 (let ((?x3730 (ite z$56 z$957 z$977)))
 (= z$979 ?x3730)))
(assert
 (let (($x3450 (= NextState$next z$979)))
 (= z$981 $x3450)))
(assert
 z$981)
(assert
 (let (($x1456 (not ARW)))
 (= z$10 $x1456)))
(assert
 (= z$1391 (and z$10 z$1219 z$1221 z$1289)))
(assert
 (= z$1392 (not z$1391)))
(assert
 z$1392)
(assert
 (= z$399 (ite z$74 false BCRW)))
(assert
 (= z$401 (ite z$72 false z$399)))
(assert
 (= z$403 (ite z$66 false z$401)))
(assert
 (= z$405 (ite z$55 z$403 false)))
(assert
 (= z$407 (ite z$65 false BCRW)))
(assert
 (= z$409 (ite z$84 false z$407)))
(assert
 (= z$411 (ite z$53 z$409 false)))
(assert
 (= z$127 (ite z$63 false true)))
(assert
 (= z$413 (ite z$93 false z$127)))
(assert
 (= z$415 (ite z$71 true false)))
(assert
 (= z$417 (ite z$72 z$415 z$399)))
(assert
 (let (($x3632 (ite z$95 z$413 z$417)))
 (= z$419 $x3632)))
(assert
 (= z$421 (ite z$92 false z$419)))
(assert
 (= z$423 (ite z$51 z$421 false)))
(assert
 (= z$425 (ite z$92 false z$423)))
(assert
 (= z$427 (ite z$51 z$425 false)))
(assert
 (= z$429 (ite z$53 z$411 z$427)))
(assert
 (= z$431 (ite z$55 z$405 z$429)))
(assert
 (= z$433 (ite z$31 false BCRW)))
(assert
 (= z$435 (ite z$114 false z$433)))
(assert
 (= z$437 (ite z$56 z$431 z$435)))
(assert
 (= z$439 (= BCRW$next z$437)))
(assert
 z$439)
(assert
 (= z$12 (not BCRW)))
(assert
 z$12)
(assert
 (= z$363 (ite z$74 false MDRW)))
(assert
 (= z$365 (ite z$72 false z$363)))
(assert
 (= z$367 (ite z$66 false z$365)))
(assert
 (= z$369 (ite z$55 z$367 false)))
(assert
 (= z$371 (ite z$65 true MDRW)))
(assert
 (= z$373 (ite z$84 false z$371)))
(assert
 (= z$375 (ite z$53 z$373 false)))
(assert
 (= z$377 (ite z$95 false z$365)))
(assert
 (= z$379 (ite z$92 false z$377)))
(assert
 (= z$381 (ite z$51 z$379 false)))
(assert
 (= z$383 (ite z$92 false z$381)))
(assert
 (= z$385 (ite z$51 z$383 false)))
(assert
 (= z$387 (ite z$53 z$375 z$385)))
(assert
 (= z$389 (ite z$55 z$369 z$387)))
(assert
 (= z$391 (ite z$31 false MDRW)))
(assert
 (= z$393 (ite z$114 false z$391)))
(assert
 (= z$395 (ite z$56 z$389 z$393)))
(assert
 (= z$397 (= MDRW$next z$395)))
(assert
 z$397)
(assert
 (= z$24 (not MDRW)))
(assert
 z$24)
(assert
 (= z$317 (ite z$74 false ALUoutRW)))
(assert
 (= z$319 (ite z$72 false z$317)))
(assert
 (= z$321 (ite z$66 false z$319)))
(assert
 (= z$323 (ite z$55 z$321 false)))
(assert
 (= z$325 (ite z$65 false ALUoutRW)))
(assert
 (= z$327 (ite z$84 false z$325)))
(assert
 (= z$329 (ite z$53 z$327 false)))
(assert
 (= z$331 (ite z$74 true false)))
(assert
 (= z$333 (ite z$92 false z$331)))
(assert
 (= z$335 (ite z$51 z$333 false)))
(assert
 (= z$337 (ite z$74 z$335 ALUoutRW)))
(assert
 (= z$339 (ite z$72 true z$337)))
(assert
 (= z$341 (ite z$95 true z$339)))
(assert
 (= z$343 (ite z$92 false z$341)))
(assert
 (= z$345 (ite z$51 z$343 false)))
(assert
 (= z$347 (ite z$92 false z$345)))
(assert
 (= z$349 (ite z$51 z$347 false)))
(assert
 (= z$351 (ite z$53 z$329 z$349)))
(assert
 (= z$353 (ite z$55 z$323 z$351)))
(assert
 (= z$355 (ite z$31 false ALUoutRW)))
(assert
 (= z$357 (ite z$114 false z$355)))
(assert
 (= z$359 (ite z$56 z$353 z$357)))
(assert
 (= z$361 (= ALUoutRW$next z$359)))
(assert
 z$361)
(assert
 (= z$8 (not ALUoutRW)))
(assert
 z$8)
(assert
 (= z$173 (ite z$74 false NPCRW)))
(assert
 (= z$175 (ite z$72 false z$173)))
(assert
 (= z$177 (ite z$66 false z$175)))
(assert
 (= z$179 (ite z$55 z$177 false)))
(assert
 (= z$181 (ite z$65 false NPCRW)))
(assert
 (= z$183 (ite z$84 false z$181)))
(assert
 (= z$185 (ite z$53 z$183 false)))
(assert
 (= z$187 (ite z$95 false z$175)))
(assert
 (= z$189 (ite z$92 false z$187)))
(assert
 (= z$191 (ite z$51 z$189 false)))
(assert
 (= z$193 (ite z$92 false z$191)))
(assert
 (= z$195 (ite z$51 z$193 false)))
(assert
 (let (($x4552 (ite z$53 z$185 z$195)))
 (= z$197 $x4552)))
(assert
 (let (($x2180 (ite z$55 z$179 z$197)))
 (= z$199 $x2180)))
(assert
 (= z$117 (ite z$113 false true)))
(assert
 (= z$201 (ite z$31 false NPCRW)))
(assert
 (let (($x4077 (ite z$114 z$117 z$201)))
 (= z$203 $x4077)))
(assert
 (let (($x3214 (ite z$56 z$199 z$203)))
 (= z$205 $x3214)))
(assert
 (= z$207 (= NPCRW$next z$205)))
(assert
 z$207)
(assert
 (= z$1452 (and NPCRW z$1221 z$1289)))
(assert
 (= z$1453 (not z$1452)))
(assert
 z$1453)
(assert
 (= z$129 (ite z$65 false z$127)))
(assert
 (= z$131 (ite z$74 false PCRW)))
(assert
 (= z$133 (ite z$72 true z$131)))
(assert
 (let (($x4725 (ite z$66 z$129 z$133)))
 (= z$135 $x4725)))
(assert
 (= z$137 (ite z$55 z$135 false)))
(assert
 (= z$139 (ite z$65 false PCRW)))
(assert
 (= z$141 (ite z$84 false z$139)))
(assert
 (= z$143 (ite z$53 z$141 false)))
(assert
 (= z$145 (ite z$72 false z$131)))
(assert
 (= z$147 (ite z$95 false z$145)))
(assert
 (= z$149 (ite z$92 false z$147)))
(assert
 (= z$151 (ite z$51 z$149 false)))
(assert
 (= z$153 (ite z$92 false z$151)))
(assert
 (= z$155 (ite z$51 z$153 false)))
(assert
 (let (($x1280 (ite z$53 z$143 z$155)))
 (= z$157 $x1280)))
(assert
 (let (($x4043 (ite z$55 z$137 z$157)))
 (= z$159 $x4043)))
(assert
 (= z$165 (ite z$31 false PCRW)))
(assert
 (let (($x1716 (ite z$114 z$163 z$165)))
 (= z$167 $x1716)))
(assert
 (let (($x1372 (ite z$56 z$159 z$167)))
 (= z$169 $x1372)))
(assert
 (= z$171 (= PCRW$next z$169)))
(assert
 z$171)
(assert
 (let (($x4830 (not PCRW)))
 (= z$33 $x4830)))
(assert
 (= z$1468 (and z$33 z$1219 z$1221 z$1289)))
(assert
 (= z$1470 (not z$1468)))
(assert
 z$1470)
(assert
 (= z$75 (ite z$74 false IRRW)))
(assert
 (= z$77 (ite z$72 false z$75)))
(assert
 (= z$79 (ite z$66 false z$77)))
(assert
 (= z$81 (ite z$55 z$79 false)))
(assert
 (= z$85 (ite z$65 false IRRW)))
(assert
 (= z$87 (ite z$84 false z$85)))
(assert
 (= z$89 (ite z$53 z$87 false)))
(assert
 (= z$97 (ite z$95 false z$77)))
(assert
 (= z$99 (ite z$92 false z$97)))
(assert
 (= z$101 (ite z$51 z$99 false)))
(assert
 (= z$103 (ite z$92 false z$101)))
(assert
 (= z$105 (ite z$51 z$103 false)))
(assert
 (let (($x1138 (ite z$53 z$89 z$105)))
 (= z$107 $x1138)))
(assert
 (let (($x4064 (ite z$55 z$81 z$107)))
 (= z$109 $x4064)))
(assert
 (= z$119 (ite z$31 false IRRW)))
(assert
 (let (($x2497 (ite z$114 z$117 z$119)))
 (= z$121 $x2497)))
(assert
 (let (($x2158 (ite z$56 z$109 z$121)))
 (= z$123 $x2158)))
(assert
 (= z$125 (= IRRW$next z$123)))
(assert
 z$125)
(assert
 (= z$1487 (and IRRW z$1221 z$1289)))
(assert
 (= z$1488 (not z$1487)))
(assert
 z$1488)
(assert
 (= z$281 (ite z$74 false IRW)))
(assert
 (= z$283 (ite z$72 false z$281)))
(assert
 (= z$285 (ite z$66 false z$283)))
(assert
 (= z$287 (ite z$55 z$285 false)))
(assert
 (= z$289 (ite z$65 false IRW)))
(assert
 (= z$291 (ite z$84 false z$289)))
(assert
 (= z$293 (ite z$53 z$291 false)))
(assert
 (= z$295 (ite z$95 false z$283)))
(assert
 (= z$297 (ite z$92 false z$295)))
(assert
 (= z$299 (ite z$51 z$297 false)))
(assert
 (= z$301 (ite z$92 false z$299)))
(assert
 (= z$303 (ite z$51 z$301 false)))
(assert
 (let (($x3034 (ite z$53 z$293 z$303)))
 (= z$305 $x3034)))
(assert
 (let (($x2543 (ite z$55 z$287 z$305)))
 (= z$307 $x2543)))
(assert
 (= z$309 (ite z$31 false IRW)))
(assert
 (let (($x2443 (ite z$114 z$163 z$309)))
 (= z$311 $x2443)))
(assert
 (let (($x4400 (ite z$56 z$307 z$311)))
 (= z$313 $x4400)))
(assert
 (= z$315 (= IRW$next z$313)))
(assert
 z$315)
(assert
 (let (($x2624 (not IRW)))
 (= z$20 $x2624)))
(assert
 (= z$1505 (and z$20 z$1219 z$1221 z$1289)))
(assert
 (= z$1506 (not z$1505)))
(assert
 z$1506)
(assert
 (= z$609 (ite z$63 true false)))
(assert
 (= z$830 (ite z$65 true z$609)))
(assert
 (= z$832 (ite z$74 true RegRW)))
(assert
 (= z$834 (ite z$72 false z$832)))
(assert
 (let (($x4487 (ite z$66 z$830 z$834)))
 (= z$836 $x4487)))
(assert
 (= z$838 (ite z$55 z$836 false)))
(assert
 (= z$840 (ite z$65 false RegRW)))
(assert
 (= z$842 (ite z$84 false z$840)))
(assert
 (= z$844 (ite z$53 z$842 false)))
(assert
 (= z$846 (ite z$74 false RegRW)))
(assert
 (= z$848 (ite z$72 false z$846)))
(assert
 (= z$850 (ite z$95 false z$848)))
(assert
 (= z$852 (ite z$92 false z$850)))
(assert
 (= z$854 (ite z$51 z$852 false)))
(assert
 (= z$856 (ite z$92 false z$854)))
(assert
 (= z$858 (ite z$51 z$856 false)))
(assert
 (= z$860 (ite z$53 z$844 z$858)))
(assert
 (= z$862 (ite z$55 z$838 z$860)))
(assert
 (= z$864 (ite z$31 false RegRW)))
(assert
 (= z$866 (ite z$114 false z$864)))
(assert
 (= z$868 (ite z$56 z$862 z$866)))
(assert
 (= z$870 (= RegRW$next z$868)))
(assert
 z$870)
(assert
 (= z$37 (not RegRW)))
(assert
 z$37)
(assert
 (= z$245 (ite z$74 false BRW)))
(assert
 (= z$247 (ite z$72 false z$245)))
(assert
 (= z$249 (ite z$66 false z$247)))
(assert
 (= z$251 (ite z$55 z$249 false)))
(assert
 (= z$253 (ite z$65 false BRW)))
(assert
 (= z$255 (ite z$84 false z$253)))
(assert
 (= z$257 (ite z$53 z$255 false)))
(assert
 (= z$259 (ite z$95 false z$247)))
(assert
 (= z$261 (ite z$92 false z$259)))
(assert
 (= z$263 (ite z$51 z$261 false)))
(assert
 (= z$265 (ite z$92 false z$263)))
(assert
 (= z$267 (ite z$51 z$265 false)))
(assert
 (let (($x2926 (ite z$53 z$257 z$267)))
 (= z$269 $x2926)))
(assert
 (let (($x2922 (ite z$55 z$251 z$269)))
 (= z$271 $x2922)))
(assert
 (= z$273 (ite z$31 false BRW)))
(assert
 (let (($x2915 (ite z$114 z$163 z$273)))
 (= z$275 $x2915)))
(assert
 (let (($x2911 (ite z$56 z$271 z$275)))
 (= z$277 $x2911)))
(assert
 (= z$279 (= BRW$next z$277)))
(assert
 z$279)
(assert
 (=> p$0 (= z$1225 (not BRW$next))))
(assert
 (=> p$0 z$1225))
(assert
 (=> p$1 (= z$1308 (and (distinct NextState$next z$n3s6) true))))
(assert
 (=> p$1 z$1308))
(assert
 (=> p$2 (= z$1309 (and (distinct NextState$next z$n4s6) true))))
(assert
 (=> p$2 z$1309))
(assert
 (=> p$3 (= z$1310 (and (distinct NextState$next z$n5s6) true))))
(assert
 (=> p$3 z$1310))
(assert
 (=> p$4 (= z$1311 (and (distinct NextState$next z$n1s6) true))))
(assert
 (=> p$4 z$1311))
(assert
 (=> p$5 (= z$1312 (and (distinct NextState$next z$n2s6) true))))
(assert
 (=> p$5 z$1312))
(assert
 (=> p$6 (= z$1313 (and (distinct NextState$next z$n0s6) true))))
(assert
 (=> p$6 z$1313))
(assert
 (let ((?x3820 (Extract_6_31_26_32 IR$next)))
 (let (($x3930 (= z$1261 ?x3820)))
 (=> p$7 $x3930))))
(assert
 (let ((?x3915 (Concat_32_6_26 z$1261 z$n0s26)))
 (let (($x4092 (= z$1262 ?x3915)))
 (=> p$7 $x4092))))
(assert
 (=> p$7 (= z$1314 (and (distinct z$1262 z$n0s32) true))))
(assert
 (=> p$7 z$1314))
(assert
 (let ((?x3820 (Extract_6_31_26_32 IR$next)))
 (let (($x3930 (= z$1261 ?x3820)))
 (=> p$8 $x3930))))
(assert
 (let ((?x3915 (Concat_32_6_26 z$1261 z$n0s26)))
 (let (($x4579 (= z$1265 ?x3915)))
 (=> p$8 $x4579))))
(assert
 (=> p$8 (= z$1315 (and (distinct z$1265 z$n0s32) true))))
(assert
 (=> p$8 z$1315))
(assert
 (let ((?x3820 (Extract_6_31_26_32 IR$next)))
 (let (($x3930 (= z$1261 ?x3820)))
 (=> p$9 $x3930))))
(assert
 (let ((?x3915 (Concat_32_6_26 z$1261 z$n0s26)))
 (let (($x4579 (= z$1265 ?x3915)))
 (=> p$9 $x4579))))
(assert
 (=> p$9 (= z$1316 (and (distinct z$1265 z$n1s32) true))))
(assert
 (=> p$9 z$1316))
(assert
 (let ((?x3944 (Concat_32_1_31 BRW$next z$n0s31)))
 (let (($x866 (= z$1105 ?x3944)))
 (=> p$10 $x866))))
(assert
 (=> p$10 (= z$1521 (= z$1105 z$n0s32))))
(assert
 (=> p$10 z$1521))
(check-sat)
(assert p$0)
(assert p$1)
(assert p$2)
(assert p$3)
(assert p$4)
(assert p$5)
(assert p$6)
(assert p$7)
(assert p$8)
(assert p$9)
(assert p$10)
(set-info :status unsat)
(check-sat)
(exit)
